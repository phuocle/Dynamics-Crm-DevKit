//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdynmkt_consentlinktype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: External link</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		External_link = 534_120_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Preference center</para>
		/// <para><strong>Value</strong>: 534,120,003</para>
		/// </summary>
		Preference_center = 534_120_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Preference page</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Preference_page = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Subscription center</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Subscription_center = 534_120_001
	}
	public enum msdynmkt_DOIConfirmationType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Text</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Text = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Url</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Url = 534_120_001
	}
	public enum msdynmkt_doijobstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Create Failed</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Email_Create_Failed = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Created</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Email_Created = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Publish Failed</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Email_Publish_Failed = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Published</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email_Published = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Failed = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Create Failed</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Journey_Create_Failed = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Created</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Journey_Created = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Publish Failed</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Journey_Publish_Failed = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Published</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Journey_Published = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Publishing Started</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Journey_Publishing_Started = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Completed</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Processing_Completed = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Request Accepted</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Request_Accepted = 0
	}
	public enum msdynmkt_DOIStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated)Enabled</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		DeprecatedEnabled = 534_120_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Enabled = 534_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not enabled</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Not_enabled = 534_120_000
	}
	public enum msdynmkt_jurisdiction
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: GDPR/CCPA</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		GDPRCCPA = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Other = 534_120_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_compliancesettings4 : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_compliancesettings4Id = "msdynmkt_compliancesettings4id";
			public const string msdynmkt_consentlink = "msdynmkt_consentlink";
			public const string msdynmkt_consentlinktype = "msdynmkt_consentlinktype";
			public const string msdynmkt_ConsentProviderId = "msdynmkt_consentproviderid";
			public const string msdynmkt_DOIConfirmationText = "msdynmkt_doiconfirmationtext";
			public const string msdynmkt_DOIConfirmationType = "msdynmkt_doiconfirmationtype";
			public const string msdynmkt_DOIConfirmationURL = "msdynmkt_doiconfirmationurl";
			public const string msdynmkt_DOIFailureReason = "msdynmkt_doifailurereason";
			public const string msdynmkt_doijobstatus = "msdynmkt_doijobstatus";
			public const string msdynmkt_DOIStatus = "msdynmkt_doistatus";
			public const string msdynmkt_emaildescription = "msdynmkt_emaildescription";
			public const string msdynmkt_extendedentityId = "msdynmkt_extendedentityid";
			public const string msdynmkt_gettrackingconsents = "msdynmkt_gettrackingconsents";
			public const string msdynmkt_globaldoienabled = "msdynmkt_globaldoienabled";
			public const string msdynmkt_jurisdiction = "msdynmkt_jurisdiction";
			public const string msdynmkt_legaladdress = "msdynmkt_legaladdress";
			public const string msdynmkt_migrationtimestamp = "msdynmkt_migrationtimestamp";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_quiettimesetting = "msdynmkt_quiettimesetting";
			public const string msdynmkt_ssc_allowemaildescription = "msdynmkt_ssc_allowemaildescription";
			public const string msdynmkt_ssc_allowsmsdescription = "msdynmkt_ssc_allowsmsdescription";
			public const string msdynmkt_ssc_allowtrackingdescription = "msdynmkt_ssc_allowtrackingdescription";
			public const string msdynmkt_ssc_consentchangereason = "msdynmkt_ssc_consentchangereason";
			public const string msdynmkt_ssc_description = "msdynmkt_ssc_description";
			public const string msdynmkt_ssc_emailtitle = "msdynmkt_ssc_emailtitle";
			public const string msdynmkt_ssc_errorpagetext = "msdynmkt_ssc_errorpagetext";
			public const string msdynmkt_ssc_legaltext = "msdynmkt_ssc_legaltext";
			public const string msdynmkt_ssc_smsdescription = "msdynmkt_ssc_smsdescription";
			public const string msdynmkt_ssc_smstitle = "msdynmkt_ssc_smstitle";
			public const string msdynmkt_ssc_submitbuttonlabel = "msdynmkt_ssc_submitbuttonlabel";
			public const string msdynmkt_ssc_thankyoupagetext = "msdynmkt_ssc_thankyoupagetext";
			public const string msdynmkt_ssc_title = "msdynmkt_ssc_title";
			public const string msdynmkt_ssc_trackingdescription = "msdynmkt_ssc_trackingdescription";
			public const string msdynmkt_ssc_trackingtitle = "msdynmkt_ssc_trackingtitle";
			public const string msdynmkt_subscriptioncenter = "msdynmkt_subscriptioncenter";
			public const string msdynmkt_TrackingConsentPurpose = "msdynmkt_trackingconsentpurpose";
			public const string msdynmkt_uionly_link_existing_profile = "msdynmkt_uionly_link_existing_profile";
			public const string msdynmkt_uionly_linked_profile = "msdynmkt_uionly_linked_profile";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_compliancesettings4";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11267;
		public const string EntityCollectionSchemaName = "msdynmkt_compliancesettings4s";
		public const string EntityDisplayCollectionName = "Compliance profiles";
		public const string DisplayName = "Compliance profile";
		public const string EntitySetName = "msdynmkt_compliancesettings4s";
		public const string EntityLogicalCollectionName = "msdynmkt_compliancesettings4s";
		public const string EntityPrimaryIdAttribute = "msdynmkt_compliancesettings4id";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_compliancesettings4";
		[DebuggerNonUserCode()]
		public msdynmkt_compliancesettings4()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_compliancesettings4(Guid msdynmkt_compliancesettings4Id)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_compliancesettings4Id);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_compliancesettings4(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_compliancesettings4"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_compliancesettings4(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_compliancesettings4"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_compliancesettings4(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_compliancesettings4(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_compliancesettings4"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_compliancesettings4(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_compliancesettings4(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_compliancesettings4(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Compliance Settings</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_compliancesettings4Id
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_compliancesettings4Id] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consent link</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_consentlink
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_consentlink); }
			set { Entity.Attributes[Fields.msdynmkt_consentlink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consent link type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_consentlinktype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_consentlinktype? msdynmkt_consentlinktype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_consentlinktype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_consentlinktype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_consentlinktype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_consentlinktype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consent provider</para>
		/// <para><strong>Description</strong>: Consent provider</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_consentprovider"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_ConsentProviderId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_ConsentProviderId); }
			set { Entity.Attributes[Fields.msdynmkt_ConsentProviderId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DOI Confirmation Text</para>
		/// <para><strong>Description</strong>: Double Opt-in Confirmation Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_DOIConfirmationText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_DOIConfirmationText); }
			set { Entity.Attributes[Fields.msdynmkt_DOIConfirmationText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DOI Confirmation Type</para>
		/// <para><strong>Description</strong>: The type of double opt in confirmation - Text or URL.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_DOIConfirmationType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_DOIConfirmationType? msdynmkt_DOIConfirmationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_DOIConfirmationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_DOIConfirmationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_DOIConfirmationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_DOIConfirmationType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DOI Confirmation URL</para>
		/// <para><strong>Description</strong>: Double Opt-in Confirmation URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_DOIConfirmationURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_DOIConfirmationURL); }
			set { Entity.Attributes[Fields.msdynmkt_DOIConfirmationURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DOI Failure Reason</para>
		/// <para><strong>Description</strong>: Double Opt-in Failure Reason</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_DOIFailureReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_DOIFailureReason); }
			set { Entity.Attributes[Fields.msdynmkt_DOIFailureReason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DOI Job Status</para>
		/// <para><strong>Description</strong>: Gets the current backend processing status of double opt in.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_doijobstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_doijobstatus? msdynmkt_doijobstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_doijobstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_doijobstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_doijobstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_doijobstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DOI Status</para>
		/// <para><strong>Description</strong>: Gets the current status of double opt in.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_DOIStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_DOIStatus.Not_enabled"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_DOIStatus? msdynmkt_DOIStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_DOIStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_DOIStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_DOIStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_DOIStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow email description</para>
		/// <para><strong>Description</strong>: Additional text explaining what type of emails the customer may expect to receive.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_emaildescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_emaildescription); }
			set { Entity.Attributes[Fields.msdynmkt_emaildescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Extended entity</para>
		/// <para><strong>Description</strong>: Extended entity</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_consentproviderdefaultconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_extendedentityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_extendedentityId); }
			set { Entity.Attributes[Fields.msdynmkt_extendedentityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Get tracking consents from customers</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_gettrackingconsents
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_gettrackingconsents); }
			set { Entity.Attributes[Fields.msdynmkt_gettrackingconsents] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send double opt-in email only once</para>
		/// <para><strong>Description</strong>: Send double opt-in email only once</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_globaldoienabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_globaldoienabled); }
			set { Entity.Attributes[Fields.msdynmkt_globaldoienabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Jurisdiction</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_jurisdiction"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_jurisdiction? msdynmkt_jurisdiction
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_jurisdiction);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.msdynmkt_jurisdiction)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_jurisdiction] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_jurisdiction] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Company address</para>
		/// <para><strong>Description</strong>: Company address</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_legaladdress
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_legaladdress); }
			set { Entity.Attributes[Fields.msdynmkt_legaladdress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Migration Timestamp</para>
		/// <para><strong>Description</strong>: for migrated records, this is the timestamp for migration.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_migrationtimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_migrationtimestamp); }
			set { Entity.Attributes[Fields.msdynmkt_migrationtimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quiet time setting</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_quiettimesetting"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_quiettimesetting
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_quiettimesetting); }
			set { Entity.Attributes[Fields.msdynmkt_quiettimesetting] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow email description</para>
		/// <para><strong>Description</strong>: Additional text explaining what type of emails the customer may expect to receive.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_allowemaildescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_allowemaildescription); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_allowemaildescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow sms description</para>
		/// <para><strong>Description</strong>: Additional text explaining what type of SMS messages the customer may expect to receive.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_allowsmsdescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_allowsmsdescription); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_allowsmsdescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow tracking description</para>
		/// <para><strong>Description</strong>: Additional text explaining what kind of data will be collected.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_allowtrackingdescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_allowtrackingdescription); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_allowtrackingdescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consent change reason label</para>
		/// <para><strong>Description</strong>: Text explaining that the customer can list reasons for changing their consent preferences. This field will be shown as optional to end-users.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_consentchangereason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_consentchangereason); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_consentchangereason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Additional text explaining the purpose of the preference page.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_description); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow email title</para>
		/// <para><strong>Description</strong>: Text to the right of the checkbox that the customer will select when opting in to receive marketing emails.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_emailtitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_emailtitle); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_emailtitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error message</para>
		/// <para><strong>Description</strong>: The text that is displayed after an unsuccessful form submission.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_errorpagetext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_errorpagetext); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_errorpagetext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Legal text</para>
		/// <para><strong>Description</strong>: We recommend using this field to present your privacy policy and terms of service, which you can hyperlink to.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_legaltext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_legaltext); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_legaltext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow sms description</para>
		/// <para><strong>Description</strong>: Additional text explaining what type of SMS messages the customer may expect to receive.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_smsdescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_smsdescription); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_smsdescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow sms title</para>
		/// <para><strong>Description</strong>: Text to the right of the checkbox that the customer will select when opting in to receive SMS messages.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_smstitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_smstitle); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_smstitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submit button label</para>
		/// <para><strong>Description</strong>: The text that is displayed on the “Submit” button. This can remain “Submit,” but you can also choose another word.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_submitbuttonlabel
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_submitbuttonlabel); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_submitbuttonlabel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank you message</para>
		/// <para><strong>Description</strong>: The text that is displayed after a succesful form submission.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_thankyoupagetext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_thankyoupagetext); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_thankyoupagetext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Page title</para>
		/// <para><strong>Description</strong>: Preference page where end users can manage their consent preferences.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_title
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_title); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow tracking description</para>
		/// <para><strong>Description</strong>: Additional text explaining what kind of data will be collected.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_trackingdescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_trackingdescription); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_trackingdescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow tracking title</para>
		/// <para><strong>Description</strong>: Text to the right of the checkbox that the customer will select when opting in to behavior tracking.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ssc_trackingtitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ssc_trackingtitle); }
			set { Entity.Attributes[Fields.msdynmkt_ssc_trackingtitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subscription center</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_subscriptioncenter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_subscriptioncenter); }
			set { Entity.Attributes[Fields.msdynmkt_subscriptioncenter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tracking Consent Purpose</para>
		/// <para><strong>Description</strong>: Tracking Consent Purpose for tracking the consents from customers.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_purpose"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_TrackingConsentPurpose
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_TrackingConsentPurpose); }
			set { Entity.Attributes[Fields.msdynmkt_TrackingConsentPurpose] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UIOnly IsLinkedTo Existing Compliance Profile</para>
		/// <para><strong>Description</strong>: UIOnly Link existing profile</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_uionly_link_existing_profile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_uionly_link_existing_profile); }
			set { Entity.Attributes[Fields.msdynmkt_uionly_link_existing_profile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UIOnly Existing Compliance Profile</para>
		/// <para><strong>Description</strong>: link existing profile to attach the existing purposes</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_compliancesettings4"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_uionly_linked_profile
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_uionly_linked_profile); }
			set { Entity.Attributes[Fields.msdynmkt_uionly_linked_profile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Compliance</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Compliance</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_compliancesettings4OptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}