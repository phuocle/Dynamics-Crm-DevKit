//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_mobileapp : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_actionButtonHighlight = "msdyn_actionbuttonhighlight";
			public const string msdyn_adalClientId = "msdyn_adalclientid";
			public const string msdyn_adalRedirectUri = "msdyn_adalredirecturi";
			public const string msdyn_AndroidAppCenterAPIToken = "msdyn_androidappcenterapitoken";
			public const string msdyn_AndroidAppCenterAPITokenSaved = "msdyn_androidappcenterapitokensaved";
			public const string msdyn_appCenterAppIdAab = "msdyn_appcenterappidaab";
			public const string msdyn_appCenterAppIdApk = "msdyn_appcenterappidapk";
			public const string msdyn_appCenterAppIdIpa = "msdyn_appcenterappidipa";
			public const string msdyn_appIcon1024x1024 = "msdyn_appicon1024x1024";
			public const string msdyn_appIcon1024x1024_name = "msdyn_appicon1024x1024_name";
			public const string msdyn_appIcon120x120 = "msdyn_appicon120x120";
			public const string msdyn_appIcon120x120_name = "msdyn_appicon120x120_name";
			public const string msdyn_appIcon152x152 = "msdyn_appicon152x152";
			public const string msdyn_appIcon152x152_name = "msdyn_appicon152x152_name";
			public const string msdyn_appIcon167x167 = "msdyn_appicon167x167";
			public const string msdyn_appIcon167x167_name = "msdyn_appicon167x167_name";
			public const string msdyn_appIcon180x180 = "msdyn_appicon180x180";
			public const string msdyn_appIcon180x180_name = "msdyn_appicon180x180_name";
			public const string msdyn_appIconHdpi = "msdyn_appiconhdpi";
			public const string msdyn_appIconHdpi_name = "msdyn_appiconhdpi_name";
			public const string msdyn_appIconMdpi = "msdyn_appiconmdpi";
			public const string msdyn_appIconMdpi_name = "msdyn_appiconmdpi_name";
			public const string msdyn_appIconXdpi = "msdyn_appiconxdpi";
			public const string msdyn_appIconXdpi_name = "msdyn_appiconxdpi_name";
			public const string msdyn_appIconXxhdpi = "msdyn_appiconxxhdpi";
			public const string msdyn_appIconXxhdpi_name = "msdyn_appiconxxhdpi_name";
			public const string msdyn_appIconXxxhdpi = "msdyn_appiconxxxhdpi";
			public const string msdyn_appIconXxxhdpi_name = "msdyn_appiconxxxhdpi_name";
			public const string msdyn_branch = "msdyn_branch";
			public const string msdyn_buildDetails = "msdyn_builddetails";
			public const string msdyn_bundleIdentifier = "msdyn_bundleidentifier";
			public const string msdyn_buttonColor = "msdyn_buttoncolor";
			public const string msdyn_customDimensions = "msdyn_customdimensions";
			public const string msdyn_displayName = "msdyn_displayname";
			public const string msdyn_fillColor = "msdyn_fillcolor";
			public const string msdyn_headingTextColor = "msdyn_headingtextcolor";
			public const string msdyn_hyperLinkColor = "msdyn_hyperlinkcolor";
			public const string msdyn_IOSAppCenterAPIToken = "msdyn_iosappcenterapitoken";
			public const string msdyn_IOSAppCenterAPITokenSaved = "msdyn_iosappcenterapitokensaved";
			public const string msdyn_iosEnterpriseSigningEnabled = "msdyn_iosenterprisesigningenabled";
			public const string msdyn_keyVaultUri = "msdyn_keyvaulturi";
			public const string msdyn_launchAppResources = "msdyn_launchappresources";
			public const string msdyn_launchAppResources_name = "msdyn_launchappresources_name";
			public const string msdyn_mobileAppDefinitionAndroid = "msdyn_mobileappdefinitionandroid";
			public const string msdyn_mobileAppDefinitionAndroid_name = "msdyn_mobileappdefinitionandroid_name";
			public const string msdyn_mobileAppDefinitionIOS = "msdyn_mobileappdefinitionios";
			public const string msdyn_mobileAppDefinitionIOS_name = "msdyn_mobileappdefinitionios_name";
			public const string msdyn_mobileappId = "msdyn_mobileappid";
			public const string msdyn_orgName = "msdyn_orgname";
			public const string msdyn_platformType = "msdyn_platformtype";
			public const string msdyn_primaryPublishedAppName = "msdyn_primarypublishedappname";
			public const string msdyn_proDev_customPackage = "msdyn_prodev_custompackage";
			public const string msdyn_proDev_customPackage_name = "msdyn_prodev_custompackage_name";
			public const string msdyn_pushNotificationsAndroidJson = "msdyn_pushnotificationsandroidjson";
			public const string msdyn_pushNotificationsAndroidJson_name = "msdyn_pushnotificationsandroidjson_name";
			public const string msdyn_pushNotificationsEnabled_android = "msdyn_pushnotificationsenabled_android";
			public const string msdyn_pushNotificationsEnabled_ios = "msdyn_pushnotificationsenabled_ios";
			public const string msdyn_pushNotificationsIosPlist = "msdyn_pushnotificationsiosplist";
			public const string msdyn_pushNotificationsIosPlist_name = "msdyn_pushnotificationsiosplist_name";
			public const string msdyn_recentBuild = "msdyn_recentbuild";
			public const string msdyn_secondaryApps = "msdyn_secondaryapps";
			public const string msdyn_secondaryPublishedAppNames = "msdyn_secondarypublishedappnames";
			public const string msdyn_statusBarContentColorMode = "msdyn_statusbarcontentcolormode";
			public const string msdyn_tenantSplashImage = "msdyn_tenantsplashimage";
			public const string msdyn_tenantSplashImage_name = "msdyn_tenantsplashimage_name";
			public const string msdyn_tenantWelcomeImage = "msdyn_tenantwelcomeimage";
			public const string msdyn_tenantWelcomeImage_name = "msdyn_tenantwelcomeimage_name";
			public const string msdyn_UniqueName = "msdyn_uniquename";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_mobileapp";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10242;
		public const string EntityCollectionSchemaName = "msdyn_mobileapps";
		public const string EntityDisplayCollectionName = "Mobile App";
		public const string DisplayName = "Mobile App";
		public const string EntitySetName = "msdyn_mobileapps";
		public const string EntityLogicalCollectionName = "msdyn_mobileapps";
		public const string EntityPrimaryIdAttribute = "msdyn_mobileappid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "msdyn_mobileapp";
		[DebuggerNonUserCode()]
		public msdyn_mobileapp()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_mobileapp(Guid msdyn_mobileappId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_mobileappId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_mobileapp(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_mobileapp"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_mobileapp(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_mobileapp"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_mobileapp(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_mobileapp(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_mobileapp"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_mobileapp(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_mobileapp(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_mobileapp(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Action Button Highlight</para>
		/// <para><strong>Description</strong>: Color used for action button when highlighted.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_actionButtonHighlight
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_actionButtonHighlight); }
			set { Entity.Attributes[Fields.msdyn_actionButtonHighlight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Directory Authentication Library Id</para>
		/// <para><strong>Description</strong>: Active Directory Authentication Library Id used for Wrap.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_adalClientId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_adalClientId); }
			set { Entity.Attributes[Fields.msdyn_adalClientId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Directory Authentication Library redirect URI</para>
		/// <para><strong>Description</strong>: Active Directory Authentication Library redirect URI used for Wrap.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_adalRedirectUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_adalRedirectUri); }
			set { Entity.Attributes[Fields.msdyn_adalRedirectUri] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android App center API token</para>
		/// <para><strong>Description</strong>: Android App center API token</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AndroidAppCenterAPIToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AndroidAppCenterAPIToken); }
			set { Entity.Attributes[Fields.msdyn_AndroidAppCenterAPIToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AndroidAppCenterAPITokenSaved</para>
		/// <para><strong>Description</strong>: Notify if the user have saved the Android token.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AndroidAppCenterAPITokenSaved
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AndroidAppCenterAPITokenSaved); }
			set { Entity.Attributes[Fields.msdyn_AndroidAppCenterAPITokenSaved] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: App Center AppId Aab</para>
		/// <para><strong>Description</strong>: Android App Center AppId aab.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appCenterAppIdAab
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appCenterAppIdAab); }
			set { Entity.Attributes[Fields.msdyn_appCenterAppIdAab] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: App Center AppId Apk</para>
		/// <para><strong>Description</strong>: Android App Center AppId.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appCenterAppIdApk
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appCenterAppIdApk); }
			set { Entity.Attributes[Fields.msdyn_appCenterAppIdApk] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IOS App Center Id</para>
		/// <para><strong>Description</strong>: IOS App center app id for ipa.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appCenterAppIdIpa
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appCenterAppIdIpa); }
			set { Entity.Attributes[Fields.msdyn_appCenterAppIdIpa] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IOS App Icon 1024x1024</para>
		/// <para><strong>Description</strong>: App Icon with 1024 x 1024 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIcon1024x1024_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIcon1024x1024_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IOS App Icon 120x120</para>
		/// <para><strong>Description</strong>: App Icon with 120 x 120 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIcon120x120_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIcon120x120_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IOS App Icon 152x152</para>
		/// <para><strong>Description</strong>: App Icon with 152 x 152 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIcon152x152_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIcon152x152_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IOS App Icon 167x167</para>
		/// <para><strong>Description</strong>: App Icon with 167 x 167 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIcon167x167_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIcon167x167_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IOS App Icon 180x180</para>
		/// <para><strong>Description</strong>: App Icon with 180 x 180 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIcon180x180_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIcon180x180_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android App Icon Hdpi</para>
		/// <para><strong>Description</strong>: App Icon with 162 x 162 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIconHdpi_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIconHdpi_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android App Icon Mdpi</para>
		/// <para><strong>Description</strong>: App Icon with 108 x 108 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIconMdpi_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIconMdpi_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android App Icon Xdpi</para>
		/// <para><strong>Description</strong>: App Icon with 216 x 216 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIconXdpi_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIconXdpi_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android App Icon XXdpi</para>
		/// <para><strong>Description</strong>: App Icon with 324 x 324 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIconXxhdpi_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIconXxhdpi_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android App Icon XXXdpi</para>
		/// <para><strong>Description</strong>: App Icon with 432 x 432 dimension</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appIconXxxhdpi_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appIconXxxhdpi_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Branch</para>
		/// <para><strong>Description</strong>: Branch.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_branch
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_branch); }
			set { Entity.Attributes[Fields.msdyn_branch] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Build Details</para>
		/// <para><strong>Description</strong>: All Build details of the App.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_buildDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_buildDetails); }
			set { Entity.Attributes[Fields.msdyn_buildDetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bundle Identifier for App</para>
		/// <para><strong>Description</strong>: The bundleIds resource represents the app&apos;s unique identifier that you can register, modify, and delete.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_bundleIdentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_bundleIdentifier); }
			set { Entity.Attributes[Fields.msdyn_bundleIdentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button Color</para>
		/// <para><strong>Description</strong>: The Button color used in the App.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_buttonColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_buttonColor); }
			set { Entity.Attributes[Fields.msdyn_buttonColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Dimensions</para>
		/// <para><strong>Description</strong>: Custom Dimensions.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_customDimensions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_customDimensions); }
			set { Entity.Attributes[Fields.msdyn_customDimensions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Name</para>
		/// <para><strong>Description</strong>: Display name of the App.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_displayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_displayName); }
			set { Entity.Attributes[Fields.msdyn_displayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fill Color</para>
		/// <para><strong>Description</strong>: Fill color of the App.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_fillColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_fillColor); }
			set { Entity.Attributes[Fields.msdyn_fillColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading Text Color</para>
		/// <para><strong>Description</strong>: Heading Text Color in the App.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_headingTextColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_headingTextColor); }
			set { Entity.Attributes[Fields.msdyn_headingTextColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hyper Link Color</para>
		/// <para><strong>Description</strong>: Hyper Link Color in the App.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_hyperLinkColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_hyperLinkColor); }
			set { Entity.Attributes[Fields.msdyn_hyperLinkColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IOS App Center API token</para>
		/// <para><strong>Description</strong>: IOS App Center API token</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_IOSAppCenterAPIToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_IOSAppCenterAPIToken); }
			set { Entity.Attributes[Fields.msdyn_IOSAppCenterAPIToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IOSAppCenterAPITokenSaved</para>
		/// <para><strong>Description</strong>: Notify if the user have saved the IOS token.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_IOSAppCenterAPITokenSaved
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_IOSAppCenterAPITokenSaved); }
			set { Entity.Attributes[Fields.msdyn_IOSAppCenterAPITokenSaved] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: iOS Enterprise Signing Enabled</para>
		/// <para><strong>Description</strong>: iOS Enterprise Signing Enabled.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_iosEnterpriseSigningEnabled
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_iosEnterpriseSigningEnabled); }
			set { Entity.Attributes[Fields.msdyn_iosEnterpriseSigningEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Key Vault Uri</para>
		/// <para><strong>Description</strong>: Key Vault Uri.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_keyVaultUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_keyVaultUri); }
			set { Entity.Attributes[Fields.msdyn_keyVaultUri] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Launch App Resources</para>
		/// <para><strong>Description</strong>: Launch App Resources used to package the App.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_launchAppResources_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_launchAppResources_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile App Definition Android</para>
		/// <para><strong>Description</strong>: Mobile App Definition Android to package App.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_mobileAppDefinitionAndroid_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_mobileAppDefinitionAndroid_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile App Definition IOS</para>
		/// <para><strong>Description</strong>: Mobile App Definition IOS to package App.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_mobileAppDefinitionIOS_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_mobileAppDefinitionIOS_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile App Id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_mobileappId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_mobileappId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Name</para>
		/// <para><strong>Description</strong>: Organization Name in App Center</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_orgName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_orgName); }
			set { Entity.Attributes[Fields.msdyn_orgName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Platform Type</para>
		/// <para><strong>Description</strong>: Platform Type of Phone IOS/Android.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_platformType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_platformType); }
			set { Entity.Attributes[Fields.msdyn_platformType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Published Canvas App</para>
		/// <para><strong>Description</strong>: Primary Published Canvas App to used in the Wrap.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="canvasapp"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_primaryPublishedAppName
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_primaryPublishedAppName); }
			set { Entity.Attributes[Fields.msdyn_primaryPublishedAppName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pro Dev Custom Package</para>
		/// <para><strong>Description</strong>: Pro Dev Custom Package.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_proDev_customPackage_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_proDev_customPackage_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Push Notifications Android JSON</para>
		/// <para><strong>Description</strong>: Push Notifications Android JSON.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_pushNotificationsAndroidJson_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_pushNotificationsAndroidJson_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Push Notifications Enabled Android</para>
		/// <para><strong>Description</strong>: Push Notifications Enabled Android.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_pushNotificationsEnabled_android
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_pushNotificationsEnabled_android); }
			set { Entity.Attributes[Fields.msdyn_pushNotificationsEnabled_android] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Push Notifications Enabled iOS</para>
		/// <para><strong>Description</strong>: Push Notifications Enabled iOS.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_pushNotificationsEnabled_ios
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_pushNotificationsEnabled_ios); }
			set { Entity.Attributes[Fields.msdyn_pushNotificationsEnabled_ios] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Push Notifications iOS Plist</para>
		/// <para><strong>Description</strong>: Push Notifications iOS Plist.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_pushNotificationsIosPlist_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_pushNotificationsIosPlist_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recent build</para>
		/// <para><strong>Description</strong>: Recent build details of the App.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_recentBuild
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_recentBuild); }
			set { Entity.Attributes[Fields.msdyn_recentBuild] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Secondary Apps used for Wrap</para>
		/// <para><strong>Description</strong>: Secondary Apps used for Wrap.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_secondaryApps
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_secondaryApps); }
			set { Entity.Attributes[Fields.msdyn_secondaryApps] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Secondary Published App Names</para>
		/// <para><strong>Description</strong>: Secondary Published App Names to used in the Wrap.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_secondaryPublishedAppNames
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_secondaryPublishedAppNames); }
			set { Entity.Attributes[Fields.msdyn_secondaryPublishedAppNames] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Bar Content Color Mode</para>
		/// <para><strong>Description</strong>: Status Bar Content Color Mode of the App.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_statusBarContentColorMode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_statusBarContentColorMode); }
			set { Entity.Attributes[Fields.msdyn_statusBarContentColorMode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tenant Splash Image</para>
		/// <para><strong>Description</strong>: Tenant Splash Image in the App.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_tenantSplashImage_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_tenantSplashImage_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tenant Welcome Image</para>
		/// <para><strong>Description</strong>: Tenant Welcome Image in the App.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_tenantWelcomeImage_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_tenantWelcomeImage_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Name</para>
		/// <para><strong>Description</strong>: Unique Name for the entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UniqueName); }
			set { Entity.Attributes[Fields.msdyn_UniqueName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the MobileApp</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the msdyn_mobileapp</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_mobileappOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}