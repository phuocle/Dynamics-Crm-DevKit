//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets
{
	public enum subtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: CUD_IN</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		CUD_IN = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: CUD_OUT</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		CUD_OUT = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: FULL_SYNC</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		FULL_SYNC = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: RELATED_CUD_IN</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		RELATED_CUD_IN = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: RELATED_ENTITIES</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		RELATED_ENTITIES = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: RELATED_INTERSECT_ENTITIES</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		RELATED_INTERSECT_ENTITIES = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: RELATED_SHARED_IN</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		RELATED_SHARED_IN = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: SHARED_IN</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		SHARED_IN = 2
	}
	public enum type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DELTA_IN</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		DELTA_IN = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: DELTA_OUT</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		DELTA_OUT = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: FULL_SYNC</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		FULL_SYNC = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: RELATED_ENTITIES</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		RELATED_ENTITIES = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: TOP_1</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		TOP_1 = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class mobileofflineprofileitemfilter : EntityBase
	{
		public struct Fields
		{
			public const string CreatedOn = "createdon";
			public const string fetchxml = "fetchxml";
			public const string IsActivity = "isactivity";
			public const string IsIntersect = "isintersect";
			public const string mobileofflineprofileid = "mobileofflineprofileid";
			public const string mobileofflineprofileitemfilterId = "mobileofflineprofileitemfilterid";
			public const string mobileofflineprofileitemid = "mobileofflineprofileitemid";
			public const string ModifiedOn = "modifiedon";
			public const string Name = "name";
			public const string offlinesql = "offlinesql";
			public const string OrganizationId = "organizationid";
			public const string outerFetchXml = "outerfetchXml";
			public const string returnedtypecode = "returnedtypecode";
			public const string subtype = "subtype";
			public const string type = "type";
			public const string versionnumber = "versionnumber";
		}
		public const string EntityLogicalName = "mobileofflineprofileitemfilter";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10215;
		public const string EntityCollectionSchemaName = "mobileofflineprofileitemfilters";
		public const string EntityDisplayCollectionName = "MobileOfflineProfileItemFilters";
		public const string DisplayName = "MobileOfflineProfileItemFilter";
		public const string EntitySetName = "mobileofflineprofileitemfilters";
		public const string EntityLogicalCollectionName = "mobileofflineprofileitemfilters";
		public const string EntityPrimaryIdAttribute = "mobileofflineprofileitemfilterid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "mobileofflineprofileitemfilter";
		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(Guid mobileofflineprofileitemfilterId)
		{
			Entity = new Entity(EntityLogicalName, mobileofflineprofileitemfilterId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mobileofflineprofileitemfilter"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mobileofflineprofileitemfilter"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mobileofflineprofileitemfilter(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mobileofflineprofileitemfilter"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mobileofflineprofileitemfilter(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FetchXML</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string fetchxml
		{
			get { return Entity.GetAttributeValue<string>(Fields.fetchxml); }
			set { Entity.Attributes[Fields.fetchxml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsActivity</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActivity); }
			set { Entity.Attributes[Fields.IsActivity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsIntersect</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsIntersect
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsIntersect); }
			set { Entity.Attributes[Fields.IsIntersect] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MobileOfflineProfile</para>
		/// <para><strong>Description</strong>: Unique identifier for Mobile Offline Profile associated with MobileOfflineProfileItemFilter.</para>
		/// <para><strong>Lookup</strong>: <see cref="mobileofflineprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mobileofflineprofileid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mobileofflineprofileid); }
			set { Entity.Attributes[Fields.mobileofflineprofileid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MobileOfflineProfileItemFilter</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid mobileofflineprofileitemfilterId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.mobileofflineprofileitemfilterId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MobileOfflineProfileItemId</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? mobileofflineprofileitemid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.mobileofflineprofileitemid); }
			set { Entity.Attributes[Fields.mobileofflineprofileitemid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OfflineSQL</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string offlinesql
		{
			get { return Entity.GetAttributeValue<string>(Fields.offlinesql); }
			set { Entity.Attributes[Fields.offlinesql] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OuterFetchXML</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string outerFetchXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.outerFetchXml); }
			set { Entity.Attributes[Fields.outerFetchXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ReturnedTypecode</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string returnedtypecode
		{
			get { return Entity.GetAttributeValue<string>(Fields.returnedtypecode); }
			set { Entity.Attributes[Fields.returnedtypecode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subtype</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.subtype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.subtype? subtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.subtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.subtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.subtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.subtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.type? type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? versionnumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.versionnumber); }
		}
	}
}