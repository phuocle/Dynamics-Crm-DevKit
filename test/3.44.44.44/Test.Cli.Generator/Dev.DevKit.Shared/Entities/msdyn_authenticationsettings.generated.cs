//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_Authenticationtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Gatekeeper Biometric Authentication</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Gatekeeper_Biometric_Authentication = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: OAuth 2.0 code flow</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		OAuth_20_code_flow = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: OAuth 2.0 enhanced authentication chat flow</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		OAuth_20_enhanced_authentication_chat_flow = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: OAuth 2.0 implicit flow</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		OAuth_20_implicit_flow = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: OAuth 2.0 OpenId connect flow</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		OAuth_20_OpenId_connect_flow = 192_350_003
	}
	public enum msdyn_endpointregion
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canada</para>
		/// <para><strong>Value</strong>: 192,440,002</para>
		/// </summary>
		Canada = 192_440_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: United Kingdom</para>
		/// <para><strong>Value</strong>: 192,440,003</para>
		/// </summary>
		United_Kingdom = 192_440_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: United States</para>
		/// <para><strong>Value</strong>: 192,440,001</para>
		/// </summary>
		United_States = 192_440_001
	}
	public enum msdyn_ocauthchanneltype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Apple Messages For Business</para>
		/// <para><strong>Value</strong>: 192,450,000</para>
		/// </summary>
		Apple_Messages_For_Business = 192_450_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live chat</para>
		/// <para><strong>Value</strong>: 192,360,000</para>
		/// </summary>
		Live_chat = 192_360_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice</para>
		/// <para><strong>Value</strong>: 192,440,000</para>
		/// </summary>
		Voice = 192_440_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_authenticationsettings : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_accesstokenurl = "msdyn_accesstokenurl";
			public const string msdyn_actionname = "msdyn_actionname";
			public const string msdyn_additionalparams = "msdyn_additionalparams";
			public const string msdyn_authenticationclientid = "msdyn_authenticationclientid";
			public const string msdyn_authenticationclientsecret = "msdyn_authenticationclientsecret";
			public const string msdyn_authenticationscopes = "msdyn_authenticationscopes";
			public const string msdyn_authenticationsettingsId = "msdyn_authenticationsettingsid";
			public const string msdyn_Authenticationtype = "msdyn_authenticationtype";
			public const string msdyn_authserviceconfigsetid = "msdyn_authserviceconfigsetid";
			public const string msdyn_authservicescopeid = "msdyn_authservicescopeid";
			public const string msdyn_decryptedtokenurl = "msdyn_decryptedtokenurl";
			public const string msdyn_endpointregion = "msdyn_endpointregion";
			public const string msdyn_JavaScriptclientfunction = "msdyn_javascriptclientfunction";
			public const string msdyn_mappedaccountidfield = "msdyn_mappedaccountidfield";
			public const string msdyn_mappedcontactidfield = "msdyn_mappedcontactidfield";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocauthchanneltype = "msdyn_ocauthchanneltype";
			public const string msdyn_PublickeyURL = "msdyn_publickeyurl";
			public const string msdyn_redirecturi = "msdyn_redirecturi";
			public const string msdyn_useauthcodeflow = "msdyn_useauthcodeflow";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_authenticationsettings";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10668;
		public const string EntityCollectionSchemaName = "msdyn_authenticationsettingses";
		public const string EntityDisplayCollectionName = "Authentication Settings";
		public const string DisplayName = "Authentication Settings";
		public const string EntitySetName = "msdyn_authenticationsettingses";
		public const string EntityLogicalCollectionName = "msdyn_authenticationsettingses";
		public const string EntityPrimaryIdAttribute = "msdyn_authenticationsettingsid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_authenticationsettings";
		[DebuggerNonUserCode()]
		public msdyn_authenticationsettings()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_authenticationsettings(Guid msdyn_authenticationsettingsId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_authenticationsettingsId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_authenticationsettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_authenticationsettings"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_authenticationsettings(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_authenticationsettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_authenticationsettings(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_authenticationsettings(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_authenticationsettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_authenticationsettings(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_authenticationsettings(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_authenticationsettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auth service Access token url</para>
		/// <para><strong>Description</strong>: Auth service Access token url</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 600</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_accesstokenurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_accesstokenurl); }
			set { Entity.Attributes[Fields.msdyn_accesstokenurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Action Name</para>
		/// <para><strong>Description</strong>: Action Name that will be called to fetch customer ID from.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_actionname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_actionname); }
			set { Entity.Attributes[Fields.msdyn_actionname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional Parameters for Custom Auth service</para>
		/// <para><strong>Description</strong>: Additional Parameters for Custom Auth service</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 600</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_additionalparams
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_additionalparams); }
			set { Entity.Attributes[Fields.msdyn_additionalparams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auth service Client ID</para>
		/// <para><strong>Description</strong>: Auth service Client Id</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_authenticationclientid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_authenticationclientid); }
			set { Entity.Attributes[Fields.msdyn_authenticationclientid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auth service client secret</para>
		/// <para><strong>Description</strong>: Auth service client secret</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_authenticationclientsecret
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_authenticationclientsecret); }
			set { Entity.Attributes[Fields.msdyn_authenticationclientsecret] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auth service scopes</para>
		/// <para><strong>Description</strong>: Auth service scopes</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_authenticationscopes
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_authenticationscopes); }
			set { Entity.Attributes[Fields.msdyn_authenticationscopes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication Settings</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_authenticationsettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_authenticationsettingsId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication Type</para>
		/// <para><strong>Description</strong>: Authentication Type which will be applied to the chat</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_Authenticationtype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_Authenticationtype? msdyn_Authenticationtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Authenticationtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_Authenticationtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Authenticationtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Authenticationtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Config Set ID for Gatekeeper authentication service</para>
		/// <para><strong>Description</strong>: Config Set ID for Gatekeeper authentication service</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_authserviceconfigsetid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_authserviceconfigsetid); }
			set { Entity.Attributes[Fields.msdyn_authserviceconfigsetid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scope ID for Gatekeeper authentication service</para>
		/// <para><strong>Description</strong>: Scope ID for Gatekeeper authentication service</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_authservicescopeid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_authservicescopeid); }
			set { Entity.Attributes[Fields.msdyn_authservicescopeid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decrypted Token URL</para>
		/// <para><strong>Description</strong>: Decrypted token url to hit with Access token</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_decryptedtokenurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_decryptedtokenurl); }
			set { Entity.Attributes[Fields.msdyn_decryptedtokenurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Endpoint region</para>
		/// <para><strong>Description</strong>: Endpoint region for authentication setting</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_endpointregion"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_endpointregion? msdyn_endpointregion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_endpointregion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_endpointregion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_endpointregion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_endpointregion] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: JavaScript client function</para>
		/// <para><strong>Description</strong>: Javascript function which will need to return the authentication token</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_JavaScriptclientfunction
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_JavaScriptclientfunction); }
			set { Entity.Attributes[Fields.msdyn_JavaScriptclientfunction] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mapped account id field</para>
		/// <para><strong>Description</strong>: An account attribute that will be sent as the person id for Gatekeeper</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_mappedaccountidfield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_mappedaccountidfield); }
			set { Entity.Attributes[Fields.msdyn_mappedaccountidfield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mapped contact field</para>
		/// <para><strong>Description</strong>: A contact attribute that will be sent as the person id for Gatekeeper</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_mappedcontactidfield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_mappedcontactidfield); }
			set { Entity.Attributes[Fields.msdyn_mappedcontactidfield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_ocauthchanneltype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_ocauthchanneltype? msdyn_ocauthchanneltype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ocauthchanneltype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.msdyn_ocauthchanneltype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ocauthchanneltype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ocauthchanneltype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Public key URL</para>
		/// <para><strong>Description</strong>: URL to the Public Key which will be used for token validation</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PublickeyURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PublickeyURL); }
			set { Entity.Attributes[Fields.msdyn_PublickeyURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirect Uri for Auth service</para>
		/// <para><strong>Description</strong>: Redirect Uri for Auth service</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 600</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_redirecturi
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_redirecturi); }
			set { Entity.Attributes[Fields.msdyn_redirecturi] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use Auth Code Flow</para>
		/// <para><strong>Description</strong>: Value that represents if authenticated chat is using auth code flow.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_useauthcodeflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_useauthcodeflow); }
			set { Entity.Attributes[Fields.msdyn_useauthcodeflow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Authentication settings</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Authentication settings</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_authenticationsettingsOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}