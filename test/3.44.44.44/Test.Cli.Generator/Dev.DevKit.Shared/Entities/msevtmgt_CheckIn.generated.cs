//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets
{
	public enum msevtmgt_AudienceType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Advanced = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: General</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		General = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Intermediate</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Intermediate = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Introductory</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Introductory = 100_000_001
	}
	public enum msevtmgt_CheckInType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Event check-in</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Event_check_in = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Session check-in</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Session_check_in = 100_000_000
	}
	public enum msevtmgt_SessionType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Brainstorming</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Brainstorming = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Breakout</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Breakout = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: General</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		General = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hands-on/lab</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Hands_onlab = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Keynote</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Keynote = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Training</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Training = 100_000_005
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msevtmgt_CheckIn : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_attendancepercentage = "msdynmkt_attendancepercentage";
			public const string msevtmgt_AudienceType = "msevtmgt_audiencetype";
			public const string msevtmgt_CheckInId = "msevtmgt_checkinid";
			public const string msevtmgt_Checkintime = "msevtmgt_checkintime";
			public const string msevtmgt_CheckInType = "msevtmgt_checkintype";
			public const string msevtmgt_CheckOutTime = "msevtmgt_checkouttime";
			public const string msevtmgt_Contact = "msevtmgt_contact";
			public const string msevtmgt_Event = "msevtmgt_event";
			public const string msevtmgt_Name = "msevtmgt_name";
			public const string msevtmgt_NumberOfQuestionsAsked = "msevtmgt_numberofquestionsasked";
			public const string msevtmgt_PurchasedPassesId = "msevtmgt_purchasedpassesid";
			public const string msevtmgt_RegistrationId = "msevtmgt_registrationid";
			public const string msevtmgt_registrationidfromqr = "msevtmgt_registrationidfromqr";
			public const string msevtmgt_SessionAttended = "msevtmgt_sessionattended";
			public const string msevtmgt_SessionCode = "msevtmgt_sessioncode";
			public const string msevtmgt_SessionRegistration = "msevtmgt_sessionregistration";
			public const string msevtmgt_SessionType = "msevtmgt_sessiontype";
			public const string msevtmgt_TransactionCurrencyId = "msevtmgt_transactioncurrencyid";
			public const string msevtmgt_ViewingDurationInMins = "msevtmgt_viewingdurationinmins";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msevtmgt_checkin";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11088;
		public const string EntityCollectionSchemaName = "msevtmgt_CheckIns";
		public const string EntityDisplayCollectionName = "Check-ins";
		public const string DisplayName = "Check-in";
		public const string EntitySetName = "msevtmgt_checkins";
		public const string EntityLogicalCollectionName = "msevtmgt_checkins";
		public const string EntityPrimaryIdAttribute = "msevtmgt_checkinid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msevtmgt_name";
		public const string EntitySchemaName = "msevtmgt_CheckIn";
		[DebuggerNonUserCode()]
		public msevtmgt_CheckIn()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_CheckIn(Guid msevtmgt_CheckInId)
		{
			Entity = new Entity(EntityLogicalName, msevtmgt_CheckInId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_CheckIn(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_CheckIn"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msevtmgt_CheckIn(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_CheckIn"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_CheckIn(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_CheckIn(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_CheckIn"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_CheckIn(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_CheckIn(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_CheckIn(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: The sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: The date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attendance percentage</para>
		/// <para><strong>Description</strong>: Field representing a percentile approximation of time spent for an attendee in the virtual event.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdynmkt_attendancepercentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdynmkt_attendancepercentage); }
			set { Entity.Attributes[Fields.msdynmkt_attendancepercentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Audience type</para>
		/// <para><strong>Description</strong>: Audience type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_AudienceType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_AudienceType? msevtmgt_AudienceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_AudienceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_AudienceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_AudienceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_AudienceType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check-in</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msevtmgt_CheckInId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msevtmgt_CheckInId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check-in time</para>
		/// <para><strong>Description</strong>: Check-in time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_CheckintimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_Checkintime); }
			set { Entity.Attributes[Fields.msevtmgt_Checkintime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check-in type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_CheckInType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_CheckInType.Session_check_in"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_CheckInType? msevtmgt_CheckInType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_CheckInType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_CheckInType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_CheckInType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_CheckInType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check-out time</para>
		/// <para><strong>Description</strong>: Check-out time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_CheckOutTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_CheckOutTime); }
			set { Entity.Attributes[Fields.msevtmgt_CheckOutTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attendee</para>
		/// <para><strong>Description</strong>: Contact records of the check-in</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_Contact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_Contact); }
			set { Entity.Attributes[Fields.msevtmgt_Contact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event</para>
		/// <para><strong>Description</strong>: Unique identifier for the event associated with the check-in</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_event"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_Event
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_Event); }
			set { Entity.Attributes[Fields.msevtmgt_Event] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Check-in records are used to log attendance at a particular event or session.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Name); }
			set { Entity.Attributes[Fields.msevtmgt_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Number of interactions</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_NumberOfQuestionsAsked
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_NumberOfQuestionsAsked); }
			set { Entity.Attributes[Fields.msevtmgt_NumberOfQuestionsAsked] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchased passes</para>
		/// <para><strong>Description</strong>: Unique identifier for the attendee pass associated with the check-in</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_attendeepass"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_PurchasedPassesId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_PurchasedPassesId); }
			set { Entity.Attributes[Fields.msevtmgt_PurchasedPassesId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event registration</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msevtmgt_eventregistration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_RegistrationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_RegistrationId); }
			set { Entity.Attributes[Fields.msevtmgt_RegistrationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_registrationidfromqr
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_registrationidfromqr); }
			set { Entity.Attributes[Fields.msevtmgt_registrationidfromqr] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session attended</para>
		/// <para><strong>Description</strong>: The session attended</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_session"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_SessionAttended
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_SessionAttended); }
			set { Entity.Attributes[Fields.msevtmgt_SessionAttended] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session code</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_SessionCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_SessionCode); }
			set { Entity.Attributes[Fields.msevtmgt_SessionCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session registration</para>
		/// <para><strong>Description</strong>: All active session registration records for this check-in</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_sessionregistration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_SessionRegistration
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_SessionRegistration); }
			set { Entity.Attributes[Fields.msevtmgt_SessionRegistration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_SessionType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_SessionType? msevtmgt_SessionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SessionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.msevtmgt_SessionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SessionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SessionType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_TransactionCurrencyId); }
			set { Entity.Attributes[Fields.msevtmgt_TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Viewing duration in minutes</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_ViewingDurationInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_ViewingDurationInMins); }
			set { Entity.Attributes[Fields.msevtmgt_ViewingDurationInMins] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the check-in</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the check-in</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_CheckInOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: The time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}