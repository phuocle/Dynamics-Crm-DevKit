//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets
{
	public enum msdyncrm_email_contenttype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmation request</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Confirmation_request = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Default = 0
	}
	public enum msdyncrm_messagedesignation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Commercial</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Commercial = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Transactional</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Transactional = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_marketingemailtestsend : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_abtestid = "msdyncrm_abtestid";
			public const string msdyncrm_abtestvariantid = "msdyncrm_abtestvariantid";
			public const string msdyncrm_email_contenttype = "msdyncrm_email_contenttype";
			public const string msdyncrm_emailbody = "msdyncrm_emailbody";
			public const string msdyncrm_emailid = "msdyncrm_emailid";
			public const string msdyncrm_entityname = "msdyncrm_entityname";
			public const string msdyncrm_from = "msdyncrm_from";
			public const string msdyncrm_fromexpression = "msdyncrm_fromexpression";
			public const string msdyncrm_htmlpart = "msdyncrm_htmlpart";
			public const string msdyncrm_keywords = "msdyncrm_keywords";
			public const string msdyncrm_marketingemailtestsendId = "msdyncrm_marketingemailtestsendid";
			public const string msdyncrm_marketinglistid = "msdyncrm_marketinglistid";
			public const string msdyncrm_messagedesignation = "msdyncrm_messagedesignation";
			public const string msdyncrm_messagetype = "msdyncrm_messagetype";
			public const string msdyncrm_replytoexpression = "msdyncrm_replytoexpression";
			public const string msdyncrm_subject = "msdyncrm_subject";
			public const string msdyncrm_testcontactid = "msdyncrm_testcontactid";
			public const string msdyncrm_testcontentsettingsid = "msdyncrm_testcontentsettingsid";
			public const string msdyncrm_testsendemailaddress = "msdyncrm_testsendemailaddress";
			public const string msdyncrm_textpart = "msdyncrm_textpart";
			public const string msdyncrm_toexpression = "msdyncrm_toexpression";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_marketingemailtestsend";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11163;
		public const string EntityCollectionSchemaName = "msdyncrm_marketingemailtestsends";
		public const string EntityDisplayCollectionName = "Marketing emails test-send";
		public const string DisplayName = "Marketing email test send";
		public const string EntitySetName = "msdyncrm_marketingemailtestsends";
		public const string EntityLogicalCollectionName = "msdyncrm_marketingemailtestsends";
		public const string EntityPrimaryIdAttribute = "msdyncrm_marketingemailtestsendid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_subject";
		public const string EntitySchemaName = "msdyncrm_marketingemailtestsend";
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailtestsend()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailtestsend(Guid msdyncrm_marketingemailtestsendId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_marketingemailtestsendId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailtestsend(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingemailtestsend"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailtestsend(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingemailtestsend"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailtestsend(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingemailtestsend(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingemailtestsend"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailtestsend(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingemailtestsend(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailtestsend(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_abtestid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_abtestid); }
			set { Entity.Attributes[Fields.msdyncrm_abtestid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test variant ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_abtestvariantid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_abtestvariantid); }
			set { Entity.Attributes[Fields.msdyncrm_abtestvariantid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Content Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.msdyncrm_email_contenttype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.msdyncrm_email_contenttype.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.msdyncrm_email_contenttype? msdyncrm_email_contenttype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_email_contenttype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.msdyncrm_email_contenttype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_email_contenttype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_email_contenttype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email body</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailbody
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailbody); }
			set { Entity.Attributes[Fields.msdyncrm_emailbody] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email ID</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailid); }
			set { Entity.Attributes[Fields.msdyncrm_emailid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: entityname</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_entityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_entityname); }
			set { Entity.Attributes[Fields.msdyncrm_entityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: From</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_from
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_from); }
			set { Entity.Attributes[Fields.msdyncrm_from] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: From expression</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_fromexpression
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_fromexpression); }
			set { Entity.Attributes[Fields.msdyncrm_fromexpression] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HTML part</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_htmlpart
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_htmlpart); }
			set { Entity.Attributes[Fields.msdyncrm_htmlpart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Keywords</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_keywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_keywords); }
			set { Entity.Attributes[Fields.msdyncrm_keywords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing email test send</para>
		/// <para><strong>Description</strong>: Unique ID for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_marketingemailtestsendId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_marketingemailtestsendId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing list ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marketinglistid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marketinglistid); }
			set { Entity.Attributes[Fields.msdyncrm_marketinglistid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Legal designation</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.msdyncrm_messagedesignation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.msdyncrm_messagedesignation.Commercial"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.msdyncrm_messagedesignation? msdyncrm_messagedesignation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_messagedesignation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.msdyncrm_messagedesignation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_messagedesignation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_messagedesignation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message type</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_messagetype
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_messagetype); }
			set { Entity.Attributes[Fields.msdyncrm_messagetype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reply-to expression</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_replytoexpression
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_replytoexpression); }
			set { Entity.Attributes[Fields.msdyncrm_replytoexpression] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_subject); }
			set { Entity.Attributes[Fields.msdyncrm_subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Test contact</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_testcontactid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_testcontactid); }
			set { Entity.Attributes[Fields.msdyncrm_testcontactid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Test content settings</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_contentsettings"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_testcontentsettingsid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_testcontentsettingsid); }
			set { Entity.Attributes[Fields.msdyncrm_testcontentsettingsid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Test-send email address</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_testsendemailaddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_testsendemailaddress); }
			set { Entity.Attributes[Fields.msdyncrm_testsendemailaddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Plain text</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textpart
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textpart); }
			set { Entity.Attributes[Fields.msdyncrm_textpart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: To expression</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_toexpression
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_toexpression); }
			set { Entity.Attributes[Fields.msdyncrm_toexpression] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Indicates the business unit that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the marketing email test send</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Marketing email test-send status reason</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailtestsendOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time-zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time-zone code</para>
		/// <para><strong>Description</strong>: Time-zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}