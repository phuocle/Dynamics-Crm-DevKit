//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets
{
	public enum msdyn_ActionButtons
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Allow = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deny</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Deny = 100_000_001
	}
	public enum msdyn_DesktopNotificationSettings
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Never</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Never = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: When app is in background</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		When_app_is_in_background = 100_000_003
	}
	public enum msdyn_Showtimeout
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		No = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Yes = 100_000_000
	}
	public enum msdyn_Theme
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dark</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Dark = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Light</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Light = 100_000_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_consoleapplicationnotificationtemplate : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AcceptButtonText = "msdyn_acceptbuttontext";
			public const string msdyn_ActionButtons = "msdyn_actionbuttons";
			public const string msdyn_AutoAcceptNotification = "msdyn_autoacceptnotification";
			public const string msdyn_consoleapplicationnotificationtemplateId = "msdyn_consoleapplicationnotificationtemplateid";
			public const string msdyn_DesktopNotificationSettings = "msdyn_desktopnotificationsettings";
			public const string msdyn_Icon = "msdyn_icon";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_NotificationButtons = "msdyn_notificationbuttons";
			public const string msdyn_NotificationFieldsPlaceholder = "msdyn_notificationfieldsplaceholder";
			public const string msdyn_RejectButtonAutoAccept = "msdyn_rejectbuttonautoaccept";
			public const string msdyn_RejectButtonText = "msdyn_rejectbuttontext";
			public const string msdyn_RenderingOrder = "msdyn_renderingorder";
			public const string msdyn_Showtimeout = "msdyn_showtimeout";
			public const string msdyn_Theme = "msdyn_theme";
			public const string msdyn_Timeout = "msdyn_timeout";
			public const string msdyn_Title = "msdyn_title";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_consoleapplicationnotificationtemplate";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10454;
		public const string EntityCollectionSchemaName = "msdyn_consoleapplicationnotificationtemplates";
		public const string EntityDisplayCollectionName = "Notification Templates (Deprecated)";
		public const string DisplayName = "Notification Template (Deprecated)";
		public const string EntitySetName = "msdyn_consoleapplicationnotificationtemplates";
		public const string EntityLogicalCollectionName = "msdyn_consoleapplicationnotificationtemplates";
		public const string EntityPrimaryIdAttribute = "msdyn_consoleapplicationnotificationtemplateid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_consoleapplicationnotificationtemplate";
		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(Guid msdyn_consoleapplicationnotificationtemplateId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_consoleapplicationnotificationtemplateId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_consoleapplicationnotificationtemplate"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_consoleapplicationnotificationtemplate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_consoleapplicationnotificationtemplate(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_consoleapplicationnotificationtemplate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_consoleapplicationnotificationtemplate(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Accept Button Text</para>
		/// <para><strong>Description</strong>: Display label for the button to accept a notification</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AcceptButtonText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AcceptButtonText); }
			set { Entity.Attributes[Fields.msdyn_AcceptButtonText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActionButtons (Deprecated)</para>
		/// <para><strong>Description</strong>: The action buttons to be displayed. (Deprecated)</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_ActionButtons"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_ActionButtons> msdyn_ActionButtons
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_ActionButtons>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_ActionButtons);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_ActionButtons)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_ActionButtons] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_ActionButtons] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Accept Notification</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoAcceptNotification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoAcceptNotification); }
			set { Entity.Attributes[Fields.msdyn_AutoAcceptNotification] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ConsoleApplicationNotificationTemplate</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_consoleapplicationnotificationtemplateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_consoleapplicationnotificationtemplateId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show desktop notifications</para>
		/// <para><strong>Description</strong>: Show desktop notifications when app is in background or never</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_DesktopNotificationSettings"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_DesktopNotificationSettings.Never"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_DesktopNotificationSettings? msdyn_DesktopNotificationSettings
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DesktopNotificationSettings);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_DesktopNotificationSettings)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DesktopNotificationSettings] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DesktopNotificationSettings] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Icon</para>
		/// <para><strong>Description</strong>: Display icon for this notification. Can be either an image URL or a font-icon</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Icon
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Icon); }
			set { Entity.Attributes[Fields.msdyn_Icon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of this Notification template.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Notification Buttons</para>
		/// <para><strong>Description</strong>: JSON object to pass key-value pairs for action buttons that are to be present on the notification</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_NotificationButtons
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_NotificationButtons); }
			set { Entity.Attributes[Fields.msdyn_NotificationButtons] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Notification Fields</para>
		/// <para><strong>Description</strong>: Deprecated field</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_NotificationFieldsPlaceholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_NotificationFieldsPlaceholder); }
			set { Entity.Attributes[Fields.msdyn_NotificationFieldsPlaceholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reject Button</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_RejectButtonAutoAccept
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_RejectButtonAutoAccept); }
			set { Entity.Attributes[Fields.msdyn_RejectButtonAutoAccept] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reject Button Text</para>
		/// <para><strong>Description</strong>: Display label for the button to reject a notification</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RejectButtonText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RejectButtonText); }
			set { Entity.Attributes[Fields.msdyn_RejectButtonText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Notification order</para>
		/// <para><strong>Description</strong>: Notification display order relative to other notification templates.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RenderingOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RenderingOrder); }
			set { Entity.Attributes[Fields.msdyn_RenderingOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show timeout</para>
		/// <para><strong>Description</strong>: Show countdown for when the notification will disappear</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Showtimeout"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Showtimeout.Yes"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Showtimeout? msdyn_Showtimeout
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Showtimeout);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Showtimeout)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Showtimeout] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Showtimeout] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Theme</para>
		/// <para><strong>Description</strong>: Theme color for Notification template.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Theme"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Theme.Dark"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Theme? msdyn_Theme
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Theme);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Theme)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Theme] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Theme] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Timeout (seconds)</para>
		/// <para><strong>Description</strong>: Notification time out period.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Timeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Timeout); }
			set { Entity.Attributes[Fields.msdyn_Timeout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Description</strong>: The title to be displayed for this notification.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Title); }
			set { Entity.Attributes[Fields.msdyn_Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Notification Template</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Notification Template</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}