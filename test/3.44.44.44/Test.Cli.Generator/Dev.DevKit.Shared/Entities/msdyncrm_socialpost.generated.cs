//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets
{
	public enum msdyncrm_linkedInvisibility
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Connections</para>
		/// <para><strong>Value</strong>: 270,100,000</para>
		/// </summary>
		Connections = 270_100_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public</para>
		/// <para><strong>Value</strong>: 270,100,001</para>
		/// </summary>
		Public = 270_100_001
	}
	public enum msdyncrm_postas
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Company</para>
		/// <para><strong>Value</strong>: 270,100,001</para>
		/// </summary>
		Company = 270_100_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Value</strong>: 270,100,000</para>
		/// </summary>
		User = 270_100_000
	}
	public enum msdyncrm_postingfrom
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: User 0</para>
		/// <para><strong>Value</strong>: 270,100,000</para>
		/// </summary>
		User_0 = 270_100_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 1</para>
		/// <para><strong>Value</strong>: 270,100,001</para>
		/// </summary>
		User_1 = 270_100_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 10</para>
		/// <para><strong>Value</strong>: 270,100,010</para>
		/// </summary>
		User_10 = 270_100_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 2</para>
		/// <para><strong>Value</strong>: 270,100,002</para>
		/// </summary>
		User_2 = 270_100_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 3</para>
		/// <para><strong>Value</strong>: 270,100,003</para>
		/// </summary>
		User_3 = 270_100_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 4</para>
		/// <para><strong>Value</strong>: 270,100,004</para>
		/// </summary>
		User_4 = 270_100_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 5</para>
		/// <para><strong>Value</strong>: 270,100,005</para>
		/// </summary>
		User_5 = 270_100_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 6</para>
		/// <para><strong>Value</strong>: 270,100,006</para>
		/// </summary>
		User_6 = 270_100_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 7</para>
		/// <para><strong>Value</strong>: 270,100,007</para>
		/// </summary>
		User_7 = 270_100_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 8</para>
		/// <para><strong>Value</strong>: 270,100,008</para>
		/// </summary>
		User_8 = 270_100_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: User 9</para>
		/// <para><strong>Value</strong>: 270,100,009</para>
		/// </summary>
		User_9 = 270_100_009
	}
	public enum msdyncrm_PostingPeriod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: On demand</para>
		/// <para><strong>Value</strong>: 270,100,003</para>
		/// </summary>
		On_demand = 270_100_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Post now</para>
		/// <para><strong>Value</strong>: 270,100,000</para>
		/// </summary>
		Post_now = 270_100_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule</para>
		/// <para><strong>Value</strong>: 270,100,002</para>
		/// </summary>
		Schedule = 270_100_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule later</para>
		/// <para><strong>Value</strong>: 270,100,001</para>
		/// </summary>
		Schedule_later = 270_100_001
	}
	public enum msdyncrm_poststate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disconnected</para>
		/// <para><strong>Value</strong>: 270,100,006</para>
		/// </summary>
		Disconnected = 270_100_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 270,100,000</para>
		/// </summary>
		Draft = 270_100_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 270,100,004</para>
		/// </summary>
		Failed = 270_100_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live</para>
		/// <para><strong>Value</strong>: 270,100,005</para>
		/// </summary>
		Going_live = 270_100_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 270,100,002</para>
		/// </summary>
		Live = 270_100_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: New</para>
		/// <para><strong>Value</strong>: 270,100,003</para>
		/// </summary>
		New = 270_100_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 270,100,001</para>
		/// </summary>
		Scheduled = 270_100_001
	}
	public enum msdyncrm_socialchannel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 270,100,001</para>
		/// </summary>
		Facebook = 270_100_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Instagram</para>
		/// <para><strong>Value</strong>: 270,100,003</para>
		/// </summary>
		Instagram = 270_100_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn</para>
		/// <para><strong>Value</strong>: 270,100,002</para>
		/// </summary>
		LinkedIn = 270_100_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 270,100,000</para>
		/// </summary>
		Twitter = 270_100_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Draft = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: New</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		New = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Published = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_socialpost : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EntityImageId = "entityimageid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_accountlink = "msdyncrm_accountlink";
			public const string msdyncrm_Attachemnts = "msdyncrm_attachemnts";
			public const string msdyncrm_attachmentname = "msdyncrm_attachmentname";
			public const string msdyncrm_CalendarDisplayOptions = "msdyncrm_calendardisplayoptions";
			public const string msdyncrm_commentcount = "msdyncrm_commentcount";
			public const string msdyncrm_golivetime = "msdyncrm_golivetime";
			public const string msdyncrm_impressioncount = "msdyncrm_impressioncount";
			public const string msdyncrm_likecount = "msdyncrm_likecount";
			public const string msdyncrm_linkedInvisibility = "msdyncrm_linkedinvisibility";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_networkId = "msdyncrm_networkId";
			public const string msdyncrm_networkpages = "msdyncrm_networkpages";
			public const string msdyncrm_postas = "msdyncrm_postas";
			public const string msdyncrm_postattachment = "msdyncrm_postattachment";
			public const string msdyncrm_postingfrom = "msdyncrm_postingfrom";
			public const string msdyncrm_PostingPeriod = "msdyncrm_postingperiod";
			public const string msdyncrm_postinguser = "msdyncrm_postinguser";
			public const string msdyncrm_postinguserid = "msdyncrm_postinguserid";
			public const string msdyncrm_poststate = "msdyncrm_poststate";
			public const string msdyncrm_PostText = "msdyncrm_posttext";
			public const string msdyncrm_postUrl = "msdyncrm_postUrl";
			public const string msdyncrm_sentiment = "msdyncrm_sentiment";
			public const string msdyncrm_sentimentscore = "msdyncrm_sentimentscore";
			public const string msdyncrm_socialchannel = "msdyncrm_socialchannel";
			public const string msdyncrm_socialconfiguration = "msdyncrm_socialconfiguration";
			public const string msdyncrm_socialpostId = "msdyncrm_socialpostid";
			public const string msdyncrm_StartDate = "msdyncrm_startdate";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_socialpost";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11242;
		public const string EntityCollectionSchemaName = "msdyncrm_socialposts";
		public const string EntityDisplayCollectionName = "Social posts";
		public const string DisplayName = "Social post";
		public const string EntitySetName = "msdyncrm_socialposts";
		public const string EntityLogicalCollectionName = "msdyncrm_socialposts";
		public const string EntityPrimaryIdAttribute = "msdyncrm_socialpostid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_socialpost";
		[DebuggerNonUserCode()]
		public msdyncrm_socialpost()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_socialpost(Guid msdyncrm_socialpostId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_socialpostId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_socialpost(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_socialpost"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_socialpost(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_socialpost"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_socialpost(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_socialpost(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_socialpost"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_socialpost(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_socialpost(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_socialpost(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account link</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_accountlink
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_accountlink); }
			set { Entity.Attributes[Fields.msdyncrm_accountlink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachments</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_socialpost"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_Attachemnts
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_Attachemnts); }
			set { Entity.Attributes[Fields.msdyncrm_Attachemnts] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_attachmentname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_attachmentname); }
			set { Entity.Attributes[Fields.msdyncrm_attachmentname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calendar Display Options</para>
		/// <para><strong>Description</strong>: Set of properties describing how this entity will be rendered inside the CalendarControl</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_CalendarDisplayOptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_CalendarDisplayOptions); }
			set { Entity.Attributes[Fields.msdyncrm_CalendarDisplayOptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Comment count</para>
		/// <para><strong>Description</strong>: Comment count</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_commentcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_commentcount); }
			set { Entity.Attributes[Fields.msdyncrm_commentcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Go live time</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_golivetime
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_golivetime); }
			set { Entity.Attributes[Fields.msdyncrm_golivetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Impression count</para>
		/// <para><strong>Description</strong>: Impression count</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_impressioncount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_impressioncount); }
			set { Entity.Attributes[Fields.msdyncrm_impressioncount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Like count</para>
		/// <para><strong>Description</strong>: Like count</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_likecount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_likecount); }
			set { Entity.Attributes[Fields.msdyncrm_likecount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn visibility</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_linkedInvisibility"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_linkedInvisibility? msdyncrm_linkedInvisibility
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_linkedInvisibility);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_linkedInvisibility)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_linkedInvisibility] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_linkedInvisibility] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Network Id</para>
		/// <para><strong>Description</strong>: Id of the post on the social network</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_networkId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_networkId); }
			set { Entity.Attributes[Fields.msdyncrm_networkId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Network pages</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_networkpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_networkpages
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_networkpages); }
			set { Entity.Attributes[Fields.msdyncrm_networkpages] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PostAs</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_postas"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_postas? msdyncrm_postas
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_postas);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_postas)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_postas] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_postas] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post attachment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_postattachment
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_postattachment); }
			set { Entity.Attributes[Fields.msdyncrm_postattachment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Posting from</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_postingfrom"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_postingfrom? msdyncrm_postingfrom
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_postingfrom);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_postingfrom)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_postingfrom] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_postingfrom] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Posting period</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_PostingPeriod"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_PostingPeriod? msdyncrm_PostingPeriod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_PostingPeriod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_PostingPeriod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_PostingPeriod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_PostingPeriod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Posting user</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_postinguser
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_postinguser); }
			set { Entity.Attributes[Fields.msdyncrm_postinguser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Posting user ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_postinguserid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_postinguserid); }
			set { Entity.Attributes[Fields.msdyncrm_postinguserid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post state</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_poststate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_poststate.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_poststate? msdyncrm_poststate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_poststate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_poststate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_poststate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_poststate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post text</para>
		/// <para><strong>Description</strong>: Text to be shown in a social post</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 63,206</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_PostText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_PostText); }
			set { Entity.Attributes[Fields.msdyncrm_PostText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Network Id</para>
		/// <para><strong>Description</strong>: Url of the post in social network</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_postUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_postUrl); }
			set { Entity.Attributes[Fields.msdyncrm_postUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sentiment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_sentiment
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_sentiment); }
			set { Entity.Attributes[Fields.msdyncrm_sentiment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sentiment score</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_sentimentscore
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_sentimentscore); }
			set { Entity.Attributes[Fields.msdyncrm_sentimentscore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Social channel</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_socialchannel"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_socialchannel? msdyncrm_socialchannel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_socialchannel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.msdyncrm_socialchannel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_socialchannel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_socialchannel] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Social media account</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_socialpostingconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_socialconfiguration
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_socialconfiguration); }
			set { Entity.Attributes[Fields.msdyncrm_socialconfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Social post</para>
		/// <para><strong>Description</strong>: Unique identifier for this entity</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_socialpostId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_socialpostId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Posted time</para>
		/// <para><strong>Description</strong>: Date on which the social post will be published</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_StartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_StartDate); }
			set { Entity.Attributes[Fields.msdyncrm_StartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Indicates the business unit that owns this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Indicates the person who owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the social post</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the social post</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_socialpostOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}