//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.MultiEntitySearchEntitiesOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class MultiEntitySearchEntities : EntityBase
	{
		public struct Fields
		{
			public const string EntityName = "entityname";
			public const string EntityOrder = "entityorder";
			public const string MultiEntitySearchEntityId = "multientitysearchentityid";
			public const string MultiEntitySearchId = "multientitysearchid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "multientitysearchentities";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9911;

		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(Guid MultiEntitySearchEntitiesId)
		{
			Entity = new Entity(EntityLogicalName, MultiEntitySearchEntitiesId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Logical entity name of the entity participating in the multi entity search.</para>
		/// <para>ReadOnly - String - MaxLength: 128</para>
		/// <para>Entity Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
		}

		/// <summary>
		/// <para>Order of the entity in the result collection.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Entity Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? EntityOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.EntityOrder); }
		}

		/// <summary>
		/// <para>Shows the entity used for the multiple entity search.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? MultiEntitySearchEntityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.MultiEntitySearchEntityId); }
		}

		/// <summary>
		/// <para>Shows the ID of the multiple entity search.</para>
		/// <para>ReadOnly - Lookup to multientitysearch</para>
		/// <para>MultiEntitySearchId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MultiEntitySearchId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MultiEntitySearchId); }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
