//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SolutionHistoryDataOptionSets
{
	public enum Operation
	{
		/// <summary>
		/// Export = 2
		/// </summary>
		Export = 2,
		/// <summary>
		/// Import = 0
		/// </summary>
		Import = 0,
		/// <summary>
		/// Uninstall = 1
		/// </summary>
		Uninstall = 1
	}

	public enum Status
	{
		/// <summary>
		/// End = 1
		/// </summary>
		End = 1,
		/// <summary>
		/// Start = 0
		/// </summary>
		Start = 0
	}

	public enum SubOperation
	{
		/// <summary>
		/// Delete = 4
		/// </summary>
		Delete = 4,
		/// <summary>
		/// New = 1
		/// </summary>
		New = 1,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Update = 3
		/// </summary>
		Update = 3,
		/// <summary>
		/// Upgrade = 2
		/// </summary>
		Upgrade = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SolutionHistoryData : EntityBase
	{
		public struct Fields
		{
			public const string ActivityId = "activityid";
			public const string CorrelationId = "correlationid";
			public const string EndTime = "endtime";
			public const string ErrorCode = "errorcode";
			public const string ExceptionMessage = "exceptionmessage";
			public const string ExceptionStack = "exceptionstack";
			public const string IsManaged = "ismanaged";
			public const string IsMicrosoftPublisher = "ismicrosoftpublisher";
			public const string IsOverwriteCustomizations = "isoverwritecustomizations";
			public const string IsPatch = "ispatch";
			public const string Operation = "operation";
			public const string PackageName = "packagename";
			public const string PackageVersion = "packageversion";
			public const string PublisherName = "publishername";
			public const string Result = "result";
			public const string SolutionHistoryDataId = "solutionhistorydataid";
			public const string SolutionId = "solutionid";
			public const string SolutionName = "solutionname";
			public const string SolutionVersion = "solutionversion";
			public const string StartTime = "starttime";
			public const string Status = "status";
			public const string SubOperation = "suboperation";
		}

		public const string EntityLogicalName = "solutionhistorydata";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9890;

		[DebuggerNonUserCode()]
		public SolutionHistoryData()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SolutionHistoryData(Guid SolutionHistoryDataId)
		{
			Entity = new Entity(EntityLogicalName, SolutionHistoryDataId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SolutionHistoryData(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SolutionHistoryData(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SolutionHistoryData(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SolutionHistoryData(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>The Activity Id.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>The Activity Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}

		/// <summary>
		/// <para>The Correlation Id.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>The Correlation Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CorrelationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CorrelationId); }
			set { Entity.Attributes[Fields.CorrelationId] = value; }
		}

		/// <summary>
		/// <para>DateTime of the end of the solution event.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}

		/// <summary>
		/// <para>The error code of the operation performed on the solution.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>ErrorCode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorCode); }
			set { Entity.Attributes[Fields.ErrorCode] = value; }
		}

		/// <summary>
		/// <para>The Exception Message.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>ExceptionMessage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExceptionMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExceptionMessage); }
			set { Entity.Attributes[Fields.ExceptionMessage] = value; }
		}

		/// <summary>
		/// <para>The Exception Stack.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>ExceptionStack</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExceptionStack
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExceptionStack); }
			set { Entity.Attributes[Fields.ExceptionStack] = value; }
		}

		/// <summary>
		/// <para>Is Solution Managed</para>
		/// <para>Boolean</para>
		/// <para>Is Solution Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
			set { Entity.Attributes[Fields.IsManaged] = value; }
		}

		/// <summary>
		/// <para>Is the solution published by a Microsoft publisher.</para>
		/// <para>Boolean</para>
		/// <para>Is Published by Microsoft</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMicrosoftPublisher
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMicrosoftPublisher); }
			set { Entity.Attributes[Fields.IsMicrosoftPublisher] = value; }
		}

		/// <summary>
		/// <para>Does the event overwrite customizations.</para>
		/// <para>Boolean</para>
		/// <para>Is Overwrite Customizations</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOverwriteCustomizations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOverwriteCustomizations); }
			set { Entity.Attributes[Fields.IsOverwriteCustomizations] = value; }
		}

		/// <summary>
		/// <para>Is Solution Patch</para>
		/// <para>Boolean</para>
		/// <para>Is Solution Patch</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPatch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPatch); }
			set { Entity.Attributes[Fields.IsPatch] = value; }
		}

		/// <summary>
		/// <para>The operation performed on the solution.</para>
		/// <para>Picklist</para>
		/// <para>Operation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SolutionHistoryDataOptionSets.Operation? Operation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Operation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SolutionHistoryDataOptionSets.Operation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Operation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Operation] = null;
			}
		}

		/// <summary>
		/// <para>Name of the package.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>PackageName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PackageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PackageName); }
			set { Entity.Attributes[Fields.PackageName] = value; }
		}

		/// <summary>
		/// <para>Version of the package.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>PackageVersion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PackageVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.PackageVersion); }
			set { Entity.Attributes[Fields.PackageVersion] = value; }
		}

		/// <summary>
		/// <para>Name of the solution&apos;s publisher.</para>
		/// <para>String - MaxLength: 512</para>
		/// <para>PublisherName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PublisherName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PublisherName); }
			set { Entity.Attributes[Fields.PublisherName] = value; }
		}

		/// <summary>
		/// <para>The result of the operation performed on the solution.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1</para>
		/// <para>Result</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Result
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Result); }
			set { Entity.Attributes[Fields.Result] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>SolutionHistoryDataId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SolutionHistoryDataId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SolutionHistoryDataId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The Solution.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>The Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
			set { Entity.Attributes[Fields.SolutionId] = value; }
		}

		/// <summary>
		/// <para>Name of the solution.</para>
		/// <para>String - MaxLength: 65</para>
		/// <para>SolutionName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionName); }
			set { Entity.Attributes[Fields.SolutionName] = value; }
		}

		/// <summary>
		/// <para>The Version of the Solution.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>SolutionVersion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionVersion); }
			set { Entity.Attributes[Fields.SolutionVersion] = value; }
		}

		/// <summary>
		/// <para>DateTime of the start of the solution event.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}

		/// <summary>
		/// <para>The status of the operation performed on the solution.</para>
		/// <para>Picklist</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SolutionHistoryDataOptionSets.Status? Status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SolutionHistoryDataOptionSets.Status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Status] = null;
			}
		}

		/// <summary>
		/// <para>The suboperation performed on the solution.</para>
		/// <para>Picklist</para>
		/// <para>SubOperation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SolutionHistoryDataOptionSets.SubOperation? SubOperation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SubOperation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SolutionHistoryDataOptionSets.SubOperation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SubOperation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SubOperation] = null;
			}
		}
	}
}
