//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets
{
	public enum msdyn_convertedtomanualfrom
	{
		/// <summary>
		/// Auto action = 4
		/// </summary>
		Auto_action = 4,
		/// <summary>
		/// Automated Email = 3
		/// </summary>
		Automated_Email = 3,
		/// <summary>
		/// Email = 4202
		/// </summary>
		Email = 4202,
		/// <summary>
		/// LinkedIn action = 5
		/// </summary>
		LinkedIn_action = 5,
		/// <summary>
		/// Phone call = 4210
		/// </summary>
		Phone_call = 4210,
		/// <summary>
		/// Simple Condition = 1
		/// </summary>
		Simple_Condition = 1,
		/// <summary>
		/// Task = 4212
		/// </summary>
		Task = 4212,
		/// <summary>
		/// Wait = 0
		/// </summary>
		Wait = 0
	}

	public enum msdyn_errorstate
	{
		/// <summary>
		/// Field update failed = 1
		/// </summary>
		Field_update_failed = 1,
		/// <summary>
		/// NA = 0
		/// </summary>
		NA = 0
	}

	public enum msdyn_subtype
	{
		/// <summary>
		/// Default = 0
		/// </summary>
		Default = 0,
		/// <summary>
		/// LinkedInConnect = 3
		/// </summary>
		LinkedInConnect = 3,
		/// <summary>
		/// LinkedInGetIntroduced = 2
		/// </summary>
		LinkedInGetIntroduced = 2,
		/// <summary>
		/// LinkedInMail = 4
		/// </summary>
		LinkedInMail = 4,
		/// <summary>
		/// LinkedInResearch = 1
		/// </summary>
		LinkedInResearch = 1
	}

	public enum msdyn_type
	{
		/// <summary>
		/// Auto action = 4
		/// </summary>
		Auto_action = 4,
		/// <summary>
		/// Automated Email = 3
		/// </summary>
		Automated_Email = 3,
		/// <summary>
		/// Email = 4202
		/// </summary>
		Email = 4202,
		/// <summary>
		/// LinkedIn action = 5
		/// </summary>
		LinkedIn_action = 5,
		/// <summary>
		/// Phone call = 4210
		/// </summary>
		Phone_call = 4210,
		/// <summary>
		/// Simple Condition = 1
		/// </summary>
		Simple_Condition = 1,
		/// <summary>
		/// Task = 4212
		/// </summary>
		Task = 4212,
		/// <summary>
		/// Wait = 0
		/// </summary>
		Wait = 0
	}

	public enum msdyn_waitstate
	{
		/// <summary>
		/// NA = 0
		/// </summary>
		NA = 0,
		/// <summary>
		/// Skipped = 2
		/// </summary>
		Skipped = 2,
		/// <summary>
		/// Waiting = 1
		/// </summary>
		Waiting = 1,
		/// <summary>
		/// Waiting for update = 3
		/// </summary>
		Waiting_for_update = 3
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Cancelled = 4
		/// </summary>
		Cancelled = 4,
		/// <summary>
		/// Completed = 2
		/// </summary>
		Completed = 2,
		/// <summary>
		/// Open = 1
		/// </summary>
		Open = 1,
		/// <summary>
		/// Skipped = 3
		/// </summary>
		Skipped = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sequencetargetstep : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_completedon = "msdyn_completedon";
			[System.Obsolete("Deprecated from version: 9.2.0.0")]
			public const string msdyn_convertedtomanualfrom = "msdyn_convertedtomanualfrom";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_duetime = "msdyn_duetime";
			public const string msdyn_errorstate = "msdyn_errorstate";
			public const string msdyn_linkedactivityid = "msdyn_linkedactivityid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_operationparameter = "msdyn_operationparameter";
			public const string msdyn_sequenceduetime = "msdyn_sequenceduetime";
			public const string msdyn_sequencestepId = "msdyn_sequencestepid";
			public const string msdyn_sequencetarget = "msdyn_sequencetarget";
			public const string msdyn_sequencetargetstepId = "msdyn_sequencetargetstepid";
			public const string msdyn_snoozecount = "msdyn_snoozecount";
			public const string msdyn_subtype = "msdyn_subtype";
			public const string msdyn_type = "msdyn_type";
			public const string msdyn_waitstate = "msdyn_waitstate";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_sequencetargetstep";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10292;

		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(Guid msdyn_sequencetargetstepId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sequencetargetstepId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was marked completed.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_completedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_completedon); }
			set { Entity.Attributes[Fields.msdyn_completedon] = value; }
		}

		/// <summary>
		/// <para>Shows which msdyn_sequencestep_type this was before it was converted to current step type</para>
		/// <para>Picklist</para>
		/// <para>Converted To Manual From</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.2.0.0")]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_convertedtomanualfrom? msdyn_convertedtomanualfrom
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_convertedtomanualfrom);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_convertedtomanualfrom)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_convertedtomanualfrom] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_convertedtomanualfrom] = null;
			}
		}

		/// <summary>
		/// <para>Description for Sequence target step</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>Actual due time for Sequence target step</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Due time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_duetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_duetime); }
			set { Entity.Attributes[Fields.msdyn_duetime] = value; }
		}

		/// <summary>
		/// <para>Select the error state for sequence step</para>
		/// <para>Picklist</para>
		/// <para>Error state</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_errorstate? msdyn_errorstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_errorstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_errorstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_errorstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_errorstate] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the activity linked to the sequence step</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Linked activity id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_linkedactivityid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_linkedactivityid); }
			set { Entity.Attributes[Fields.msdyn_linkedactivityid] = value; }
		}

		/// <summary>
		/// <para>The name of the Sequence Target step entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Parameter for operation in Sequence target step</para>
		/// <para>String - MaxLength: 400</para>
		/// <para>Operation Parameter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_operationparameter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_operationparameter); }
			set { Entity.Attributes[Fields.msdyn_operationparameter] = value; }
		}

		/// <summary>
		/// <para>Sequence proposed due time for Sequence target step</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Sequence due time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_sequenceduetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_sequenceduetime); }
			set { Entity.Attributes[Fields.msdyn_sequenceduetime] = value; }
		}

		/// <summary>
		/// <para>Unique Identifier for step in Sequence entity</para>
		/// <para>Required - Uniqueidentifier</para>
		/// <para>Sequence Step Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_sequencestepId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_sequencestepId); }
			set { Entity.Attributes[Fields.msdyn_sequencestepId] = value; }
		}

		/// <summary>
		/// <para>Related Sequence Target</para>
		/// <para>Required - Lookup to msdyn_sequencetarget</para>
		/// <para>Sequence Target</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_sequencetarget
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_sequencetarget); }
			set { Entity.Attributes[Fields.msdyn_sequencetarget] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity Sequence Target Step</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Sequence Target Step</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sequencetargetstepId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sequencetargetstepId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Number of times sequence step is snoozed.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 10,000</para>
		/// <para>Snooze count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_snoozecount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_snoozecount); }
			set { Entity.Attributes[Fields.msdyn_snoozecount] = value; }
		}

		/// <summary>
		/// <para>Shows the sub type of sequence target step</para>
		/// <para>Picklist</para>
		/// <para>Sequence Target Sub Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_subtype? msdyn_subtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_subtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_subtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_subtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_subtype] = null;
			}
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_type? msdyn_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_type] = null;
			}
		}

		/// <summary>
		/// <para>Select whether wait step is pending or skipped</para>
		/// <para>Required - Picklist</para>
		/// <para>Wait state</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_waitstate? msdyn_waitstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_waitstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_waitstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_waitstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_waitstate] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Sequence Target Step</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Sequence Target Step</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
