//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum EntityPickList
	{
		/// <summary>
		/// No = 1
		/// </summary>
		No = 1,
		/// <summary>
		/// Yes = 2
		/// </summary>
		Yes = 2
	}

	public enum FieldPickList
	{
		/// <summary>
		/// No = 1
		/// </summary>
		No = 1,
		/// <summary>
		/// Yes = 2
		/// </summary>
		Yes = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TextAnalyticsEntityMapping : EntityBase
	{
		public struct Fields
		{
			public const string AdvancedSimilarityRuleId = "advancedsimilarityruleid";
			public const string ComponentState = "componentstate";
			public const string Entity = "entity";
			public const string EntityDisplayName = "entitydisplayname";
			public const string EntityPickList = "entitypicklist";
			public const string Field = "field";
			public const string FieldDisplayName = "fielddisplayname";
			public const string FieldPickList = "fieldpicklist";
			public const string IsManaged = "ismanaged";
			public const string IsTextMatchMapping = "istextmatchmapping";
			public const string KnowledgeSearchModelId = "knowledgesearchmodelid";
			public const string ModelType = "modeltype";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string RelationshipName = "relationshipname";
			public const string SimilarityRuleId = "similarityruleid";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TextAnalyticsEntityMappingId = "textanalyticsentitymappingid";
			public const string TextAnalyticsEntityMappingIdUnique = "textanalyticsentitymappingidunique";
			public const string TopicModelConfigurationId = "topicmodelconfigurationid";
		}

		public const string EntityLogicalName = "textanalyticsentitymapping";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9945;

		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(Guid TextAnalyticsEntityMappingId)
		{
			Entity = new Entity(EntityLogicalName, TextAnalyticsEntityMappingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Advanced Similarity RuleId associated with entity mapping.</para>
		/// <para>Required - Lookup to incident</para>
		/// <para>Advanced Similarity RuleId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AdvancedSimilarityRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AdvancedSimilarityRuleId); }
			set { Entity.Attributes[Fields.AdvancedSimilarityRuleId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Entity</para>
		/// <para>Required - String - MaxLength: 50</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity); }
			set { Entity.Attributes[Fields.Entity] = value; }
		}

		/// <summary>
		/// <para>Entity Display Name</para>
		/// <para>Required - String - MaxLength: 50</para>
		/// <para>Entity Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityDisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityDisplayName); }
			set { Entity.Attributes[Fields.EntityDisplayName] = value; }
		}

		/// <summary>
		/// <para>Select Entity</para>
		/// <para>Picklist</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.EntityPickList? EntityPickList
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EntityPickList);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.EntityPickList)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EntityPickList] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EntityPickList] = null;
			}
		}

		/// <summary>
		/// <para>Field</para>
		/// <para>Required - String - MaxLength: 50</para>
		/// <para>Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Field
		{
			get { return Entity.GetAttributeValue<string>(Fields.Field); }
			set { Entity.Attributes[Fields.Field] = value; }
		}

		/// <summary>
		/// <para>Field Display Name</para>
		/// <para>Required - String - MaxLength: 50</para>
		/// <para>Field Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FieldDisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FieldDisplayName); }
			set { Entity.Attributes[Fields.FieldDisplayName] = value; }
		}

		/// <summary>
		/// <para>Select Field</para>
		/// <para>Picklist</para>
		/// <para>Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.FieldPickList? FieldPickList
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FieldPickList);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.FieldPickList)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FieldPickList] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FieldPickList] = null;
			}
		}

		/// <summary>
		/// <para>Is Manageed</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Specify if the mapping is for text match or exact match</para>
		/// <para>Boolean</para>
		/// <para>Criteria</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTextMatchMapping
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTextMatchMapping); }
			set { Entity.Attributes[Fields.IsTextMatchMapping] = value; }
		}

		/// <summary>
		/// <para>Knowledge Search Model associated with entity mapping.</para>
		/// <para>Required - Lookup to incident</para>
		/// <para>Knowledge Search Model Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference KnowledgeSearchModelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.KnowledgeSearchModelId); }
			set { Entity.Attributes[Fields.KnowledgeSearchModelId] = value; }
		}

		/// <summary>
		/// <para>Model Type.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Model Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ModelType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ModelType); }
			set { Entity.Attributes[Fields.ModelType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the Text Analytics Entity Mapping.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Relationship Name</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Relationship Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelationshipName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelationshipName); }
			set { Entity.Attributes[Fields.RelationshipName] = value; }
		}

		/// <summary>
		/// <para>Similarity Rule associated with entity mapping.</para>
		/// <para>Required - Lookup to similarityrule</para>
		/// <para>Similarity Rule Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SimilarityRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SimilarityRuleId); }
			set { Entity.Attributes[Fields.SimilarityRuleId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Text Analytics Entity Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TextAnalyticsEntityMappingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TextAnalyticsEntityMappingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the Text Analytics Entity Mapping</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Text Analytics Entity Mapping Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? TextAnalyticsEntityMappingIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.TextAnalyticsEntityMappingIdUnique); }
		}

		/// <summary>
		/// <para>Topic Model Configuration associated with entity mapping.</para>
		/// <para>Required - Lookup to topicmodelconfiguration</para>
		/// <para>Topic Model Configuration Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TopicModelConfigurationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TopicModelConfigurationId); }
			set { Entity.Attributes[Fields.TopicModelConfigurationId] = value; }
		}
	}
}
