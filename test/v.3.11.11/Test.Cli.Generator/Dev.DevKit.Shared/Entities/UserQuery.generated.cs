//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.UserQueryOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// All = 3
		/// </summary>
		All = 3,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class UserQuery : EntityBase
	{
		public struct Fields
		{
			public const string AdvancedGroupBy = "advancedgroupby";
			public const string ColumnSetXml = "columnsetxml";
			public const string ConditionalFormatting = "conditionalformatting";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string FetchXml = "fetchxml";
			public const string LayoutJson = "layoutjson";
			public const string LayoutXml = "layoutxml";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OfflineSqlQuery = "offlinesqlquery";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentQueryId = "parentqueryid";
			public const string QueryType = "querytype";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string UserQueryId = "userqueryid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "userquery";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4230;

		[DebuggerNonUserCode()]
		public UserQuery()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserQuery(Guid UserQueryId)
		{
			Entity = new Entity(EntityLogicalName, UserQueryId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserQuery(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserQuery(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserQuery(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserQuery(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Type the column name that will be used to group the results from the data collected across multiple records from a user view.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Advanced Group By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdvancedGroupBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdvancedGroupBy); }
			set { Entity.Attributes[Fields.AdvancedGroupBy] = value; }
		}

		/// <summary>
		/// <para>Shows the columns and sorting criteria for the saved view, stored in XML format.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Column Set XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ColumnSetXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ColumnSetXml); }
			set { Entity.Attributes[Fields.ColumnSetXml] = value; }
		}

		/// <summary>
		/// <para>Type information about how the items in the user view are formatted.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>User Group By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConditionalFormatting
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConditionalFormatting); }
			set { Entity.Attributes[Fields.ConditionalFormatting] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type additional information to describe the saved view, such as the filter criteria or intended results set.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Contains the Fetch XML query that defines the entities and attributes included in the saved view.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Fetch XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FetchXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.FetchXml); }
			set { Entity.Attributes[Fields.FetchXml] = value; }
		}

		/// <summary>
		/// <para>Layout data in JSON format.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Layout data in JSON format.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LayoutJson
		{
			get { return Entity.GetAttributeValue<string>(Fields.LayoutJson); }
			set { Entity.Attributes[Fields.LayoutJson] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Layout XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LayoutXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.LayoutXml); }
			set { Entity.Attributes[Fields.LayoutXml] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Modified</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a descriptive name for the saved view.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>String specifying the corresponding sql query for the fetch xml specified for offline use.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Offline SQL Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OfflineSqlQuery
		{
			get { return Entity.GetAttributeValue<string>(Fields.OfflineSqlQuery); }
			set { Entity.Attributes[Fields.OfflineSqlQuery] = value; }
		}

		/// <summary>
		/// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Shows the business unit that the record owner belongs to.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns this saved view.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns this saved view.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose the ID of the saved query that the record was created from.</para>
		/// <para>Lookup to </para>
		/// <para>Parent Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentQueryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentQueryId); }
			set { Entity.Attributes[Fields.ParentQueryId] = value; }
		}

		/// <summary>
		/// <para>Shows the code for the query type to indicate whether the saved view is an address book filter, advanced search, or other view.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Query Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QueryType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QueryType); }
			set { Entity.Attributes[Fields.QueryType] = value; }
		}

		/// <summary>
		/// <para>Shows whether the saved view is active or inactive.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UserQueryOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UserQueryOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the item&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UserQueryOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UserQueryOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the saved view.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>User Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid UserQueryId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.UserQueryId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Version number of the saved view.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
