//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets
{
	public enum msdyn_channel
	{
		/// <summary>
		/// Apple Messages for Business = 192450000
		/// </summary>
		Apple_Messages_for_Business = 192450000,
		/// <summary>
		/// Co-browse = 192390000
		/// </summary>
		Co_browse = 192390000,
		/// <summary>
		/// Custom = 192350002
		/// </summary>
		Custom = 192350002,
		/// <summary>
		/// Entity Records = 192350000
		/// </summary>
		Entity_Records = 192350000,
		/// <summary>
		/// Facebook = 192330000
		/// </summary>
		Facebook = 192330000,
		/// <summary>
		/// LINE = 192310000
		/// </summary>
		LINE = 192310000,
		/// <summary>
		/// Live chat = 192360000
		/// </summary>
		Live_chat = 192360000,
		/// <summary>
		/// Microsoft Teams = 19241000
		/// </summary>
		Microsoft_Teams = 19241000,
		/// <summary>
		/// Screen sharing = 192400000
		/// </summary>
		Screen_sharing = 192400000,
		/// <summary>
		/// SMS = 192340000
		/// </summary>
		SMS = 192340000,
		/// <summary>
		/// Twitter = 192350001
		/// </summary>
		Twitter = 192350001,
		/// <summary>
		/// Video = 192380000
		/// </summary>
		Video = 192380000,
		/// <summary>
		/// Voice = 192370000
		/// </summary>
		Voice = 192370000,
		/// <summary>
		/// WeChat = 192320000
		/// </summary>
		WeChat = 192320000,
		/// <summary>
		/// WhatsApp = 192300000
		/// </summary>
		WhatsApp = 192300000
	}

	public enum msdyn_customersentimentlabel
	{
		/// <summary>
		/// N/A = 0
		/// </summary>
		NA = 0,
		/// <summary>
		/// Negative = 8
		/// </summary>
		Negative = 8,
		/// <summary>
		/// Neutral = 10
		/// </summary>
		Neutral = 10,
		/// <summary>
		/// Positive = 12
		/// </summary>
		Positive = 12,
		/// <summary>
		/// Slightly negative = 9
		/// </summary>
		Slightly_negative = 9,
		/// <summary>
		/// Slightly positive = 11
		/// </summary>
		Slightly_positive = 11,
		/// <summary>
		/// Very negative = 7
		/// </summary>
		Very_negative = 7,
		/// <summary>
		/// Very positive = 13
		/// </summary>
		Very_positive = 13
	}

	public enum msdyn_statecode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Closed = 3
		/// </summary>
		Closed = 3,
		/// <summary>
		/// Open = 0
		/// </summary>
		Open = 0,
		/// <summary>
		/// Waiting = 2
		/// </summary>
		Waiting = 2,
		/// <summary>
		/// Wrap-up = 4
		/// </summary>
		Wrap_up = 4
	}

	public enum msdyn_statuscode
	{
		/// <summary>
		/// Active = 2
		/// </summary>
		Active = 2,
		/// <summary>
		/// Closed = 4
		/// </summary>
		Closed = 4,
		/// <summary>
		/// Open = 1
		/// </summary>
		Open = 1,
		/// <summary>
		/// Waiting = 3
		/// </summary>
		Waiting = 3,
		/// <summary>
		/// Wrap-up = 5
		/// </summary>
		Wrap_up = 5
	}

	public enum msdyn_workstreamworkdistributionmode
	{
		/// <summary>
		/// Pick = 192350001
		/// </summary>
		Pick = 192350001,
		/// <summary>
		/// Push = 192350000
		/// </summary>
		Push = 192350000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Closed = 3
		/// </summary>
		Closed = 3,
		/// <summary>
		/// Open = 0
		/// </summary>
		Open = 0,
		/// <summary>
		/// Waiting = 2
		/// </summary>
		Waiting = 2,
		/// <summary>
		/// Wrap-up = 4
		/// </summary>
		Wrap_up = 4
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 2
		/// </summary>
		Active = 2,
		/// <summary>
		/// Closed = 4
		/// </summary>
		Closed = 4,
		/// <summary>
		/// Open = 1
		/// </summary>
		Open = 1,
		/// <summary>
		/// Waiting = 3
		/// </summary>
		Waiting = 3,
		/// <summary>
		/// Wrap-up = 5
		/// </summary>
		Wrap_up = 5
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_liveconversation : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_activeagentassignedon = "msdyn_activeagentassignedon";
			public const string msdyn_activeagentid = "msdyn_activeagentid";
			public const string msdyn_cdsqueueid = "msdyn_cdsqueueid";
			public const string msdyn_channel = "msdyn_channel";
			public const string msdyn_closedon = "msdyn_closedon";
			public const string msdyn_createdon = "msdyn_createdon";
			public const string msdyn_customer = "msdyn_customer";
			public const string msdyn_customersentimentlabel = "msdyn_customersentimentlabel";
			public const string msdyn_escalationcount = "msdyn_escalationcount";
			public const string msdyn_initiatedon = "msdyn_initiatedon";
			public const string msdyn_liveconversationId = "msdyn_liveconversationid";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_modifiedon = "msdyn_modifiedon";
			public const string msdyn_oclastsessionid = "msdyn_oclastsessionid";
			public const string msdyn_queueid = "msdyn_queueid";
			public const string msdyn_startedon = "msdyn_startedon";
			public const string msdyn_statecode = "msdyn_statecode";
			public const string msdyn_statuscode = "msdyn_statuscode";
			public const string msdyn_statusupdatedon = "msdyn_statusupdatedon";
			public const string msdyn_subject = "msdyn_subject";
			public const string msdyn_title = "msdyn_title";
			public const string msdyn_transfercount = "msdyn_transfercount";
			public const string msdyn_workstreamworkdistributionmode = "msdyn_workstreamworkdistributionmode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_liveconversation";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10733;

		[DebuggerNonUserCode()]
		public msdyn_liveconversation()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveconversation(Guid msdyn_liveconversationId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_liveconversationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveconversation(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveconversation(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveconversation(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveconversation(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the Ongoing Conversation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the Ongoing Conversation was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Date Created</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the Ongoing Conversation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of user who last modified the Ongoing Conversation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when Ongoing Conversation was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Updated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the Ongoing Conversation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time when last agent was assigned to the conversation</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Active Agent Assigned On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_activeagentassignedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_activeagentassignedon); }
			set { Entity.Attributes[Fields.msdyn_activeagentassignedon] = value; }
		}

		/// <summary>
		/// <para>Last agent assigned to the conversation</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Active Agent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_activeagentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_activeagentid); }
			set { Entity.Attributes[Fields.msdyn_activeagentid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Queue associated with Conversation.</para>
		/// <para>Lookup to queue</para>
		/// <para>Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_cdsqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_cdsqueueid); }
			set { Entity.Attributes[Fields.msdyn_cdsqueueid] = value; }
		}

		/// <summary>
		/// <para>The channel(s) in the conversation.</para>
		/// <para>MultiSelectPicklist</para>
		/// <para>Channel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_channel> msdyn_channel
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_channel>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_channel);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_channel)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_channel] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_channel] = data;
				}
			}
		}

		/// <summary>
		/// <para>Date and time when conversation was closed</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Closed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_closedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_closedon); }
			set { Entity.Attributes[Fields.msdyn_closedon] = value; }
		}

		/// <summary>
		/// <para>Date and time when conversation was created</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_createdonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_createdon); }
			set { Entity.Attributes[Fields.msdyn_createdon] = value; }
		}

		/// <summary>
		/// <para>Customer associated to the conversation</para>
		/// <para>Lookup to account, contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_customer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_customer); }
			set { Entity.Attributes[Fields.msdyn_customer] = value; }
		}

		/// <summary>
		/// <para>Customer Sentiment Label powered by Sentiment Service</para>
		/// <para>Picklist</para>
		/// <para>Customer Sentiment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_customersentimentlabel? msdyn_customersentimentlabel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_customersentimentlabel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_customersentimentlabel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_customersentimentlabel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_customersentimentlabel] = null;
			}
		}

		/// <summary>
		/// <para>Number of times conversation was escalated to Supervisor i.e. transferred to Supervisor</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Escalation Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_escalationcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_escalationcount); }
			set { Entity.Attributes[Fields.msdyn_escalationcount] = value; }
		}

		/// <summary>
		/// <para>Time when conversation was initiated</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Initiated On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_initiatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_initiatedon); }
			set { Entity.Attributes[Fields.msdyn_initiatedon] = value; }
		}

		/// <summary>
		/// <para>Id of this ongoing conversation record</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>OngoingConversationId (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_liveconversationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_liveconversationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Work stream associated to the conversation</para>
		/// <para>Lookup to msdyn_liveworkstream</para>
		/// <para>Work stream</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}

		/// <summary>
		/// <para>Date and time when conversation was last modified</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_modifiedon); }
			set { Entity.Attributes[Fields.msdyn_modifiedon] = value; }
		}

		/// <summary>
		/// <para>Last agent session</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Last session Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_oclastsessionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_oclastsessionid); }
			set { Entity.Attributes[Fields.msdyn_oclastsessionid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for msdyn_omnichannelqueue associated with Conversation</para>
		/// <para>Lookup to msdyn_omnichannelqueue</para>
		/// <para>Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_queueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_queueid); }
			set { Entity.Attributes[Fields.msdyn_queueid] = value; }
		}

		/// <summary>
		/// <para>Date and time when conversation was started</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startedon); }
			set { Entity.Attributes[Fields.msdyn_startedon] = value; }
		}

		/// <summary>
		/// <para>State of the conversation record</para>
		/// <para>Picklist</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statecode? msdyn_statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of Ongoing conversation record</para>
		/// <para>Picklist</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statuscode? msdyn_statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_statuscode] = null;
			}
		}

		/// <summary>
		/// <para>Date and time when conversation status was last modified</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Status Updated On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_statusupdatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_statusupdatedon); }
			set { Entity.Attributes[Fields.msdyn_statusupdatedon] = value; }
		}

		/// <summary>
		/// <para>Subject associated with the conversation record</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Subject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_subject); }
			set { Entity.Attributes[Fields.msdyn_subject] = value; }
		}

		/// <summary>
		/// <para>Conversation Title</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_title
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_title); }
			set { Entity.Attributes[Fields.msdyn_title] = value; }
		}

		/// <summary>
		/// <para>Number of times the conversation was transferred</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Transfer Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_transfercount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_transfercount); }
			set { Entity.Attributes[Fields.msdyn_transfercount] = value; }
		}

		/// <summary>
		/// <para>Work distribution mode of the associated work stream</para>
		/// <para>Picklist</para>
		/// <para>Work distribution mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_workstreamworkdistributionmode? msdyn_workstreamworkdistributionmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_workstreamworkdistributionmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_workstreamworkdistributionmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_workstreamworkdistributionmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_workstreamworkdistributionmode] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the conversation record.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the Ongoing Conversation.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team that owns the Ongoing Conversation.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user that owns the Ongoing Conversation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Ongoing conversation record</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of Ongoing conversation record</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
