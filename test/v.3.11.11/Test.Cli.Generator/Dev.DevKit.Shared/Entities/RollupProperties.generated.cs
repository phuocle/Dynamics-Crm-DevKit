//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets
{
	public enum AggregateType
	{
		/// <summary>
		/// Average = 2
		/// </summary>
		Average = 2,
		/// <summary>
		/// Count = 0
		/// </summary>
		Count = 0,
		/// <summary>
		/// Max = 4
		/// </summary>
		Max = 4,
		/// <summary>
		/// Min = 3
		/// </summary>
		Min = 3,
		/// <summary>
		/// Sum = 1
		/// </summary>
		Sum = 1
	}

	public enum InitialValueCalculationStatus
	{
		/// <summary>
		/// Completed = 3
		/// </summary>
		Completed = 3,
		/// <summary>
		/// Failed = 4
		/// </summary>
		Failed = 4,
		/// <summary>
		/// In Progress = 1
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// Paused = 2
		/// </summary>
		Paused = 2,
		/// <summary>
		/// Pending = 0
		/// </summary>
		Pending = 0
	}

	public enum StateCode
	{
		/// <summary>
		/// Invalid = 1
		/// </summary>
		Invalid = 1,
		/// <summary>
		/// Valid = 0
		/// </summary>
		Valid = 0
	}

	public enum StatusCode
	{
		/// <summary>
		/// Invalid = 2
		/// </summary>
		Invalid = 2,
		/// <summary>
		/// Valid = 1
		/// </summary>
		Valid = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RollupProperties : EntityBase
	{
		public struct Fields
		{
			public const string AggregateAttributeLogicalName = "aggregateattributelogicalname";
			public const string AggregateEntityLogicalName = "aggregateentitylogicalname";
			public const string AggregateEntityTypeCode = "aggregateentitytypecode";
			public const string AggregateFilterAttributes = "aggregatefilterattributes";
			public const string AggregateRelationshipName = "aggregaterelationshipname";
			public const string AggregateType = "aggregatetype";
			public const string AllowHierarchyOnSource = "allowhierarchyonsource";
			public const string BootstrapCurrentDepth = "bootstrapcurrentdepth";
			public const string BootstrapRetryCount = "bootstrapretrycount";
			public const string BootstrapRollupAsyncJobId = "bootstraprollupasyncjobid";
			public const string BootstrapStepNumber = "bootstrapstepnumber";
			public const string BootstrapTargetPointer = "bootstraptargetpointer";
			public const string DataType = "datatype";
			public const string IncrementalRollupAsyncJobId = "incrementalrollupasyncjobid";
			public const string InitialValueCalculationStatus = "initialvaluecalculationstatus";
			public const string IsActivityPartyIncluded = "isactivitypartyincluded";
			public const string LastCalculationTime = "lastcalculationtime";
			public const string RollupAttributeLogicalName = "rollupattributelogicalname";
			public const string RollupEntityBaseTableName = "rollupentitybasetablename";
			public const string RollupEntityLogicalName = "rollupentitylogicalname";
			public const string RollupEntityPrimaryKeyPhysicalName = "rollupentityprimarykeyphysicalname";
			public const string RollupEntityTypeCode = "rollupentitytypecode";
			public const string RollupFilterAttributes = "rollupfilterattributes";
			public const string RollupPropertiesId = "rolluppropertiesid";
			public const string RollupStateAttributePhysicalName = "rollupstateattributephysicalname";
			public const string SourceHierarchicalRelationshipName = "sourcehierarchicalrelationshipname";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "rollupproperties";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9510;

		[DebuggerNonUserCode()]
		public RollupProperties()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupProperties(Guid RollupPropertiesId)
		{
			Entity = new Entity(EntityLogicalName, RollupPropertiesId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupProperties(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupProperties(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupProperties(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupProperties(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Logical name of target attribute</para>
		/// <para>ReadOnly - String - MaxLength: 128</para>
		/// <para>Target attribute logical name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateAttributeLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateAttributeLogicalName); }
		}

		/// <summary>
		/// <para>Logical name of target entity</para>
		/// <para>ReadOnly - String - MaxLength: 128</para>
		/// <para>Target entity logical name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateEntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateEntityLogicalName); }
		}

		/// <summary>
		/// <para>Type code of aggregate entity</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Aggregate entity type code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AggregateEntityTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AggregateEntityTypeCode); }
		}

		/// <summary>
		/// <para>Filter criteria for target</para>
		/// <para>ReadOnly - String - MaxLength: 4000</para>
		/// <para>Target filter criteria</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateFilterAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateFilterAttributes); }
		}

		/// <summary>
		/// <para>Relationship name of the source-target relationship.</para>
		/// <para>ReadOnly - String - MaxLength: 4000</para>
		/// <para>Source-Target relationship name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateRelationshipName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateRelationshipName); }
		}

		/// <summary>
		/// <para>Type of aggregation to perform</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Rollup Aggregation Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType? AggregateType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AggregateType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType)value.Value;
			}
		}

		/// <summary>
		/// <para>Allow source entity to be hierarchical</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Allow Hierarchy on Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowHierarchyOnSource
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowHierarchyOnSource); }
		}

		/// <summary>
		/// <para>Depth used for bootstrap calculations</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Depth used for bootstrap calculations</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapCurrentDepth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapCurrentDepth); }
		}

		/// <summary>
		/// <para>Retry count for bootstrap</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Bootstrap Retry count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapRetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapRetryCount); }
		}

		/// <summary>
		/// <para>Unique identifier representing the mass calculate async job id.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Mass calculate async job id.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BootstrapRollupAsyncJobId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BootstrapRollupAsyncJobId); }
		}

		/// <summary>
		/// <para>Step number to start bootstrap execution</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Step number to start bootstrap execution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapStepNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapStepNumber); }
		}

		/// <summary>
		/// <para>Target pointer used for bootstrap calculations</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Target pointer used for bootstrap calculations</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapTargetPointer
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapTargetPointer); }
		}

		/// <summary>
		/// <para>Rollup field data type</para>
		/// <para>ReadOnly - String - MaxLength: 64</para>
		/// <para>Rollup field data type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DataType
		{
			get { return Entity.GetAttributeValue<string>(Fields.DataType); }
		}

		/// <summary>
		/// <para>Unique identifier representing the calculate entity async job id.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Calculate entity async job Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? IncrementalRollupAsyncJobId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.IncrementalRollupAsyncJobId); }
		}

		/// <summary>
		/// <para>Status of initial value calculation.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Initial Value Calculation Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus? InitialValueCalculationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialValueCalculationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus)value.Value;
			}
		}

		/// <summary>
		/// <para>Flag indicating whether Activity Party is included</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2</para>
		/// <para>Flag indicating whether Activity Party is included</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsActivityPartyIncluded
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsActivityPartyIncluded); }
		}

		/// <summary>
		/// <para>Last time when calculations were performed for this rollup field.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Calculation Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastCalculationTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastCalculationTime); }
		}

		/// <summary>
		/// <para>Logical name of source attribute</para>
		/// <para>ReadOnly - String - MaxLength: 128</para>
		/// <para>Source Attribute Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupAttributeLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupAttributeLogicalName); }
		}

		/// <summary>
		/// <para>Base Table Name Of Rollup Entity</para>
		/// <para>ReadOnly - String - MaxLength: 64</para>
		/// <para>Rollup Entity Base Table Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityBaseTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityBaseTableName); }
		}

		/// <summary>
		/// <para>Logical name of source entity</para>
		/// <para>ReadOnly - String - MaxLength: 128</para>
		/// <para>Source Entity Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityLogicalName); }
		}

		/// <summary>
		/// <para>Physical Name of Primary Key Of Rollup Entity</para>
		/// <para>ReadOnly - String - MaxLength: 64</para>
		/// <para>Rollup Entity Primary Key Physical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityPrimaryKeyPhysicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityPrimaryKeyPhysicalName); }
		}

		/// <summary>
		/// <para>Type code of rollup entity</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Rollup Entity Type Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RollupEntityTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RollupEntityTypeCode); }
		}

		/// <summary>
		/// <para>Filter criteria for source</para>
		/// <para>ReadOnly - String - MaxLength: 4000</para>
		/// <para>Source filter criteria</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupFilterAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupFilterAttributes); }
		}

		/// <summary>
		/// <para>Unique identifier of the current record.</para>
		/// <para>ReadOnly - Primary Key - Uniqueidentifier</para>
		/// <para>Rollup Properties Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid RollupPropertiesId
		{
			get { return Id; }
		}

		/// <summary>
		/// <para>Physical Name of Rollup State Attribute</para>
		/// <para>ReadOnly - String - MaxLength: 64</para>
		/// <para>Rollup State Attribute Physical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupStateAttributePhysicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupStateAttributePhysicalName); }
		}

		/// <summary>
		/// <para>Relationship name of the source hierarchical relationship</para>
		/// <para>ReadOnly - String - MaxLength: 4000</para>
		/// <para>Source hierarchical relationship name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceHierarchicalRelationshipName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceHierarchicalRelationshipName); }
		}

		/// <summary>
		/// <para>Status of the Rollup.</para>
		/// <para>ReadOnly - State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode)value.Value;
			}
		}

		/// <summary>
		/// <para>Additional information about status of the rollup properties.</para>
		/// <para>ReadOnly - Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StatusCode)value.Value;
			}
		}

		/// <summary>
		/// <para>Version number of rollup.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
