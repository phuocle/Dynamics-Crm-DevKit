//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msfp_questionOptionSets
{
	public enum msfp_choicetype
	{
		/// <summary>
		/// Multi choice = 647390001
		/// </summary>
		Multi_choice = 647390001,
		/// <summary>
		/// none = 647390002
		/// </summary>
		none = 647390002,
		/// <summary>
		/// Single choice = 647390000
		/// </summary>
		Single_choice = 647390000
	}

	public enum msfp_questiontype
	{
		/// <summary>
		/// Choice = 647390000
		/// </summary>
		Choice = 647390000,
		/// <summary>
		/// Date = 647390003
		/// </summary>
		Date = 647390003,
		/// <summary>
		/// Date and time = 647390010
		/// </summary>
		Date_and_time = 647390010,
		/// <summary>
		/// Drop-down = 647390011
		/// </summary>
		Drop_down = 647390011,
		/// <summary>
		/// File Upload = 647390008
		/// </summary>
		File_Upload = 647390008,
		/// <summary>
		/// MatrixChoice = 647390006
		/// </summary>
		MatrixChoice = 647390006,
		/// <summary>
		/// MatrixChoiceGroup = 647390005
		/// </summary>
		MatrixChoiceGroup = 647390005,
		/// <summary>
		/// NPS = 647390007
		/// </summary>
		NPS = 647390007,
		/// <summary>
		/// Number = 647390009
		/// </summary>
		Number = 647390009,
		/// <summary>
		/// Ranking = 647390004
		/// </summary>
		Ranking = 647390004,
		/// <summary>
		/// Rating = 647390002
		/// </summary>
		Rating = 647390002,
		/// <summary>
		/// Text = 647390001
		/// </summary>
		Text = 647390001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msfp_question : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msfp_choicetype = "msfp_choicetype";
			public const string msfp_correctanswer = "msfp_correctanswer";
			public const string msfp_imageproperties = "msfp_imageproperties";
			public const string msfp_Maximumrating = "msfp_maximumrating";
			public const string msfp_multiline = "msfp_multiline";
			public const string msfp_name = "msfp_name";
			public const string msfp_order = "msfp_order";
			public const string msfp_otherproperties = "msfp_otherproperties";
			public const string msfp_PermanentID = "msfp_permanentid";
			public const string msfp_questionchoices = "msfp_questionchoices";
			public const string msfp_questionId = "msfp_questionid";
			public const string msfp_questiontext = "msfp_questiontext";
			public const string msfp_questiontype = "msfp_questiontype";
			public const string msfp_responserequired = "msfp_responserequired";
			public const string msfp_sequence = "msfp_sequence";
			public const string msfp_sourceparentquestionidentifier = "msfp_sourceparentquestionidentifier";
			public const string msfp_Sourcequestionidentifier = "msfp_sourcequestionidentifier";
			public const string msfp_sourcesurveyidentifier = "msfp_sourcesurveyidentifier";
			public const string msfp_subtitle = "msfp_subtitle";
			public const string msfp_Survey = "msfp_survey";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msfp_question";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10336;

		[DebuggerNonUserCode()]
		public msfp_question()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_question(Guid msfp_questionId)
		{
			Entity = new Entity(EntityLogicalName, msfp_questionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_question(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_question(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_question(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_question(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows whether the question accepts single line or multiple lines of response.</para>
		/// <para>Picklist</para>
		/// <para>Choice question type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_choicetype? msfp_choicetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msfp_choicetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_choicetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msfp_choicetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msfp_choicetype] = null;
			}
		}

		/// <summary>
		/// <para>Stores the correct answer in case of quizzes.</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Correct answer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_correctanswer
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_correctanswer); }
			set { Entity.Attributes[Fields.msfp_correctanswer] = value; }
		}

		/// <summary>
		/// <para>Question image properties in JSON format.</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Image Properties</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_imageproperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_imageproperties); }
			set { Entity.Attributes[Fields.msfp_imageproperties] = value; }
		}

		/// <summary>
		/// <para>Stores maximum rating of rating question type</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum rating</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_Maximumrating
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_Maximumrating); }
			set { Entity.Attributes[Fields.msfp_Maximumrating] = value; }
		}

		/// <summary>
		/// <para>Shows if the text question is multiple lines or not</para>
		/// <para>Boolean</para>
		/// <para>Multiple lines</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msfp_multiline
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msfp_multiline); }
			set { Entity.Attributes[Fields.msfp_multiline] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_name); }
			set { Entity.Attributes[Fields.msfp_name] = value; }
		}

		/// <summary>
		/// <para>Order of the question in the survey.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msfp_order
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msfp_order); }
			set { Entity.Attributes[Fields.msfp_order] = value; }
		}

		/// <summary>
		/// <para>Stores other question properties in JSON format.</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Other properties</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_otherproperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_otherproperties); }
			set { Entity.Attributes[Fields.msfp_otherproperties] = value; }
		}

		/// <summary>
		/// <para>Permanent ID is auto-generated for a new survey question. For a copied survey, the ID is carried over from the original survey question.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Permanent ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_PermanentID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_PermanentID); }
			set { Entity.Attributes[Fields.msfp_PermanentID] = value; }
		}

		/// <summary>
		/// <para>Stores the list of answer options</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Question choices</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_questionchoices
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_questionchoices); }
			set { Entity.Attributes[Fields.msfp_questionchoices] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Question</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msfp_questionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msfp_questionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Text of the question in the survey.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Question text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_questiontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_questiontext); }
			set { Entity.Attributes[Fields.msfp_questiontext] = value; }
		}

		/// <summary>
		/// <para>Stores the type of question to display.</para>
		/// <para>Picklist</para>
		/// <para>Question type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_questiontype? msfp_questiontype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msfp_questiontype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_questiontype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msfp_questiontype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msfp_questiontype] = null;
			}
		}

		/// <summary>
		/// <para>Shows if the question is mandatory.</para>
		/// <para>Boolean</para>
		/// <para>Response required</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msfp_responserequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msfp_responserequired); }
			set { Entity.Attributes[Fields.msfp_responserequired] = value; }
		}

		/// <summary>
		/// <para>Order of the question in the survey.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Sequence</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_sequence
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_sequence); }
			set { Entity.Attributes[Fields.msfp_sequence] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the parent question in the source application.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Source parent question identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_sourceparentquestionidentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_sourceparentquestionidentifier); }
			set { Entity.Attributes[Fields.msfp_sourceparentquestionidentifier] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the question in the source application.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Source question identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_Sourcequestionidentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_Sourcequestionidentifier); }
			set { Entity.Attributes[Fields.msfp_Sourcequestionidentifier] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the survey in the source application.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Source survey identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_sourcesurveyidentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_sourcesurveyidentifier); }
			set { Entity.Attributes[Fields.msfp_sourcesurveyidentifier] = value; }
		}

		/// <summary>
		/// <para>Stores subtitle of a question.</para>
		/// <para>Memo - MaxLength: 50000</para>
		/// <para>Subtitle</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_subtitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_subtitle); }
			set { Entity.Attributes[Fields.msfp_subtitle] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the survey to which the question belongs.</para>
		/// <para>Lookup to msfp_survey</para>
		/// <para>Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msfp_Survey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msfp_Survey); }
			set { Entity.Attributes[Fields.msfp_Survey] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Question</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Question</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
