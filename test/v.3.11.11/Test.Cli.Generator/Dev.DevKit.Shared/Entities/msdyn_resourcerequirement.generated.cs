//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets
{
	public enum msdyn_allocationmethod
	{
		/// <summary>
		/// Distribute evenly = 192350003
		/// </summary>
		Distribute_evenly = 192350003,
		/// <summary>
		/// Front load = 192350005
		/// </summary>
		Front_load = 192350005,
		/// <summary>
		/// Full capacity = 192350001
		/// </summary>
		Full_capacity = 192350001,
		/// <summary>
		/// None = 192350000
		/// </summary>
		None = 192350000,
		/// <summary>
		/// Percentage capacity = 192350004
		/// </summary>
		Percentage_capacity = 192350004
	}

	public enum msdyn_PoolType
	{
		/// <summary>
		/// Account = 192350000
		/// </summary>
		Account = 192350000,
		/// <summary>
		/// Contact = 192350001
		/// </summary>
		Contact = 192350001,
		/// <summary>
		/// Equipment = 192350003
		/// </summary>
		Equipment = 192350003,
		/// <summary>
		/// Facility = 192350004
		/// </summary>
		Facility = 192350004,
		/// <summary>
		/// User = 192350002
		/// </summary>
		User = 192350002
	}

	public enum msdyn_resourcetype
	{
		/// <summary>
		/// Account = 5
		/// </summary>
		Account = 5,
		/// <summary>
		/// Contact = 2
		/// </summary>
		Contact = 2,
		/// <summary>
		/// Crew = 6
		/// </summary>
		Crew = 6,
		/// <summary>
		/// Equipment = 4
		/// </summary>
		Equipment = 4,
		/// <summary>
		/// Facility = 7
		/// </summary>
		Facility = 7,
		/// <summary>
		/// Generic = 1
		/// </summary>
		Generic = 1,
		/// <summary>
		/// Pool = 8
		/// </summary>
		Pool = 8,
		/// <summary>
		/// User = 3
		/// </summary>
		User = 3
	}

	public enum msdyn_type
	{
		/// <summary>
		/// Extend = 192350001
		/// </summary>
		Extend = 192350001,
		/// <summary>
		/// New = 192350000
		/// </summary>
		New = 192350000
	}

	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// Facility = 690970001
		/// </summary>
		Facility = 690970001,
		/// <summary>
		/// Location Agnostic = 690970002
		/// </summary>
		Location_Agnostic = 690970002,
		/// <summary>
		/// Onsite = 690970000
		/// </summary>
		Onsite = 690970000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_resourcerequirement : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_allocationmethod = "msdyn_allocationmethod";
			public const string msdyn_AppointmentRequirementId = "msdyn_appointmentrequirementid";
			public const string msdyn_BookingSetupMetadataId = "msdyn_bookingsetupmetadataid";
			public const string msdyn_CalendarId = "msdyn_calendarid";
			public const string msdyn_city = "msdyn_city";
			public const string msdyn_costprice = "msdyn_costprice";
			public const string msdyn_costprice_Base = "msdyn_costprice_base";
			public const string msdyn_country = "msdyn_country";
			public const string msdyn_duration = "msdyn_duration";
			public const string msdyn_effort = "msdyn_effort";
			public const string msdyn_fromdate = "msdyn_fromdate";
			public const string msdyn_FulfilledDuration = "msdyn_fulfilledduration";
			public const string msdyn_fulfilledhours = "msdyn_fulfilledhours";
			public const string msdyn_hours = "msdyn_hours";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_IsPrimary = "msdyn_isprimary";
			public const string msdyn_istemplate = "msdyn_istemplate";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_percentage = "msdyn_percentage";
			public const string msdyn_PoolType = "msdyn_pooltype";
			public const string msdyn_Priority = "msdyn_priority";
			public const string msdyn_projectid = "msdyn_projectid";
			public const string msdyn_ProposedDuration = "msdyn_proposedduration";
			public const string msdyn_quantity = "msdyn_quantity";
			public const string msdyn_RemainingDuration = "msdyn_remainingduration";
			public const string msdyn_requeststatus = "msdyn_requeststatus";
			public const string msdyn_requirementgroupcontrolviewid = "msdyn_requirementgroupcontrolviewid";
			public const string msdyn_requirementgroupid = "msdyn_requirementgroupid";
			public const string msdyn_requirementrelationshipid = "msdyn_requirementrelationshipid";
			public const string msdyn_resourcerequirementId = "msdyn_resourcerequirementid";
			public const string msdyn_resourcetype = "msdyn_resourcetype";
			public const string msdyn_roleid = "msdyn_roleid";
			public const string msdyn_serviceappointment = "msdyn_serviceappointment";
			public const string msdyn_sortoptions = "msdyn_sortoptions";
			public const string msdyn_stateorprovince = "msdyn_stateorprovince";
			public const string msdyn_Status = "msdyn_status";
			public const string msdyn_templaterequirementid = "msdyn_templaterequirementid";
			public const string msdyn_Territory = "msdyn_territory";
			public const string msdyn_TimeFromPromised = "msdyn_timefrompromised";
			public const string msdyn_TimeGroup = "msdyn_timegroup";
			public const string msdyn_TimeToPromised = "msdyn_timetopromised";
			public const string msdyn_TimeWindowEnd = "msdyn_timewindowend";
			public const string msdyn_TimeWindowStart = "msdyn_timewindowstart";
			public const string msdyn_timezonefortimewindow = "msdyn_timezonefortimewindow";
			public const string msdyn_todate = "msdyn_todate";
			public const string msdyn_type = "msdyn_type";
			public const string msdyn_workhourtemplate = "msdyn_workhourtemplate";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_resourcerequirement";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10472;

		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(Guid msdyn_resourcerequirementId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_resourcerequirementId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the allocation method to be used for creating requirement distribution over a time period.</para>
		/// <para>Required - Picklist</para>
		/// <para>Allocation Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_allocationmethod? msdyn_allocationmethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_allocationmethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_allocationmethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_allocationmethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_allocationmethod] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Appointment associated with Resource Requirement.</para>
		/// <para>Lookup to appointment</para>
		/// <para>Appointment Requirement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AppointmentRequirementId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AppointmentRequirementId); }
			set { Entity.Attributes[Fields.msdyn_AppointmentRequirementId] = value; }
		}

		/// <summary>
		/// <para>A unique identifier for the booking setup metadata that is associated with a resource requirement.</para>
		/// <para>Lookup to msdyn_bookingsetupmetadata</para>
		/// <para>Booking Setup Metadata</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BookingSetupMetadataId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BookingSetupMetadataId); }
			set { Entity.Attributes[Fields.msdyn_BookingSetupMetadataId] = value; }
		}

		/// <summary>
		/// <para>The calendar that will be used for a resource requirement</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Calendar Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CalendarId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CalendarId); }
			set { Entity.Attributes[Fields.msdyn_CalendarId] = value; }
		}

		/// <summary>
		/// <para>Type the city where the resource is required.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_city
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_city); }
			set { Entity.Attributes[Fields.msdyn_city] = value; }
		}

		/// <summary>
		/// <para>Enter the cost price of the resource required.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costprice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costprice);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_costprice] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_costprice] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Cost Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costprice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costprice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Type the country/region where the resource is required.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_country
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_country); }
			set { Entity.Attributes[Fields.msdyn_country] = value; }
		}

		/// <summary>
		/// <para>Duration of total minutes required</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_duration); }
			set { Entity.Attributes[Fields.msdyn_duration] = value; }
		}

		/// <summary>
		/// <para>Effort that&apos;s required from resource capacity</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Effort</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_effort
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_effort); }
			set { Entity.Attributes[Fields.msdyn_effort] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>From Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_fromdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_fromdate); }
			set { Entity.Attributes[Fields.msdyn_fromdate] = value; }
		}

		/// <summary>
		/// <para>The fulfilled duration, in minutes.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Fulfilled Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_FulfilledDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_FulfilledDuration); }
			set { Entity.Attributes[Fields.msdyn_FulfilledDuration] = value; }
		}

		/// <summary>
		/// <para>Enter the hours fulfilled against requirement when the requirement status is fulfilled.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Fulfilled Hours (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_fulfilledhours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_fulfilledhours); }
			set { Entity.Attributes[Fields.msdyn_fulfilledhours] = value; }
		}

		/// <summary>
		/// <para>Enter the number of hours for which a requirement is required.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Hours (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_hours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_hours); }
			set { Entity.Attributes[Fields.msdyn_hours] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is Primary</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsPrimary
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsPrimary); }
			set { Entity.Attributes[Fields.msdyn_IsPrimary] = value; }
		}

		/// <summary>
		/// <para>Is template requirement</para>
		/// <para>Boolean</para>
		/// <para>Is Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_istemplate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_istemplate); }
			set { Entity.Attributes[Fields.msdyn_istemplate] = value; }
		}

		/// <summary>
		/// <para>The latitude to use for the location of a requirement.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}

		/// <summary>
		/// <para>The longitude to use for the location of a requirement.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Enter the percentage of the calendar capacity required.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Percentage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_percentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_percentage); }
			set { Entity.Attributes[Fields.msdyn_percentage] = value; }
		}

		/// <summary>
		/// <para>MultiSelectPicklist</para>
		/// <para>Pool Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_PoolType> msdyn_PoolType
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_PoolType>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_PoolType);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_PoolType)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_PoolType] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_PoolType] = data;
				}
			}
		}

		/// <summary>
		/// <para>Priority of the requirement. To be taken into consideration while scheduling resources</para>
		/// <para>Lookup to msdyn_priority</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Priority
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Priority); }
			set { Entity.Attributes[Fields.msdyn_Priority] = value; }
		}

		/// <summary>
		/// <para>Select the project for which the resource is required.</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectid); }
			set { Entity.Attributes[Fields.msdyn_projectid] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Proposed Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ProposedDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ProposedDuration); }
			set { Entity.Attributes[Fields.msdyn_ProposedDuration] = value; }
		}

		/// <summary>
		/// <para>Enter the number of resources required.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Quantity (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_quantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_quantity); }
			set { Entity.Attributes[Fields.msdyn_quantity] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Remaining Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RemainingDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RemainingDuration); }
			set { Entity.Attributes[Fields.msdyn_RemainingDuration] = value; }
		}

		/// <summary>
		/// <para>The status of the resource request associated with this requirement.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Request Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_requeststatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_requeststatus); }
			set { Entity.Attributes[Fields.msdyn_requeststatus] = value; }
		}

		/// <summary>
		/// <para>The requirement group control view id of the resource requirement entity. This field will has value only when the entity is inside the requirement group control.</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Requirement Group Control View Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_requirementgroupcontrolviewid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_requirementgroupcontrolviewid); }
			set { Entity.Attributes[Fields.msdyn_requirementgroupcontrolviewid] = value; }
		}

		/// <summary>
		/// <para>Requirement Group</para>
		/// <para>Lookup to msdyn_requirementgroup</para>
		/// <para>Requirement Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_requirementgroupid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_requirementgroupid); }
			set { Entity.Attributes[Fields.msdyn_requirementgroupid] = value; }
		}

		/// <summary>
		/// <para>Requirement Relationship</para>
		/// <para>Lookup to msdyn_requirementrelationship</para>
		/// <para>Requirement Relationship</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_requirementrelationshipid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_requirementrelationshipid); }
			set { Entity.Attributes[Fields.msdyn_requirementrelationshipid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Resource Requirement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_resourcerequirementId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_resourcerequirementId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>MultiSelectPicklist</para>
		/// <para>Resource Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_resourcetype> msdyn_resourcetype
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_resourcetype>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_resourcetype);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_resourcetype)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_resourcetype] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_resourcetype] = data;
				}
			}
		}

		/// <summary>
		/// <para>Select the required role.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Role (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_roleid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_roleid); }
			set { Entity.Attributes[Fields.msdyn_roleid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Service Appointment associated with Resource Requirement.</para>
		/// <para>Lookup to serviceappointment</para>
		/// <para>Service Activity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_serviceappointment
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_serviceappointment); }
			set { Entity.Attributes[Fields.msdyn_serviceappointment] = value; }
		}

		/// <summary>
		/// <para>Sort option string field of resource requirement</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Sort Options</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sortoptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sortoptions); }
			set { Entity.Attributes[Fields.msdyn_sortoptions] = value; }
		}

		/// <summary>
		/// <para>Type the state/province where the resource is required.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_stateorprovince
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_stateorprovince); }
			set { Entity.Attributes[Fields.msdyn_stateorprovince] = value; }
		}

		/// <summary>
		/// <para>Requirement Status</para>
		/// <para>Required - Lookup to msdyn_requirementstatus</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Status
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Status); }
			set { Entity.Attributes[Fields.msdyn_Status] = value; }
		}

		/// <summary>
		/// <para>template requirement id if requirement is created from template</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Template Requirement Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_templaterequirementid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_templaterequirementid); }
			set { Entity.Attributes[Fields.msdyn_templaterequirementid] = value; }
		}

		/// <summary>
		/// <para>Lookup to territory</para>
		/// <para>Territory</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Territory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Territory); }
			set { Entity.Attributes[Fields.msdyn_Territory] = value; }
		}

		/// <summary>
		/// <para>Enter the starting range of the time promised to the account that incidents will be resolved.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time From Promised</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeFromPromisedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeFromPromised); }
			set { Entity.Attributes[Fields.msdyn_TimeFromPromised] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_timegroup</para>
		/// <para>Fulfillment Preference</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeGroup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeGroup); }
			set { Entity.Attributes[Fields.msdyn_TimeGroup] = value; }
		}

		/// <summary>
		/// <para>Enter the ending range of the time promised to the account that incidents will be resolved.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time To Promised</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeToPromisedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeToPromised); }
			set { Entity.Attributes[Fields.msdyn_TimeToPromised] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time Window End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowEnd); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowEnd] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time Window Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowStart); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowStart] = value; }
		}

		/// <summary>
		/// <para>The Timezone in which the Time windows are defined by the User</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Timezone for time window</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_timezonefortimewindow
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_timezonefortimewindow); }
			set { Entity.Attributes[Fields.msdyn_timezonefortimewindow] = value; }
		}

		/// <summary>
		/// <para>End date of requirement period</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>To Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_todateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_todate); }
			set { Entity.Attributes[Fields.msdyn_todate] = value; }
		}

		/// <summary>
		/// <para>Select the type of resource requirement.</para>
		/// <para>Required - Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_type? msdyn_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_type] = null;
			}
		}

		/// <summary>
		/// <para>The working hours for a requirement.</para>
		/// <para>Lookup to msdyn_workhourtemplate</para>
		/// <para>Work Hour Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workhourtemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workhourtemplate); }
			set { Entity.Attributes[Fields.msdyn_workhourtemplate] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Work Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Work Order associated with Resource Requirement.</para>
		/// <para>Lookup to msdyn_workorder</para>
		/// <para>Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Resource Requirement</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Resource Requirement</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
