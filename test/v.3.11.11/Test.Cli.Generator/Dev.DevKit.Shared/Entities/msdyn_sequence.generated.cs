//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets
{
	public enum msdyn_orchestratorversion
	{
		/// <summary>
		/// V1 = 1
		/// </summary>
		V1 = 1,
		/// <summary>
		/// V2 = 2
		/// </summary>
		V2 = 2
	}

	public enum msdyn_Type
	{
		/// <summary>
		/// Activation = 1
		/// </summary>
		Activation = 1,
		/// <summary>
		/// Definition = 0
		/// </summary>
		Definition = 0
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 0
		/// </summary>
		Inactive = 0
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 2
		/// </summary>
		Active = 2,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1,
		/// <summary>
		/// Revision = 3
		/// </summary>
		Revision = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sequence : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_cjodefinition = "msdyn_cjodefinition";
			public const string msdyn_cjodefinitionstate = "msdyn_cjodefinitionstate";
			public const string msdyn_definition = "msdyn_definition";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_maxstepcount = "msdyn_maxstepcount";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_orchestratorversion = "msdyn_orchestratorversion";
			public const string msdyn_ParentSequence = "msdyn_parentsequence";
			public const string msdyn_regardingentitydisplayname = "msdyn_regardingentitydisplayname";
			public const string msdyn_regardingEntityName = "msdyn_regardingentityname";
			public const string msdyn_SequenceExitCriterion = "msdyn_sequenceexitcriterion";
			public const string msdyn_sequenceId = "msdyn_sequenceid";
			public const string msdyn_SequenceRecords = "msdyn_sequencerecords";
			public const string msdyn_SequenceStats180d = "msdyn_SequenceStats180d";
			public const string msdyn_SequenceStats1y = "msdyn_SequenceStats1y";
			public const string msdyn_SequenceStats2y = "msdyn_SequenceStats2y";
			public const string msdyn_SequenceStats30d = "msdyn_SequenceStats30d";
			public const string msdyn_SequenceStats90d = "msdyn_SequenceStats90d";
			public const string msdyn_template = "msdyn_template";
			public const string msdyn_totaltasks = "msdyn_totaltasks";
			public const string msdyn_Type = "msdyn_type";
			public const string msdyn_Version = "msdyn_version";
			public const string msdyn_VersionDescription = "msdyn_versiondescription";
			public const string msdyn_workflowid = "msdyn_workflowid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_sequence";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10289;

		[DebuggerNonUserCode()]
		public msdyn_sequence()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequence(Guid msdyn_sequenceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sequenceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequence(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequence(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequence(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequence(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created by</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified by</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last modified</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>CJO Definition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cjodefinition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cjodefinition); }
			set { Entity.Attributes[Fields.msdyn_cjodefinition] = value; }
		}

		/// <summary>
		/// <para>Depicts whether CJO definition is updated or not</para>
		/// <para>Boolean</para>
		/// <para>CJO definition state</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_cjodefinitionstate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_cjodefinitionstate); }
			set { Entity.Attributes[Fields.msdyn_cjodefinitionstate] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Definition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_definition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_definition); }
			set { Entity.Attributes[Fields.msdyn_definition] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>The max step count for the sequence.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 400</para>
		/// <para>Max. Steps</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_maxstepcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_maxstepcount); }
			set { Entity.Attributes[Fields.msdyn_maxstepcount] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 97</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Select version of sequence orchestrator</para>
		/// <para>Picklist</para>
		/// <para>Sequence orchestrator version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_orchestratorversion? msdyn_orchestratorversion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_orchestratorversion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_orchestratorversion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_orchestratorversion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_orchestratorversion] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>Lookup to msdyn_sequence</para>
		/// <para>Parent Sequence</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ParentSequence
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ParentSequence); }
			set { Entity.Attributes[Fields.msdyn_ParentSequence] = value; }
		}

		/// <summary>
		/// <para>The display name information about record to which this sequence could be associated</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Record type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regardingentitydisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regardingentitydisplayname); }
			set { Entity.Attributes[Fields.msdyn_regardingentitydisplayname] = value; }
		}

		/// <summary>
		/// <para>The logical name of regarding entity</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Regarding Entity Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regardingEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regardingEntityName); }
			set { Entity.Attributes[Fields.msdyn_regardingEntityName] = value; }
		}

		/// <summary>
		/// <para>Information about various exit criterion for a sequence</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Sequence Exit Criterion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceExitCriterion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceExitCriterion); }
			set { Entity.Attributes[Fields.msdyn_SequenceExitCriterion] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Sequence</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sequenceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sequenceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 4000</para>
		/// <para>SequenceRecords</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceRecords
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceRecords); }
		}

		/// <summary>
		/// <para>Sequence Stats 180d</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Sequence Stats 180d</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats180d
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats180d); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats180d] = value; }
		}

		/// <summary>
		/// <para>Sequence Stats 1y</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Sequence Stats 1y</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats1y
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats1y); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats1y] = value; }
		}

		/// <summary>
		/// <para>Sequence Stats 2y</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Sequence Stats 2y</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats2y
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats2y); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats2y] = value; }
		}

		/// <summary>
		/// <para>Sequence Stats 30d</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Sequence Stats 30d</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats30d
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats30d); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats30d] = value; }
		}

		/// <summary>
		/// <para>Sequence Stats 90d</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Sequence Stats 90d</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats90d
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats90d); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats90d] = value; }
		}

		/// <summary>
		/// <para>Sequence template id</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Sequence template id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_template
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_template); }
			set { Entity.Attributes[Fields.msdyn_template] = value; }
		}

		/// <summary>
		/// <para>Total task count of sequence record</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 40</para>
		/// <para>Steps</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totaltasks
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totaltasks); }
			set { Entity.Attributes[Fields.msdyn_totaltasks] = value; }
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_Type? msdyn_Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Type] = null;
			}
		}

		/// <summary>
		/// <para>Version of the sequence</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 500</para>
		/// <para>Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Version
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Version); }
			set { Entity.Attributes[Fields.msdyn_Version] = value; }
		}

		/// <summary>
		/// <para>Information about this version of the sequence</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Version Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_VersionDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_VersionDescription); }
			set { Entity.Attributes[Fields.msdyn_VersionDescription] = value; }
		}

		/// <summary>
		/// <para>Workflow identifier</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Workflow Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_workflowid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_workflowid); }
			set { Entity.Attributes[Fields.msdyn_workflowid] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Sequence</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Sequence</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
