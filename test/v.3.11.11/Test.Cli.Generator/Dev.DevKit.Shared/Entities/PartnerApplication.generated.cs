//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.PartnerApplicationOptionSets
{
	public enum ApplicationRole
	{
		/// <summary>
		/// Client = 0
		/// </summary>
		Client = 0,
		/// <summary>
		/// Server = 1
		/// </summary>
		Server = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Disabled = 2
		/// </summary>
		Disabled = 2,
		/// <summary>
		/// Enabled = 1
		/// </summary>
		Enabled = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PartnerApplication : EntityBase
	{
		public struct Fields
		{
			public const string ApplicationRole = "applicationrole";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string MetadataUrl = "metadataurl";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string PartnerApplicationId = "partnerapplicationid";
			public const string PrincipalId = "principalid";
			public const string Realm = "realm";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TenantId = "tenantid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UseAuthorizationServer = "useauthorizationserver";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "partnerapplication";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1095;

		[DebuggerNonUserCode()]
		public PartnerApplication()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PartnerApplication(Guid PartnerApplicationId)
		{
			Entity = new Entity(EntityLogicalName, PartnerApplicationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PartnerApplication(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PartnerApplication(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PartnerApplication(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PartnerApplication(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Indicates the application role.</para>
		/// <para>Picklist</para>
		/// <para>Application Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PartnerApplicationOptionSets.ApplicationRole? ApplicationRole
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ApplicationRole);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PartnerApplicationOptionSets.ApplicationRole)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ApplicationRole] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ApplicationRole] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Contains the metadata URL.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Metadata Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MetadataUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.MetadataUrl); }
			set { Entity.Attributes[Fields.MetadataUrl] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of Partner Application.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the record.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Unique identifier of the partner application.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Partner Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PartnerApplicationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PartnerApplicationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Principal ID of the partner application.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Application Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrincipalId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrincipalId); }
			set { Entity.Attributes[Fields.PrincipalId] = value; }
		}

		/// <summary>
		/// <para>Indicates the realm.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Realm</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Realm
		{
			get { return Entity.GetAttributeValue<string>(Fields.Realm); }
			set { Entity.Attributes[Fields.Realm] = value; }
		}

		/// <summary>
		/// <para>Shows the status of the partner application.</para>
		/// <para>ReadOnly - State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PartnerApplicationOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PartnerApplicationOptionSets.StateCode)value.Value;
			}
		}

		/// <summary>
		/// <para>Select the partner application&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PartnerApplicationOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PartnerApplicationOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the tenant ID.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Tenant Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? TenantId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.TenantId); }
			set { Entity.Attributes[Fields.TenantId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Select whether the partner application uses an authorization server.</para>
		/// <para>Boolean</para>
		/// <para>Use Authorization Server</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseAuthorizationServer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseAuthorizationServer); }
			set { Entity.Attributes[Fields.UseAuthorizationServer] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version number of the partner application.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
