//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets
{
	public enum msdyn_ActionButtons
	{
		/// <summary>
		/// Allow = 100000000
		/// </summary>
		Allow = 100000000,
		/// <summary>
		/// Deny = 100000001
		/// </summary>
		Deny = 100000001
	}

	public enum msdyn_Showtimeout
	{
		/// <summary>
		/// No = 100000001
		/// </summary>
		No = 100000001,
		/// <summary>
		/// Yes = 100000000
		/// </summary>
		Yes = 100000000
	}

	public enum msdyn_Theme
	{
		/// <summary>
		/// Dark = 100000000
		/// </summary>
		Dark = 100000000,
		/// <summary>
		/// Light = 100000001
		/// </summary>
		Light = 100000001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_consoleapplicationnotificationtemplate : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AcceptButtonText = "msdyn_acceptbuttontext";
			public const string msdyn_ActionButtons = "msdyn_actionbuttons";
			public const string msdyn_AutoAcceptNotification = "msdyn_autoacceptnotification";
			public const string msdyn_consoleapplicationnotificationtemplateId = "msdyn_consoleapplicationnotificationtemplateid";
			public const string msdyn_Icon = "msdyn_icon";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_NotificationButtons = "msdyn_notificationbuttons";
			public const string msdyn_NotificationFieldsPlaceholder = "msdyn_notificationfieldsplaceholder";
			public const string msdyn_RejectButtonAutoAccept = "msdyn_rejectbuttonautoaccept";
			public const string msdyn_RejectButtonText = "msdyn_rejectbuttontext";
			public const string msdyn_RenderingOrder = "msdyn_renderingorder";
			public const string msdyn_Showtimeout = "msdyn_showtimeout";
			public const string msdyn_Theme = "msdyn_theme";
			public const string msdyn_Timeout = "msdyn_timeout";
			public const string msdyn_Title = "msdyn_title";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_consoleapplicationnotificationtemplate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10692;

		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(Guid msdyn_consoleapplicationnotificationtemplateId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_consoleapplicationnotificationtemplateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_consoleapplicationnotificationtemplate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Display label for the button to accept a notification</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Accept Button Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AcceptButtonText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AcceptButtonText); }
			set { Entity.Attributes[Fields.msdyn_AcceptButtonText] = value; }
		}

		/// <summary>
		/// <para>The action buttons to be displayed. (Deprecated)</para>
		/// <para>MultiSelectPicklist</para>
		/// <para>ActionButtons (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_ActionButtons> msdyn_ActionButtons
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_ActionButtons>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_ActionButtons);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_ActionButtons)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_ActionButtons] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_ActionButtons] = data;
				}
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Auto Accept Notification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoAcceptNotification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoAcceptNotification); }
			set { Entity.Attributes[Fields.msdyn_AutoAcceptNotification] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>ConsoleApplicationNotificationTemplate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_consoleapplicationnotificationtemplateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_consoleapplicationnotificationtemplateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Display icon for this notification. Can be either an image URL or a font-icon</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Icon</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Icon
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Icon); }
			set { Entity.Attributes[Fields.msdyn_Icon] = value; }
		}

		/// <summary>
		/// <para>The name of this Notification template.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>JSON object to pass key-value pairs for action buttons that are to be present on the notification</para>
		/// <para>String - MaxLength: 300</para>
		/// <para>Notification Buttons</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_NotificationButtons
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_NotificationButtons); }
			set { Entity.Attributes[Fields.msdyn_NotificationButtons] = value; }
		}

		/// <summary>
		/// <para>Deprecated field</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Notification Fields</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_NotificationFieldsPlaceholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_NotificationFieldsPlaceholder); }
			set { Entity.Attributes[Fields.msdyn_NotificationFieldsPlaceholder] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Reject Button</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_RejectButtonAutoAccept
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_RejectButtonAutoAccept); }
			set { Entity.Attributes[Fields.msdyn_RejectButtonAutoAccept] = value; }
		}

		/// <summary>
		/// <para>Display label for the button to reject a notification</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Reject Button Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RejectButtonText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RejectButtonText); }
			set { Entity.Attributes[Fields.msdyn_RejectButtonText] = value; }
		}

		/// <summary>
		/// <para>Notification display order relative to other notification templates.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Notification order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RenderingOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RenderingOrder); }
			set { Entity.Attributes[Fields.msdyn_RenderingOrder] = value; }
		}

		/// <summary>
		/// <para>Show countdown for when the notification will disappear</para>
		/// <para>Picklist</para>
		/// <para>Show timeout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Showtimeout? msdyn_Showtimeout
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Showtimeout);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Showtimeout)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Showtimeout] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Showtimeout] = null;
			}
		}

		/// <summary>
		/// <para>Theme color for Notification template.</para>
		/// <para>Picklist</para>
		/// <para>Theme</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Theme? msdyn_Theme
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Theme);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.msdyn_Theme)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Theme] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Theme] = null;
			}
		}

		/// <summary>
		/// <para>Notification time out period.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 500</para>
		/// <para>Timeout (seconds)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Timeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Timeout); }
			set { Entity.Attributes[Fields.msdyn_Timeout] = value; }
		}

		/// <summary>
		/// <para>The title to be displayed for this notification.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Title); }
			set { Entity.Attributes[Fields.msdyn_Title] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Notification Template</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Notification Template</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_consoleapplicationnotificationtemplateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
