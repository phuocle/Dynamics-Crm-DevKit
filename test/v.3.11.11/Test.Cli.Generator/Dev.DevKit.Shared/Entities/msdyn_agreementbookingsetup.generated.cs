//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_agreementbookingsetupOptionSets
{
	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// Facility = 690970001
		/// </summary>
		Facility = 690970001,
		/// <summary>
		/// Location Agnostic = 690970002
		/// </summary>
		Location_Agnostic = 690970002,
		/// <summary>
		/// Onsite = 690970000
		/// </summary>
		Onsite = 690970000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_agreementbookingsetup : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Agreement = "msdyn_agreement";
			public const string msdyn_agreementbookingsetupId = "msdyn_agreementbookingsetupid";
			public const string msdyn_AutoGenerateBooking = "msdyn_autogeneratebooking";
			public const string msdyn_AutoGenerateWO = "msdyn_autogeneratewo";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_EstimatedDuration = "msdyn_estimatedduration";
			public const string msdyn_GenerateWODaysInAdvance = "msdyn_generatewodaysinadvance";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_PostBookingFlexibility = "msdyn_postbookingflexibility";
			public const string msdyn_PostponeGenerationUntil = "msdyn_postponegenerationuntil";
			public const string msdyn_PreBookingFlexibility = "msdyn_prebookingflexibility";
			public const string msdyn_PreferredResource = "msdyn_preferredresource";
			public const string msdyn_PreferredStartTime = "msdyn_preferredstarttime";
			public const string msdyn_Priority = "msdyn_priority";
			public const string msdyn_ProcessStartedOn = "msdyn_processstartedon";
			public const string msdyn_RecurrenceSettings = "msdyn_recurrencesettings";
			public const string msdyn_Revision = "msdyn_revision";
			public const string msdyn_TimeWindowEnd = "msdyn_timewindowend";
			public const string msdyn_TimeWindowStart = "msdyn_timewindowstart";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_WorkOrderSummary = "msdyn_workordersummary";
			public const string msdyn_WorkOrderType = "msdyn_workordertype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_agreementbookingsetup";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10585;

		[DebuggerNonUserCode()]
		public msdyn_agreementbookingsetup()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_agreementbookingsetup(Guid msdyn_agreementbookingsetupId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_agreementbookingsetupId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_agreementbookingsetup(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_agreementbookingsetup(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_agreementbookingsetup(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_agreementbookingsetup(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Agreement this Booking Setup relates to</para>
		/// <para>Required - Lookup to msdyn_agreement</para>
		/// <para>Agreement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Agreement
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Agreement); }
			set { Entity.Attributes[Fields.msdyn_Agreement] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Agreement Booking Setup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_agreementbookingsetupId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_agreementbookingsetupId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Enable if the system should automatically generate Order Bookings for the Booking Dates of this Booking Setup</para>
		/// <para>Required - Boolean</para>
		/// <para>Auto Generate Booking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoGenerateBooking
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoGenerateBooking); }
			set { Entity.Attributes[Fields.msdyn_AutoGenerateBooking] = value; }
		}

		/// <summary>
		/// <para>Enable if the system should automatically generate Work Orders for the Booking Dates of this Booking Setup</para>
		/// <para>Boolean</para>
		/// <para>Auto Generate Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoGenerateWO
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoGenerateWO); }
			set { Entity.Attributes[Fields.msdyn_AutoGenerateWO] = value; }
		}

		/// <summary>
		/// <para>Type a description of this booking setup.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}

		/// <summary>
		/// <para>Shows the duration of the booking.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Estimated Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_EstimatedDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_EstimatedDuration); }
			set { Entity.Attributes[Fields.msdyn_EstimatedDuration] = value; }
		}

		/// <summary>
		/// <para>Specify how many days in advance of the Booking Date the system should automatically generate a Work Order</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Generate Work Order Days In Advance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateWODaysInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateWODaysInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateWODaysInAdvance] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>Only used when Work Location is a Facility. Latitude is used when trying to locate nearby facilities.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}

		/// <summary>
		/// <para>Only used when Work Location is a Facility. Longitude is used when trying to locate nearby facilities.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}

		/// <summary>
		/// <para>Enter the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Shows the flexibility of days after the booking date.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Post Booking Flexibility</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PostBookingFlexibility
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PostBookingFlexibility); }
			set { Entity.Attributes[Fields.msdyn_PostBookingFlexibility] = value; }
		}

		/// <summary>
		/// <para>Intended for internal use. Manipulating values in this field is not supported and can lead to unexpected system behavior.</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Postpone Generation Until</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_PostponeGenerationUntil
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_PostponeGenerationUntil); }
			set { Entity.Attributes[Fields.msdyn_PostponeGenerationUntil] = value; }
		}

		/// <summary>
		/// <para>Shows the flexibility of days prior to the booking date.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Pre Booking Flexibility</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PreBookingFlexibility
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PreBookingFlexibility); }
			set { Entity.Attributes[Fields.msdyn_PreBookingFlexibility] = value; }
		}

		/// <summary>
		/// <para>Preferred Resource to booked</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Preferred Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PreferredResource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PreferredResource); }
			set { Entity.Attributes[Fields.msdyn_PreferredResource] = value; }
		}

		/// <summary>
		/// <para>Shows the preferred time to booking.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Preferred Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_PreferredStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_PreferredStartTime); }
			set { Entity.Attributes[Fields.msdyn_PreferredStartTime] = value; }
		}

		/// <summary>
		/// <para>Booking Priority</para>
		/// <para>Lookup to msdyn_priority</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Priority
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Priority); }
			set { Entity.Attributes[Fields.msdyn_Priority] = value; }
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Process Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ProcessStartedOn
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ProcessStartedOn); }
			set { Entity.Attributes[Fields.msdyn_ProcessStartedOn] = value; }
		}

		/// <summary>
		/// <para>Stores the booking recurrence settings.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Recurrence Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RecurrenceSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RecurrenceSettings); }
			set { Entity.Attributes[Fields.msdyn_RecurrenceSettings] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Revision</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Revision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Revision); }
			set { Entity.Attributes[Fields.msdyn_Revision] = value; }
		}

		/// <summary>
		/// <para>Shows the time window up until when this can be booked.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time Window End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowEnd); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowEnd] = value; }
		}

		/// <summary>
		/// <para>Shows the time window from when this can be booked.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time Window Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowStart); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowStart] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Work Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agreementbookingsetupOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agreementbookingsetupOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}

		/// <summary>
		/// <para>Shows the work order summary to be set on the work orders generated.</para>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>Work Order Summary</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WorkOrderSummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WorkOrderSummary); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderSummary] = value; }
		}

		/// <summary>
		/// <para>Work Order Type to be used on generated Work Orders</para>
		/// <para>Required - Lookup to msdyn_workordertype</para>
		/// <para>Work Order Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderType); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderType] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the ID of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Contains the ID of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the Agreement Booking Setup</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agreementbookingsetupOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agreementbookingsetupOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Agreement Booking Setup</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agreementbookingsetupOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agreementbookingsetupOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows a comma-separated list of string values that represent the unique identifiers of stages in a business process flow instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
