//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets
{
	public enum msdyn_salesmotion
	{
		/// <summary>
		/// Default = 1
		/// </summary>
		Default = 1
	}

	public enum msdyn_salesplay
	{
		/// <summary>
		/// Default = 1
		/// </summary>
		Default = 1
	}

	public enum msdyn_solutionarea
	{
		/// <summary>
		/// Default = 1
		/// </summary>
		Default = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Closed = 1
		/// </summary>
		Closed = 1,
		/// <summary>
		/// Declined = 2
		/// </summary>
		Declined = 2,
		/// <summary>
		/// Open = 0
		/// </summary>
		Open = 0,
		/// <summary>
		/// Qualified = 3
		/// </summary>
		Qualified = 3
	}

	public enum statuscode
	{
		/// <summary>
		/// Created Opportunity = 4
		/// </summary>
		Created_Opportunity = 4,
		/// <summary>
		/// Open = 1
		/// </summary>
		Open = 1,
		/// <summary>
		/// Others = 2
		/// </summary>
		Others_2 = 2,
		/// <summary>
		/// Others = 3
		/// </summary>
		Others_3 = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_salessuggestion : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EmailAddress = "emailaddress";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_customdata = "msdyn_customdata";
			public const string msdyn_expirydate = "msdyn_expirydate";
			public const string msdyn_feedbackreason = "msdyn_feedbackreason";
			public const string msdyn_insight = "msdyn_insight";
			public const string msdyn_modelid = "msdyn_modelid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_potentialrevenue = "msdyn_potentialrevenue";
			public const string msdyn_potentialrevenue_Base = "msdyn_potentialrevenue_base";
			public const string msdyn_qualifiedrecord = "msdyn_qualifiedrecord";
			public const string msdyn_relatedrecord = "msdyn_relatedrecord";
			public const string msdyn_salesmotion = "msdyn_salesmotion";
			public const string msdyn_salesplay = "msdyn_salesplay";
			public const string msdyn_salessuggestionId = "msdyn_salessuggestionid";
			public const string msdyn_score = "msdyn_score";
			public const string msdyn_solutionarea = "msdyn_solutionarea";
			public const string msdyn_suggesteddate = "msdyn_suggesteddate";
			public const string msdyn_suggestionreason = "msdyn_suggestionreason";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_salessuggestion";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10306;

		[DebuggerNonUserCode()]
		public msdyn_salessuggestion()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(Guid msdyn_salessuggestionId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_salessuggestionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The primary email address for the entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Customdata JSON</para>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>Customdata</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_customdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_customdata); }
			set { Entity.Attributes[Fields.msdyn_customdata] = value; }
		}

		/// <summary>
		/// <para>Expiry date</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Expiry date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_expirydateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_expirydate); }
			set { Entity.Attributes[Fields.msdyn_expirydate] = value; }
		}

		/// <summary>
		/// <para>Feedback reason</para>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>Feedback reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_feedbackreason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_feedbackreason); }
			set { Entity.Attributes[Fields.msdyn_feedbackreason] = value; }
		}

		/// <summary>
		/// <para>Suggestion insight</para>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>Suggestion insight</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_insight
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_insight); }
			set { Entity.Attributes[Fields.msdyn_insight] = value; }
		}

		/// <summary>
		/// <para>Model ID</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Model ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_modelid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_modelid); }
			set { Entity.Attributes[Fields.msdyn_modelid] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Potential revenue</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Potential revenue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_potentialrevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_potentialrevenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_potentialrevenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_potentialrevenue] = null;
			}
		}

		/// <summary>
		/// <para>Value of the potential revenue in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Potential revenue (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_potentialrevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_potentialrevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Lookup to opportunity</para>
		/// <para>Qualified Record</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_qualifiedrecord
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_qualifiedrecord); }
			set { Entity.Attributes[Fields.msdyn_qualifiedrecord] = value; }
		}

		/// <summary>
		/// <para>Related record</para>
		/// <para>Lookup to account</para>
		/// <para>Related record</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_relatedrecord
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_relatedrecord); }
			set { Entity.Attributes[Fields.msdyn_relatedrecord] = value; }
		}

		/// <summary>
		/// <para>Sales motion</para>
		/// <para>Picklist</para>
		/// <para>Sales motion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesmotion? msdyn_salesmotion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_salesmotion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesmotion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_salesmotion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_salesmotion] = null;
			}
		}

		/// <summary>
		/// <para>Sales play</para>
		/// <para>Picklist</para>
		/// <para>Sales play</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesplay? msdyn_salesplay
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_salesplay);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesplay)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_salesplay] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_salesplay] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Suggestion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_salessuggestionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_salessuggestionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Score</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_score
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_score); }
			set { Entity.Attributes[Fields.msdyn_score] = value; }
		}

		/// <summary>
		/// <para>Solution area</para>
		/// <para>Picklist</para>
		/// <para>Solution area</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_solutionarea? msdyn_solutionarea
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_solutionarea);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_solutionarea)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_solutionarea] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_solutionarea] = null;
			}
		}

		/// <summary>
		/// <para>Suggested date</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Suggested date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_suggesteddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_suggesteddate); }
			set { Entity.Attributes[Fields.msdyn_suggesteddate] = value; }
		}

		/// <summary>
		/// <para>Suggestion reason</para>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>Suggestion reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_suggestionreason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_suggestionreason); }
			set { Entity.Attributes[Fields.msdyn_suggestionreason] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Suggestion</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Suggestion</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
