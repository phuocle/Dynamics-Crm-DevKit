//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets
{
	public enum msdyn_allocationmethod
	{
		/// <summary>
		/// By Hours - Distribute evenly = 192350003
		/// </summary>
		By_Hours_Distribute_evenly = 192350003,
		/// <summary>
		/// By Hours - Front load = 192350005
		/// </summary>
		By_Hours_Front_load = 192350005,
		/// <summary>
		/// Full Capacity = 192350001
		/// </summary>
		Full_Capacity = 192350001,
		/// <summary>
		/// None = 192350000
		/// </summary>
		None = 192350000,
		/// <summary>
		/// Percentage Capacity = 192350004
		/// </summary>
		Percentage_Capacity = 192350004
	}

	public enum msdyn_BillingType
	{
		/// <summary>
		/// Chargeable = 192350001
		/// </summary>
		Chargeable = 192350001,
		/// <summary>
		/// Complimentary = 192350002
		/// </summary>
		Complimentary = 192350002,
		/// <summary>
		/// Non Chargeable = 192350000
		/// </summary>
		Non_Chargeable = 192350000,
		/// <summary>
		/// Not Available = 192350003
		/// </summary>
		Not_Available = 192350003
	}

	public enum msdyn_MembershipStatus
	{
		/// <summary>
		/// Assigned = 2
		/// </summary>
		Assigned = 2,
		/// <summary>
		/// Declined = 3
		/// </summary>
		Declined = 3,
		/// <summary>
		/// Requested = 1
		/// </summary>
		Requested = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_projectteam : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_allocationmethod = "msdyn_allocationmethod";
			public const string msdyn_Applicantcount = "msdyn_applicantcount";
			public const string msdyn_Applicantcount_Date = "msdyn_applicantcount_date";
			public const string msdyn_Applicantcount_State = "msdyn_applicantcount_state";
			public const string msdyn_Applicantsavailable = "msdyn_applicantsavailable";
			public const string msdyn_AssignedHours = "msdyn_assignedhours";
			public const string msdyn_BillingType = "msdyn_billingtype";
			public const string msdyn_bookableresourceid = "msdyn_bookableresourceid";
			public const string msdyn_calendarId = "msdyn_calendarid";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_From = "msdyn_from";
			public const string msdyn_hardbookedhours = "msdyn_hardbookedhours";
			public const string msdyn_hours = "msdyn_hours";
			public const string msdyn_HoursRequested = "msdyn_hoursrequested";
			public const string msdyn_MembershipStatus = "msdyn_membershipstatus";
			public const string msdyn_msprojectclientid = "msdyn_msprojectclientid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_Number = "msdyn_number";
			public const string msdyn_organizationalunit = "msdyn_organizationalunit";
			public const string msdyn_percentage = "msdyn_percentage";
			public const string msdyn_project = "msdyn_project";
			public const string msdyn_ProjectApprover = "msdyn_projectapprover";
			public const string msdyn_projectteamId = "msdyn_projectteamid";
			public const string msdyn_requiredhours = "msdyn_requiredhours";
			public const string msdyn_resourcecategory = "msdyn_resourcecategory";
			public const string msdyn_resourcerequirementid = "msdyn_resourcerequirementid";
			public const string msdyn_RoleDescription = "msdyn_roledescription";
			public const string msdyn_softbookedhours = "msdyn_softbookedhours";
			public const string msdyn_To = "msdyn_to";
			public const string msdyn_worktemplate = "msdyn_worktemplate";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_projectteam";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10536;

		[DebuggerNonUserCode()]
		public msdyn_projectteam()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectteam(Guid msdyn_projectteamId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_projectteamId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectteam(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectteam(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectteam(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectteam(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the allocation method used to book resources on the project (full capacity, percentage, and so on).</para>
		/// <para>Picklist</para>
		/// <para>Allocation method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.msdyn_allocationmethod? msdyn_allocationmethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_allocationmethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.msdyn_allocationmethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_allocationmethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_allocationmethod] = null;
			}
		}

		/// <summary>
		/// <para>Shows the number of applicants for this project team.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Applicant count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Applicantcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Applicantcount); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field Applicant count.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Applicant count (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_Applicantcount_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_Applicantcount_Date); }
		}

		/// <summary>
		/// <para>State of rollup field Applicant count.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Applicant count (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Applicantcount_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Applicantcount_State); }
		}

		/// <summary>
		/// <para>Shows if there are applicants available for this project team.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Applicants available (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Applicantsavailable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Applicantsavailable); }
		}

		/// <summary>
		/// <para>Type the total assigned hours for project team member.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Assigned Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_AssignedHours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_AssignedHours); }
			set { Entity.Attributes[Fields.msdyn_AssignedHours] = value; }
		}

		/// <summary>
		/// <para>Select whether the team member is billable</para>
		/// <para>Picklist</para>
		/// <para>Billing Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.msdyn_BillingType? msdyn_BillingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BillingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.msdyn_BillingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BillingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BillingType] = null;
			}
		}

		/// <summary>
		/// <para>Shows the resource.</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Bookable Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookableresourceid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookableresourceid); }
			set { Entity.Attributes[Fields.msdyn_bookableresourceid] = value; }
		}

		/// <summary>
		/// <para>Shows the calendar used for staffing this project team.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Calendar Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_calendarId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_calendarId); }
			set { Entity.Attributes[Fields.msdyn_calendarId] = value; }
		}

		/// <summary>
		/// <para>Type the system description.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}

		/// <summary>
		/// <para>Enter the resource team membership start date.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>From</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_FromUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_From); }
			set { Entity.Attributes[Fields.msdyn_From] = value; }
		}

		/// <summary>
		/// <para>Hard Booked Hours</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Hard Booked Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_hardbookedhours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_hardbookedhours); }
			set { Entity.Attributes[Fields.msdyn_hardbookedhours] = value; }
		}

		/// <summary>
		/// <para>Duplicate for resource requirement</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_hours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_hours); }
			set { Entity.Attributes[Fields.msdyn_hours] = value; }
		}

		/// <summary>
		/// <para>Shows the number of hours required of this team member on the project.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Required Hours (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_HoursRequested
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_HoursRequested); }
			set { Entity.Attributes[Fields.msdyn_HoursRequested] = value; }
		}

		/// <summary>
		/// <para>Shows the membership status of this project team member.</para>
		/// <para>Picklist</para>
		/// <para>Membership Status (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.msdyn_MembershipStatus? msdyn_MembershipStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_MembershipStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.msdyn_MembershipStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_MembershipStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_MembershipStatus] = null;
			}
		}

		/// <summary>
		/// <para>The id of the project team member in MS Project Client.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>MS Project Client Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_msprojectclientid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_msprojectclientid); }
			set { Entity.Attributes[Fields.msdyn_msprojectclientid] = value; }
		}

		/// <summary>
		/// <para>Type the name of the custom entity.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Position Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Shows the number of resources requested.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 100</para>
		/// <para>Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Number
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Number); }
			set { Entity.Attributes[Fields.msdyn_Number] = value; }
		}

		/// <summary>
		/// <para>The organizational unit of the resource performing the work.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Resourcing Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_organizationalunit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_organizationalunit); }
			set { Entity.Attributes[Fields.msdyn_organizationalunit] = value; }
		}

		/// <summary>
		/// <para>Duplicate for resource requirement</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100</para>
		/// <para>Percentage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_percentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_percentage); }
			set { Entity.Attributes[Fields.msdyn_percentage] = value; }
		}

		/// <summary>
		/// <para>Select the project that this team members are part of.</para>
		/// <para>Required - Lookup to msdyn_project</para>
		/// <para>project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_project); }
			set { Entity.Attributes[Fields.msdyn_project] = value; }
		}

		/// <summary>
		/// <para>Select whether the team member can approve time and expenses.</para>
		/// <para>Boolean</para>
		/// <para>Project Approver</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ProjectApprover
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ProjectApprover); }
			set { Entity.Attributes[Fields.msdyn_ProjectApprover] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Project Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_projectteamId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_projectteamId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Required hours of team member from team member requirement</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Required Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_requiredhours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_requiredhours); }
			set { Entity.Attributes[Fields.msdyn_requiredhours] = value; }
		}

		/// <summary>
		/// <para>Select the role this team member is playing in this team.</para>
		/// <para>Required - Lookup to bookableresourcecategory</para>
		/// <para>Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_resourcecategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_resourcecategory); }
			set { Entity.Attributes[Fields.msdyn_resourcecategory] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Resource Requirement associated with Project Team Member.</para>
		/// <para>Lookup to msdyn_resourcerequirement</para>
		/// <para>Resource Requirement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_resourcerequirementid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_resourcerequirementid); }
			set { Entity.Attributes[Fields.msdyn_resourcerequirementid] = value; }
		}

		/// <summary>
		/// <para>Enter a description of the role for this team member.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Position Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RoleDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RoleDescription); }
			set { Entity.Attributes[Fields.msdyn_RoleDescription] = value; }
		}

		/// <summary>
		/// <para>Soft Booked Hours</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Soft Booked Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_softbookedhours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_softbookedhours); }
			set { Entity.Attributes[Fields.msdyn_softbookedhours] = value; }
		}

		/// <summary>
		/// <para>Enter the end date of the resource membership in a team.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>To</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ToUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_To); }
			set { Entity.Attributes[Fields.msdyn_To] = value; }
		}

		/// <summary>
		/// <para>Template to use for generic resource&apos;s schedule. Will be ignored if its a user or facility resource</para>
		/// <para>Lookup to msdyn_workhourtemplate</para>
		/// <para>Work Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_worktemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_worktemplate); }
			set { Entity.Attributes[Fields.msdyn_worktemplate] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Shows the status of the project team.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Project Team</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectteamOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
