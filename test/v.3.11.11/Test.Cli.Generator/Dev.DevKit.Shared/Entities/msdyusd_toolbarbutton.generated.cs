//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyusd_toolbarbuttonOptionSets
{
	public enum msdyusd_EnableCondition
	{
		/// <summary>
		/// Always = 803750000
		/// </summary>
		Always = 803750000,
		/// <summary>
		/// Customer Session = 803750001
		/// </summary>
		Customer_Session = 803750001,
		/// <summary>
		/// Script Expression = 803750002
		/// </summary>
		Script_Expression = 803750002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyusd_toolbarbutton : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyusd_Buttons = "msdyusd_buttons";
			public const string msdyusd_ButtonText = "msdyusd_buttontext";
			public const string msdyusd_EnableCondition = "msdyusd_enablecondition";
			public const string msdyusd_EnabledCondition = "msdyusd_enabledcondition";
			public const string msdyusd_Image = "msdyusd_image";
			public const string msdyusd_name = "msdyusd_name";
			public const string msdyusd_order = "msdyusd_order";
			public const string msdyusd_ScriptCondition = "msdyusd_scriptcondition";
			public const string msdyusd_shortcutkey = "msdyusd_shortcutkey";
			public const string msdyusd_showtab = "msdyusd_showtab";
			public const string msdyusd_toolbarbuttonId = "msdyusd_toolbarbuttonid";
			public const string msdyusd_ToolbarId = "msdyusd_toolbarid";
			public const string msdyusd_Tooltip = "msdyusd_tooltip";
			public const string msdyusd_VisibleCondition = "msdyusd_visiblecondition";
			public const string msdyusd_WebResourceUrl = "msdyusd_webresourceurl";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyusd_toolbarbutton";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10952;

		[DebuggerNonUserCode()]
		public msdyusd_toolbarbutton()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyusd_toolbarbutton(Guid msdyusd_toolbarbuttonId)
		{
			Entity = new Entity(EntityLogicalName, msdyusd_toolbarbuttonId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyusd_toolbarbutton(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyusd_toolbarbutton(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyusd_toolbarbutton(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyusd_toolbarbutton(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier for Toolbar Button associated with Toolbar Button.</para>
		/// <para>Lookup to msdyusd_toolbarbutton</para>
		/// <para>Buttons</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyusd_Buttons
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyusd_Buttons); }
			set { Entity.Attributes[Fields.msdyusd_Buttons] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>ButtonText</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_ButtonText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_ButtonText); }
			set { Entity.Attributes[Fields.msdyusd_ButtonText] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Enable Condition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyusd_toolbarbuttonOptionSets.msdyusd_EnableCondition? msdyusd_EnableCondition
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyusd_EnableCondition);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyusd_toolbarbuttonOptionSets.msdyusd_EnableCondition)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyusd_EnableCondition] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyusd_EnableCondition] = null;
			}
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Enabled Condition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_EnabledCondition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_EnabledCondition); }
			set { Entity.Attributes[Fields.msdyusd_EnabledCondition] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_Image
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_Image); }
			set { Entity.Attributes[Fields.msdyusd_Image] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_name); }
			set { Entity.Attributes[Fields.msdyusd_name] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyusd_order
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyusd_order); }
			set { Entity.Attributes[Fields.msdyusd_order] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Script Condition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_ScriptCondition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_ScriptCondition); }
			set { Entity.Attributes[Fields.msdyusd_ScriptCondition] = value; }
		}

		/// <summary>
		/// <para>Example: CTRL+T</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Shortcut Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_shortcutkey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_shortcutkey); }
			set { Entity.Attributes[Fields.msdyusd_shortcutkey] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for UII Hosted Application associated with Toolbar Button.</para>
		/// <para>Lookup to uii_hostedapplication</para>
		/// <para>Show Tab</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyusd_showtab
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyusd_showtab); }
			set { Entity.Attributes[Fields.msdyusd_showtab] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>ToolbarButton</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyusd_toolbarbuttonId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyusd_toolbarbuttonId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Toolbar associated with Toolbar Button.</para>
		/// <para>Required - Lookup to msdyusd_toolbarstrip</para>
		/// <para>Toolbar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyusd_ToolbarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyusd_ToolbarId); }
			set { Entity.Attributes[Fields.msdyusd_ToolbarId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Tooltip</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_Tooltip
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_Tooltip); }
			set { Entity.Attributes[Fields.msdyusd_Tooltip] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Visible Condition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_VisibleCondition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_VisibleCondition); }
			set { Entity.Attributes[Fields.msdyusd_VisibleCondition] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 2000</para>
		/// <para>WebResourceUrl</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_WebResourceUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_WebResourceUrl); }
			set { Entity.Attributes[Fields.msdyusd_WebResourceUrl] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the ToolbarButton</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyusd_toolbarbuttonOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyusd_toolbarbuttonOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the ToolbarButton</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyusd_toolbarbuttonOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyusd_toolbarbuttonOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
