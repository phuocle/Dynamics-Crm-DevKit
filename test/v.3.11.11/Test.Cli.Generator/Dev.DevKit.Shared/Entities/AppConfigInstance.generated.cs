//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.AppConfigInstanceOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class AppConfigInstance : EntityBase
	{
		public struct Fields
		{
			public const string AppConfigId = "appconfigid";
			public const string AppConfigIdUnique = "appconfigidunique";
			public const string AppConfigInstanceId = "appconfiginstanceid";
			public const string AppConfigInstanceIdUnique = "appconfiginstanceidunique";
			public const string AppConfigMasterId = "appconfigmasterid";
			public const string ComponentState = "componentstate";
			public const string ComponentType = "componenttype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ObjectId = "objectid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string Value = "value";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "appconfiginstance";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9013;

		[DebuggerNonUserCode()]
		public AppConfigInstance()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppConfigInstance(Guid AppConfigInstanceId)
		{
			Entity = new Entity(EntityLogicalName, AppConfigInstanceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppConfigInstance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppConfigInstance(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppConfigInstance(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppConfigInstance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>System-calculated App Configuration unique identifier.</para>
		/// <para>Required - Lookup to appconfig</para>
		/// <para>App Config ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AppConfigId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AppConfigId); }
			set { Entity.Attributes[Fields.AppConfigId] = value; }
		}

		/// <summary>
		/// <para>Enter the App Configuration unique identifier of AppConfig entity for which this customization belongs.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>App Config ID Unique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AppConfigIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AppConfigIdUnique); }
			set { Entity.Attributes[Fields.AppConfigIdUnique] = value; }
		}

		/// <summary>
		/// <para>System-Populated App Configuration instance identifier.</para>
		/// <para>ReadOnly - Primary Key - Uniqueidentifier</para>
		/// <para>AppConfig Instance ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AppConfigInstanceId
		{
			get { return Id; }
		}

		/// <summary>
		/// <para>System-populated App Configuration Instance unique identifier.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>AppConfigInstanceIdUnique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AppConfigInstanceIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AppConfigInstanceIdUnique); }
			set { Entity.Attributes[Fields.AppConfigInstanceIdUnique] = value; }
		}

		/// <summary>
		/// <para>System-calculated App Configuration Master identifier.</para>
		/// <para>Required - Lookup to appconfigmaster</para>
		/// <para>App Config Master ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AppConfigMasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AppConfigMasterId); }
			set { Entity.Attributes[Fields.AppConfigMasterId] = value; }
		}

		/// <summary>
		/// <para>System-Populated Published or UnPublished state of App Configuration Instance.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppConfigInstanceOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppConfigInstanceOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>ComponentType</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Enter the componenet type of the artifact (Form/View etc.) for which customization is to be created.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ComponentType
		{
			get { return Entity.GetAttributeValue<string>(Fields.ComponentType); }
			set { Entity.Attributes[Fields.ComponentType] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalfÂ of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
		}

		/// <summary>
		/// <para>Shows the version in which the App Configuration Instance is introduced.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Is Managed</para>
		/// <para>ReadOnly - Required - Boolean</para>
		/// <para>Shows whether the App Configuration Instance is managed or not.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>ObjectId</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Enter the object identifier for the artifact (Form/View etc.) for which customization is to be created.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>System-calculated field for Organization identifier.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was migrated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
		}

		/// <summary>
		/// <para>Shows the last overwrite time for the App Configuration Instance.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Set the solution idenfitier for associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>SolutionId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Set the supporting solution idenfitier for associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>SupportingSolutionId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Enter a value for the customization property that is valid as per the validator XML specified in the app configuration master record.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Value
		{
			get { return Entity.GetAttributeValue<string>(Fields.Value); }
			set { Entity.Attributes[Fields.Value] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
