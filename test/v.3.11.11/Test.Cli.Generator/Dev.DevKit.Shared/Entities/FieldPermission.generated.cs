//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.FieldPermissionOptionSets
{
	public enum CanCreate
	{
		/// <summary>
		/// Allowed = 4
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// Not Allowed = 0
		/// </summary>
		Not_Allowed = 0
	}

	public enum CanRead
	{
		/// <summary>
		/// Allowed = 4
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// Not Allowed = 0
		/// </summary>
		Not_Allowed = 0
	}

	public enum CanUpdate
	{
		/// <summary>
		/// Allowed = 4
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// Not Allowed = 0
		/// </summary>
		Not_Allowed = 0
	}

	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class FieldPermission : EntityBase
	{
		public struct Fields
		{
			public const string AttributeLogicalName = "attributelogicalname";
			public const string CanCreate = "cancreate";
			public const string CanRead = "canread";
			public const string CanUpdate = "canupdate";
			public const string ComponentState = "componentstate";
			public const string FieldPermissionId = "fieldpermissionid";
			public const string FieldPermissionIdUnique = "fieldpermissionidunique";
			public const string FieldSecurityProfileId = "fieldsecurityprofileid";
			public const string IsManaged = "ismanaged";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "fieldpermission";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1201;

		[DebuggerNonUserCode()]
		public FieldPermission()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FieldPermission(Guid FieldPermissionId)
		{
			Entity = new Entity(EntityLogicalName, FieldPermissionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FieldPermission(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FieldPermission(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FieldPermission(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FieldPermission(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Attribute Name.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Name of the attribute for which this privilege is defined</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttributeLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttributeLogicalName); }
			set { Entity.Attributes[Fields.AttributeLogicalName] = value; }
		}

		/// <summary>
		/// <para>Can this Profile create the attribute</para>
		/// <para>Picklist</para>
		/// <para>Can create the attribute</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanCreate? CanCreate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CanCreate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanCreate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CanCreate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CanCreate] = null;
			}
		}

		/// <summary>
		/// <para>Can this Profile read the attribute</para>
		/// <para>Picklist</para>
		/// <para>Can Read the attribute</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanRead? CanRead
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CanRead);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanRead)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CanRead] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CanRead] = null;
			}
		}

		/// <summary>
		/// <para>Can this Profile update the attribute</para>
		/// <para>Picklist</para>
		/// <para>Can Update the attribute</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanUpdate? CanUpdate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CanUpdate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanUpdate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CanUpdate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CanUpdate] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the Field Permission.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Field Permission</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid FieldPermissionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.FieldPermissionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Field Permission</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FieldPermissionIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FieldPermissionIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of profile to which this privilege belongs.</para>
		/// <para>Lookup to fieldsecurityprofile</para>
		/// <para>Profile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference FieldSecurityProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.FieldSecurityProfileId); }
			set { Entity.Attributes[Fields.FieldSecurityProfileId] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
