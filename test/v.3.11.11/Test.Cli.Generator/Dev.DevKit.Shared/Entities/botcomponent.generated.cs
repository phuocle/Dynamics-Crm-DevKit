//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.botcomponentOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum ComponentType
	{
		/// <summary>
		/// Bot entity = 3
		/// </summary>
		Bot_entity = 3,
		/// <summary>
		/// Bot variable = 2
		/// </summary>
		Bot_variable = 2,
		/// <summary>
		/// Dialog = 4
		/// </summary>
		Dialog = 4,
		/// <summary>
		/// Dialog schema = 8
		/// </summary>
		Dialog_schema = 8,
		/// <summary>
		/// Language generation = 7
		/// </summary>
		Language_generation = 7,
		/// <summary>
		/// Language understanding = 6
		/// </summary>
		Language_understanding = 6,
		/// <summary>
		/// Object Model custom entity = 11
		/// </summary>
		Object_Model_custom_entity = 11,
		/// <summary>
		/// Object Model Dialog = 9
		/// </summary>
		Object_Model_Dialog = 9,
		/// <summary>
		/// Object Model global variable = 12
		/// </summary>
		Object_Model_global_variable = 12,
		/// <summary>
		/// Object Model skill = 13
		/// </summary>
		Object_Model_skill = 13,
		/// <summary>
		/// Object Model Trigger = 10
		/// </summary>
		Object_Model_Trigger = 10,
		/// <summary>
		/// Skill = 1
		/// </summary>
		Skill = 1,
		/// <summary>
		/// Topic = 0
		/// </summary>
		Topic = 0,
		/// <summary>
		/// Trigger = 5
		/// </summary>
		Trigger = 5
	}

	public enum Language
	{
		/// <summary>
		/// Arabic = 1025
		/// </summary>
		Arabic = 1025,
		/// <summary>
		/// Chinese (Simplified) = 2052
		/// </summary>
		Chinese_Simplified = 2052,
		/// <summary>
		/// Chinese (Traditional) = 1028
		/// </summary>
		Chinese_Traditional = 1028,
		/// <summary>
		/// Czech = 1029
		/// </summary>
		Czech = 1029,
		/// <summary>
		/// Danish = 1030
		/// </summary>
		Danish = 1030,
		/// <summary>
		/// Dutch = 1043
		/// </summary>
		Dutch = 1043,
		/// <summary>
		/// English = 1033
		/// </summary>
		English = 1033,
		/// <summary>
		/// Finnish = 1035
		/// </summary>
		Finnish = 1035,
		/// <summary>
		/// French = 1036
		/// </summary>
		French = 1036,
		/// <summary>
		/// German = 1031
		/// </summary>
		German = 1031,
		/// <summary>
		/// Greek = 1032
		/// </summary>
		Greek = 1032,
		/// <summary>
		/// Hindi = 1081
		/// </summary>
		Hindi = 1081,
		/// <summary>
		/// Indonesian = 1057
		/// </summary>
		Indonesian = 1057,
		/// <summary>
		/// Italian = 1040
		/// </summary>
		Italian = 1040,
		/// <summary>
		/// Japanese = 1041
		/// </summary>
		Japanese = 1041,
		/// <summary>
		/// Korean = 1042
		/// </summary>
		Korean = 1042,
		/// <summary>
		/// Norwegian = 1044
		/// </summary>
		Norwegian = 1044,
		/// <summary>
		/// Polish = 1045
		/// </summary>
		Polish = 1045,
		/// <summary>
		/// Portuguese (Brazilian) = 1046
		/// </summary>
		Portuguese_Brazilian = 1046,
		/// <summary>
		/// Russian = 1049
		/// </summary>
		Russian = 1049,
		/// <summary>
		/// Spanish = 1034
		/// </summary>
		Spanish = 1034,
		/// <summary>
		/// Swedish = 1053
		/// </summary>
		Swedish = 1053,
		/// <summary>
		/// Thai = 1054
		/// </summary>
		Thai = 1054,
		/// <summary>
		/// Turkish = 1055
		/// </summary>
		Turkish = 1055
	}

	public enum ReusePolicy
	{
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Private = 1
		/// </summary>
		Private = 1,
		/// <summary>
		/// Public = 2
		/// </summary>
		Public = 2
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class botcomponent : EntityBase
	{
		public struct Fields
		{
			public const string AccentColor = "accentcolor";
			public const string botcomponentId = "botcomponentid";
			public const string Category = "category";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string ComponentType = "componenttype";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Data = "data";
			public const string Description = "description";
			public const string HelpLink = "helplink";
			public const string IconUrl = "iconurl";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string Language = "language";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentBotComponentId = "parentbotcomponentid";
			public const string ReusePolicy = "reusepolicy";
			public const string SchemaName = "schemaname";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "botcomponent";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10079;

		[DebuggerNonUserCode()]
		public botcomponent()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public botcomponent(Guid botcomponentId)
		{
			Entity = new Entity(EntityLogicalName, botcomponentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public botcomponent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public botcomponent(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public botcomponent(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public botcomponent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Accent Color for this re-usable subcomponent</para>
		/// <para>String - MaxLength: 7</para>
		/// <para>Accent Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AccentColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.AccentColor); }
			set { Entity.Attributes[Fields.AccentColor] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>BotComponent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid botcomponentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.botcomponentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The category of Chatbot subcomponent.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Row id unique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>The sub type of Chatbot subcomponent.</para>
		/// <para>Required - Picklist</para>
		/// <para>ComponentType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentType? ComponentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ComponentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ComponentType] = null;
			}
		}

		/// <summary>
		/// <para>The content or metadata of the Bot Component that defines its structure and properties.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Content</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The content of the Bot Component in OBI format</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Obi Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Data
		{
			get { return Entity.GetAttributeValue<string>(Fields.Data); }
			set { Entity.Attributes[Fields.Data] = value; }
		}

		/// <summary>
		/// <para>Contains searchable text for the bot component</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Link to learn More about this subcomponent</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Help Link</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HelpLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.HelpLink); }
			set { Entity.Attributes[Fields.HelpLink] = value; }
		}

		/// <summary>
		/// <para>Icon Url for this subcomponent</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Icon Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IconUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.IconUrl); }
			set { Entity.Attributes[Fields.IconUrl] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Language of the chatbot subcomponent</para>
		/// <para>Picklist</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.Language? Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Language] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier for Chatbot subcomponent associated with Chatbot subcomponent.</para>
		/// <para>Lookup to botcomponent</para>
		/// <para>Parent chatbot subcomponent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBotComponentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBotComponentId); }
			set { Entity.Attributes[Fields.ParentBotComponentId] = value; }
		}

		/// <summary>
		/// <para>Reuse Policy for the chatbot subcomponent</para>
		/// <para>Picklist</para>
		/// <para>Reuse Policy</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ReusePolicy? ReusePolicy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReusePolicy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ReusePolicy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReusePolicy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReusePolicy] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>SchemaName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaName); }
			set { Entity.Attributes[Fields.SchemaName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Status of the BotComponent</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the BotComponent</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
