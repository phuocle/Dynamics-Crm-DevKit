//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets
{
	public enum msdyn_agentDisplayName
	{
		/// <summary>
		/// First name = 192350001
		/// </summary>
		First_name = 192350001,
		/// <summary>
		/// Full name = 192350000
		/// </summary>
		Full_name = 192350000,
		/// <summary>
		/// Last name = 192350002
		/// </summary>
		Last_name = 192350002,
		/// <summary>
		/// Nick name = 192350003
		/// </summary>
		Nick_name = 192350003
	}

	public enum msdyn_callingoptions
	{
		/// <summary>
		/// No calling = 192350000
		/// </summary>
		No_calling = 192350000,
		/// <summary>
		/// Video and voice calling = 192350001
		/// </summary>
		Video_and_voice_calling = 192350001,
		/// <summary>
		/// Voice only = 192350002
		/// </summary>
		Voice_only = 192350002
	}

	public enum msdyn_conversationmode
	{
		/// <summary>
		/// Live Chat = 192350000
		/// </summary>
		Live_Chat = 192350000,
		/// <summary>
		/// Persistent Chat = 192350001
		/// </summary>
		Persistent_Chat = 192350001
	}

	public enum msdyn_Language
	{
		/// <summary>
		/// Auto-Detect = 192350000
		/// </summary>
		Auto_Detect = 192350000,
		/// <summary>
		/// English = 192360014
		/// </summary>
		English = 192360014
	}

	public enum msdyn_offlinewidgetthemecolor
	{
		/// <summary>
		/// Black = 19236004
		/// </summary>
		Black = 19236004,
		/// <summary>
		/// Blue = 19236002
		/// </summary>
		Blue = 19236002,
		/// <summary>
		/// Brown = 192350005
		/// </summary>
		Brown = 192350005,
		/// <summary>
		/// Clay = 192350006
		/// </summary>
		Clay = 192350006,
		/// <summary>
		/// Green = 19236003
		/// </summary>
		Green = 19236003,
		/// <summary>
		/// Grey = 192350003
		/// </summary>
		Grey = 192350003,
		/// <summary>
		/// Orange = 192350001
		/// </summary>
		Orange = 192350001,
		/// <summary>
		/// Pink = 192350002
		/// </summary>
		Pink = 192350002,
		/// <summary>
		/// Purple = 192350007
		/// </summary>
		Purple = 192350007,
		/// <summary>
		/// Red = 19236001
		/// </summary>
		Red = 19236001,
		/// <summary>
		/// Teal = 192360017
		/// </summary>
		Teal = 192360017,
		/// <summary>
		/// Violet = 192350004
		/// </summary>
		Violet = 192350004
	}

	public enum msdyn_PostConversationSurveyBotSurveyMode
	{
		/// <summary>
		/// Insert survey in conversation = 192350000
		/// </summary>
		Insert_survey_in_conversation = 192350000,
		/// <summary>
		/// Send survey link to conversation = 192350001
		/// </summary>
		Send_survey_link_to_conversation = 192350001
	}

	public enum msdyn_PostConversationSurveyMode
	{
		/// <summary>
		/// Insert survey in conversation = 192350000
		/// </summary>
		Insert_survey_in_conversation = 192350000,
		/// <summary>
		/// Send survey link to conversation = 192350001
		/// </summary>
		Send_survey_link_to_conversation = 192350001
	}

	public enum msdyn_widgetPosition
	{
		/// <summary>
		/// Bottom left = 192236011
		/// </summary>
		Bottom_left = 192236011,
		/// <summary>
		/// Bottom right = 192236010
		/// </summary>
		Bottom_right = 192236010
	}

	public enum msdyn_widgetThemeColor
	{
		/// <summary>
		/// Black = 19236004
		/// </summary>
		Black = 19236004,
		/// <summary>
		/// Blue = 19236002
		/// </summary>
		Blue = 19236002,
		/// <summary>
		/// Brown = 192350005
		/// </summary>
		Brown = 192350005,
		/// <summary>
		/// Clay = 192350006
		/// </summary>
		Clay = 192350006,
		/// <summary>
		/// Green = 19236003
		/// </summary>
		Green = 19236003,
		/// <summary>
		/// Grey = 192350003
		/// </summary>
		Grey = 192350003,
		/// <summary>
		/// Orange = 192350001
		/// </summary>
		Orange = 192350001,
		/// <summary>
		/// Pink = 192350002
		/// </summary>
		Pink = 192350002,
		/// <summary>
		/// Purple = 192350007
		/// </summary>
		Purple = 192350007,
		/// <summary>
		/// Red = 19236001
		/// </summary>
		Red = 19236001,
		/// <summary>
		/// Teal = 192360017
		/// </summary>
		Teal = 192360017,
		/// <summary>
		/// Violet = 192350004
		/// </summary>
		Violet = 192350004
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_livechatconfig : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_agentDisplayName = "msdyn_agentdisplayname";
			public const string msdyn_AuthsettingsId = "msdyn_authsettingsid";
			public const string msdyn_AutoDetectLanguage = "msdyn_autodetectlanguage";
			public const string msdyn_avatarUrl = "msdyn_avatarurl";
			public const string msdyn_averagewaittime_enabled = "msdyn_averagewaittime_enabled";
			public const string msdyn_callingoptions = "msdyn_callingoptions";
			public const string msdyn_cobrowseprovider = "msdyn_cobrowseprovider";
			public const string msdyn_conversationmode = "msdyn_conversationmode";
			public const string msdyn_Duringnonoperatinghours = "msdyn_duringnonoperatinghours";
			public const string msdyn_EmailTemplate = "msdyn_emailtemplate";
			public const string msdyn_enablechatreconnect = "msdyn_enablechatreconnect";
			public const string msdyn_Enablechattranscriptdownload = "msdyn_enablechattranscriptdownload";
			public const string msdyn_Enablechattranscriptemail = "msdyn_enablechattranscriptemail";
			public const string msdyn_enablecobrowse = "msdyn_enablecobrowse";
			public const string msdyn_Enablefileattachmentsforagents = "msdyn_enablefileattachmentsforagents";
			public const string msdyn_Enablefileattachmentsforcustomers = "msdyn_enablefileattachmentsforcustomers";
			public const string msdyn_enablescreensharing = "msdyn_enablescreensharing";
			public const string msdyn_genericagentdisplayname = "msdyn_genericagentdisplayname";
			public const string msdyn_infolabel = "msdyn_infolabel";
			public const string msdyn_Language = "msdyn_language";
			public const string msdyn_livechatconfigId = "msdyn_livechatconfigid";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_Mailbox = "msdyn_mailbox";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_oc_geolocationprovider = "msdyn_oc_geolocationprovider";
			public const string msdyn_ocWidgetLanguage = "msdyn_ocwidgetlanguage";
			public const string msdyn_offlinewidgetsubtitle = "msdyn_offlinewidgetsubtitle";
			public const string msdyn_offlinewidgetthemecolor = "msdyn_offlinewidgetthemecolor";
			public const string msdyn_offlinewidgettitle = "msdyn_offlinewidgettitle";
			public const string msdyn_operatinghourid = "msdyn_operatinghourid";
			public const string msdyn_portalurl = "msdyn_portalurl";
			public const string msdyn_positioninqueue_enabled = "msdyn_positioninqueue_enabled";
			public const string msdyn_postchatenabled = "msdyn_postchatenabled";
			public const string msdyn_PostConversationSurvey = "msdyn_postconversationsurvey";
			public const string msdyn_PostConversationSurveyBotSurvey = "msdyn_postconversationsurveybotsurvey";
			public const string msdyn_PostConversationSurveyBotSurveyMessageText = "msdyn_postconversationsurveybotsurveymessagetext";
			public const string msdyn_PostConversationSurveyBotSurveyMode = "msdyn_postconversationsurveybotsurveymode";
			public const string msdyn_PostConversationSurveyEnable = "msdyn_postconversationsurveyenable";
			public const string msdyn_PostConversationSurveyMessageText = "msdyn_postconversationsurveymessagetext";
			public const string msdyn_PostConversationSurveyMode = "msdyn_postconversationsurveymode";
			public const string msdyn_PostConversationSurveySeparateBotSurvey = "msdyn_postconversationsurveyseparatebotsurvey";
			public const string msdyn_PrechatEnabled = "msdyn_prechatenabled";
			public const string msdyn_PreChatQuestionnaireAuthenticated = "msdyn_prechatquestionnaireauthenticated";
			public const string msdyn_PreChatQuestionnaireUnauthenticated = "msdyn_prechatquestionnaireunauthenticated";
			public const string msdyn_proactivechatenabled = "msdyn_proactivechatenabled";
			public const string msdyn_redirectionurl = "msdyn_redirectionurl";
			public const string msdyn_requestvisitorlocation = "msdyn_requestvisitorlocation";
			public const string msdyn_screensharingprovider = "msdyn_screensharingprovider";
			public const string msdyn_showagentname = "msdyn_showagentname";
			public const string msdyn_Showwidgetduringofflinehours = "msdyn_showwidgetduringofflinehours";
			public const string msdyn_timetoreconnectwithpreviousagent = "msdyn_timetoreconnectwithpreviousagent";
			public const string msdyn_widgetAppId = "msdyn_widgetappid";
			public const string msdyn_WidgetLocale = "msdyn_widgetlocale";
			public const string msdyn_widgetPosition = "msdyn_widgetposition";
			public const string msdyn_WidgetSnippet = "msdyn_widgetsnippet";
			public const string msdyn_widgetsoundnotification = "msdyn_widgetsoundnotification";
			public const string msdyn_widgetSubtitle = "msdyn_widgetsubtitle";
			public const string msdyn_widgetThemeColor = "msdyn_widgetthemecolor";
			public const string msdyn_widgetTitle = "msdyn_widgettitle";
			public const string msdyn_widgetvisualnotification = "msdyn_widgetvisualnotification";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_livechatconfig";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10814;

		[DebuggerNonUserCode()]
		public msdyn_livechatconfig()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(Guid msdyn_livechatconfigId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_livechatconfigId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Configure agent name to be displayed in the chat widget</para>
		/// <para>Picklist</para>
		/// <para>Agent display name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_agentDisplayName? msdyn_agentDisplayName
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_agentDisplayName);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_agentDisplayName)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_agentDisplayName] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_agentDisplayName] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Authentication settings associated with Chat widget.</para>
		/// <para>Lookup to msdyn_authenticationsettings</para>
		/// <para>Authentication settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AuthsettingsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AuthsettingsId); }
			set { Entity.Attributes[Fields.msdyn_AuthsettingsId] = value; }
		}

		/// <summary>
		/// <para>Indicates if the chat widget should automatically detect user locale.</para>
		/// <para>Required - Boolean</para>
		/// <para>Auto Detect Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoDetectLanguage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoDetectLanguage); }
			set { Entity.Attributes[Fields.msdyn_AutoDetectLanguage] = value; }
		}

		/// <summary>
		/// <para>Chat logo</para>
		/// <para>Required - String - MaxLength: 4000</para>
		/// <para>Logo</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_avatarUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_avatarUrl); }
			set { Entity.Attributes[Fields.msdyn_avatarUrl] = value; }
		}

		/// <summary>
		/// <para>Indicates whether display of wait time is enabled</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether display of wait time is enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_averagewaittime_enabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_averagewaittime_enabled); }
			set { Entity.Attributes[Fields.msdyn_averagewaittime_enabled] = value; }
		}

		/// <summary>
		/// <para>List of calling options available for the chat widget</para>
		/// <para>Required - Picklist</para>
		/// <para>Calling options</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_callingoptions? msdyn_callingoptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_callingoptions);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_callingoptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_callingoptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_callingoptions] = null;
			}
		}

		/// <summary>
		/// <para>Select a co-browse provider</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Co-browse provider</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cobrowseprovider
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cobrowseprovider); }
			set { Entity.Attributes[Fields.msdyn_cobrowseprovider] = value; }
		}

		/// <summary>
		/// <para>Indicates the conversation mode of the chat widget</para>
		/// <para>Picklist</para>
		/// <para>Indicates the conversation mode of the chat widget</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_conversationmode? msdyn_conversationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_conversationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_conversationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_conversationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_conversationmode] = null;
			}
		}

		/// <summary>
		/// <para>(Deprecated) During non-operating hours</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>(Deprecated) During non-operating hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Duringnonoperatinghours
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Duringnonoperatinghours); }
			set { Entity.Attributes[Fields.msdyn_Duringnonoperatinghours] = value; }
		}

		/// <summary>
		/// <para>Email Template</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EmailTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EmailTemplate); }
			set { Entity.Attributes[Fields.msdyn_EmailTemplate] = value; }
		}

		/// <summary>
		/// <para>This will let customers reconnect to their previous session.</para>
		/// <para>Boolean</para>
		/// <para>Turn on reconnect to previous chat</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablechatreconnect
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablechatreconnect); }
			set { Entity.Attributes[Fields.msdyn_enablechatreconnect] = value; }
		}

		/// <summary>
		/// <para>Allow download of transcript</para>
		/// <para>Required - Boolean</para>
		/// <para>Allow download of transcript</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Enablechattranscriptdownload
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Enablechattranscriptdownload); }
			set { Entity.Attributes[Fields.msdyn_Enablechattranscriptdownload] = value; }
		}

		/// <summary>
		/// <para>Allow email of transcript</para>
		/// <para>Required - Boolean</para>
		/// <para>Allow email of transcript</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Enablechattranscriptemail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Enablechattranscriptemail); }
			set { Entity.Attributes[Fields.msdyn_Enablechattranscriptemail] = value; }
		}

		/// <summary>
		/// <para>Co-browse allows agent and customer to interact on the same web page in real time</para>
		/// <para>Required - Boolean</para>
		/// <para>Enable Co-browse</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablecobrowse
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablecobrowse); }
			set { Entity.Attributes[Fields.msdyn_enablecobrowse] = value; }
		}

		/// <summary>
		/// <para>Enable file attachments for agents</para>
		/// <para>Boolean</para>
		/// <para>Enable file attachments for agents</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Enablefileattachmentsforagents
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Enablefileattachmentsforagents); }
			set { Entity.Attributes[Fields.msdyn_Enablefileattachmentsforagents] = value; }
		}

		/// <summary>
		/// <para>Enable file attachments for customers</para>
		/// <para>Boolean</para>
		/// <para>Enable file attachments for customers</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Enablefileattachmentsforcustomers
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Enablefileattachmentsforcustomers); }
			set { Entity.Attributes[Fields.msdyn_Enablefileattachmentsforcustomers] = value; }
		}

		/// <summary>
		/// <para>Enable Screen sharing</para>
		/// <para>Required - Boolean</para>
		/// <para>Enable Screen sharing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablescreensharing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablescreensharing); }
			set { Entity.Attributes[Fields.msdyn_enablescreensharing] = value; }
		}

		/// <summary>
		/// <para>Display Agent Generic Name</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Display Generic Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_genericagentdisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_genericagentdisplayname); }
			set { Entity.Attributes[Fields.msdyn_genericagentdisplayname] = value; }
		}

		/// <summary>
		/// <para>Label string indicating user to save the record to add location information</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>infolabel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_infolabel
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_infolabel); }
			set { Entity.Attributes[Fields.msdyn_infolabel] = value; }
		}

		/// <summary>
		/// <para>Language  in which chat widget is rendered</para>
		/// <para>Required - Picklist</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_Language? msdyn_Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Language] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Chat Widget</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_livechatconfigId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_livechatconfigId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Work Stream Identifier</para>
		/// <para>Required - Lookup to msdyn_liveworkstream</para>
		/// <para>Work stream</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}

		/// <summary>
		/// <para>The mailbox where your email transcripts will be sent from.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Sender Mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Mailbox
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Mailbox); }
			set { Entity.Attributes[Fields.msdyn_Mailbox] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Geo Location Provider API Key</para>
		/// <para>Lookup to msdyn_oc_geolocationprovider</para>
		/// <para>Provider API key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_oc_geolocationprovider
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_oc_geolocationprovider); }
			set { Entity.Attributes[Fields.msdyn_oc_geolocationprovider] = value; }
		}

		/// <summary>
		/// <para>The language of the chat widget.</para>
		/// <para>Required - Lookup to msdyn_oclanguage</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ocWidgetLanguage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ocWidgetLanguage); }
			set { Entity.Attributes[Fields.msdyn_ocWidgetLanguage] = value; }
		}

		/// <summary>
		/// <para>Description for offline widget subtitle attribute</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Offline Widget Subtitle</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_offlinewidgetsubtitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_offlinewidgetsubtitle); }
			set { Entity.Attributes[Fields.msdyn_offlinewidgetsubtitle] = value; }
		}

		/// <summary>
		/// <para>Description for offline widget theme color attribute</para>
		/// <para>Required - Picklist</para>
		/// <para>Offline Widget Theme Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_offlinewidgetthemecolor? msdyn_offlinewidgetthemecolor
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_offlinewidgetthemecolor);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_offlinewidgetthemecolor)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_offlinewidgetthemecolor] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_offlinewidgetthemecolor] = null;
			}
		}

		/// <summary>
		/// <para>Description for offline widget title attribute</para>
		/// <para>Required - String - MaxLength: 4000</para>
		/// <para>Offline Widegt Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_offlinewidgettitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_offlinewidgettitle); }
			set { Entity.Attributes[Fields.msdyn_offlinewidgettitle] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Operating hour associated with Chat widget.</para>
		/// <para>Lookup to msdyn_operatinghour</para>
		/// <para>Operating hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_operatinghourid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_operatinghourid); }
			set { Entity.Attributes[Fields.msdyn_operatinghourid] = value; }
		}

		/// <summary>
		/// <para>Provide a link to the web portal where your chat is hosted.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Portal URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_portalurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_portalurl); }
			set { Entity.Attributes[Fields.msdyn_portalurl] = value; }
		}

		/// <summary>
		/// <para>Enable Position In Queue feature</para>
		/// <para>Boolean</para>
		/// <para>Show position in queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_positioninqueue_enabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_positioninqueue_enabled); }
			set { Entity.Attributes[Fields.msdyn_positioninqueue_enabled] = value; }
		}

		/// <summary>
		/// <para>Enable Post-Chat (Deprecated)</para>
		/// <para>Required - Boolean</para>
		/// <para>Post-chat Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_postchatenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_postchatenabled); }
			set { Entity.Attributes[Fields.msdyn_postchatenabled] = value; }
		}

		/// <summary>
		/// <para>Lookup to Dynamics 365 Customer Voice survey field</para>
		/// <para>Lookup to msfp_survey</para>
		/// <para>Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PostConversationSurvey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PostConversationSurvey); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurvey] = value; }
		}

		/// <summary>
		/// <para>Enable or disable bot survey</para>
		/// <para>Boolean</para>
		/// <para>Bot Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PostConversationSurveyBotSurvey
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PostConversationSurveyBotSurvey); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveyBotSurvey] = value; }
		}

		/// <summary>
		/// <para>Prefix text for survey link message that will be sent to the user.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PostConversationSurveyBotSurveyMessageText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PostConversationSurveyBotSurveyMessageText); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveyBotSurveyMessageText] = value; }
		}

		/// <summary>
		/// <para>Mode of the survey to be sent</para>
		/// <para>Picklist</para>
		/// <para>Survey Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyBotSurveyMode? msdyn_PostConversationSurveyBotSurveyMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_PostConversationSurveyBotSurveyMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyBotSurveyMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PostConversationSurveyBotSurveyMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_PostConversationSurveyBotSurveyMode] = null;
			}
		}

		/// <summary>
		/// <para>To enable or disable post conversation survey</para>
		/// <para>Boolean</para>
		/// <para>Enable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PostConversationSurveyEnable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PostConversationSurveyEnable); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveyEnable] = value; }
		}

		/// <summary>
		/// <para>Prefix text for survey link message that will be sent to the user.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PostConversationSurveyMessageText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PostConversationSurveyMessageText); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveyMessageText] = value; }
		}

		/// <summary>
		/// <para>Mode of the survey to be sent</para>
		/// <para>Picklist</para>
		/// <para>Survey Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyMode? msdyn_PostConversationSurveyMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_PostConversationSurveyMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PostConversationSurveyMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_PostConversationSurveyMode] = null;
			}
		}

		/// <summary>
		/// <para>Lookup to Dynamics 365 Customer Voice survey field</para>
		/// <para>Lookup to msfp_survey</para>
		/// <para>Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PostConversationSurveySeparateBotSurvey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PostConversationSurveySeparateBotSurvey); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveySeparateBotSurvey] = value; }
		}

		/// <summary>
		/// <para>Enable Pre-chat survey feature</para>
		/// <para>Required - Boolean</para>
		/// <para>Pre-Chat Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PrechatEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PrechatEnabled); }
			set { Entity.Attributes[Fields.msdyn_PrechatEnabled] = value; }
		}

		/// <summary>
		/// <para>Prechat Question set for authenticated users</para>
		/// <para>Lookup to msdyn_questionsequence</para>
		/// <para>Question Set for Authenticated Users</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PreChatQuestionnaireAuthenticated
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PreChatQuestionnaireAuthenticated); }
			set { Entity.Attributes[Fields.msdyn_PreChatQuestionnaireAuthenticated] = value; }
		}

		/// <summary>
		/// <para>Prechat Question set for unauthenticated users</para>
		/// <para>Lookup to msdyn_questionsequence</para>
		/// <para>Question Set for Unauthenticated Users</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PreChatQuestionnaireUnauthenticated
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PreChatQuestionnaireUnauthenticated); }
			set { Entity.Attributes[Fields.msdyn_PreChatQuestionnaireUnauthenticated] = value; }
		}

		/// <summary>
		/// <para>Enable Proactive chat for this chat widget</para>
		/// <para>Required - Boolean</para>
		/// <para>Proactive-chat</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_proactivechatenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_proactivechatenabled); }
			set { Entity.Attributes[Fields.msdyn_proactivechatenabled] = value; }
		}

		/// <summary>
		/// <para>We&apos;ll redirect customers to this webpage.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Redirection URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_redirectionurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_redirectionurl); }
			set { Entity.Attributes[Fields.msdyn_redirectionurl] = value; }
		}

		/// <summary>
		/// <para>Enable Visitor Location Feature</para>
		/// <para>Required - Boolean</para>
		/// <para>Request visitor location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_requestvisitorlocation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_requestvisitorlocation); }
			set { Entity.Attributes[Fields.msdyn_requestvisitorlocation] = value; }
		}

		/// <summary>
		/// <para>Select a screen sharing provider</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Screen sharing provider</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_screensharingprovider
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_screensharingprovider); }
			set { Entity.Attributes[Fields.msdyn_screensharingprovider] = value; }
		}

		/// <summary>
		/// <para>Agent Display Name configuration for the chat widget</para>
		/// <para>Boolean</para>
		/// <para>Anonymize Agent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_showagentname
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_showagentname); }
			set { Entity.Attributes[Fields.msdyn_showagentname] = value; }
		}

		/// <summary>
		/// <para>Description for show/hide offline widget attribute</para>
		/// <para>Required - Boolean</para>
		/// <para>Show widget during offline hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Showwidgetduringofflinehours
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Showwidgetduringofflinehours); }
			set { Entity.Attributes[Fields.msdyn_Showwidgetduringofflinehours] = value; }
		}

		/// <summary>
		/// <para>The previous agent&apos;s capacity will be held for this time period.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Reconnect to previous agent for</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_timetoreconnectwithpreviousagent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_timetoreconnectwithpreviousagent); }
			set { Entity.Attributes[Fields.msdyn_timetoreconnectwithpreviousagent] = value; }
		}

		/// <summary>
		/// <para>Widget App Identifier used to identify the chat widget</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Widget App Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_widgetAppId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_widgetAppId); }
			set { Entity.Attributes[Fields.msdyn_widgetAppId] = value; }
		}

		/// <summary>
		/// <para>The language of the chat widget.</para>
		/// <para>Lookup to msdyn_chatwidgetlanguage</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WidgetLocale
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WidgetLocale); }
			set { Entity.Attributes[Fields.msdyn_WidgetLocale] = value; }
		}

		/// <summary>
		/// <para>Chat position relative to the page</para>
		/// <para>Required - Picklist</para>
		/// <para>Position</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetPosition? msdyn_widgetPosition
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_widgetPosition);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetPosition)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_widgetPosition] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_widgetPosition] = null;
			}
		}

		/// <summary>
		/// <para>Javascript snippet which can be embedded in a webpage</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Widget Snippet</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WidgetSnippet
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WidgetSnippet); }
			set { Entity.Attributes[Fields.msdyn_WidgetSnippet] = value; }
		}

		/// <summary>
		/// <para>Enable sound notifications for new incoming messages</para>
		/// <para>Boolean</para>
		/// <para>Turn on sound notifications</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_widgetsoundnotification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_widgetsoundnotification); }
			set { Entity.Attributes[Fields.msdyn_widgetsoundnotification] = value; }
		}

		/// <summary>
		/// <para>Subtitle for the chat widget</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Subtitle</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_widgetSubtitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_widgetSubtitle); }
			set { Entity.Attributes[Fields.msdyn_widgetSubtitle] = value; }
		}

		/// <summary>
		/// <para>Theme color for the chat widget</para>
		/// <para>Required - Picklist</para>
		/// <para>Theme Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetThemeColor? msdyn_widgetThemeColor
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_widgetThemeColor);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetThemeColor)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_widgetThemeColor] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_widgetThemeColor] = null;
			}
		}

		/// <summary>
		/// <para>Title for the chat widget</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_widgetTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_widgetTitle); }
			set { Entity.Attributes[Fields.msdyn_widgetTitle] = value; }
		}

		/// <summary>
		/// <para>Enable visual indicators for unread messages</para>
		/// <para>Boolean</para>
		/// <para>Turn on unread messages indicator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_widgetvisualnotification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_widgetvisualnotification); }
			set { Entity.Attributes[Fields.msdyn_widgetvisualnotification] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Chat widget</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Chat widget</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
