//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets
{
	public enum msdyn_JournalType
	{
		/// <summary>
		/// Allocated = 690970002
		/// </summary>
		Allocated = 690970002,
		/// <summary>
		/// On Hand = 690970000
		/// </summary>
		On_Hand = 690970000,
		/// <summary>
		/// On Order = 690970001
		/// </summary>
		On_Order = 690970001
	}

	public enum msdyn_TransactionType
	{
		/// <summary>
		/// Inventory Adjustment = 690970003
		/// </summary>
		Inventory_Adjustment = 690970003,
		/// <summary>
		/// Inventory Transfer = 690970004
		/// </summary>
		Inventory_Transfer = 690970004,
		/// <summary>
		/// Manual = 690970006
		/// </summary>
		Manual = 690970006,
		/// <summary>
		/// Purchase Order Product = 690970000
		/// </summary>
		Purchase_Order_Product = 690970000,
		/// <summary>
		/// Purchase Order Receipt = 690970001
		/// </summary>
		Purchase_Order_Receipt = 690970001,
		/// <summary>
		/// RMA Product = 690970005
		/// </summary>
		RMA_Product = 690970005,
		/// <summary>
		/// WO Product = 690970002
		/// </summary>
		WO_Product = 690970002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_inventoryjournal : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AllocatedToWorkOrder = "msdyn_allocatedtoworkorder";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_InventoryAdjustmentProduct = "msdyn_inventoryadjustmentproduct";
			public const string msdyn_inventoryjournalId = "msdyn_inventoryjournalid";
			public const string msdyn_JournalType = "msdyn_journaltype";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_OriginatingJournal = "msdyn_originatingjournal";
			public const string msdyn_Product = "msdyn_product";
			public const string msdyn_PurchaseOrderProduct = "msdyn_purchaseorderproduct";
			public const string msdyn_PurchaseOrderReceiptProduct = "msdyn_purchaseorderreceiptproduct";
			public const string msdyn_Quantity = "msdyn_quantity";
			public const string msdyn_Reversal = "msdyn_reversal";
			public const string msdyn_RMAReceiptProduct = "msdyn_rmareceiptproduct";
			public const string msdyn_TransactionType = "msdyn_transactiontype";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_Warehouse = "msdyn_warehouse";
			public const string msdyn_WorkOrderProduct = "msdyn_workorderproduct";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_inventoryjournal";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10610;

		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(Guid msdyn_inventoryjournalId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_inventoryjournalId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Work Order this product is allocated to</para>
		/// <para>Lookup to msdyn_workorder</para>
		/// <para>Allocated To Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AllocatedToWorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AllocatedToWorkOrder); }
			set { Entity.Attributes[Fields.msdyn_AllocatedToWorkOrder] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>The Inventory Adjustment Product record related to this journal</para>
		/// <para>Lookup to msdyn_inventoryadjustmentproduct</para>
		/// <para>Inventory Adjustment Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_InventoryAdjustmentProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_InventoryAdjustmentProduct); }
			set { Entity.Attributes[Fields.msdyn_InventoryAdjustmentProduct] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Inventory Journal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_inventoryjournalId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_inventoryjournalId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the transaction type of this journal.</para>
		/// <para>Required - Picklist</para>
		/// <para>Journal Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_JournalType? msdyn_JournalType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_JournalType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_JournalType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_JournalType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_JournalType] = null;
			}
		}

		/// <summary>
		/// <para>Enter the name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Indicates the Journal reversed by this journal record</para>
		/// <para>Lookup to msdyn_inventoryjournal</para>
		/// <para>Originating Journal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OriginatingJournal
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OriginatingJournal); }
			set { Entity.Attributes[Fields.msdyn_OriginatingJournal] = value; }
		}

		/// <summary>
		/// <para>Product this journal relates to</para>
		/// <para>Required - Lookup to product</para>
		/// <para>Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Product
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Product); }
			set { Entity.Attributes[Fields.msdyn_Product] = value; }
		}

		/// <summary>
		/// <para>The Purchase Order Product record related to this journal</para>
		/// <para>Lookup to msdyn_purchaseorderproduct</para>
		/// <para>Purchase Order Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PurchaseOrderProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PurchaseOrderProduct); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderProduct] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Purchase Order Receipt Product associated with Inventory Journal.</para>
		/// <para>Lookup to msdyn_purchaseorderreceiptproduct</para>
		/// <para>Purchase Order Receipt Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PurchaseOrderReceiptProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PurchaseOrderReceiptProduct); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderReceiptProduct] = value; }
		}

		/// <summary>
		/// <para>Enter the quantity affected. A positive quantity indicates the receipt of this product into the specified warehouse, whereas a negative indicates a withdrawal.</para>
		/// <para>Required - Double - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Quantity
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Quantity); }
			set { Entity.Attributes[Fields.msdyn_Quantity] = value; }
		}

		/// <summary>
		/// <para>Indicates if this Journal reverses a previous journal record</para>
		/// <para>Boolean</para>
		/// <para>Reversal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Reversal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Reversal); }
			set { Entity.Attributes[Fields.msdyn_Reversal] = value; }
		}

		/// <summary>
		/// <para>The RMA Receipt Product record related to this journal</para>
		/// <para>Lookup to msdyn_rmareceiptproduct</para>
		/// <para>RMA Receipt Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RMAReceiptProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RMAReceiptProduct); }
			set { Entity.Attributes[Fields.msdyn_RMAReceiptProduct] = value; }
		}

		/// <summary>
		/// <para>Shows the transaction type of this journal.</para>
		/// <para>Required - Picklist</para>
		/// <para>Transaction Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_TransactionType? msdyn_TransactionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_TransactionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionType] = null;
			}
		}

		/// <summary>
		/// <para>Unit of product used</para>
		/// <para>Required - Lookup to uom</para>
		/// <para>Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}

		/// <summary>
		/// <para>Warehouse affected by this transaction</para>
		/// <para>Required - Lookup to msdyn_warehouse</para>
		/// <para>Warehouse</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Warehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Warehouse); }
			set { Entity.Attributes[Fields.msdyn_Warehouse] = value; }
		}

		/// <summary>
		/// <para>The Work Order Product record related to this journal</para>
		/// <para>Lookup to msdyn_workorderproduct</para>
		/// <para>Work Order Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderProduct); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderProduct] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Inventory Journal</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Inventory Journal</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
