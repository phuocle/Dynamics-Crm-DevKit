//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets
{
	public enum msdyn_InspectionResult
	{
		/// <summary>
		/// Fail = 100000001
		/// </summary>
		Fail = 100000001,
		/// <summary>
		/// Invalid = 100000002
		/// </summary>
		Invalid = 100000002,
		/// <summary>
		/// Pass = 100000000
		/// </summary>
		Pass = 100000000
	}

	public enum msdyn_inspectiontaskresult
	{
		/// <summary>
		/// Fail = 192350001
		/// </summary>
		Fail = 192350001,
		/// <summary>
		/// NA = 192350003
		/// </summary>
		NA = 192350003,
		/// <summary>
		/// Partial Success = 192350002
		/// </summary>
		Partial_Success = 192350002,
		/// <summary>
		/// Pass = 192350000
		/// </summary>
		Pass = 192350000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_workorderservicetask : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ActualDuration = "msdyn_actualduration";
			public const string msdyn_AgreementBookingServiceTask = "msdyn_agreementbookingservicetask";
			public const string msdyn_Booking = "msdyn_booking";
			public const string msdyn_CustomerAsset = "msdyn_customerasset";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_EstimatedDuration = "msdyn_estimatedduration";
			public const string msdyn_Inspection = "msdyn_inspection";
			public const string msdyn_inspectiondefinitionid = "msdyn_inspectiondefinitionid";
			public const string msdyn_InspectionEnabled = "msdyn_inspectionenabled";
			public const string msdyn_inspectionresponseid = "msdyn_inspectionresponseid";
			public const string msdyn_InspectionResult = "msdyn_inspectionresult";
			public const string msdyn_inspectiontaskresult = "msdyn_inspectiontaskresult";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_LineOrder = "msdyn_lineorder";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_PercentComplete = "msdyn_percentcomplete";
			public const string msdyn_surveyboundedoutput = "msdyn_surveyboundedoutput";
			public const string msdyn_TaskType = "msdyn_tasktype";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string msdyn_WorkOrderIncident = "msdyn_workorderincident";
			public const string msdyn_workorderservicetaskId = "msdyn_workorderservicetaskid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_workorderservicetask";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10658;

		[DebuggerNonUserCode()]
		public msdyn_workorderservicetask()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservicetask(Guid msdyn_workorderservicetaskId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_workorderservicetaskId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservicetask(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservicetask(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservicetask(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservicetask(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Actual Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ActualDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ActualDuration); }
			set { Entity.Attributes[Fields.msdyn_ActualDuration] = value; }
		}

		/// <summary>
		/// <para>Agreement Booking Service Task linked to this Work Order Service Task</para>
		/// <para>Lookup to msdyn_agreementbookingservicetask</para>
		/// <para>Agreement Booking Service Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AgreementBookingServiceTask
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AgreementBookingServiceTask); }
			set { Entity.Attributes[Fields.msdyn_AgreementBookingServiceTask] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Resource Booking associated with Work Order Service Task.</para>
		/// <para>Lookup to bookableresourcebooking</para>
		/// <para>Booking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Booking
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Booking); }
			set { Entity.Attributes[Fields.msdyn_Booking] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Customer Asset associated with Work Order Service Task.</para>
		/// <para>Lookup to msdyn_customerasset</para>
		/// <para>Customer Asset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomerAsset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomerAsset); }
			set { Entity.Attributes[Fields.msdyn_CustomerAsset] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Estimated Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_EstimatedDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_EstimatedDuration); }
			set { Entity.Attributes[Fields.msdyn_EstimatedDuration] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Inspection Template associated with Work Order Service Task.</para>
		/// <para>Lookup to msdyn_inspection</para>
		/// <para>Inspection Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Inspection
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Inspection); }
			set { Entity.Attributes[Fields.msdyn_Inspection] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Inspection Definition associated with Work Order Service Task.</para>
		/// <para>Lookup to msdyn_inspectiondefinition</para>
		/// <para>Inspection Template Version Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_inspectiondefinitionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_inspectiondefinitionid); }
			set { Entity.Attributes[Fields.msdyn_inspectiondefinitionid] = value; }
		}

		/// <summary>
		/// <para>Depicts whether inspection template is enabled for Work Order Service Task Type.</para>
		/// <para>Boolean</para>
		/// <para>Has Inspection</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_InspectionEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_InspectionEnabled); }
			set { Entity.Attributes[Fields.msdyn_InspectionEnabled] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Inspection Response associated with Work Order Service Task.</para>
		/// <para>Lookup to msdyn_inspectionresponse</para>
		/// <para>Inspection Response Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_inspectionresponseid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_inspectionresponseid); }
			set { Entity.Attributes[Fields.msdyn_inspectionresponseid] = value; }
		}

		/// <summary>
		/// <para>Output of the Inspection.</para>
		/// <para>Picklist</para>
		/// <para>Inspection Result</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets.msdyn_InspectionResult? msdyn_InspectionResult
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_InspectionResult);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets.msdyn_InspectionResult)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_InspectionResult] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_InspectionResult] = null;
			}
		}

		/// <summary>
		/// <para>Depicts the result of Inspection that the user enters</para>
		/// <para>Picklist</para>
		/// <para>Result</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets.msdyn_inspectiontaskresult? msdyn_inspectiontaskresult
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_inspectiontaskresult);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets.msdyn_inspectiontaskresult)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_inspectiontaskresult] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_inspectiontaskresult] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>Shows the order of this task within the work order service tasks.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Line Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_LineOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_LineOrder); }
			set { Entity.Attributes[Fields.msdyn_LineOrder] = value; }
		}

		/// <summary>
		/// <para>Enter the name of the custom entity.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: 0 - MaxValue: 100</para>
		/// <para>% Complete</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_PercentComplete
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_PercentComplete); }
			set { Entity.Attributes[Fields.msdyn_PercentComplete] = value; }
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>SurveyControl</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_surveyboundedoutput
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_surveyboundedoutput); }
			set { Entity.Attributes[Fields.msdyn_surveyboundedoutput] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Service Task Type associated with Work Order Service Task.</para>
		/// <para>Required - Lookup to msdyn_servicetasktype</para>
		/// <para>Task Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TaskType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TaskType); }
			set { Entity.Attributes[Fields.msdyn_TaskType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Work Order associated with Work Order Service Task.</para>
		/// <para>Required - Lookup to msdyn_workorder</para>
		/// <para>Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Work Order Incident associated with Work Order Service Task.</para>
		/// <para>Lookup to msdyn_workorderincident</para>
		/// <para>Work Order Incident</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderIncident
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderIncident); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderIncident] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Work Order Service Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_workorderservicetaskId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_workorderservicetaskId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Work Order Service Task</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Work Order Service Task</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderservicetaskOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
