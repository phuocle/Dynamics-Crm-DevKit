//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_unifiedroutingsetuptrackerOptionSets
{
	public enum msdyn_executionstatus
	{
		/// <summary>
		/// Completed = 1
		/// </summary>
		Completed = 1,
		/// <summary>
		/// Deprovisioning Completed = 5
		/// </summary>
		Deprovisioning_Completed = 5,
		/// <summary>
		/// Deprovisioning Started = 4
		/// </summary>
		Deprovisioning_Started = 4,
		/// <summary>
		/// Failed = 8
		/// </summary>
		Failed = 8,
		/// <summary>
		/// Provisioning Completed = 3
		/// </summary>
		Provisioning_Completed = 3,
		/// <summary>
		/// Provisioning Started = 2
		/// </summary>
		Provisioning_Started = 2,
		/// <summary>
		/// Record Created = 7
		/// </summary>
		Record_Created = 7,
		/// <summary>
		/// Started = 0
		/// </summary>
		Started = 0,
		/// <summary>
		/// Toggled = 6
		/// </summary>
		Toggled = 6
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_unifiedroutingsetuptracker : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_enableunifiedrouting = "msdyn_enableunifiedrouting";
			public const string msdyn_errorcode = "msdyn_errorcode";
			public const string msdyn_errormessage = "msdyn_errormessage";
			public const string msdyn_executionstatus = "msdyn_executionstatus";
			public const string msdyn_issuccessnotificationdisplayed = "msdyn_issuccessnotificationdisplayed";
			public const string msdyn_isTeachingBubbleDisplayed = "msdyn_isteachingbubbledisplayed";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_servicerequestid = "msdyn_servicerequestid";
			public const string msdyn_token = "msdyn_token";
			public const string msdyn_transactionid = "msdyn_transactionid";
			public const string msdyn_unifiedroutingsetuptrackerId = "msdyn_unifiedroutingsetuptrackerid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_unifiedroutingsetuptracker";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10143;

		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingsetuptracker()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingsetuptracker(Guid msdyn_unifiedroutingsetuptrackerId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_unifiedroutingsetuptrackerId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingsetuptracker(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingsetuptracker(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingsetuptracker(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingsetuptracker(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Enable Unified Routing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableunifiedrouting
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableunifiedrouting); }
			set { Entity.Attributes[Fields.msdyn_enableunifiedrouting] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Error Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_errorcode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_errorcode); }
			set { Entity.Attributes[Fields.msdyn_errorcode] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Error Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_errormessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_errormessage); }
			set { Entity.Attributes[Fields.msdyn_errormessage] = value; }
		}

		/// <summary>
		/// <para>Execution Status</para>
		/// <para>Picklist</para>
		/// <para>Execution Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_unifiedroutingsetuptrackerOptionSets.msdyn_executionstatus? msdyn_executionstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_executionstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_unifiedroutingsetuptrackerOptionSets.msdyn_executionstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_executionstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_executionstatus] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is success notification displayed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_issuccessnotificationdisplayed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_issuccessnotificationdisplayed); }
			set { Entity.Attributes[Fields.msdyn_issuccessnotificationdisplayed] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is Unified Routing teaching bubble displayed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isTeachingBubbleDisplayed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isTeachingBubbleDisplayed); }
			set { Entity.Attributes[Fields.msdyn_isTeachingBubbleDisplayed] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 30000</para>
		/// <para>Service Request Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_servicerequestid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_servicerequestid); }
			set { Entity.Attributes[Fields.msdyn_servicerequestid] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 20000</para>
		/// <para>Token</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_token
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_token); }
			set { Entity.Attributes[Fields.msdyn_token] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Transaction Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_transactionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_transactionid); }
			set { Entity.Attributes[Fields.msdyn_transactionid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Unified Routing Setup Tracker</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_unifiedroutingsetuptrackerId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_unifiedroutingsetuptrackerId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the Unified Routing Setup Tracker</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_unifiedroutingsetuptrackerOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_unifiedroutingsetuptrackerOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Unified Routing Setup Tracker</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_unifiedroutingsetuptrackerOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_unifiedroutingsetuptrackerOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
