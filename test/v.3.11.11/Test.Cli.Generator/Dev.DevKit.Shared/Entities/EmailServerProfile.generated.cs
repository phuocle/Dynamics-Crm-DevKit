//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets
{
	public enum ExchangeVersion
	{
		/// <summary>
		/// Exchange 2007 = 0
		/// </summary>
		Exchange_2007 = 0,
		/// <summary>
		/// Exchange 2007 SP1 = 1
		/// </summary>
		Exchange_2007_SP1 = 1,
		/// <summary>
		/// Exchange 2010 = 2
		/// </summary>
		Exchange_2010 = 2,
		/// <summary>
		/// Exchange 2010 SP1 = 3
		/// </summary>
		Exchange_2010_SP1 = 3,
		/// <summary>
		/// Exchange 2010 SP2 = 4
		/// </summary>
		Exchange_2010_SP2 = 4,
		/// <summary>
		/// Exchange 2013 = 5
		/// </summary>
		Exchange_2013 = 5
	}

	public enum IncomingAuthenticationProtocol
	{
		/// <summary>
		/// Auto Detect = 0
		/// </summary>
		Auto_Detect = 0,
		/// <summary>
		/// Basic = 3
		/// </summary>
		Basic = 3,
		/// <summary>
		/// Negotiate = 1
		/// </summary>
		Negotiate = 1,
		/// <summary>
		/// NTLM = 2
		/// </summary>
		NTLM = 2,
		/// <summary>
		/// OAuth = 4
		/// </summary>
		OAuth = 4
	}

	public enum IncomingCredentialRetrieval
	{
		/// <summary>
		/// Azure Active Directory OAuth = 7
		/// </summary>
		Azure_Active_Directory_OAuth = 7,
		/// <summary>
		/// Credentials Specified by a User or Queue = 0
		/// </summary>
		Credentials_Specified_by_a_User_or_Queue = 0,
		/// <summary>
		/// Credentials Specified in Email Server Profile = 1
		/// </summary>
		Credentials_Specified_in_Email_Server_Profile = 1,
		/// <summary>
		/// Exchange Hybrid Modern Auth (HMA) = 6
		/// </summary>
		Exchange_Hybrid_Modern_Auth_HMA = 6,
		/// <summary>
		/// Gmail OAuth = 5
		/// </summary>
		Gmail_OAuth = 5,
		/// <summary>
		/// Server to Server Authentication = 2
		/// </summary>
		Server_to_Server_Authentication = 2,
		/// <summary>
		/// Windows Integrated Authentication = 3
		/// </summary>
		Windows_Integrated_Authentication = 3,
		/// <summary>
		/// Without Credentials (Anonymous) = 4
		/// </summary>
		Without_Credentials_Anonymous = 4
	}

	public enum LastAuthorizationStatus
	{
		/// <summary>
		/// Failure = 0
		/// </summary>
		Failure = 0,
		/// <summary>
		/// Success = 1
		/// </summary>
		Success = 1
	}

	public enum LastTestExecutionStatus
	{
		/// <summary>
		/// Failure = 0
		/// </summary>
		Failure = 0,
		/// <summary>
		/// Success = 1
		/// </summary>
		Success = 1,
		/// <summary>
		/// Warning = 2
		/// </summary>
		Warning = 2
	}

	public enum LastTestValidationStatus
	{
		/// <summary>
		/// Failure = 0
		/// </summary>
		Failure = 0,
		/// <summary>
		/// Success = 1
		/// </summary>
		Success = 1
	}

	public enum OutgoingAuthenticationProtocol
	{
		/// <summary>
		/// Auto Detect = 0
		/// </summary>
		Auto_Detect = 0,
		/// <summary>
		/// Basic = 3
		/// </summary>
		Basic = 3,
		/// <summary>
		/// Negotiate = 1
		/// </summary>
		Negotiate = 1,
		/// <summary>
		/// NTLM = 2
		/// </summary>
		NTLM = 2,
		/// <summary>
		/// OAuth = 4
		/// </summary>
		OAuth = 4
	}

	public enum OutgoingCredentialRetrieval
	{
		/// <summary>
		/// Azure Active Directory OAuth = 7
		/// </summary>
		Azure_Active_Directory_OAuth = 7,
		/// <summary>
		/// Credentials Specified by a User or Queue = 0
		/// </summary>
		Credentials_Specified_by_a_User_or_Queue = 0,
		/// <summary>
		/// Credentials Specified in Email Server Profile = 1
		/// </summary>
		Credentials_Specified_in_Email_Server_Profile = 1,
		/// <summary>
		/// Exchange Hybrid Modern Auth (HMA) = 6
		/// </summary>
		Exchange_Hybrid_Modern_Auth_HMA = 6,
		/// <summary>
		/// Gmail OAuth = 5
		/// </summary>
		Gmail_OAuth = 5,
		/// <summary>
		/// Server to Server Authentication = 2
		/// </summary>
		Server_to_Server_Authentication = 2,
		/// <summary>
		/// Windows Integrated Authentication = 3
		/// </summary>
		Windows_Integrated_Authentication = 3,
		/// <summary>
		/// Without Credentials (Anonymous) = 4
		/// </summary>
		Without_Credentials_Anonymous = 4
	}

	public enum ServerType
	{
		/// <summary>
		/// Exchange Online (Hybrid) = 3
		/// </summary>
		Exchange_Online_Hybrid = 3,
		/// <summary>
		/// Exchange Server = 0
		/// </summary>
		Exchange_Server = 0,
		/// <summary>
		/// Exchange Server (Hybrid) = 2
		/// </summary>
		Exchange_Server_Hybrid = 2,
		/// <summary>
		/// IMAP/SMTP = 4
		/// </summary>
		IMAPSMTP = 4,
		/// <summary>
		/// Other (POP3/SMTP) = 1
		/// </summary>
		Other_POP3SMTP = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class EmailServerProfile : EntityBase
	{
		public struct Fields
		{
			public const string AadResourceId = "aadresourceid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultServerLocation = "defaultserverlocation";
			public const string Description = "description";
			public const string EmailServerProfileId = "emailserverprofileid";
			public const string EmailServerTypeName = "emailservertypename";
			public const string EncodingCodePage = "encodingcodepage";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeOnlineTenantId = "exchangeonlinetenantid";
			public const string ExchangeVersion = "exchangeversion";
			public const string IncomingAuthenticationProtocol = "incomingauthenticationprotocol";
			public const string IncomingCredentialRetrieval = "incomingcredentialretrieval";
			public const string IncomingPartnerApplication = "incomingpartnerapplication";
			public const string IncomingPassword = "incomingpassword";
			public const string IncomingPortNumber = "incomingportnumber";
			public const string IncomingServerLocation = "incomingserverlocation";
			public const string IncomingUseImpersonation = "incominguseimpersonation";
			public const string IncomingUserName = "incomingusername";
			public const string IncomingUseSSL = "incomingusessl";
			public const string IsIncomingPasswordSet = "isincomingpasswordset";
			public const string IsOauthClientSecretSet = "isoauthclientsecretset";
			public const string IsOutgoingPasswordSet = "isoutgoingpasswordset";
			public const string keyvaultreferenceid = "keyvaultreferenceid";
			public const string LastAuthorizationStatus = "lastauthorizationstatus";
			public const string LastCrmMessage = "lastcrmmessage";
			public const string LastTestExecutionStatus = "lasttestexecutionstatus";
			public const string LastTestRequest = "lasttestrequest";
			public const string LastTestResponse = "lasttestresponse";
			public const string LastTestStartTime = "lastteststarttime";
			public const string LastTestTotalExecutionTime = "lasttesttotalexecutiontime";
			public const string LastTestValidationStatus = "lasttestvalidationstatus";
			public const string managedidentityid = "managedidentityid";
			public const string MaxConcurrentConnections = "maxconcurrentconnections";
			public const string MinPollingIntervalInMinutes = "minpollingintervalinminutes";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string MoveUndeliveredEmails = "moveundeliveredemails";
			public const string Name = "name";
			public const string OauthClientId = "oauthclientid";
			public const string OauthClientSecret = "oauthclientsecret";
			public const string OrganizationId = "organizationid";
			public const string OutgoingAuthenticationProtocol = "outgoingauthenticationprotocol";
			public const string OutgoingAutoGrantDelegateAccess = "outgoingautograntdelegateaccess";
			public const string OutgoingCredentialRetrieval = "outgoingcredentialretrieval";
			public const string OutgoingPartnerApplication = "outgoingpartnerapplication";
			public const string OutgoingPassword = "outgoingpassword";
			public const string OutgoingPortNumber = "outgoingportnumber";
			public const string OutgoingServerLocation = "outgoingserverlocation";
			public const string OutgoingUseImpersonation = "outgoinguseimpersonation";
			public const string OutgoingUsername = "outgoingusername";
			public const string OutgoingUseSSL = "outgoingusessl";
			public const string OwnerEmailAddress = "owneremailaddress";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProcessEmailsReceivedAfter = "processemailsreceivedafter";
			public const string SendEmailAlert = "sendemailalert";
			public const string ServerType = "servertype";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeoutMailboxConnection = "timeoutmailboxconnection";
			public const string TimeoutMailboxConnectionAfterAmount = "timeoutmailboxconnectionafteramount";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UseAutoDiscover = "useautodiscover";
			public const string UseDefaultTenantId = "usedefaulttenantid";
			public const string UseSameSettingsForOutgoingConnections = "usesamesettingsforoutgoingconnections";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "emailserverprofile";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9605;

		[DebuggerNonUserCode()]
		public EmailServerProfile()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EmailServerProfile(Guid EmailServerProfileId)
		{
			Entity = new Entity(EntityLogicalName, EmailServerProfileId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EmailServerProfile(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EmailServerProfile(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EmailServerProfile(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EmailServerProfile(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>AAD ResourceId used for OAuth athentication scheme</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>AAD ResourceId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AadResourceId
		{
			get { return Entity.GetAttributeValue<string>(Fields.AadResourceId); }
			set { Entity.Attributes[Fields.AadResourceId] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type the default location of the server.</para>
		/// <para>String - MaxLength: 2084</para>
		/// <para>Default Email Server Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultServerLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultServerLocation); }
			set { Entity.Attributes[Fields.DefaultServerLocation] = value; }
		}

		/// <summary>
		/// <para>Type additional information that describes the email server profile.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the email server profile.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>EmailServerProfile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EmailServerProfileId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EmailServerProfileId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Email Server Type Name</para>
		/// <para>ReadOnly - String - MaxLength: 250</para>
		/// <para>Email Server Type Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailServerTypeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailServerTypeName); }
		}

		/// <summary>
		/// <para>Indicates the code page to use when encoding email content.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Encoding Code Page</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EncodingCodePage
		{
			get { return Entity.GetAttributeValue<string>(Fields.EncodingCodePage); }
			set { Entity.Attributes[Fields.EncodingCodePage] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Entity Image Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Type the tenant ID of Exchange Online.</para>
		/// <para>String - MaxLength: 36</para>
		/// <para>Exchange Online Tenant Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeOnlineTenantId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeOnlineTenantId); }
			set { Entity.Attributes[Fields.ExchangeOnlineTenantId] = value; }
		}

		/// <summary>
		/// <para>Select the version of Exchange that is on the email server.</para>
		/// <para>Picklist</para>
		/// <para>Exchange Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ExchangeVersion? ExchangeVersion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExchangeVersion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ExchangeVersion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExchangeVersion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ExchangeVersion] = null;
			}
		}

		/// <summary>
		/// <para>Select the incoming email authentication protocol that is used for connecting to the email server.</para>
		/// <para>Picklist</para>
		/// <para>Incoming Authentication Protocol</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingAuthenticationProtocol? IncomingAuthenticationProtocol
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingAuthenticationProtocol);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingAuthenticationProtocol)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingAuthenticationProtocol] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingAuthenticationProtocol] = null;
			}
		}

		/// <summary>
		/// <para>Select how credentials will be retrieved for incoming email.</para>
		/// <para>Picklist</para>
		/// <para>Incoming Email Credential Retrieval</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingCredentialRetrieval? IncomingCredentialRetrieval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingCredentialRetrieval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingCredentialRetrieval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingCredentialRetrieval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingCredentialRetrieval] = null;
			}
		}

		/// <summary>
		/// <para>Indicates the incoming partner application.</para>
		/// <para>ReadOnly - Lookup to partnerapplication</para>
		/// <para>Incoming Partner Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference IncomingPartnerApplication
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.IncomingPartnerApplication); }
		}

		/// <summary>
		/// <para>Type the password for incoming email.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Incoming Email Password</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IncomingPassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.IncomingPassword); }
			set { Entity.Attributes[Fields.IncomingPassword] = value; }
		}

		/// <summary>
		/// <para>Type the Exchange port number for incoming mail.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 65,536</para>
		/// <para>Incoming Email Port</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IncomingPortNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IncomingPortNumber); }
			set { Entity.Attributes[Fields.IncomingPortNumber] = value; }
		}

		/// <summary>
		/// <para>Type the location of the server for incoming email.</para>
		/// <para>String - MaxLength: 2084</para>
		/// <para>Incoming Email Server Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IncomingServerLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.IncomingServerLocation); }
			set { Entity.Attributes[Fields.IncomingServerLocation] = value; }
		}

		/// <summary>
		/// <para>Select whether to use impersonation to access the mailbox to process incoming emails.</para>
		/// <para>Boolean</para>
		/// <para>Use Impersonation for Incoming Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IncomingUseImpersonation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IncomingUseImpersonation); }
			set { Entity.Attributes[Fields.IncomingUseImpersonation] = value; }
		}

		/// <summary>
		/// <para>Type the user name for incoming email.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Incoming Email User Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IncomingUserName
		{
			get { return Entity.GetAttributeValue<string>(Fields.IncomingUserName); }
			set { Entity.Attributes[Fields.IncomingUserName] = value; }
		}

		/// <summary>
		/// <para>Select whether to use the Secure Sockets Layer (SSL) protocol for incoming email.</para>
		/// <para>Boolean</para>
		/// <para>Use SSL for Incoming Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IncomingUseSSL
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IncomingUseSSL); }
			set { Entity.Attributes[Fields.IncomingUseSSL] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsIncomingPasswordSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsIncomingPasswordSet); }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOauthClientSecretSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOauthClientSecretSet); }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOutgoingPasswordSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOutgoingPasswordSet); }
		}

		/// <summary>
		/// <para>The Azure Key Vault reference id</para>
		/// <para>Lookup to keyvaultreference</para>
		/// <para>Key Vault Reference Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference keyvaultreferenceid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.keyvaultreferenceid); }
			set { Entity.Attributes[Fields.keyvaultreferenceid] = value; }
		}

		/// <summary>
		/// <para>Shows the last test authorization status of email server profile</para>
		/// <para>Picklist</para>
		/// <para>Last Test Authorization Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastAuthorizationStatus? LastAuthorizationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LastAuthorizationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastAuthorizationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LastAuthorizationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LastAuthorizationStatus] = null;
			}
		}

		/// <summary>
		/// <para>Shows the Dynamics 365 message obtained during the Last Test</para>
		/// <para>Memo - MaxLength: 2084</para>
		/// <para>Last Dynamics 365 Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastCrmMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastCrmMessage); }
			set { Entity.Attributes[Fields.LastCrmMessage] = value; }
		}

		/// <summary>
		/// <para>Shows the last test Execution status of email server profile</para>
		/// <para>Picklist</para>
		/// <para>Last Test Execution Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestExecutionStatus? LastTestExecutionStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LastTestExecutionStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestExecutionStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LastTestExecutionStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LastTestExecutionStatus] = null;
			}
		}

		/// <summary>
		/// <para>Shows the EWS Request created during the Last Test</para>
		/// <para>Memo - MaxLength: 2084</para>
		/// <para>Last Test Request</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastTestRequest
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastTestRequest); }
			set { Entity.Attributes[Fields.LastTestRequest] = value; }
		}

		/// <summary>
		/// <para>Shows the EWS Response obtained during the Last Test</para>
		/// <para>Memo - MaxLength: 2084</para>
		/// <para>Last Test Response</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastTestResponse
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastTestResponse); }
			set { Entity.Attributes[Fields.LastTestResponse] = value; }
		}

		/// <summary>
		/// <para>Shows the Last Test Start date and time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Test Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastTestStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastTestStartTime); }
			set { Entity.Attributes[Fields.LastTestStartTime] = value; }
		}

		/// <summary>
		/// <para>Shows the Time taken while running the last test</para>
		/// <para>BigInt</para>
		/// <para>Last Test Time Taken</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? LastTestTotalExecutionTime
		{
			get { return Entity.GetAttributeValue<long?>(Fields.LastTestTotalExecutionTime); }
			set { Entity.Attributes[Fields.LastTestTotalExecutionTime] = value; }
		}

		/// <summary>
		/// <para>Shows the last test Validation status of email server profile</para>
		/// <para>Picklist</para>
		/// <para>Last Test Validation Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestValidationStatus? LastTestValidationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LastTestValidationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestValidationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LastTestValidationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LastTestValidationStatus] = null;
			}
		}

		/// <summary>
		/// <para>The managed identity id</para>
		/// <para>Lookup to managedidentity</para>
		/// <para>Managed Identity Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference managedidentityid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.managedidentityid); }
			set { Entity.Attributes[Fields.managedidentityid] = value; }
		}

		/// <summary>
		/// <para>Maximum number of concurrent connections allowed to the email server per authenticated user.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 300</para>
		/// <para>Maximum Concurrent Connections</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxConcurrentConnections
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxConcurrentConnections); }
			set { Entity.Attributes[Fields.MaxConcurrentConnections] = value; }
		}

		/// <summary>
		/// <para>Minimum polling interval, in minutes, for mailboxes that are associated with this email server profile.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,440</para>
		/// <para>Minimum Polling Interval In Minutes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinPollingIntervalInMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinPollingIntervalInMinutes); }
			set { Entity.Attributes[Fields.MinPollingIntervalInMinutes] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Indicates whether to move undelivered incoming emails to the Undeliverable folder in Microsoft Exchange.</para>
		/// <para>Boolean</para>
		/// <para>Move Undelivered Emails to the Undeliverable Folder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? MoveUndeliveredEmails
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.MoveUndeliveredEmails); }
			set { Entity.Attributes[Fields.MoveUndeliveredEmails] = value; }
		}

		/// <summary>
		/// <para>Type a meaningful name for the email server profile. This name is displayed when you need to select an email server profile.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>ClientId used for OAuth athentication scheme</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Oauth ClientId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OauthClientId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OauthClientId); }
			set { Entity.Attributes[Fields.OauthClientId] = value; }
		}

		/// <summary>
		/// <para>Client secret used for the OAuth authentication scheme</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>OAuth Client Secret</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OauthClientSecret
		{
			get { return Entity.GetAttributeValue<string>(Fields.OauthClientSecret); }
			set { Entity.Attributes[Fields.OauthClientSecret] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the record.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Select the outgoing email authentication protocol that is used for connecting to the email server.</para>
		/// <para>Picklist</para>
		/// <para>Outgoing Authentication Protocol</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingAuthenticationProtocol? OutgoingAuthenticationProtocol
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingAuthenticationProtocol);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingAuthenticationProtocol)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingAuthenticationProtocol] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingAuthenticationProtocol] = null;
			}
		}

		/// <summary>
		/// <para>Indicates whether the email connector will grant delegate access permissions to the accessing user when required while processing outgoing emails.</para>
		/// <para>Boolean</para>
		/// <para>Auto Grant Delegate Access for Outgoing Email.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OutgoingAutoGrantDelegateAccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OutgoingAutoGrantDelegateAccess); }
			set { Entity.Attributes[Fields.OutgoingAutoGrantDelegateAccess] = value; }
		}

		/// <summary>
		/// <para>Select how credentials will be retrieved for outgoing email.</para>
		/// <para>Picklist</para>
		/// <para>Outgoing Email Credential Retrieval</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingCredentialRetrieval? OutgoingCredentialRetrieval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingCredentialRetrieval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingCredentialRetrieval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingCredentialRetrieval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingCredentialRetrieval] = null;
			}
		}

		/// <summary>
		/// <para>Indicates the outgoing partner application.</para>
		/// <para>ReadOnly - Lookup to partnerapplication</para>
		/// <para>Outgoing Partner Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OutgoingPartnerApplication
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OutgoingPartnerApplication); }
		}

		/// <summary>
		/// <para>Type the password for outgoing email.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Outgoing Email Password</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OutgoingPassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.OutgoingPassword); }
			set { Entity.Attributes[Fields.OutgoingPassword] = value; }
		}

		/// <summary>
		/// <para>Type the Exchange port number for outgoing mail.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 65,536</para>
		/// <para>Outgoing Email Port</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OutgoingPortNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OutgoingPortNumber); }
			set { Entity.Attributes[Fields.OutgoingPortNumber] = value; }
		}

		/// <summary>
		/// <para>Type the location of the server for outgoing email.</para>
		/// <para>String - MaxLength: 2084</para>
		/// <para>Outgoing Email Server Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OutgoingServerLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.OutgoingServerLocation); }
			set { Entity.Attributes[Fields.OutgoingServerLocation] = value; }
		}

		/// <summary>
		/// <para>Select whether to use impersonation for accessing the mailbox to process outgoing emails.</para>
		/// <para>Boolean</para>
		/// <para>Use Impersonation for Outgoing Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OutgoingUseImpersonation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OutgoingUseImpersonation); }
			set { Entity.Attributes[Fields.OutgoingUseImpersonation] = value; }
		}

		/// <summary>
		/// <para>Type the user name for outgoing email.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Outgoing Email User Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OutgoingUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.OutgoingUsername); }
			set { Entity.Attributes[Fields.OutgoingUsername] = value; }
		}

		/// <summary>
		/// <para>Select whether to use the Secure Sockets Layer (SSL) protocol for outgoing email.</para>
		/// <para>Boolean</para>
		/// <para>Use SSL for Outgoing Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OutgoingUseSSL
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OutgoingUseSSL); }
			set { Entity.Attributes[Fields.OutgoingUseSSL] = value; }
		}

		/// <summary>
		/// <para>Email Server Profile Owner&apos;s email address</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Server Profile Owner's email address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OwnerEmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.OwnerEmailAddress); }
			set { Entity.Attributes[Fields.OwnerEmailAddress] = value; }
		}

		/// <summary>
		/// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Select the business unit that owns the record.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Shows the date and time after which email messages that are received will be processed for mailboxes associated with the email server profile.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Process Emails Received After</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProcessEmailsReceivedAfterUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProcessEmailsReceivedAfter); }
			set { Entity.Attributes[Fields.ProcessEmailsReceivedAfter] = value; }
		}

		/// <summary>
		/// <para>Select whether to send an email alert if more than 50% of the mailboxes in this email server profile failed to synchronize in an hour period.</para>
		/// <para>Boolean</para>
		/// <para>Send an alert email to the owner of the email server profile reporting on major events</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SendEmailAlert
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SendEmailAlert); }
			set { Entity.Attributes[Fields.SendEmailAlert] = value; }
		}

		/// <summary>
		/// <para>Select the profile&apos;s email server type.</para>
		/// <para>Required - Picklist</para>
		/// <para>Email Server Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerType? ServerType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServerType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServerType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServerType] = null;
			}
		}

		/// <summary>
		/// <para>Shows whether the email server profile is active or inactive.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the email server profile&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Select whether to timeout a single mailbox.</para>
		/// <para>Boolean</para>
		/// <para>Timeout Mailbox Connection to Exchange</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TimeoutMailboxConnection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TimeoutMailboxConnection); }
			set { Entity.Attributes[Fields.TimeoutMailboxConnection] = value; }
		}

		/// <summary>
		/// <para>Type the number of milliseconds to timeout a single mailbox. The upper limit is 100 seconds.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 100,000</para>
		/// <para>Timeout a Single Mailbox Connection After this Amount of Milliseconds</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeoutMailboxConnectionAfterAmount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeoutMailboxConnectionAfterAmount); }
			set { Entity.Attributes[Fields.TimeoutMailboxConnectionAfterAmount] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Select whether to automatically discover the server location</para>
		/// <para>Boolean</para>
		/// <para>Auto Discover Server Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseAutoDiscover
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseAutoDiscover); }
			set { Entity.Attributes[Fields.UseAutoDiscover] = value; }
		}

		/// <summary>
		/// <para>Select whether to use the Exchange Online Tenant ID obtained from running Microsoft Azure PowerShell cmdlets (highly recommended). If you select No, you can edit this field manually</para>
		/// <para>Boolean</para>
		/// <para>Use Default Tenant Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseDefaultTenantId
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseDefaultTenantId); }
			set { Entity.Attributes[Fields.UseDefaultTenantId] = value; }
		}

		/// <summary>
		/// <para>Select whether to use the same settings for incoming and outgoing connections.</para>
		/// <para>Boolean</para>
		/// <para>Use Same Settings for Outgoing Connection</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseSameSettingsForOutgoingConnections
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseSameSettingsForOutgoingConnections); }
			set { Entity.Attributes[Fields.UseSameSettingsForOutgoingConnections] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version number of the email server profile.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
