//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.LeadOptionSets
{
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum BudgetStatus
	{
		/// <summary>
		/// Can Buy = 2
		/// </summary>
		Can_Buy = 2,
		/// <summary>
		/// May Buy = 1
		/// </summary>
		May_Buy = 1,
		/// <summary>
		/// No Committed Budget = 0
		/// </summary>
		No_Committed_Budget = 0,
		/// <summary>
		/// Will Buy = 3
		/// </summary>
		Will_Buy = 3
	}

	public enum IndustryCode
	{
		/// <summary>
		/// Accounting = 1
		/// </summary>
		Accounting = 1,
		/// <summary>
		/// Agriculture and Non-petrol Natural Resource Extraction = 2
		/// </summary>
		Agriculture_and_Non_petrol_Natural_Resource_Extraction = 2,
		/// <summary>
		/// Broadcasting Printing and Publishing = 3
		/// </summary>
		Broadcasting_Printing_and_Publishing = 3,
		/// <summary>
		/// Brokers = 4
		/// </summary>
		Brokers = 4,
		/// <summary>
		/// Building Supply Retail = 5
		/// </summary>
		Building_Supply_Retail = 5,
		/// <summary>
		/// Business Services = 6
		/// </summary>
		Business_Services = 6,
		/// <summary>
		/// Consulting = 7
		/// </summary>
		Consulting = 7,
		/// <summary>
		/// Consumer Services = 8
		/// </summary>
		Consumer_Services = 8,
		/// <summary>
		/// Design, Direction and Creative Management = 9
		/// </summary>
		Design_Direction_and_Creative_Management = 9,
		/// <summary>
		/// Distributors, Dispatchers and Processors = 10
		/// </summary>
		Distributors_Dispatchers_and_Processors = 10,
		/// <summary>
		/// Doctor's Offices and Clinics = 11
		/// </summary>
		Doctors_Offices_and_Clinics = 11,
		/// <summary>
		/// Durable Manufacturing = 12
		/// </summary>
		Durable_Manufacturing = 12,
		/// <summary>
		/// Eating and Drinking Places = 13
		/// </summary>
		Eating_and_Drinking_Places = 13,
		/// <summary>
		/// Entertainment Retail = 14
		/// </summary>
		Entertainment_Retail = 14,
		/// <summary>
		/// Equipment Rental and Leasing = 15
		/// </summary>
		Equipment_Rental_and_Leasing = 15,
		/// <summary>
		/// Financial = 16
		/// </summary>
		Financial = 16,
		/// <summary>
		/// Food and Tobacco Processing = 17
		/// </summary>
		Food_and_Tobacco_Processing = 17,
		/// <summary>
		/// Inbound Capital Intensive Processing = 18
		/// </summary>
		Inbound_Capital_Intensive_Processing = 18,
		/// <summary>
		/// Inbound Repair and Services = 19
		/// </summary>
		Inbound_Repair_and_Services = 19,
		/// <summary>
		/// Insurance = 20
		/// </summary>
		Insurance = 20,
		/// <summary>
		/// Legal Services = 21
		/// </summary>
		Legal_Services = 21,
		/// <summary>
		/// Non-Durable Merchandise Retail = 22
		/// </summary>
		Non_Durable_Merchandise_Retail = 22,
		/// <summary>
		/// Outbound Consumer Service = 23
		/// </summary>
		Outbound_Consumer_Service = 23,
		/// <summary>
		/// Petrochemical Extraction and Distribution = 24
		/// </summary>
		Petrochemical_Extraction_and_Distribution = 24,
		/// <summary>
		/// Service Retail = 25
		/// </summary>
		Service_Retail = 25,
		/// <summary>
		/// SIG Affiliations = 26
		/// </summary>
		SIG_Affiliations = 26,
		/// <summary>
		/// Social Services = 27
		/// </summary>
		Social_Services = 27,
		/// <summary>
		/// Special Outbound Trade Contractors = 28
		/// </summary>
		Special_Outbound_Trade_Contractors = 28,
		/// <summary>
		/// Specialty Realty = 29
		/// </summary>
		Specialty_Realty = 29,
		/// <summary>
		/// Transportation = 30
		/// </summary>
		Transportation = 30,
		/// <summary>
		/// Utility Creation and Distribution = 31
		/// </summary>
		Utility_Creation_and_Distribution = 31,
		/// <summary>
		/// Vehicle Retail = 32
		/// </summary>
		Vehicle_Retail = 32,
		/// <summary>
		/// Wholesale = 33
		/// </summary>
		Wholesale = 33
	}

	public enum InitialCommunication
	{
		/// <summary>
		/// Contacted = 0
		/// </summary>
		Contacted = 0,
		/// <summary>
		/// Not Contacted = 1
		/// </summary>
		Not_Contacted = 1
	}

	public enum LeadQualityCode
	{
		/// <summary>
		/// Cold = 3
		/// </summary>
		Cold = 3,
		/// <summary>
		/// Hot = 1
		/// </summary>
		Hot = 1,
		/// <summary>
		/// Warm = 2
		/// </summary>
		Warm = 2
	}

	public enum LeadSourceCode
	{
		/// <summary>
		/// Advertisement = 1
		/// </summary>
		Advertisement = 1,
		/// <summary>
		/// Employee Referral = 2
		/// </summary>
		Employee_Referral = 2,
		/// <summary>
		/// External Referral = 3
		/// </summary>
		External_Referral = 3,
		/// <summary>
		/// Other = 10
		/// </summary>
		Other = 10,
		/// <summary>
		/// Partner = 4
		/// </summary>
		Partner = 4,
		/// <summary>
		/// Public Relations = 5
		/// </summary>
		Public_Relations = 5,
		/// <summary>
		/// Seminar = 6
		/// </summary>
		Seminar = 6,
		/// <summary>
		/// Trade Show = 7
		/// </summary>
		Trade_Show = 7,
		/// <summary>
		/// Web = 8
		/// </summary>
		Web = 8,
		/// <summary>
		/// Word of Mouth = 9
		/// </summary>
		Word_of_Mouth = 9
	}

	public enum msdyn_LeadGrade
	{
		/// <summary>
		/// Grade A = 0
		/// </summary>
		Grade_A = 0,
		/// <summary>
		/// Grade B = 1
		/// </summary>
		Grade_B = 1,
		/// <summary>
		/// Grade C = 2
		/// </summary>
		Grade_C = 2,
		/// <summary>
		/// Grade D = 3
		/// </summary>
		Grade_D = 3
	}

	public enum msdyn_LeadScoreTrend
	{
		/// <summary>
		/// Declining = 2
		/// </summary>
		Declining = 2,
		/// <summary>
		/// Improving = 0
		/// </summary>
		Improving = 0,
		/// <summary>
		/// Not enough info = 3
		/// </summary>
		Not_enough_info = 3,
		/// <summary>
		/// Steady = 1
		/// </summary>
		Steady = 1
	}

	public enum msdyn_ordertype
	{
		/// <summary>
		/// Item based = 192350000
		/// </summary>
		Item_based = 192350000,
		/// <summary>
		/// Service-Maintenance Based = 690970002
		/// </summary>
		Service_Maintenance_Based = 690970002,
		/// <summary>
		/// Work based = 192350001
		/// </summary>
		Work_based = 192350001
	}

	public enum msdyn_salesassignmentresult
	{
		/// <summary>
		/// Failed = 1
		/// </summary>
		Failed = 1,
		/// <summary>
		/// Succeeded = 0
		/// </summary>
		Succeeded = 0
	}

	public enum Need
	{
		/// <summary>
		/// Good to have = 2
		/// </summary>
		Good_to_have = 2,
		/// <summary>
		/// Must have = 0
		/// </summary>
		Must_have = 0,
		/// <summary>
		/// No need = 3
		/// </summary>
		No_need = 3,
		/// <summary>
		/// Should have = 1
		/// </summary>
		Should_have = 1
	}

	public enum PreferredContactMethodCode
	{
		/// <summary>
		/// Any = 1
		/// </summary>
		Any = 1,
		/// <summary>
		/// Email = 2
		/// </summary>
		Email = 2,
		/// <summary>
		/// Fax = 4
		/// </summary>
		Fax = 4,
		/// <summary>
		/// Mail = 5
		/// </summary>
		Mail = 5,
		/// <summary>
		/// Phone = 3
		/// </summary>
		Phone = 3
	}

	public enum PriorityCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum PurchaseProcess
	{
		/// <summary>
		/// Committee = 1
		/// </summary>
		Committee = 1,
		/// <summary>
		/// Individual = 0
		/// </summary>
		Individual = 0,
		/// <summary>
		/// Unknown = 2
		/// </summary>
		Unknown = 2
	}

	public enum PurchaseTimeFrame
	{
		/// <summary>
		/// Immediate = 0
		/// </summary>
		Immediate = 0,
		/// <summary>
		/// Next Quarter = 2
		/// </summary>
		Next_Quarter = 2,
		/// <summary>
		/// This Quarter = 1
		/// </summary>
		This_Quarter = 1,
		/// <summary>
		/// This Year = 3
		/// </summary>
		This_Year = 3,
		/// <summary>
		/// Unknown = 4
		/// </summary>
		Unknown = 4
	}

	public enum SalesStage
	{
		/// <summary>
		/// Qualify = 0
		/// </summary>
		Qualify = 0
	}

	public enum SalesStageCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Disqualified = 2
		/// </summary>
		Disqualified = 2,
		/// <summary>
		/// Open = 0
		/// </summary>
		Open = 0,
		/// <summary>
		/// Qualified = 1
		/// </summary>
		Qualified = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Canceled = 7
		/// </summary>
		Canceled = 7,
		/// <summary>
		/// Cannot Contact = 5
		/// </summary>
		Cannot_Contact = 5,
		/// <summary>
		/// Contacted = 2
		/// </summary>
		Contacted = 2,
		/// <summary>
		/// Lost = 4
		/// </summary>
		Lost = 4,
		/// <summary>
		/// New = 1
		/// </summary>
		New = 1,
		/// <summary>
		/// No Longer Interested = 6
		/// </summary>
		No_Longer_Interested = 6,
		/// <summary>
		/// Qualified = 3
		/// </summary>
		Qualified = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Lead : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string BudgetAmount = "budgetamount";
			public const string BudgetAmount_Base = "budgetamount_base";
			public const string BudgetStatus = "budgetstatus";
			public const string BusinessCard = "businesscard";
			public const string BusinessCardAttributes = "businesscardattributes";
			public const string CampaignId = "campaignid";
			public const string CompanyName = "companyname";
			public const string ConfirmInterest = "confirminterest";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string DecisionMaker = "decisionmaker";
			public const string Description = "description";
			public const string DoNotBulkEMail = "donotbulkemail";
			public const string DoNotEMail = "donotemail";
			public const string DoNotFax = "donotfax";
			public const string DoNotPhone = "donotphone";
			public const string DoNotPostalMail = "donotpostalmail";
			public const string DoNotSendMM = "donotsendmm";
			public const string EMailAddress1 = "emailaddress1";
			public const string EMailAddress2 = "emailaddress2";
			public const string EMailAddress3 = "emailaddress3";
			public const string EntityImageId = "entityimageid";
			public const string EstimatedAmount = "estimatedamount";
			public const string EstimatedAmount_Base = "estimatedamount_base";
			public const string EstimatedCloseDate = "estimatedclosedate";
			public const string EstimatedValue = "estimatedvalue";
			public const string EvaluateFit = "evaluatefit";
			public const string ExchangeRate = "exchangerate";
			public const string Fax = "fax";
			public const string FirstName = "firstname";
			public const string FollowEmail = "followemail";
			public const string FullName = "fullname";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IndustryCode = "industrycode";
			public const string InitialCommunication = "initialcommunication";
			public const string IsAutoCreate = "isautocreate";
			public const string IsPrivate = "isprivate";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastUsedInCampaign = "lastusedincampaign";
			public const string LeadId = "leadid";
			public const string LeadQualityCode = "leadqualitycode";
			public const string LeadSourceCode = "leadsourcecode";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string MiddleName = "middlename";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_LeadGrade = "msdyn_leadgrade";
			public const string msdyn_LeadScore = "msdyn_leadscore";
			public const string msdyn_LeadScoreTrend = "msdyn_leadscoretrend";
			public const string msdyn_ordertype = "msdyn_ordertype";
			public const string msdyn_PredictiveScoreId = "msdyn_predictivescoreid";
			public const string msdyn_salesassignmentresult = "msdyn_salesassignmentresult";
			public const string msdyn_ScoreHistory = "msdyn_scorehistory";
			public const string msdyn_ScoreReasons = "msdyn_scorereasons";
			public const string msdyn_segmentid = "msdyn_segmentid";
			public const string Need = "need";
			public const string NumberOfEmployees = "numberofemployees";
			public const string OnHoldTime = "onholdtime";
			public const string OriginatingCaseId = "originatingcaseid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Pager = "pager";
			public const string ParentAccountId = "parentaccountid";
			public const string ParentContactId = "parentcontactid";
			public const string ParticipatesInWorkflow = "participatesinworkflow";
			public const string PreferredContactMethodCode = "preferredcontactmethodcode";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string PurchaseProcess = "purchaseprocess";
			public const string PurchaseTimeFrame = "purchasetimeframe";
			public const string QualificationComments = "qualificationcomments";
			public const string QualifyingOpportunityId = "qualifyingopportunityid";
			public const string RelatedObjectId = "relatedobjectid";
			public const string Revenue = "revenue";
			public const string Revenue_Base = "revenue_base";
			public const string SalesStage = "salesstage";
			public const string SalesStageCode = "salesstagecode";
			public const string Salutation = "salutation";
			public const string ScheduleFollowUp_Prospect = "schedulefollowup_prospect";
			public const string ScheduleFollowUp_Qualify = "schedulefollowup_qualify";
			public const string SIC = "sic";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subject = "subject";
			public const string TeamsFollowed = "teamsfollowed";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WebSiteUrl = "websiteurl";
			public const string YomiCompanyName = "yomicompanyname";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";
		}

		public const string EntityLogicalName = "lead";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4;

		[DebuggerNonUserCode()]
		public Lead()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Lead(Guid LeadId)
		{
			Entity = new Entity(EntityLogicalName, LeadId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Lead(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Lead(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Lead(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Lead(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the account with which the lead is associated.</para>
		/// <para>ReadOnly - Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}

		/// <summary>
		/// <para>Unique identifier for address 1.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Address 1: ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}

		/// <summary>
		/// <para>Select the primary address type.</para>
		/// <para>Picklist</para>
		/// <para>Address 1: Address Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the city for the primary address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete primary address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Address 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}

		/// <summary>
		/// <para>Type the country or region for the primary address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}

		/// <summary>
		/// <para>Type the county for the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: County</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}

		/// <summary>
		/// <para>Type the fax number associated with the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}

		/// <summary>
		/// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Address 1: Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}

		/// <summary>
		/// <para>Type the first line of the primary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}

		/// <summary>
		/// <para>Type the second line of the primary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}

		/// <summary>
		/// <para>Type the third line of the primary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}

		/// <summary>
		/// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Address 1: Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}

		/// <summary>
		/// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Address 1: Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}

		/// <summary>
		/// <para>Type the ZIP Code or postal code for the primary address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Type the post office box number of the primary address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Address 1: Post Office Box</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}

		/// <summary>
		/// <para>Select a shipping method for deliveries sent to this address.</para>
		/// <para>Picklist</para>
		/// <para>Address 1: Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the state or province of the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Type the main phone number associated with the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: Telephone 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}

		/// <summary>
		/// <para>Type a second phone number associated with the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: Telephone 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}

		/// <summary>
		/// <para>Type a third phone number associated with the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: Telephone 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}

		/// <summary>
		/// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para>String - MaxLength: 4</para>
		/// <para>Address 1: UPS Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}

		/// <summary>
		/// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Address 1: UTC Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for address 2.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Address 2: ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}

		/// <summary>
		/// <para>Select the secondary address type.</para>
		/// <para>Picklist</para>
		/// <para>Address 2: Address Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the city for the secondary address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Address 2: City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete secondary address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Address 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}

		/// <summary>
		/// <para>Type the country or region for the secondary address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Address 2: Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}

		/// <summary>
		/// <para>Type the county for the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: County</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}

		/// <summary>
		/// <para>Type the fax number associated with the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}

		/// <summary>
		/// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Address 2: Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}

		/// <summary>
		/// <para>Type the first line of the secondary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Address 2: Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}

		/// <summary>
		/// <para>Type the second line of the secondary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Address 2: Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}

		/// <summary>
		/// <para>Type the third line of the secondary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Address 2: Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}

		/// <summary>
		/// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Address 2: Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}

		/// <summary>
		/// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Address 2: Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}

		/// <summary>
		/// <para>Type the ZIP Code or postal code for the secondary address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Address 2: ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Type the post office box number of the secondary address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Address 2: Post Office Box</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}

		/// <summary>
		/// <para>Select a shipping method for deliveries sent to this address.</para>
		/// <para>Picklist</para>
		/// <para>Address 2: Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the state or province of the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Type the main phone number associated with the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}

		/// <summary>
		/// <para>Type a second phone number associated with the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}

		/// <summary>
		/// <para>Type a third phone number associated with the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}

		/// <summary>
		/// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para>String - MaxLength: 4</para>
		/// <para>Address 2: UPS Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}

		/// <summary>
		/// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Address 2: UTC Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}

		/// <summary>
		/// <para>Information about the budget amount of the lead&apos;s company or organization.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Budget Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.BudgetAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Budget Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Budget Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Information about the budget status of the lead&apos;s company or organization.</para>
		/// <para>Picklist</para>
		/// <para>Budget</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.BudgetStatus? BudgetStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BudgetStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.BudgetStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BudgetStatus] = null;
			}
		}

		/// <summary>
		/// <para>Stores Image of the Business Card</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Business Card</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessCard
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessCard); }
			set { Entity.Attributes[Fields.BusinessCard] = value; }
		}

		/// <summary>
		/// <para>Stores Business Card Control Properties.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>BusinessCardAttributes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessCardAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessCardAttributes); }
			set { Entity.Attributes[Fields.BusinessCardAttributes] = value; }
		}

		/// <summary>
		/// <para>Choose the campaign that the lead was generated from to track the effectiveness of marketing campaigns and identify  communications received by the lead.</para>
		/// <para>Lookup to campaign</para>
		/// <para>Source Campaign</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CampaignId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CampaignId); }
			set { Entity.Attributes[Fields.CampaignId] = value; }
		}

		/// <summary>
		/// <para>Type the name of the company associated with the lead. This becomes the account name when the lead is qualified and converted to a customer account.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Company Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CompanyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CompanyName); }
			set { Entity.Attributes[Fields.CompanyName] = value; }
		}

		/// <summary>
		/// <para>Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality.</para>
		/// <para>Boolean</para>
		/// <para>Confirm Interest</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ConfirmInterest
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ConfirmInterest); }
			set { Entity.Attributes[Fields.ConfirmInterest] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the contact with which the lead is associated.</para>
		/// <para>ReadOnly - Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
		/// <para>Lookup to account, contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}

		/// <summary>
		/// <para>Select whether your notes include information about who makes the purchase decisions at the lead&apos;s company.</para>
		/// <para>Boolean</para>
		/// <para>Decision Maker?</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DecisionMaker
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DecisionMaker); }
			set { Entity.Attributes[Fields.DecisionMaker] = value; }
		}

		/// <summary>
		/// <para>Type additional information to describe the lead, such as an excerpt from the company&apos;s website.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Select whether the lead accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the lead can be added to marketing lists, but will be excluded from the email.</para>
		/// <para>Boolean</para>
		/// <para>Do not allow Bulk Emails</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkEMail); }
			set { Entity.Attributes[Fields.DoNotBulkEMail] = value; }
		}

		/// <summary>
		/// <para>Select whether the lead allows direct email sent from Microsoft Dynamics 365.</para>
		/// <para>Boolean</para>
		/// <para>Do not allow Emails</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEMail); }
			set { Entity.Attributes[Fields.DoNotEMail] = value; }
		}

		/// <summary>
		/// <para>Select whether the lead allows faxes.</para>
		/// <para>Boolean</para>
		/// <para>Do not allow Faxes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotFax
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
			set { Entity.Attributes[Fields.DoNotFax] = value; }
		}

		/// <summary>
		/// <para>Select whether the lead allows phone calls.</para>
		/// <para>Boolean</para>
		/// <para>Do not allow Phone Calls</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPhone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
			set { Entity.Attributes[Fields.DoNotPhone] = value; }
		}

		/// <summary>
		/// <para>Select whether the lead allows direct mail.</para>
		/// <para>Boolean</para>
		/// <para>Do not allow Mails</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
			set { Entity.Attributes[Fields.DoNotPostalMail] = value; }
		}

		/// <summary>
		/// <para>Select whether the lead accepts marketing materials, such as brochures or catalogs. Leads that opt out can be excluded from marketing initiatives.</para>
		/// <para>Boolean</para>
		/// <para>Marketing Material</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotSendMM
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendMM); }
			set { Entity.Attributes[Fields.DoNotSendMM] = value; }
		}

		/// <summary>
		/// <para>Type the primary email address for the lead.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress1
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress1); }
			set { Entity.Attributes[Fields.EMailAddress1] = value; }
		}

		/// <summary>
		/// <para>Type the secondary email address for the lead.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress2); }
			set { Entity.Attributes[Fields.EMailAddress2] = value; }
		}

		/// <summary>
		/// <para>Type a third email address for the lead.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress3
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress3); }
			set { Entity.Attributes[Fields.EMailAddress3] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Type the estimated revenue value that this lead will generate to assist in sales forecasting and planning.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Est. Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.EstimatedAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EstimatedAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.EstimatedAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Est. Value in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Est. Value (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.EstimatedAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the expected close date for the lead, so that the sales team can schedule timely follow-up meetings to move the prospect to the next sales stage.</para>
		/// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Est. Close Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? EstimatedCloseDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.EstimatedCloseDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.EstimatedCloseDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.EstimatedCloseDate] = null;
			}
		}

		/// <summary>
		/// <para>Type a numeric value of the lead&apos;s estimated value, such as a product quantity, if no revenue amount can be specified in the Est. Value field. This can be used for sales forecasting and planning.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Est. Value (deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? EstimatedValue
		{
			get { return Entity.GetAttributeValue<double?>(Fields.EstimatedValue); }
			set { Entity.Attributes[Fields.EstimatedValue] = value; }
		}

		/// <summary>
		/// <para>Select whether the fit between the lead&apos;s requirements and your offerings was evaluated.</para>
		/// <para>Boolean</para>
		/// <para>Evaluate Fit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EvaluateFit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EvaluateFit); }
			set { Entity.Attributes[Fields.EvaluateFit] = value; }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Type the fax number for the primary contact for the lead.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}

		/// <summary>
		/// <para>Type the first name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>First Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FirstName); }
			set { Entity.Attributes[Fields.FirstName] = value; }
		}

		/// <summary>
		/// <para>Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the lead.</para>
		/// <para>Boolean</para>
		/// <para>Follow Email Activity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmail); }
			set { Entity.Attributes[Fields.FollowEmail] = value; }
		}

		/// <summary>
		/// <para>Combines and shows the lead&apos;s first and last names so the full name can be displayed in views and reports.</para>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Select the primary industry in which the lead&apos;s business is focused, for use in marketing segmentation and demographic analysis.</para>
		/// <para>Picklist</para>
		/// <para>Industry</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.IndustryCode? IndustryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IndustryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.IndustryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IndustryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IndustryCode] = null;
			}
		}

		/// <summary>
		/// <para>Choose whether someone from the sales team contacted this lead earlier.</para>
		/// <para>Picklist</para>
		/// <para>Initial Communication</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.InitialCommunication? InitialCommunication
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialCommunication);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.InitialCommunication)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InitialCommunication] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InitialCommunication] = null;
			}
		}

		/// <summary>
		/// <para>Information about whether the contact was auto-created when promoting an email or an appointment.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Auto-created</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoCreate); }
		}

		/// <summary>
		/// <para>Indicates whether the lead is private or visible to the entire organization.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Private</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}

		/// <summary>
		/// <para>Type the job title of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Job Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}

		/// <summary>
		/// <para>Type the last name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para>Required - String - MaxLength: 50</para>
		/// <para>Last Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastName); }
			set { Entity.Attributes[Fields.LastName] = value; }
		}

		/// <summary>
		/// <para>Contains the date and time stamp of the last on hold time.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last On Hold Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}

		/// <summary>
		/// <para>Shows the date when the lead was last included in a marketing campaign or quick campaign.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Last Campaign Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastUsedInCampaignUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedInCampaign); }
			set { Entity.Attributes[Fields.LastUsedInCampaign] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the lead.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Lead</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid LeadId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.LeadId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select a rating value to indicate the lead&apos;s potential to become a customer.</para>
		/// <para>Picklist</para>
		/// <para>Rating</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.LeadQualityCode? LeadQualityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LeadQualityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.LeadQualityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LeadQualityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LeadQualityCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the primary marketing source that prompted the lead to contact you.</para>
		/// <para>Picklist</para>
		/// <para>Lead Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.LeadSourceCode? LeadSourceCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LeadSourceCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.LeadSourceCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LeadSourceCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LeadSourceCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the master lead for merge.</para>
		/// <para>ReadOnly - Lookup to lead</para>
		/// <para>Master ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
		}

		/// <summary>
		/// <para>Tells whether the lead has been merged with another lead.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Merged</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Merged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
		}

		/// <summary>
		/// <para>Type the middle name or initial of the primary contact for the lead to make sure the prospect is addressed correctly.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Middle Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MiddleName); }
			set { Entity.Attributes[Fields.MiddleName] = value; }
		}

		/// <summary>
		/// <para>Type the mobile phone number for the primary contact for the lead.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Mobile Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Describes whether lead is opted out or not</para>
		/// <para>Boolean</para>
		/// <para>GDPR Optout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>(Deprecated) Lead Grade</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadGrade? msdyn_LeadGrade
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_LeadGrade);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadGrade)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_LeadGrade] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_LeadGrade] = null;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>(Deprecated) Lead Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_LeadScore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_LeadScore); }
			set { Entity.Attributes[Fields.msdyn_LeadScore] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>(Deprecated) Lead Score Trend</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadScoreTrend? msdyn_LeadScoreTrend
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_LeadScoreTrend);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadScoreTrend)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_LeadScoreTrend] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_LeadScoreTrend] = null;
			}
		}

		/// <summary>
		/// <para>Whether the Opportunity created when qualifying this Lead is for an Item- based or a Work-based sale</para>
		/// <para>Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_ordertype? msdyn_ordertype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ordertype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_ordertype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ordertype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ordertype] = null;
			}
		}

		/// <summary>
		/// <para>Predictive score</para>
		/// <para>Lookup to msdyn_predictivescore</para>
		/// <para>Predictive Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PredictiveScoreId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PredictiveScoreId); }
			set { Entity.Attributes[Fields.msdyn_PredictiveScoreId] = value; }
		}

		/// <summary>
		/// <para>Result of the assignment rule process</para>
		/// <para>Picklist</para>
		/// <para>Assignment Rule Result</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_salesassignmentresult? msdyn_salesassignmentresult
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_salesassignmentresult);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_salesassignmentresult)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_salesassignmentresult] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_salesassignmentresult] = null;
			}
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>(Deprecated) Score History</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreHistory
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreHistory); }
			set { Entity.Attributes[Fields.msdyn_ScoreHistory] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>(Deprecated) Score Reasons</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreReasons
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreReasons); }
			set { Entity.Attributes[Fields.msdyn_ScoreReasons] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Segment associated with Lead.</para>
		/// <para>Lookup to msdyn_segment</para>
		/// <para>Segment Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segmentid); }
			set { Entity.Attributes[Fields.msdyn_segmentid] = value; }
		}

		/// <summary>
		/// <para>Choose how high the level of need is for the lead&apos;s company.</para>
		/// <para>Picklist</para>
		/// <para>Need</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Need? Need
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Need);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Need)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Need] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Need] = null;
			}
		}

		/// <summary>
		/// <para>Type the number of employees that work at the company associated with the lead, for use in marketing segmentation and demographic analysis.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000</para>
		/// <para>No. of Employees</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfEmployees
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfEmployees); }
			set { Entity.Attributes[Fields.NumberOfEmployees] = value; }
		}

		/// <summary>
		/// <para>Shows how long, in minutes, that the record was on hold.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>On Hold Time (Minutes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}

		/// <summary>
		/// <para>This attribute is used for Sample Service Business Processes.</para>
		/// <para>Lookup to incident</para>
		/// <para>Originating Case</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OriginatingCaseId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OriginatingCaseId); }
			set { Entity.Attributes[Fields.OriginatingCaseId] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Type the pager number for the primary contact for the lead.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Pager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Pager
		{
			get { return Entity.GetAttributeValue<string>(Fields.Pager); }
			set { Entity.Attributes[Fields.Pager] = value; }
		}

		/// <summary>
		/// <para>Choose an account to connect this lead to, so that the relationship is visible in reports and analytics.</para>
		/// <para>Lookup to account</para>
		/// <para>Parent Account for lead</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentAccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAccountId); }
			set { Entity.Attributes[Fields.ParentAccountId] = value; }
		}

		/// <summary>
		/// <para>Choose a contact to connect this lead to, so that the relationship is visible in reports and analytics.</para>
		/// <para>Lookup to contact</para>
		/// <para>Parent Contact for lead</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentContactId); }
			set { Entity.Attributes[Fields.ParentContactId] = value; }
		}

		/// <summary>
		/// <para>Shows whether the lead participates in workflow rules.</para>
		/// <para>Boolean</para>
		/// <para>Participates in Workflow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ParticipatesInWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
			set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
		}

		/// <summary>
		/// <para>Select the preferred method of contact.</para>
		/// <para>Picklist</para>
		/// <para>Preferred Method of Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.PreferredContactMethodCode? PreferredContactMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredContactMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.PreferredContactMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredContactMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredContactMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para>Picklist</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Choose whether an individual or a committee will be involved in the  purchase process for the lead.</para>
		/// <para>Picklist</para>
		/// <para>Purchase Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseProcess? PurchaseProcess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PurchaseProcess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseProcess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PurchaseProcess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PurchaseProcess] = null;
			}
		}

		/// <summary>
		/// <para>Choose how long the lead will likely take to make the purchase, so the sales team will be aware.</para>
		/// <para>Picklist</para>
		/// <para>Purchase Timeframe</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseTimeFrame? PurchaseTimeFrame
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PurchaseTimeFrame);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseTimeFrame)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PurchaseTimeFrame] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PurchaseTimeFrame] = null;
			}
		}

		/// <summary>
		/// <para>Type comments about the qualification or scoring of the lead.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Qualification Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QualificationComments
		{
			get { return Entity.GetAttributeValue<string>(Fields.QualificationComments); }
			set { Entity.Attributes[Fields.QualificationComments] = value; }
		}

		/// <summary>
		/// <para>Choose the opportunity that the lead was qualified on and then converted to.</para>
		/// <para>Lookup to opportunity</para>
		/// <para>Qualifying Opportunity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QualifyingOpportunityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QualifyingOpportunityId); }
			set { Entity.Attributes[Fields.QualifyingOpportunityId] = value; }
		}

		/// <summary>
		/// <para>Related Campaign Response.</para>
		/// <para>Lookup to campaignresponse</para>
		/// <para>Related Campaign Response</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RelatedObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RelatedObjectId); }
			set { Entity.Attributes[Fields.RelatedObjectId] = value; }
		}

		/// <summary>
		/// <para>Type the annual revenue of the company associated with the lead to provide an understanding of the prospect&apos;s business.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Annual Revenue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Revenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Revenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Revenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Revenue] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Annual Revenue in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Annual Revenue (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Revenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Revenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select the sales stage of this lead to aid the sales team in their efforts to convert this lead to an opportunity.</para>
		/// <para>Picklist</para>
		/// <para>Sales Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStage? SalesStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SalesStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SalesStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SalesStage] = null;
			}
		}

		/// <summary>
		/// <para>Select the sales process stage for the lead to help determine the probability of the lead converting to an opportunity.</para>
		/// <para>Picklist</para>
		/// <para>Sales Stage Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStageCode? SalesStageCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SalesStageCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStageCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SalesStageCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SalesStageCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the salutation of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Salutation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Salutation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Salutation); }
			set { Entity.Attributes[Fields.Salutation] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time of the prospecting follow-up meeting with the lead.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Schedule Follow Up (Prospect)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleFollowUp_ProspectUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleFollowUp_Prospect); }
			set { Entity.Attributes[Fields.ScheduleFollowUp_Prospect] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time of the qualifying follow-up meeting with the lead.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Schedule Follow Up (Qualify)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleFollowUp_QualifyUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleFollowUp_Qualify); }
			set { Entity.Attributes[Fields.ScheduleFollowUp_Qualify] = value; }
		}

		/// <summary>
		/// <para>Type the Standard Industrial Classification (SIC) code that indicates the lead&apos;s primary industry of business for use in marketing segmentation and demographic analysis.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>SIC Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SIC
		{
			get { return Entity.GetAttributeValue<string>(Fields.SIC); }
			set { Entity.Attributes[Fields.SIC] = value; }
		}

		/// <summary>
		/// <para>Choose the service level agreement (SLA) that you want to apply to the Lead record.</para>
		/// <para>Lookup to sla</para>
		/// <para>SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}

		/// <summary>
		/// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
		/// <para>ReadOnly - Lookup to sla</para>
		/// <para>Last SLA applied</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Shows whether the lead is open, qualified, or disqualified. Qualified and disqualified leads are read-only and can&apos;t be edited unless they are reactivated.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the lead&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Type a subject or descriptive name, such as the expected order, company name, or marketing source list, to identify the lead.</para>
		/// <para>Required - String - MaxLength: 300</para>
		/// <para>Topic</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}

		/// <summary>
		/// <para>Number of users or conversations followed the record</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>TeamsFollowed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TeamsFollowed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TeamsFollowed); }
			set { Entity.Attributes[Fields.TeamsFollowed] = value; }
		}

		/// <summary>
		/// <para>Type the work phone number for the primary contact for the lead.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Business Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}

		/// <summary>
		/// <para>Type the home phone number for the primary contact for the lead.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Home Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}

		/// <summary>
		/// <para>Type an alternate phone number for the primary contact for the lead.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Other Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}

		/// <summary>
		/// <para>Total time spent for emails (read and write) and meetings by me in relation to the lead record.</para>
		/// <para>ReadOnly - String - MaxLength: 1250</para>
		/// <para>Time Spent by me</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSpentByMeOnEmailAndMeetings
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Type the website URL for the company associated with this lead.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Website</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebSiteUrl); }
			set { Entity.Attributes[Fields.WebSiteUrl] = value; }
		}

		/// <summary>
		/// <para>Type the phonetic spelling of the lead&apos;s company name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Yomi Company Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiCompanyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiCompanyName); }
			set { Entity.Attributes[Fields.YomiCompanyName] = value; }
		}

		/// <summary>
		/// <para>Type the phonetic spelling of the lead&apos;s first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
		/// <para>String - MaxLength: 150</para>
		/// <para>Yomi First Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFirstName); }
			set { Entity.Attributes[Fields.YomiFirstName] = value; }
		}

		/// <summary>
		/// <para>Combines and shows the lead&apos;s Yomi first and last names so the full phonetic name can be displayed in views and reports.</para>
		/// <para>ReadOnly - String - MaxLength: 450</para>
		/// <para>Yomi Full Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFullName); }
		}

		/// <summary>
		/// <para>Type the phonetic spelling of the lead&apos;s last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
		/// <para>String - MaxLength: 150</para>
		/// <para>Yomi Last Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiLastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiLastName); }
			set { Entity.Attributes[Fields.YomiLastName] = value; }
		}

		/// <summary>
		/// <para>Type the phonetic spelling of the lead&apos;s middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
		/// <para>String - MaxLength: 150</para>
		/// <para>Yomi Middle Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiMiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiMiddleName); }
			set { Entity.Attributes[Fields.YomiMiddleName] = value; }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
