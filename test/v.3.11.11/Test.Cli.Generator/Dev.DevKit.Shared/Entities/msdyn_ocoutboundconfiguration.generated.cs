//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets
{
	public enum msdyn_channel
	{
		/// <summary>
		/// Apple Messages for Business = 192450000
		/// </summary>
		Apple_Messages_for_Business = 192450000,
		/// <summary>
		/// Co-browse = 192390000
		/// </summary>
		Co_browse = 192390000,
		/// <summary>
		/// Custom = 192350002
		/// </summary>
		Custom = 192350002,
		/// <summary>
		/// Entity Records = 192350000
		/// </summary>
		Entity_Records = 192350000,
		/// <summary>
		/// Facebook = 192330000
		/// </summary>
		Facebook = 192330000,
		/// <summary>
		/// LINE = 192310000
		/// </summary>
		LINE = 192310000,
		/// <summary>
		/// Live chat = 192360000
		/// </summary>
		Live_chat = 192360000,
		/// <summary>
		/// Microsoft Teams = 19241000
		/// </summary>
		Microsoft_Teams = 19241000,
		/// <summary>
		/// Screen sharing = 192400000
		/// </summary>
		Screen_sharing = 192400000,
		/// <summary>
		/// SMS = 192340000
		/// </summary>
		SMS = 192340000,
		/// <summary>
		/// Twitter = 192350001
		/// </summary>
		Twitter = 192350001,
		/// <summary>
		/// Video = 192380000
		/// </summary>
		Video = 192380000,
		/// <summary>
		/// Voice = 192370000
		/// </summary>
		Voice = 192370000,
		/// <summary>
		/// WeChat = 192320000
		/// </summary>
		WeChat = 192320000,
		/// <summary>
		/// WhatsApp = 192300000
		/// </summary>
		WhatsApp = 192300000
	}

	public enum msdyn_ocscope
	{
		/// <summary>
		/// Global = 837500000
		/// </summary>
		Global = 837500000,
		/// <summary>
		/// Workstream = 837500001
		/// </summary>
		Workstream = 837500001
	}

	public enum msdyn_type
	{
		/// <summary>
		/// Create conversation on send = 100000001
		/// </summary>
		Create_conversation_on_send = 100000001,
		/// <summary>
		/// Create conversation when customer responds  = 100000000
		/// </summary>
		Create_conversation_when_customer_responds = 100000000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ocoutboundconfiguration : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_channel = "msdyn_channel";
			public const string msdyn_channeldisplayname = "msdyn_channeldisplayname";
			public const string msdyn_channelid = "msdyn_channelid";
			public const string msdyn_defaultlocale = "msdyn_defaultlocale";
			public const string msdyn_displayoutboundconfigurationid = "msdyn_displayoutboundconfigurationid";
			public const string msdyn_enablemessagelogging = "msdyn_enablemessagelogging";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_messagetemplate = "msdyn_messagetemplate";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocoutboundconfigurationId = "msdyn_ocoutboundconfigurationid";
			public const string msdyn_ocscope = "msdyn_ocscope";
			public const string msdyn_secondarychanneldisplayname = "msdyn_secondarychanneldisplayname";
			public const string msdyn_secondarychannelid = "msdyn_secondarychannelid";
			public const string msdyn_showinactivities = "msdyn_showinactivities";
			public const string msdyn_type = "msdyn_type";
			public const string msdyn_usecustomerpreference = "msdyn_usecustomerpreference";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_ocoutboundconfiguration";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10856;

		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(Guid msdyn_ocoutboundconfigurationId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ocoutboundconfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Channel type</para>
		/// <para>Required - Picklist</para>
		/// <para>Channel type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_channel? msdyn_channel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_channel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_channel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_channel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_channel] = null;
			}
		}

		/// <summary>
		/// <para>User-friendly description of the selected channel.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Channel Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_channeldisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_channeldisplayname); }
			set { Entity.Attributes[Fields.msdyn_channeldisplayname] = value; }
		}

		/// <summary>
		/// <para>Unique Identifier for Channel associated with the channel selected</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Channel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_channelid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_channelid); }
			set { Entity.Attributes[Fields.msdyn_channelid] = value; }
		}

		/// <summary>
		/// <para>Deprecated - This language will be used if there’s no customer preferred language or message template in customer&apos;s language.</para>
		/// <para>Required - Lookup to msdyn_oclanguage</para>
		/// <para>Deprecated - Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_defaultlocale
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_defaultlocale); }
			set { Entity.Attributes[Fields.msdyn_defaultlocale] = value; }
		}

		/// <summary>
		/// <para>Configuration ID</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Configuration ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_displayoutboundconfigurationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_displayoutboundconfigurationid); }
			set { Entity.Attributes[Fields.msdyn_displayoutboundconfigurationid] = value; }
		}

		/// <summary>
		/// <para>Enable Message Logging</para>
		/// <para>Boolean</para>
		/// <para>Enable Message Logging</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablemessagelogging
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablemessagelogging); }
			set { Entity.Attributes[Fields.msdyn_enablemessagelogging] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Work Stream associated with Outbound Configuration</para>
		/// <para>Required - Lookup to msdyn_liveworkstream</para>
		/// <para>Work Stream (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}

		/// <summary>
		/// <para>Message template</para>
		/// <para>Required - Lookup to msdyn_ocsystemmessage</para>
		/// <para>Message template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_messagetemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_messagetemplate); }
			set { Entity.Attributes[Fields.msdyn_messagetemplate] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Outbound Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ocoutboundconfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ocoutboundconfigurationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Scope of the outbound configuration</para>
		/// <para>Picklist</para>
		/// <para>Scope (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_ocscope? msdyn_ocscope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ocscope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_ocscope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ocscope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ocscope] = null;
			}
		}

		/// <summary>
		/// <para>User-friendly description of the selected secondary channel.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Secondary Channel Display Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_secondarychanneldisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_secondarychanneldisplayname); }
			set { Entity.Attributes[Fields.msdyn_secondarychanneldisplayname] = value; }
		}

		/// <summary>
		/// <para>Secondary identifier associated with the channel selected.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Secondary Channel ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_secondarychannelid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_secondarychannelid); }
			set { Entity.Attributes[Fields.msdyn_secondarychannelid] = value; }
		}

		/// <summary>
		/// <para>If this is turned on, outbound activity record will be created in CRM.</para>
		/// <para>Boolean</para>
		/// <para>Show in timeline</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_showinactivities
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_showinactivities); }
			set { Entity.Attributes[Fields.msdyn_showinactivities] = value; }
		}

		/// <summary>
		/// <para>Conversation record</para>
		/// <para>Required - Picklist</para>
		/// <para>Conversation record</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_type? msdyn_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_type] = null;
			}
		}

		/// <summary>
		/// <para>Use Customer Preferred channel</para>
		/// <para>Boolean</para>
		/// <para>Use Customer Preferred channel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_usecustomerpreference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_usecustomerpreference); }
			set { Entity.Attributes[Fields.msdyn_usecustomerpreference] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Outbound Configuration</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Outbound Configuration</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
