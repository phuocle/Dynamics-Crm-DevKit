//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets
{
	public enum BookingType
	{
		/// <summary>
		/// Liquid = 2
		/// </summary>
		Liquid = 2,
		/// <summary>
		/// Solid = 1
		/// </summary>
		Solid = 1
	}

	public enum msdyn_BookingMethod
	{
		/// <summary>
		/// Manual = 690970003
		/// </summary>
		Manual = 690970003,
		/// <summary>
		/// Mobile = 690970002
		/// </summary>
		Mobile = 690970002,
		/// <summary>
		/// Resource Scheduling Optimization = 192350000
		/// </summary>
		Resource_Scheduling_Optimization = 192350000,
		/// <summary>
		/// Schedule Assistant = 690970004
		/// </summary>
		Schedule_Assistant = 690970004,
		/// <summary>
		/// Schedule Board = 690970001
		/// </summary>
		Schedule_Board = 690970001,
		/// <summary>
		/// System - Agreement Schedule = 690970005
		/// </summary>
		System_Agreement_Schedule = 690970005
	}

	public enum msdyn_CrewMemberType
	{
		/// <summary>
		/// Leader = 192350000
		/// </summary>
		Leader = 192350000,
		/// <summary>
		/// Member = 192350001
		/// </summary>
		Member = 192350001,
		/// <summary>
		/// None = 192350002
		/// </summary>
		None = 192350002
	}

	public enum msdyn_quickNoteAction
	{
		/// <summary>
		/// audio = 100000004
		/// </summary>
		audio = 100000004,
		/// <summary>
		/// file = 100000005
		/// </summary>
		file = 100000005,
		/// <summary>
		/// none = 100000000
		/// </summary>
		none = 100000000,
		/// <summary>
		/// photo = 100000002
		/// </summary>
		photo = 100000002,
		/// <summary>
		/// text = 100000001
		/// </summary>
		text = 100000001,
		/// <summary>
		/// video = 100000003
		/// </summary>
		video = 100000003
	}

	public enum msdyn_TravelTimeCalculationType
	{
		/// <summary>
		/// Approximate = 192350003
		/// </summary>
		Approximate = 192350003,
		/// <summary>
		/// Bing Maps with historical traffic = 192350001
		/// </summary>
		Bing_Maps_with_historical_traffic = 192350001,
		/// <summary>
		/// Bing Maps without historical traffic = 192350000
		/// </summary>
		Bing_Maps_without_historical_traffic = 192350000,
		/// <summary>
		/// Custom Map Provider = 192350002
		/// </summary>
		Custom_Map_Provider = 192350002
	}

	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// Facility = 690970001
		/// </summary>
		Facility = 690970001,
		/// <summary>
		/// Location Agnostic = 690970002
		/// </summary>
		Location_Agnostic = 690970002,
		/// <summary>
		/// Onsite = 690970000
		/// </summary>
		Onsite = 690970000
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BookableResourceBooking : EntityBase
	{
		public struct Fields
		{
			public const string BookableResourceBookingId = "bookableresourcebookingid";
			public const string BookingStatus = "bookingstatus";
			public const string BookingType = "bookingtype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Duration = "duration";
			public const string EndTime = "endtime";
			public const string ExchangeRate = "exchangerate";
			public const string Header = "header";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AcceptCascadeCrewChanges = "msdyn_acceptcascadecrewchanges";
			public const string msdyn_ActualArrivalTime = "msdyn_actualarrivaltime";
			public const string msdyn_ActualTravelDuration = "msdyn_actualtravelduration";
			public const string msdyn_AgreementBookingDate = "msdyn_agreementbookingdate";
			public const string msdyn_AllowOverlapping = "msdyn_allowoverlapping";
			public const string msdyn_AppointmentBookingId = "msdyn_appointmentbookingid";
			public const string msdyn_BaseTravelDuration = "msdyn_basetravelduration";
			public const string msdyn_BookingMethod = "msdyn_bookingmethod";
			public const string msdyn_BookingSetupMetadataId = "msdyn_bookingsetupmetadataid";
			public const string msdyn_CascadeCrewChanges = "msdyn_cascadecrewchanges";
			public const string msdyn_Crew = "msdyn_crew";
			public const string msdyn_CrewMemberType = "msdyn_crewmembertype";
			public const string msdyn_effort = "msdyn_effort";
			public const string msdyn_EstimatedArrivalTime = "msdyn_estimatedarrivaltime";
			public const string msdyn_EstimatedTravelDuration = "msdyn_estimatedtravelduration";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_MilesTraveled = "msdyn_milestraveled";
			public const string msdyn_OfflineTimestamp = "msdyn_offlinetimestamp";
			public const string msdyn_PreventTimestampCreation = "msdyn_preventtimestampcreation";
			public const string msdyn_projectid = "msdyn_projectid";
			public const string msdyn_projectteamid = "msdyn_projectteamid";
			public const string msdyn_quickNoteAction = "msdyn_quickNoteAction";
			public const string msdyn_requirementgroupid = "msdyn_requirementgroupid";
			public const string msdyn_requirementgroupset = "msdyn_requirementgroupset";
			public const string msdyn_resourcecategoryid = "msdyn_resourcecategoryid";
			public const string msdyn_ResourceGroup = "msdyn_resourcegroup";
			public const string msdyn_ResourceRequirement = "msdyn_resourcerequirement";
			public const string msdyn_serviceappointment = "msdyn_serviceappointment";
			public const string msdyn_Signature = "msdyn_signature";
			public const string msdyn_SlotText = "msdyn_slottext";
			public const string msdyn_TimeGroupDetailSelected = "msdyn_timegroupdetailselected";
			public const string msdyn_TotalBillableDuration = "msdyn_totalbillableduration";
			public const string msdyn_TotalBreakDuration = "msdyn_totalbreakduration";
			public const string msdyn_TotalCost = "msdyn_totalcost";
			public const string msdyn_totalcost_Base = "msdyn_totalcost_base";
			public const string msdyn_TotalDurationInProgress = "msdyn_totaldurationinprogress";
			public const string msdyn_TravelTimeCalculationType = "msdyn_traveltimecalculationtype";
			public const string msdyn_TravelTimeRescheduling = "msdyn_traveltimerescheduling";
			public const string msdyn_URSInternalFlags = "msdyn_ursinternalflags";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProcessId = "processid";
			public const string Resource = "resource";
			public const string StageId = "stageid";
			public const string StartTime = "starttime";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "bookableresourcebooking";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1145;

		[DebuggerNonUserCode()]
		public BookableResourceBooking()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResourceBooking(Guid BookableResourceBookingId)
		{
			Entity = new Entity(EntityLogicalName, BookableResourceBookingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResourceBooking(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResourceBooking(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResourceBooking(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResourceBooking(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the resource booking.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Bookable Resource Booking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BookableResourceBookingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BookableResourceBookingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select the status of the booking.</para>
		/// <para>Lookup to bookingstatus</para>
		/// <para>Booking Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BookingStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BookingStatus); }
			set { Entity.Attributes[Fields.BookingStatus] = value; }
		}

		/// <summary>
		/// <para>Select whether the booking is solid or liquid. Solid bookings are firm and cannot be changed whereas liquid bookings can be changed.</para>
		/// <para>Picklist</para>
		/// <para>Booking Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.BookingType? BookingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BookingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.BookingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BookingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BookingType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enter the duration of the booking.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}

		/// <summary>
		/// <para>Enter the end date and time of the booking.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the bookableresourcebooking with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>ExchangeRate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Shows the reference to the booking header record that represents the summary of bookings.</para>
		/// <para>Lookup to bookableresourcebookingheader</para>
		/// <para>Header</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Header
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Header); }
			set { Entity.Attributes[Fields.Header] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Defines whether this booking accepts changes propagated as cascading changes</para>
		/// <para>Boolean</para>
		/// <para>Accept Cascade Crew Changes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AcceptCascadeCrewChanges
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AcceptCascadeCrewChanges); }
			set { Entity.Attributes[Fields.msdyn_AcceptCascadeCrewChanges] = value; }
		}

		/// <summary>
		/// <para>Shows the time that work started.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Actual Arrival Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ActualArrivalTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ActualArrivalTime); }
			set { Entity.Attributes[Fields.msdyn_ActualArrivalTime] = value; }
		}

		/// <summary>
		/// <para>Shows the total travel duration. Calculated based on the difference between the Bookable Resource Booking&apos;s start time and actual arrival time.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Actual Travel Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ActualTravelDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ActualTravelDuration); }
			set { Entity.Attributes[Fields.msdyn_ActualTravelDuration] = value; }
		}

		/// <summary>
		/// <para>Agreement Booking Date from where this Booking was generated</para>
		/// <para>Lookup to msdyn_agreementbookingdate</para>
		/// <para>Agreement Booking Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AgreementBookingDate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AgreementBookingDate); }
			set { Entity.Attributes[Fields.msdyn_AgreementBookingDate] = value; }
		}

		/// <summary>
		/// <para>Allow the time of this booking to be displayed on the schedule assistant as available.</para>
		/// <para>Boolean</para>
		/// <para>Allow Overlapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AllowOverlapping
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AllowOverlapping); }
			set { Entity.Attributes[Fields.msdyn_AllowOverlapping] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Appointment associated with Bookable Resource Booking.</para>
		/// <para>Lookup to appointment</para>
		/// <para>Appointment Booking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AppointmentBookingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AppointmentBookingId); }
			set { Entity.Attributes[Fields.msdyn_AppointmentBookingId] = value; }
		}

		/// <summary>
		/// <para>The Base travel duration indicates the travel time without traffic</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Base Travel Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_BaseTravelDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_BaseTravelDuration); }
			set { Entity.Attributes[Fields.msdyn_BaseTravelDuration] = value; }
		}

		/// <summary>
		/// <para>Shows the method used to create this booking.</para>
		/// <para>Picklist</para>
		/// <para>Booking Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_BookingMethod? msdyn_BookingMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BookingMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_BookingMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BookingMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BookingMethod] = null;
			}
		}

		/// <summary>
		/// <para>A unique identifier for the booking setup metadata that is associated with a bookable resource booking.</para>
		/// <para>Lookup to msdyn_bookingsetupmetadata</para>
		/// <para>Booking Setup Metadata</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BookingSetupMetadataId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BookingSetupMetadataId); }
			set { Entity.Attributes[Fields.msdyn_BookingSetupMetadataId] = value; }
		}

		/// <summary>
		/// <para>Defines whether changing any of the following fields (Start Time, End Time, Status) should cascade the changes to other bookings on this requirement that have the same start and end time.</para>
		/// <para>Boolean</para>
		/// <para>Cascade Crew Changes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CascadeCrewChanges
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CascadeCrewChanges); }
			set { Entity.Attributes[Fields.msdyn_CascadeCrewChanges] = value; }
		}

		/// <summary>
		/// <para>This field is populated by the Field Service solution to define to which crew a booking is connected.</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Crew</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Crew
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Crew); }
			set { Entity.Attributes[Fields.msdyn_Crew] = value; }
		}

		/// <summary>
		/// <para>Crew Member Type</para>
		/// <para>Picklist</para>
		/// <para>Crew Member Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_CrewMemberType? msdyn_CrewMemberType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CrewMemberType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_CrewMemberType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CrewMemberType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CrewMemberType] = null;
			}
		}

		/// <summary>
		/// <para>Capacity that needs to take from resource capacity</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Capacity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_effort
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_effort); }
			set { Entity.Attributes[Fields.msdyn_effort] = value; }
		}

		/// <summary>
		/// <para>Estimated Arrival Time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Estimated Arrival Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_EstimatedArrivalTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_EstimatedArrivalTime); }
			set { Entity.Attributes[Fields.msdyn_EstimatedArrivalTime] = value; }
		}

		/// <summary>
		/// <para>Estimated Travel Duration</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Estimated Travel Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_EstimatedTravelDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_EstimatedTravelDuration); }
			set { Entity.Attributes[Fields.msdyn_EstimatedTravelDuration] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}

		/// <summary>
		/// <para>In this field you can enter the total miles the resource drove to the job site</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Miles Traveled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_MilesTraveled
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_MilesTraveled); }
			set { Entity.Attributes[Fields.msdyn_MilesTraveled] = value; }
		}

		/// <summary>
		/// <para>Internal Use. This field is used to capture the time when the Booking was updated on mobile offline.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Offline Timestamp</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_OfflineTimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_OfflineTimestamp); }
			set { Entity.Attributes[Fields.msdyn_OfflineTimestamp] = value; }
		}

		/// <summary>
		/// <para>Prevents time stamp creation if the time stamp was already created on a mobile device.</para>
		/// <para>Boolean</para>
		/// <para>Prevent Timestamp Creation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PreventTimestampCreation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PreventTimestampCreation); }
			set { Entity.Attributes[Fields.msdyn_PreventTimestampCreation] = value; }
		}

		/// <summary>
		/// <para>Project of booking detail record</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectid); }
			set { Entity.Attributes[Fields.msdyn_projectid] = value; }
		}

		/// <summary>
		/// <para>Project team member of booking detail record</para>
		/// <para>Lookup to msdyn_projectteam</para>
		/// <para>Project Team Member</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectteamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectteamid); }
			set { Entity.Attributes[Fields.msdyn_projectteamid] = value; }
		}

		/// <summary>
		/// <para>Internal For Quick note pcf control actions</para>
		/// <para>Picklist</para>
		/// <para>Quick note actions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_quickNoteAction? msdyn_quickNoteAction
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_quickNoteAction);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_quickNoteAction)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_quickNoteAction] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_quickNoteAction] = null;
			}
		}

		/// <summary>
		/// <para>Requirement Group</para>
		/// <para>Lookup to msdyn_requirementgroup</para>
		/// <para>Requirement Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_requirementgroupid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_requirementgroupid); }
			set { Entity.Attributes[Fields.msdyn_requirementgroupid] = value; }
		}

		/// <summary>
		/// <para>Requirement Group Set</para>
		/// <para>String - MaxLength: 40</para>
		/// <para>Requirement Group Set</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_requirementgroupset
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_requirementgroupset); }
			set { Entity.Attributes[Fields.msdyn_requirementgroupset] = value; }
		}

		/// <summary>
		/// <para>Resource Category</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Resource Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_resourcecategoryid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_resourcecategoryid); }
			set { Entity.Attributes[Fields.msdyn_resourcecategoryid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Resource associated with Resource Booking</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Resource Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceGroup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceGroup); }
			set { Entity.Attributes[Fields.msdyn_ResourceGroup] = value; }
		}

		/// <summary>
		/// <para>Resource Requirement</para>
		/// <para>Lookup to msdyn_resourcerequirement</para>
		/// <para>Resource Requirement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceRequirement
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceRequirement); }
			set { Entity.Attributes[Fields.msdyn_ResourceRequirement] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Service Appointment associated with Resource Booking.</para>
		/// <para>Lookup to serviceappointment</para>
		/// <para>Service Activity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_serviceappointment
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_serviceappointment); }
			set { Entity.Attributes[Fields.msdyn_serviceappointment] = value; }
		}

		/// <summary>
		/// <para>This field is used for capturing signature on Mobile (using the Pen Control)</para>
		/// <para>Memo - MaxLength: 15000</para>
		/// <para>Signature</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Signature
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Signature); }
			set { Entity.Attributes[Fields.msdyn_Signature] = value; }
		}

		/// <summary>
		/// <para>Shows the automatically generated text of the time slot on the schedule board.</para>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>Slot Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SlotText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SlotText); }
			set { Entity.Attributes[Fields.msdyn_SlotText] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_timegroupdetail</para>
		/// <para>Time Group Detail Selected</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeGroupDetailSelected
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeGroupDetailSelected); }
			set { Entity.Attributes[Fields.msdyn_TimeGroupDetailSelected] = value; }
		}

		/// <summary>
		/// <para>Shows the total billable duration. If you leave this field blank the system automatically determines the billable duration by calculating the resource journal details.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Total Billable Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalBillableDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalBillableDuration); }
			set { Entity.Attributes[Fields.msdyn_TotalBillableDuration] = value; }
		}

		/// <summary>
		/// <para>Shows the total break duration. If you leave this field blank the system automatically determines the break duration by calculating the resource journal details.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Total Break Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalBreakDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalBreakDuration); }
			set { Entity.Attributes[Fields.msdyn_TotalBreakDuration] = value; }
		}

		/// <summary>
		/// <para>Shows the total cost for this booking.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Total Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalCost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total duration that this booking was in progress.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Total Duration In Progress</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalDurationInProgress
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalDurationInProgress); }
			set { Entity.Attributes[Fields.msdyn_TotalDurationInProgress] = value; }
		}

		/// <summary>
		/// <para>Travel Time Calculation</para>
		/// <para>Picklist</para>
		/// <para>Travel Time Calculation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_TravelTimeCalculationType? msdyn_TravelTimeCalculationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TravelTimeCalculationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_TravelTimeCalculationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TravelTimeCalculationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TravelTimeCalculationType] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Travel Time Rescheduling (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_TravelTimeRescheduling
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_TravelTimeRescheduling); }
			set { Entity.Attributes[Fields.msdyn_TravelTimeRescheduling] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_URSInternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_URSInternalFlags); }
			set { Entity.Attributes[Fields.msdyn_URSInternalFlags] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Work Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Work Order associated with Resource Booking.</para>
		/// <para>Lookup to msdyn_workorder</para>
		/// <para>Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}

		/// <summary>
		/// <para>Type a name for the booking.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Shows the resource that is booked.</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Resource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Resource); }
			set { Entity.Attributes[Fields.Resource] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Enter the start date and time of the booking.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}

		/// <summary>
		/// <para>Status of the Bookable Resource Booking</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Bookable Resource Booking</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the BookableResourceBooking with respect to the base currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
