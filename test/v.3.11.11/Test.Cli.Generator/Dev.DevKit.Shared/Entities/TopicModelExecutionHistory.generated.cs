//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.TopicModelExecutionHistoryOptionSets
{
	public enum Status
	{
		/// <summary>
		/// Failed = 4
		/// </summary>
		Failed = 4,
		/// <summary>
		/// In progress = 2
		/// </summary>
		In_progress = 2,
		/// <summary>
		/// Queued = 1
		/// </summary>
		Queued = 1,
		/// <summary>
		/// Success = 3
		/// </summary>
		Success = 3
	}

	public enum StatusReason
	{
		/// <summary>
		/// Analysis failed = 6
		/// </summary>
		Analysis_failed = 6,
		/// <summary>
		/// Analyzing topic analysis execution = 3
		/// </summary>
		Analyzing_topic_analysis_execution = 3,
		/// <summary>
		/// Connection failed = 7
		/// </summary>
		Connection_failed = 7,
		/// <summary>
		/// Synchronization failed = 5
		/// </summary>
		Synchronization_failed = 5,
		/// <summary>
		/// Topic analysis execution is queued = 1
		/// </summary>
		Topic_analysis_execution_is_queued = 1,
		/// <summary>
		/// Topic analysis execution is synchronizing = 2
		/// </summary>
		Topic_analysis_execution_is_synchronizing = 2,
		/// <summary>
		/// Topic analysis has built = 4
		/// </summary>
		Topic_analysis_has_built = 4
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TopicModelExecutionHistory : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ErrorDetails = "azuresyncerrormessage";
			public const string FetchXmlList = "fetchxmllist";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsTestExecution = "istestexecution";
			public const string MaxTopics = "maxtopics";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NumberOfTopicsFound = "numberoftopicsfound";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string RecordCorrelationId = "recordcorrelationid";
			public const string RecordsProcessed = "recordsprocessed";
			public const string StartTime = "starttime";
			public const string Status = "status";
			public const string StatusReason = "statusreason";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TopicModelConfigurationId = "topicmodelconfigurationid";
			public const string TopicModelExecutionHistoryId = "topicmodelexecutionhistoryid";
			public const string TopicModelId = "topicmodelid";
			public const string TotalTime = "totaltime";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "topicmodelexecutionhistory";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9943;

		[DebuggerNonUserCode()]
		public TopicModelExecutionHistory()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelExecutionHistory(Guid TopicModelExecutionHistoryId)
		{
			Entity = new Entity(EntityLogicalName, TopicModelExecutionHistoryId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelExecutionHistory(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelExecutionHistory(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelExecutionHistory(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelExecutionHistory(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the topic model execution history.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the topic model execution history.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Detailed error message for the Topic Analysis process</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Error Details</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDetails); }
			set { Entity.Attributes[Fields.ErrorDetails] = value; }
		}

		/// <summary>
		/// <para>Fetch Xml</para>
		/// <para>Memo - MaxLength: 500000</para>
		/// <para>Fetch Xml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FetchXmlList
		{
			get { return Entity.GetAttributeValue<string>(Fields.FetchXmlList); }
			set { Entity.Attributes[Fields.FetchXmlList] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Allow model to check is test executed.</para>
		/// <para>Boolean</para>
		/// <para>Test Execution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTestExecution
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTestExecution); }
			set { Entity.Attributes[Fields.IsTestExecution] = value; }
		}

		/// <summary>
		/// <para>Maximum number of Topics.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 1,000</para>
		/// <para>Max Topics</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxTopics
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxTopics); }
			set { Entity.Attributes[Fields.MaxTopics] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the topic model execution history.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the topic model execution history.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>name</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Number of Topics Identified</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Number of Topics Identified</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfTopicsFound
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfTopicsFound); }
			set { Entity.Attributes[Fields.NumberOfTopicsFound] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Record Correlation Id.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Record Correlation Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RecordCorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.RecordCorrelationId); }
			set { Entity.Attributes[Fields.RecordCorrelationId] = value; }
		}

		/// <summary>
		/// <para>Number of Records Synchronized</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Number of Records Synchronized</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecordsProcessed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecordsProcessed); }
			set { Entity.Attributes[Fields.RecordsProcessed] = value; }
		}

		/// <summary>
		/// <para>StartTime</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}

		/// <summary>
		/// <para>Status</para>
		/// <para>Picklist</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TopicModelExecutionHistoryOptionSets.Status? Status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TopicModelExecutionHistoryOptionSets.Status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Status] = null;
			}
		}

		/// <summary>
		/// <para>StatusReason</para>
		/// <para>Picklist</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TopicModelExecutionHistoryOptionSets.StatusReason? StatusReason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusReason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TopicModelExecutionHistoryOptionSets.StatusReason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusReason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusReason] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Model associated with Topic Model Execution History.</para>
		/// <para>Required - Lookup to topicmodelconfiguration</para>
		/// <para>Topic Model Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TopicModelConfigurationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TopicModelConfigurationId); }
			set { Entity.Attributes[Fields.TopicModelConfigurationId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>TopicModelExecutionHistory</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TopicModelExecutionHistoryId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TopicModelExecutionHistoryId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Model associated with Topic Model Execution History.</para>
		/// <para>Required - Lookup to topicmodel</para>
		/// <para>TopicModelId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TopicModelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TopicModelId); }
			set { Entity.Attributes[Fields.TopicModelId] = value; }
		}

		/// <summary>
		/// <para>Duration (in mins)</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration (in mins)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TotalTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TotalTime); }
			set { Entity.Attributes[Fields.TotalTime] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
