//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_factOptionSets
{
	public enum msdyn_CustomerType
	{
		/// <summary>
		/// Account = 192350001
		/// </summary>
		Account = 192350001,
		/// <summary>
		/// Contact = 192350002
		/// </summary>
		Contact = 192350002
	}

	public enum msdyn_FactType
	{
		/// <summary>
		/// Actual = 192350000
		/// </summary>
		Actual = 192350000,
		/// <summary>
		/// Estimate = 192350001
		/// </summary>
		Estimate = 192350001
	}

	public enum msdyn_TransactionClassification
	{
		/// <summary>
		/// Additional = 690970001
		/// </summary>
		Additional = 690970001,
		/// <summary>
		/// Commission = 690970000
		/// </summary>
		Commission = 690970000,
		/// <summary>
		/// Expense = 192350001
		/// </summary>
		Expense = 192350001,
		/// <summary>
		/// Fee = 192350004
		/// </summary>
		Fee = 192350004,
		/// <summary>
		/// Material = 192350002
		/// </summary>
		Material = 192350002,
		/// <summary>
		/// Milestone = 192350003
		/// </summary>
		Milestone = 192350003,
		/// <summary>
		/// Tax = 690970002
		/// </summary>
		Tax = 690970002,
		/// <summary>
		/// Time = 192350000
		/// </summary>
		Time = 192350000
	}

	public enum msdyn_VendorType
	{
		/// <summary>
		/// Account = 192350001
		/// </summary>
		Account = 192350001,
		/// <summary>
		/// Contact = 192350002
		/// </summary>
		Contact = 192350002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_fact : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AccountCustomer = "msdyn_accountcustomer";
			public const string msdyn_AccountVendor = "msdyn_accountvendor";
			public const string msdyn_ActChargeableBilledSalesAmount = "msdyn_actchargeablebilledsalesamount";
			public const string msdyn_actchargeablebilledsalesamount_Base = "msdyn_actchargeablebilledsalesamount_base";
			public const string msdyn_ActChargeableBilledSalesQuantity = "msdyn_actchargeablebilledsalesquantity";
			public const string msdyn_ActChargeableCostAmount = "msdyn_actchargeablecostamount";
			public const string msdyn_actchargeablecostamount_Base = "msdyn_actchargeablecostamount_base";
			public const string msdyn_ActChargeableCostQuantity = "msdyn_actchargeablecostquantity";
			public const string msdyn_ActChargeableUnbilledSalesAmount = "msdyn_actchargeableunbilledsalesamount";
			public const string msdyn_actchargeableunbilledsalesamount_Base = "msdyn_actchargeableunbilledsalesamount_base";
			public const string msdyn_ActChargeableUnbilledSalesQuantity = "msdyn_actchargeableunbilledsalesquantity";
			public const string msdyn_ActNoChargeBilledSalesAmount = "msdyn_actnochargebilledsalesamount";
			public const string msdyn_actnochargebilledsalesamount_Base = "msdyn_actnochargebilledsalesamount_base";
			public const string msdyn_ActNoChargeBilledSalesQuantity = "msdyn_actnochargebilledsalesquantity";
			public const string msdyn_ActNoChargeCostAmount = "msdyn_actnochargecostamount";
			public const string msdyn_actnochargecostamount_Base = "msdyn_actnochargecostamount_base";
			public const string msdyn_ActNoChargeCostQuantity = "msdyn_actnochargecostquantity";
			public const string msdyn_ActNoChargeUnbilledSalesAmount = "msdyn_actnochargeunbilledsalesamount";
			public const string msdyn_actnochargeunbilledsalesamount_Base = "msdyn_actnochargeunbilledsalesamount_base";
			public const string msdyn_ActNoChargeUnbilledSalesQuantity = "msdyn_actnochargeunbilledsalesquantity";
			public const string msdyn_ActNonChargeableCostAmount = "msdyn_actnonchargeablecostamount";
			public const string msdyn_actnonchargeablecostamount_Base = "msdyn_actnonchargeablecostamount_base";
			public const string msdyn_ActNonChargeableCostQuantity = "msdyn_actnonchargeablecostquantity";
			public const string msdyn_ActNonChargeableUnbilledSalesAmount = "msdyn_actnonchargeableunbilledsalesamount";
			public const string msdyn_actnonchargeableunbilledsalesamount_Base = "msdyn_actnonchargeableunbilledsalesamount_base";
			public const string msdyn_ActNonChargeableUnbilledSalesQuantity = "msdyn_actnonchargeableunbilledsalesquantity";
			public const string msdyn_bookableresource = "msdyn_bookableresource";
			public const string msdyn_ContactCustomer = "msdyn_contactcustomer";
			public const string msdyn_ContactVendor = "msdyn_contactvendor";
			public const string msdyn_CustomerType = "msdyn_customertype";
			public const string msdyn_DocumentDate = "msdyn_documentdate";
			public const string msdyn_earnedrevenue = "msdyn_earnedrevenue";
			public const string msdyn_earnedrevenue_Base = "msdyn_earnedrevenue_base";
			public const string msdyn_EndDate = "msdyn_enddate";
			public const string msdyn_EstChargeableBilledSalesAmount = "msdyn_estchargeablebilledsalesamount";
			public const string msdyn_estchargeablebilledsalesamount_Base = "msdyn_estchargeablebilledsalesamount_base";
			public const string msdyn_EstChargeableBilledSalesQuantity = "msdyn_estchargeablebilledsalesquantity";
			public const string msdyn_EstChargeableCostAmount = "msdyn_estchargeablecostamount";
			public const string msdyn_estchargeablecostamount_Base = "msdyn_estchargeablecostamount_base";
			public const string msdyn_EstChargeableCostQuantity = "msdyn_estchargeablecostquantity";
			public const string msdyn_EstChargeableUnbilledSalesAmount = "msdyn_estchargeableunbilledsalesamount";
			public const string msdyn_estchargeableunbilledsalesamount_Base = "msdyn_estchargeableunbilledsalesamount_base";
			public const string msdyn_EstChargeableUnbilledSalesQuantity = "msdyn_estchargeableunbilledsalesquantity";
			public const string msdyn_Estimate = "msdyn_estimate";
			public const string msdyn_estimatelineid = "msdyn_estimatelineid";
			public const string msdyn_EstNoChargeBilledSalesAmount = "msdyn_estnochargebilledsalesamount";
			public const string msdyn_estnochargebilledsalesamount_Base = "msdyn_estnochargebilledsalesamount_base";
			public const string msdyn_EstNoChargeBilledSalesQuantity = "msdyn_estnochargebilledsalesquantity";
			public const string msdyn_EstNoChargeCostAmount = "msdyn_estnochargecostamount";
			public const string msdyn_estnochargecostamount_Base = "msdyn_estnochargecostamount_base";
			public const string msdyn_EstNoChargeCostQuantity = "msdyn_estnochargecostquantity";
			public const string msdyn_EstNoChargeUnbilledSalesAmount = "msdyn_estnochargeunbilledsalesamount";
			public const string msdyn_estnochargeunbilledsalesamount_Base = "msdyn_estnochargeunbilledsalesamount_base";
			public const string msdyn_EstNoChargeUnbilledSalesQuantity = "msdyn_estnochargeunbilledsalesquantity";
			public const string msdyn_EstNonChargeableCostAmount = "msdyn_estnonchargeablecostamount";
			public const string msdyn_estnonchargeablecostamount_Base = "msdyn_estnonchargeablecostamount_base";
			public const string msdyn_EstNonChargeableCostQuantity = "msdyn_estnonchargeablecostquantity";
			public const string msdyn_EstNonChargeableUnbilledSalesAmount = "msdyn_estnonchargeableunbilledsalesamount";
			public const string msdyn_estnonchargeableunbilledsalesamount_Base = "msdyn_estnonchargeableunbilledsalesamount_base";
			public const string msdyn_EstNonChargeableUnbilledSalesQuantity = "msdyn_estnonchargeableunbilledsalesquantity";
			public const string msdyn_factId = "msdyn_factid";
			public const string msdyn_FactType = "msdyn_facttype";
			public const string msdyn_grossmargin = "msdyn_grossmargin";
			public const string msdyn_grossmargin_Base = "msdyn_grossmargin_base";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_Product = "msdyn_product";
			public const string msdyn_Project = "msdyn_project";
			public const string msdyn_ResourceCategory = "msdyn_resourcecategory";
			public const string msdyn_SalesContract = "msdyn_salescontract";
			public const string msdyn_SalesContractLine = "msdyn_salescontractline";
			public const string msdyn_SalesContractLineId = "msdyn_salescontractlineid";
			public const string msdyn_StartDate = "msdyn_startdate";
			public const string msdyn_Task = "msdyn_task";
			public const string msdyn_totalcost = "msdyn_totalcost";
			public const string msdyn_totalcost_Base = "msdyn_totalcost_base";
			public const string msdyn_totalhours = "msdyn_totalhours";
			public const string msdyn_TransactionCategory = "msdyn_transactioncategory";
			public const string msdyn_TransactionClassification = "msdyn_transactionclassification";
			public const string msdyn_VendorType = "msdyn_vendortype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_fact";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10506;

		[DebuggerNonUserCode()]
		public msdyn_fact()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fact(Guid msdyn_factId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_factId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fact(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fact(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fact(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fact(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Lookup to account</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AccountCustomer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AccountCustomer); }
			set { Entity.Attributes[Fields.msdyn_AccountCustomer] = value; }
		}

		/// <summary>
		/// <para>Lookup to account</para>
		/// <para>Vendor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AccountVendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AccountVendor); }
			set { Entity.Attributes[Fields.msdyn_AccountVendor] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Chargeable Billed Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActChargeableBilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActChargeableBilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActChargeableBilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActChargeableBilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Chargeable Billed Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Chargeable Billed Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actchargeablebilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actchargeablebilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual Chargeable Billed Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActChargeableBilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ActChargeableBilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_ActChargeableBilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Chargeable Cost Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActChargeableCostAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActChargeableCostAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActChargeableCostAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActChargeableCostAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Chargeable Cost Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Chargeable Cost Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actchargeablecostamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actchargeablecostamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual Chargeable Cost Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActChargeableCostQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ActChargeableCostQuantity); }
			set { Entity.Attributes[Fields.msdyn_ActChargeableCostQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Chargeable Unbilled Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActChargeableUnbilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActChargeableUnbilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActChargeableUnbilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActChargeableUnbilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Chargeable Unbilled Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Chargeable Unbilled Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actchargeableunbilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actchargeableunbilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual Chargeable Unbilled Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActChargeableUnbilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ActChargeableUnbilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_ActChargeableUnbilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual No Charge Billed Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNoChargeBilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActNoChargeBilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActNoChargeBilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActNoChargeBilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual No Charge Billed Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual No Charge Billed Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actnochargebilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actnochargebilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual No Charge Billed Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNoChargeBilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ActNoChargeBilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_ActNoChargeBilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual No Charge Cost Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNoChargeCostAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActNoChargeCostAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActNoChargeCostAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActNoChargeCostAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual No Charge Cost Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual No Charge Cost Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actnochargecostamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actnochargecostamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual No Charge Cost Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNoChargeCostQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ActNoChargeCostQuantity); }
			set { Entity.Attributes[Fields.msdyn_ActNoChargeCostQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual No Charge Unbilled Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNoChargeUnbilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActNoChargeUnbilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActNoChargeUnbilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActNoChargeUnbilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual No Charge Unbilled Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual No Charge Unbilled Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actnochargeunbilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actnochargeunbilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual No Charge Unbilled Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNoChargeUnbilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ActNoChargeUnbilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_ActNoChargeUnbilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Non Chargeable Cost Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNonChargeableCostAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActNonChargeableCostAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActNonChargeableCostAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActNonChargeableCostAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Non Chargeable Cost Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Non Chargeable Cost Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actnonchargeablecostamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actnonchargeablecostamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual Non Chargeable Cost Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNonChargeableCostQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ActNonChargeableCostQuantity); }
			set { Entity.Attributes[Fields.msdyn_ActNonChargeableCostQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Non Chargeable Unbilled Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNonChargeableUnbilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActNonChargeableUnbilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActNonChargeableUnbilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActNonChargeableUnbilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Non Chargeable Unbilled Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Non Chargeable Unbilled Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actnonchargeableunbilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actnonchargeableunbilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual Non Chargeable Unbilled Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActNonChargeableUnbilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ActNonChargeableUnbilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_ActNonChargeableUnbilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Lookup to bookableresource</para>
		/// <para>Bookable Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookableresource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookableresource); }
			set { Entity.Attributes[Fields.msdyn_bookableresource] = value; }
		}

		/// <summary>
		/// <para>Lookup to contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContactCustomer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContactCustomer); }
			set { Entity.Attributes[Fields.msdyn_ContactCustomer] = value; }
		}

		/// <summary>
		/// <para>Lookup to contact</para>
		/// <para>Vendor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContactVendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContactVendor); }
			set { Entity.Attributes[Fields.msdyn_ContactVendor] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Customer Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_factOptionSets.msdyn_CustomerType? msdyn_CustomerType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CustomerType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_factOptionSets.msdyn_CustomerType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CustomerType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CustomerType] = null;
			}
		}

		/// <summary>
		/// <para>Enter the transaction date of the business event.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Document Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DocumentDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DocumentDate); }
			set { Entity.Attributes[Fields.msdyn_DocumentDate] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Earned Revenue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_earnedrevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_earnedrevenue);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Earned Revenue in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Earned Revenue (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_earnedrevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_earnedrevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the end date for this transaction.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_EndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_EndDate); }
			set { Entity.Attributes[Fields.msdyn_EndDate] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Chargeable Billed Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstChargeableBilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstChargeableBilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstChargeableBilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstChargeableBilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Chargeable Billed Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Chargeable Billed Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estchargeablebilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estchargeablebilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated Chargeable Billed Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstChargeableBilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstChargeableBilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_EstChargeableBilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Chargeable Cost Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstChargeableCostAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstChargeableCostAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstChargeableCostAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstChargeableCostAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Chargeable Cost Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Chargeable Cost Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estchargeablecostamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estchargeablecostamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated Chargeable Cost Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstChargeableCostQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstChargeableCostQuantity); }
			set { Entity.Attributes[Fields.msdyn_EstChargeableCostQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Chargeable Unbilled Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstChargeableUnbilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstChargeableUnbilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstChargeableUnbilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstChargeableUnbilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Chargeable Unbilled Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Chargeable Unbilled Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estchargeableunbilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estchargeableunbilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated Chargeable Unbilled Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstChargeableUnbilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstChargeableUnbilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_EstChargeableUnbilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_estimate</para>
		/// <para>Estimate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Estimate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Estimate); }
			set { Entity.Attributes[Fields.msdyn_Estimate] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_estimateline</para>
		/// <para>Estimate Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_estimatelineid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_estimatelineid); }
			set { Entity.Attributes[Fields.msdyn_estimatelineid] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated No Charge Billed Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNoChargeBilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstNoChargeBilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstNoChargeBilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstNoChargeBilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated No Charge Billed Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated No Charge Billed Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estnochargebilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estnochargebilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated No Charge Billed Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNoChargeBilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstNoChargeBilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_EstNoChargeBilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated No Charge Cost Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNoChargeCostAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstNoChargeCostAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstNoChargeCostAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstNoChargeCostAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated No Charge Cost Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated No Charge Cost Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estnochargecostamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estnochargecostamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated No Charge Cost Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNoChargeCostQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstNoChargeCostQuantity); }
			set { Entity.Attributes[Fields.msdyn_EstNoChargeCostQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated No Charge Unbilled Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNoChargeUnbilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstNoChargeUnbilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstNoChargeUnbilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstNoChargeUnbilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated No Charge Unbilled Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated No Charge Unbilled Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estnochargeunbilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estnochargeunbilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated No Charge Unbilled Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNoChargeUnbilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstNoChargeUnbilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_EstNoChargeUnbilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Non Chargeable Cost Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNonChargeableCostAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstNonChargeableCostAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstNonChargeableCostAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstNonChargeableCostAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Non Chargeable Cost Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Non Chargeable Cost Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estnonchargeablecostamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estnonchargeablecostamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated Non Chargeable Cost Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNonChargeableCostQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstNonChargeableCostQuantity); }
			set { Entity.Attributes[Fields.msdyn_EstNonChargeableCostQuantity] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Non Chargeable Unbilled Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNonChargeableUnbilledSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstNonChargeableUnbilledSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstNonChargeableUnbilledSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstNonChargeableUnbilledSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Non Chargeable Unbilled Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Non Chargeable Unbilled Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estnonchargeableunbilledsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estnonchargeableunbilledsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated Non Chargeable Unbilled Sales Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstNonChargeableUnbilledSalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstNonChargeableUnbilledSalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_EstNonChargeableUnbilledSalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Fact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_factId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_factId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Fact Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_factOptionSets.msdyn_FactType? msdyn_FactType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_FactType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_factOptionSets.msdyn_FactType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_FactType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_FactType] = null;
			}
		}

		/// <summary>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Gross Margin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_grossmargin
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_grossmargin);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Gross Margin in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Gross Margin (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_grossmargin_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_grossmargin_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Lookup to product</para>
		/// <para>Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Product
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Product); }
			set { Entity.Attributes[Fields.msdyn_Product] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Project); }
			set { Entity.Attributes[Fields.msdyn_Project] = value; }
		}

		/// <summary>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceCategory); }
			set { Entity.Attributes[Fields.msdyn_ResourceCategory] = value; }
		}

		/// <summary>
		/// <para>Lookup to salesorder</para>
		/// <para>Project Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SalesContract
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SalesContract); }
			set { Entity.Attributes[Fields.msdyn_SalesContract] = value; }
		}

		/// <summary>
		/// <para>(Deprecated)</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>(Deprecated) Project Contract Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SalesContractLine
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SalesContractLine); }
			set { Entity.Attributes[Fields.msdyn_SalesContractLine] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Project Contract Line associated with Fact.</para>
		/// <para>Lookup to salesorderdetail</para>
		/// <para>Project Contract Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SalesContractLineId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SalesContractLineId); }
			set { Entity.Attributes[Fields.msdyn_SalesContractLineId] = value; }
		}

		/// <summary>
		/// <para>Enter the start date.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_StartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_StartDate); }
			set { Entity.Attributes[Fields.msdyn_StartDate] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_projecttask</para>
		/// <para>Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Task
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Task); }
			set { Entity.Attributes[Fields.msdyn_Task] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalcost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalcost);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Total Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>ReadOnly - Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Total Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalhours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_totalhours); }
		}

		/// <summary>
		/// <para>Lookup to msdyn_transactioncategory</para>
		/// <para>Transaction Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TransactionCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TransactionCategory); }
			set { Entity.Attributes[Fields.msdyn_TransactionCategory] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Transaction Classification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_factOptionSets.msdyn_TransactionClassification? msdyn_TransactionClassification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionClassification);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_factOptionSets.msdyn_TransactionClassification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionClassification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionClassification] = null;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Vendor Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_factOptionSets.msdyn_VendorType? msdyn_VendorType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_VendorType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_factOptionSets.msdyn_VendorType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_VendorType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_VendorType] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Fact</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_factOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_factOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Fact</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_factOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_factOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
