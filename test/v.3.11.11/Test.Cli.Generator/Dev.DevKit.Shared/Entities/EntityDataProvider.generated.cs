//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.EntityDataProviderOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class EntityDataProvider : EntityBase
	{
		public struct Fields
		{
			public const string ComponentState = "componentstate";
			public const string CreateMultiplePlugin = "createmultipleplugin";
			public const string CreatePlugin = "createplugin";
			public const string DataSourceLogicalName = "datasourcelogicalname";
			public const string DeleteMultiplePlugin = "deletemultipleplugin";
			public const string DeletePlugin = "deleteplugin";
			public const string Description = "description";
			public const string EntityDataProviderId = "entitydataproviderid";
			public const string EntityDataProviderIdUnique = "entitydataprovideridunique";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string RetrieveEntityChangesPlugin = "retrieveentitychangesplugin";
			public const string RetrieveMultiplePlugin = "retrievemultipleplugin";
			public const string RetrievePlugin = "retrieveplugin";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string UpdateMultiplePlugin = "updatemultipleplugin";
			public const string UpdatePlugin = "updateplugin";
			public const string UpsertMultiplePlugin = "upsertmultipleplugin";
			public const string UpsertPlugin = "upsertplugin";
		}

		public const string EntityLogicalName = "entitydataprovider";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 78;

		[DebuggerNonUserCode()]
		public EntityDataProvider()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataProvider(Guid EntityDataProviderId)
		{
			Entity = new Entity(EntityLogicalName, EntityDataProviderId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataProvider(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataProvider(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataProvider(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataProvider(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EntityDataProviderOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EntityDataProviderOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Contains the createmultipleplugin id that should be run when CreateMultiple is invoked</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Contains the createmultipleplugin id that should be run when CreateMultiple is invoked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CreateMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CreateMultiplePlugin); }
			set { Entity.Attributes[Fields.CreateMultiplePlugin] = value; }
		}

		/// <summary>
		/// <para>Create Plugin</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Create Plugin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CreatePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CreatePlugin); }
			set { Entity.Attributes[Fields.CreatePlugin] = value; }
		}

		/// <summary>
		/// <para>When creating a Data Provider, the end user must select the name of the Data Source entity that will be created for the provider.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Data Source Entity Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DataSourceLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DataSourceLogicalName); }
			set { Entity.Attributes[Fields.DataSourceLogicalName] = value; }
		}

		/// <summary>
		/// <para>Contains the deletemultipleplugin id that should be run when DeleteMultiple is invoked</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Contains the deletemultipleplugin id that should be run when DeleteMultiple is invoked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DeleteMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DeleteMultiplePlugin); }
			set { Entity.Attributes[Fields.DeleteMultiplePlugin] = value; }
		}

		/// <summary>
		/// <para>Delete Plugin</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Delete Plugin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DeletePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DeletePlugin); }
			set { Entity.Attributes[Fields.DeletePlugin] = value; }
		}

		/// <summary>
		/// <para>What is this Data Provider used for and data store technologies does it target?</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the data provider.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Data Provider</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EntityDataProviderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EntityDataProviderId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityDataProviderIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityDataProviderIdUnique); }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>The name of this Data Provider. This is the name that appears in the dropdown when creating a new entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Contains the retrieveentitychangesplugin id that should be run when RetrieveEntityChanges is invoked</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Contains the retrieveentitychangesplugin id that should be run when RetrieveEntityChanges is invoked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RetrieveEntityChangesPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RetrieveEntityChangesPlugin); }
			set { Entity.Attributes[Fields.RetrieveEntityChangesPlugin] = value; }
		}

		/// <summary>
		/// <para>MultipleRetrieve Plugin</para>
		/// <para>Uniqueidentifier</para>
		/// <para>MultipleRetrieve Plugin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RetrieveMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RetrieveMultiplePlugin); }
			set { Entity.Attributes[Fields.RetrieveMultiplePlugin] = value; }
		}

		/// <summary>
		/// <para>Retrieve Plugin</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Retrieve Plugin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RetrievePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RetrievePlugin); }
			set { Entity.Attributes[Fields.RetrievePlugin] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Contains the updatemultipleplugin id that should be run when UpdateMultiple is invoked</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Contains the updatemultipleplugin id that should be run when UpdateMultiple is invoked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UpdateMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UpdateMultiplePlugin); }
			set { Entity.Attributes[Fields.UpdateMultiplePlugin] = value; }
		}

		/// <summary>
		/// <para>Update Plugin</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Update Plugin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UpdatePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UpdatePlugin); }
			set { Entity.Attributes[Fields.UpdatePlugin] = value; }
		}

		/// <summary>
		/// <para>Contains the upsertmultipleplugin id that should be run when UpsertMultiple is invoked</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Contains the upsertmultipleplugin id that should be run when UpsertMultiple is invoked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UpsertMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UpsertMultiplePlugin); }
			set { Entity.Attributes[Fields.UpsertMultiplePlugin] = value; }
		}

		/// <summary>
		/// <para>Contains the upsertplugin id that should be run when Upsert is invoked</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Contains the upsertplugin id that should be run when Upsert is invoked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UpsertPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UpsertPlugin); }
			set { Entity.Attributes[Fields.UpsertPlugin] = value; }
		}
	}
}
