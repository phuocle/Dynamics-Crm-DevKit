//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SalesLiteratureItemOptionSets
{
	public enum FileTypeCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SalesLiteratureItem : EntityBase
	{
		public struct Fields
		{
			public const string Abstract = "abstract";
			public const string AttachedDocumentUrl = "attacheddocumenturl";
			public const string AuthorName = "authorname";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DocumentBody = "documentbody";
			public const string FileName = "filename";
			public const string FileSize = "filesize";
			public const string FileType = "filetype";
			public const string FileTypeCode = "filetypecode";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsCustomerViewable = "iscustomerviewable";
			public const string KeyWords = "keywords";
			public const string MimeType = "mimetype";
			public const string Mode = "mode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string SalesLiteratureId = "salesliteratureid";
			public const string SalesLiteratureItemId = "salesliteratureitemid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "salesliteratureitem";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1070;

		[DebuggerNonUserCode()]
		public SalesLiteratureItem()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesLiteratureItem(Guid SalesLiteratureItemId)
		{
			Entity = new Entity(EntityLogicalName, SalesLiteratureItemId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesLiteratureItem(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesLiteratureItem(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesLiteratureItem(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesLiteratureItem(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Abstract of the document.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Abstract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Abstract
		{
			get { return Entity.GetAttributeValue<string>(Fields.Abstract); }
			set { Entity.Attributes[Fields.Abstract] = value; }
		}

		/// <summary>
		/// <para>URL of the Website on which the document is located.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Attached Document URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttachedDocumentUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttachedDocumentUrl); }
			set { Entity.Attributes[Fields.AttachedDocumentUrl] = value; }
		}

		/// <summary>
		/// <para>Author name for the document.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Author Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AuthorName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AuthorName); }
			set { Entity.Attributes[Fields.AuthorName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the document.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the document was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the salesliteratureitem.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the encoded contents of the sales literature document attachment.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentBody
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentBody); }
			set { Entity.Attributes[Fields.DocumentBody] = value; }
		}

		/// <summary>
		/// <para>File name of the document.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}

		/// <summary>
		/// <para>File size of the document.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>File Size (Bytes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
			set { Entity.Attributes[Fields.FileSize] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileType); }
		}

		/// <summary>
		/// <para>Select the file type of the document.</para>
		/// <para>Picklist</para>
		/// <para>File Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesLiteratureItemOptionSets.FileTypeCode? FileTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FileTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesLiteratureItemOptionSets.FileTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FileTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FileTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Tells whether the document can be shared with customers or is for internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Customer Viewable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCustomerViewable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCustomerViewable); }
			set { Entity.Attributes[Fields.IsCustomerViewable] = value; }
		}

		/// <summary>
		/// <para>Keywords to use for searches in documents.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Key Words</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KeyWords
		{
			get { return Entity.GetAttributeValue<string>(Fields.KeyWords); }
			set { Entity.Attributes[Fields.KeyWords] = value; }
		}

		/// <summary>
		/// <para>Shows the file type of the sales literature document attachment, such as text or document.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Mime Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}

		/// <summary>
		/// <para>Defines the mode of the sales literature document attachment.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Mode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Mode); }
			set { Entity.Attributes[Fields.Mode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the document.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the document was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the salesliteratureitem.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the document.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the sales literature that is associated with the individual item.</para>
		/// <para>Lookup to salesliterature</para>
		/// <para>Sales Literature</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SalesLiteratureId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SalesLiteratureId); }
			set { Entity.Attributes[Fields.SalesLiteratureId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the document.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Sales Literature Item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SalesLiteratureItemId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SalesLiteratureItemId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Type the title or name that describes the document.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
