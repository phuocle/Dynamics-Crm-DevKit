//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets
{
	public enum msdyn_AllowedPresences
	{
		/// <summary>
		/// Available = 192360000
		/// </summary>
		Available = 192360000,
		/// <summary>
		/// Away = 192360003
		/// </summary>
		Away = 192360003,
		/// <summary>
		/// Busy = 192360001
		/// </summary>
		Busy = 192360001,
		/// <summary>
		/// Busy - DND = 192360002
		/// </summary>
		Busy_DND = 192360002,
		/// <summary>
		/// Offline = 192360004
		/// </summary>
		Offline = 192360004
	}

	public enum msdyn_capacityformat
	{
		/// <summary>
		/// Profile based = 192360000
		/// </summary>
		Profile_based = 192360000,
		/// <summary>
		/// Unit based = 192350000
		/// </summary>
		Unit_based = 192350000
	}

	public enum msdyn_conversationmode
	{
		/// <summary>
		/// Live Chat = 192350000
		/// </summary>
		Live_Chat = 192350000,
		/// <summary>
		/// Persistent Chat = 192350001
		/// </summary>
		Persistent_Chat = 192350001
	}

	public enum msdyn_direction
	{
		/// <summary>
		/// Inbound = 0
		/// </summary>
		Inbound = 0,
		/// <summary>
		/// Outbound = 1
		/// </summary>
		Outbound = 1
	}

	public enum msdyn_matchinglogic
	{
		/// <summary>
		/// Closest Match = 192350001
		/// </summary>
		Closest_Match = 192350001,
		/// <summary>
		/// Exact Match = 192350000
		/// </summary>
		Exact_Match = 192350000
	}

	public enum msdyn_mode
	{
		/// <summary>
		/// Legacy = 717210000
		/// </summary>
		Legacy = 717210000,
		/// <summary>
		/// Simplified = 717210001
		/// </summary>
		Simplified = 717210001
	}

	public enum msdyn_Notification
	{
		/// <summary>
		/// Directly open session = 100000000
		/// </summary>
		Directly_open_session = 100000000,
		/// <summary>
		/// Screen pop with decline = 100000002
		/// </summary>
		Screen_pop_with_decline = 100000002,
		/// <summary>
		/// Screen pop with timeout = 100000001
		/// </summary>
		Screen_pop_with_timeout = 100000001
	}

	public enum msdyn_Screenpoptimeout_optionSet
	{
		/// <summary>
		/// 120 = 120
		/// </summary>
		_120 = 120,
		/// <summary>
		/// 150 = 150
		/// </summary>
		_150 = 150,
		/// <summary>
		/// 180 = 180
		/// </summary>
		_180 = 180,
		/// <summary>
		/// 210 = 210
		/// </summary>
		_210 = 210,
		/// <summary>
		/// 240 = 240
		/// </summary>
		_240 = 240,
		/// <summary>
		/// 270 = 270
		/// </summary>
		_270 = 270,
		/// <summary>
		/// 30 = 30
		/// </summary>
		_30 = 30,
		/// <summary>
		/// 300 = 300
		/// </summary>
		_300 = 300,
		/// <summary>
		/// 60 = 60
		/// </summary>
		_60 = 60,
		/// <summary>
		/// 90 = 90
		/// </summary>
		_90 = 90
	}

	public enum msdyn_smsprovider
	{
		/// <summary>
		/// TeleSign = 192350000
		/// </summary>
		TeleSign = 192350000,
		/// <summary>
		/// Twilio = 192350001
		/// </summary>
		Twilio = 192350001
	}

	public enum msdyn_streamsource
	{
		/// <summary>
		/// Apple Messages for Business = 192450000
		/// </summary>
		Apple_Messages_for_Business = 192450000,
		/// <summary>
		/// Co-browse = 192390000
		/// </summary>
		Co_browse = 192390000,
		/// <summary>
		/// Custom = 192350002
		/// </summary>
		Custom = 192350002,
		/// <summary>
		/// Entity Records = 192350000
		/// </summary>
		Entity_Records = 192350000,
		/// <summary>
		/// Facebook = 192330000
		/// </summary>
		Facebook = 192330000,
		/// <summary>
		/// LINE = 192310000
		/// </summary>
		LINE = 192310000,
		/// <summary>
		/// Live chat = 192360000
		/// </summary>
		Live_chat = 192360000,
		/// <summary>
		/// Microsoft Teams = 19241000
		/// </summary>
		Microsoft_Teams = 19241000,
		/// <summary>
		/// Screen sharing = 192400000
		/// </summary>
		Screen_sharing = 192400000,
		/// <summary>
		/// SMS = 192340000
		/// </summary>
		SMS = 192340000,
		/// <summary>
		/// Twitter = 192350001
		/// </summary>
		Twitter = 192350001,
		/// <summary>
		/// Video = 192380000
		/// </summary>
		Video = 192380000,
		/// <summary>
		/// Voice = 192370000
		/// </summary>
		Voice = 192370000,
		/// <summary>
		/// WeChat = 192320000
		/// </summary>
		WeChat = 192320000,
		/// <summary>
		/// WhatsApp = 192300000
		/// </summary>
		WhatsApp = 192300000
	}

	public enum msdyn_workdistributionmode
	{
		/// <summary>
		/// Pick = 192350001
		/// </summary>
		Pick = 192350001,
		/// <summary>
		/// Push = 192350000
		/// </summary>
		Push = 192350000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_liveworkstream : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AllowedPresences = "msdyn_allowedpresences";
			public const string msdyn_APIKey = "msdyn_apikey";
			public const string msdyn_apikeyversionnumber = "msdyn_apikeyversionnumber";
			public const string msdyn_AssignWorkItemAfterDecline = "msdyn_assignworkitemafterdecline";
			public const string msdyn_AutoCloseAfterInactivity = "msdyn_autocloseafterinactivity";
			public const string msdyn_blockcapacityforwrapup = "msdyn_blockcapacityforwrapup";
			public const string msdyn_bot_queue = "msdyn_bot_queue";
			public const string msdyn_bot_rule = "msdyn_bot_rule";
			public const string msdyn_bot_user = "msdyn_bot_user";
			public const string msdyn_capacityformat = "msdyn_capacityformat";
			public const string msdyn_CapacityRequired = "msdyn_capacityrequired";
			public const string msdyn_ConnectorsURL = "msdyn_connectorsurl";
			public const string msdyn_conversationmode = "msdyn_conversationmode";
			public const string msdyn_CustomerID = "msdyn_customerid";
			public const string msdyn_defaultqueue = "msdyn_defaultqueue";
			public const string msdyn_direction = "msdyn_direction";
			public const string msdyn_enableagentaffinity = "msdyn_enableagentaffinity";
			public const string msdyn_enableautomatedmessages = "msdyn_enableautomatedmessages";
			public const string msdyn_enableselectingfrompushbasedworkstreams = "msdyn_enableselectingfrompushbasedworkstreams";
			public const string msdyn_EntityRoutingConfigurationId = "msdyn_entityroutingconfigurationid";
			public const string msdyn_FallBackLanguage = "msdyn_fallbacklanguage";
			public const string msdyn_FollowUpAfterWaiting = "msdyn_followupafterwaiting";
			public const string msdyn_handlingtimethreshold = "msdyn_handlingtimethreshold";
			public const string msdyn_isdefault = "msdyn_isdefault";
			public const string msdyn_LastValidationOn = "msdyn_lastvalidationon";
			public const string msdyn_LastValidationStatus = "msdyn_lastvalidationstatus";
			public const string msdyn_liveworkstreamId = "msdyn_liveworkstreamid";
			public const string msdyn_masterentityroutingconfigurationid = "msdyn_masterentityroutingconfigurationid";
			public const string msdyn_matchinglogic = "msdyn_matchinglogic";
			public const string msdyn_MaxConcurrentConnection = "msdyn_maxconcurrentconnection";
			public const string msdyn_mode = "msdyn_mode";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_Notification = "msdyn_notification";
			public const string msdyn_notificationscenarioplaceholder = "msdyn_notificationscenarioplaceholder";
			public const string msdyn_notificationtemplate_consult = "msdyn_notificationtemplate_consult";
			public const string msdyn_notificationtemplate_incoming_auth = "msdyn_notificationtemplate_incoming_auth";
			public const string msdyn_notificationtemplate_incoming_unauth = "msdyn_notificationtemplate_incoming_unauth";
			public const string msdyn_notificationtemplate_supervisorassign = "msdyn_notificationtemplate_supervisorassign";
			public const string msdyn_notificationtemplate_transfer = "msdyn_notificationtemplate_transfer";
			public const string msdyn_outboundqueueid = "msdyn_outboundqueueid";
			public const string msdyn_recordidentificationrule = "msdyn_recordidentificationrule";
			public const string msdyn_RecordIdentificationValidationRule = "msdyn_recordidentificationvalidationrule";
			public const string msdyn_routingcontractid = "msdyn_routingcontractid";
			public const string msdyn_Screenpoptimeout = "msdyn_screenpoptimeout";
			public const string msdyn_Screenpoptimeout_optionSet = "msdyn_screenpoptimeout_optionSet";
			public const string msdyn_sessionscenarioplaceholder = "msdyn_sessionscenarioplaceholder";
			public const string msdyn_sessiontemplate_default = "msdyn_sessiontemplate_default";
			public const string msdyn_skillattachmentrulescount = "msdyn_skillattachmentrulescount";
			public const string msdyn_skillattachmentrulescount_Date = "msdyn_skillattachmentrulescount_date";
			public const string msdyn_skillattachmentrulescount_State = "msdyn_skillattachmentrulescount_state";
			public const string msdyn_smsprovider = "msdyn_smsprovider";
			public const string msdyn_streamsource = "msdyn_streamsource";
			public const string msdyn_TelesignInboundURL = "msdyn_telesigninboundurl";
			public const string msdyn_TwilioInboundURL = "msdyn_twilioinboundurl";
			public const string msdyn_waitingtimethreshold = "msdyn_waitingtimethreshold";
			public const string msdyn_workdistributionmode = "msdyn_workdistributionmode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_liveworkstream";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10735;

		[DebuggerNonUserCode()]
		public msdyn_liveworkstream()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(Guid msdyn_liveworkstreamId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_liveworkstreamId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Allowed base presences for the work stream</para>
		/// <para>Required - MultiSelectPicklist</para>
		/// <para>Allowed Presences</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_AllowedPresences> msdyn_AllowedPresences
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_AllowedPresences>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_AllowedPresences);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_AllowedPresences)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_AllowedPresences] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_AllowedPresences] = data;
				}
			}
		}

		/// <summary>
		/// <para>The API Key equivalent to password of account set up with TeleSign</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>API Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_APIKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_APIKey); }
			set { Entity.Attributes[Fields.msdyn_APIKey] = value; }
		}

		/// <summary>
		/// <para>Version number of the API key</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>API Key Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_apikeyversionnumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_apikeyversionnumber); }
			set { Entity.Attributes[Fields.msdyn_apikeyversionnumber] = value; }
		}

		/// <summary>
		/// <para>Set the time after which a work item can be assigned to the agent again after he/she has declined the work item or the request has timed out</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Assign WorkItem After Decline or Timeout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AssignWorkItemAfterDecline
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AssignWorkItemAfterDecline); }
			set { Entity.Attributes[Fields.msdyn_AssignWorkItemAfterDecline] = value; }
		}

		/// <summary>
		/// <para>Set the time after which the work item will be closed if there is no activity on the work item.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Auto-close after inactivity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AutoCloseAfterInactivity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AutoCloseAfterInactivity); }
			set { Entity.Attributes[Fields.msdyn_AutoCloseAfterInactivity] = value; }
		}

		/// <summary>
		/// <para>Time for which the agent&apos;s capacity is blocked for wrap up state. After this amount of time the agent&apos;s capacity will be released.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 43,200</para>
		/// <para>Block capacity for wrap up state</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_blockcapacityforwrapup
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_blockcapacityforwrapup); }
			set { Entity.Attributes[Fields.msdyn_blockcapacityforwrapup] = value; }
		}

		/// <summary>
		/// <para>The queue created for the bot in the workstream.</para>
		/// <para>Lookup to queue</para>
		/// <para>Bot queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bot_queue
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bot_queue); }
			set { Entity.Attributes[Fields.msdyn_bot_queue] = value; }
		}

		/// <summary>
		/// <para>The rule added to workstream for bot routing.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Bot rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_bot_rule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_bot_rule); }
			set { Entity.Attributes[Fields.msdyn_bot_rule] = value; }
		}

		/// <summary>
		/// <para>The user of the bot.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Bot user</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bot_user
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bot_user); }
			set { Entity.Attributes[Fields.msdyn_bot_user] = value; }
		}

		/// <summary>
		/// <para>Defines how the work stream will measure capacity consumption</para>
		/// <para>Picklist</para>
		/// <para>Capacity format</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_capacityformat? msdyn_capacityformat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_capacityformat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_capacityformat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_capacityformat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_capacityformat] = null;
			}
		}

		/// <summary>
		/// <para>The units of capacity that should be available for an item of this work stream to be processed.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Capacity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_CapacityRequired
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_CapacityRequired); }
			set { Entity.Attributes[Fields.msdyn_CapacityRequired] = value; }
		}

		/// <summary>
		/// <para>Flow URL for Dynamics 365 connector</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Connectors URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ConnectorsURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ConnectorsURL); }
			set { Entity.Attributes[Fields.msdyn_ConnectorsURL] = value; }
		}

		/// <summary>
		/// <para>Conversation mode of chat channels</para>
		/// <para>Picklist</para>
		/// <para>Conversation mode of chat channels</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_conversationmode? msdyn_conversationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_conversationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_conversationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_conversationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_conversationmode] = null;
			}
		}

		/// <summary>
		/// <para>The Customer Id equivalent to username of account set up with TeleSign</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Customer ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomerID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomerID); }
			set { Entity.Attributes[Fields.msdyn_CustomerID] = value; }
		}

		/// <summary>
		/// <para>Link the default queue to the workstream.</para>
		/// <para>Lookup to queue</para>
		/// <para>Default Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_defaultqueue
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_defaultqueue); }
			set { Entity.Attributes[Fields.msdyn_defaultqueue] = value; }
		}

		/// <summary>
		/// <para>Direction to indicate if its an inbound or outbound workstream</para>
		/// <para>Required - Picklist</para>
		/// <para>Direction</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_direction? msdyn_direction
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_direction);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_direction)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_direction] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_direction] = null;
			}
		}

		/// <summary>
		/// <para>Keep same agent for entire conversation</para>
		/// <para>Boolean</para>
		/// <para>Keep same agent for entire conversation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableagentaffinity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableagentaffinity); }
			set { Entity.Attributes[Fields.msdyn_enableagentaffinity] = value; }
		}

		/// <summary>
		/// <para>Option for allowing automated messages or not</para>
		/// <para>Boolean</para>
		/// <para>Allow Automated Messages</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableautomatedmessages
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableautomatedmessages); }
			set { Entity.Attributes[Fields.msdyn_enableautomatedmessages] = value; }
		}

		/// <summary>
		/// <para>Agents can choose to work on items from push-based work streams.</para>
		/// <para>Boolean</para>
		/// <para>Enable selecting from push-based work streams</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableselectingfrompushbasedworkstreams
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableselectingfrompushbasedworkstreams); }
			set { Entity.Attributes[Fields.msdyn_enableselectingfrompushbasedworkstreams] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Workstream Entity Configuration associated with Work Stream.</para>
		/// <para>Lookup to msdyn_entityroutingconfiguration</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_EntityRoutingConfigurationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_EntityRoutingConfigurationId); }
			set { Entity.Attributes[Fields.msdyn_EntityRoutingConfigurationId] = value; }
		}

		/// <summary>
		/// <para>Fall back language to be used for Live chat</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>FallBack Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_FallBackLanguage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_FallBackLanguage); }
			set { Entity.Attributes[Fields.msdyn_FallBackLanguage] = value; }
		}

		/// <summary>
		/// <para>Set the time after which the work item should be offered to an agent if the work item has been waiting for input.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Follow-up after waiting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_FollowUpAfterWaiting
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_FollowUpAfterWaiting); }
			set { Entity.Attributes[Fields.msdyn_FollowUpAfterWaiting] = value; }
		}

		/// <summary>
		/// <para>Declare the expected handling time under which work items for this work stream should get resolved</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Handling Time Threshold</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_handlingtimethreshold
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_handlingtimethreshold); }
			set { Entity.Attributes[Fields.msdyn_handlingtimethreshold] = value; }
		}

		/// <summary>
		/// <para>Indicates whether this is the default workstream or not.</para>
		/// <para>Boolean</para>
		/// <para>Is Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isdefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isdefault); }
			set { Entity.Attributes[Fields.msdyn_isdefault] = value; }
		}

		/// <summary>
		/// <para>The time when Validation api was last run</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Last Validation On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_LastValidationOn
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_LastValidationOn); }
			set { Entity.Attributes[Fields.msdyn_LastValidationOn] = value; }
		}

		/// <summary>
		/// <para>The status of the last Validation results</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Last Validation Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LastValidationStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LastValidationStatus); }
			set { Entity.Attributes[Fields.msdyn_LastValidationStatus] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Work Stream</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_liveworkstreamId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_liveworkstreamId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for master entity routing configuration associated with work stream.</para>
		/// <para>Lookup to msdyn_masterentityroutingconfiguration</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_masterentityroutingconfigurationid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_masterentityroutingconfigurationid); }
			set { Entity.Attributes[Fields.msdyn_masterentityroutingconfigurationid] = value; }
		}

		/// <summary>
		/// <para>Matching logic used for Skill Based Routing like Exact Match or Closest match</para>
		/// <para>Picklist</para>
		/// <para>Matching Logic</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_matchinglogic? msdyn_matchinglogic
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_matchinglogic);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_matchinglogic)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_matchinglogic] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_matchinglogic] = null;
			}
		}

		/// <summary>
		/// <para>Maximum number of concurrent sessions that an agent can work for a work item of a particular stream.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Max Concurrency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_MaxConcurrentConnection
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_MaxConcurrentConnection); }
			set { Entity.Attributes[Fields.msdyn_MaxConcurrentConnection] = value; }
		}

		/// <summary>
		/// <para>Mode of experience</para>
		/// <para>Picklist</para>
		/// <para>Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_mode? msdyn_mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_mode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_mode] = null;
			}
		}

		/// <summary>
		/// <para>Name of Work stream</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Notification type</para>
		/// <para>Picklist</para>
		/// <para>Notification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Notification? msdyn_Notification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Notification);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Notification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Notification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Notification] = null;
			}
		}

		/// <summary>
		/// <para>Notification association with scenarios</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>notification scenario placeholder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationscenarioplaceholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationscenarioplaceholder); }
			set { Entity.Attributes[Fields.msdyn_notificationscenarioplaceholder] = value; }
		}

		/// <summary>
		/// <para>Consult  notification template scenario</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Consult</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_consult
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_consult); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_consult] = value; }
		}

		/// <summary>
		/// <para>Incoming authenticated notification template scenario</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Incoming authenticated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_incoming_auth
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_incoming_auth); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_incoming_auth] = value; }
		}

		/// <summary>
		/// <para>Incoming unauthenticated notification template scenario</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Incoming unauthenticated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_incoming_unauth
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_incoming_unauth); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_incoming_unauth] = value; }
		}

		/// <summary>
		/// <para>supervisorAssign notification template scenario</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>SupervisorAssign</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_supervisorassign
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_supervisorassign); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_supervisorassign] = value; }
		}

		/// <summary>
		/// <para>Transfer notification template scenario</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Transfer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_transfer
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_transfer); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_transfer] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for outbound queue associated with workstream</para>
		/// <para>Lookup to queue</para>
		/// <para>Outbound queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_outboundqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_outboundqueueid); }
			set { Entity.Attributes[Fields.msdyn_outboundqueueid] = value; }
		}

		/// <summary>
		/// <para>Record identification rule associated to a workstream</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Record Identification Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_recordidentificationrule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_recordidentificationrule); }
			set { Entity.Attributes[Fields.msdyn_recordidentificationrule] = value; }
		}

		/// <summary>
		/// <para>Record Identification Validation Rule</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Record Identification Validation Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RecordIdentificationValidationRule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RecordIdentificationValidationRule); }
			set { Entity.Attributes[Fields.msdyn_RecordIdentificationValidationRule] = value; }
		}

		/// <summary>
		/// <para>Link contracts with live work streams.</para>
		/// <para>Lookup to msdyn_decisioncontract</para>
		/// <para>Contract Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_routingcontractid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_routingcontractid); }
			set { Entity.Attributes[Fields.msdyn_routingcontractid] = value; }
		}

		/// <summary>
		/// <para>Time duration for which notification will be shown to agent.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Screen pop timeout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Screenpoptimeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Screenpoptimeout); }
			set { Entity.Attributes[Fields.msdyn_Screenpoptimeout] = value; }
		}

		/// <summary>
		/// <para>Time duration options for notification.</para>
		/// <para>Picklist</para>
		/// <para>Screen pop timeout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Screenpoptimeout_optionSet? msdyn_Screenpoptimeout_optionSet
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Screenpoptimeout_optionSet);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Screenpoptimeout_optionSet)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Screenpoptimeout_optionSet] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Screenpoptimeout_optionSet] = null;
			}
		}

		/// <summary>
		/// <para>Session association with scenarios</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>session scenario placeholder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sessionscenarioplaceholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sessionscenarioplaceholder); }
			set { Entity.Attributes[Fields.msdyn_sessionscenarioplaceholder] = value; }
		}

		/// <summary>
		/// <para>Default session template scenario</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sessiontemplate_default
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sessiontemplate_default); }
			set { Entity.Attributes[Fields.msdyn_sessiontemplate_default] = value; }
		}

		/// <summary>
		/// <para>Skill Attachment Rules Count</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Skill Attachment Rules Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_skillattachmentrulescount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_skillattachmentrulescount); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field Skill Attachment Rules Count.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Skill Attachment Rules Count (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_skillattachmentrulescount_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_skillattachmentrulescount_Date); }
		}

		/// <summary>
		/// <para>State of rollup field Skill Attachment Rules Count.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Skill Attachment Rules Count (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_skillattachmentrulescount_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_skillattachmentrulescount_State); }
		}

		/// <summary>
		/// <para>SMS Provider</para>
		/// <para>Picklist</para>
		/// <para>SMS Provider</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_smsprovider? msdyn_smsprovider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_smsprovider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_smsprovider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_smsprovider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_smsprovider] = null;
			}
		}

		/// <summary>
		/// <para>The channel to which this workstream is attached</para>
		/// <para>Required - Picklist</para>
		/// <para>Channel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_streamsource? msdyn_streamsource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_streamsource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_streamsource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_streamsource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_streamsource] = null;
			}
		}

		/// <summary>
		/// <para>URL for TeleSign Inbound link</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>TeleSign Inbound URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TelesignInboundURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TelesignInboundURL); }
			set { Entity.Attributes[Fields.msdyn_TelesignInboundURL] = value; }
		}

		/// <summary>
		/// <para>URL for Twilio Inbound link</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Twilio Inbound URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TwilioInboundURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TwilioInboundURL); }
			set { Entity.Attributes[Fields.msdyn_TwilioInboundURL] = value; }
		}

		/// <summary>
		/// <para>Declare the expected waiting time under which work items for this work stream should be assigned to agents</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Waiting Time Threshold</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_waitingtimethreshold
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_waitingtimethreshold); }
			set { Entity.Attributes[Fields.msdyn_waitingtimethreshold] = value; }
		}

		/// <summary>
		/// <para>Specifies the mode i.e Push/Pick for the workstream</para>
		/// <para>Required - Picklist</para>
		/// <para>Work Distribution Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_workdistributionmode? msdyn_workdistributionmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_workdistributionmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_workdistributionmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_workdistributionmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_workdistributionmode] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Work stream</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Work stream</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
