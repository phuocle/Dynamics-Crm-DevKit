//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.OrganizationStatisticOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class OrganizationStatistic : EntityBase
	{
		public struct Fields
		{
			public const string Hour = "hour";
			public const string OrganizationStatisticId = "organizationstatisticid";
			public const string ServerName = "servername";
			public const string StatisticType = "statistictype";
			public const string StatisticValue = "statisticvalue";
		}

		public const string EntityLogicalName = "organizationstatistic";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4708;

		[DebuggerNonUserCode()]
		public OrganizationStatistic()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrganizationStatistic(Guid OrganizationStatisticId)
		{
			Entity = new Entity(EntityLogicalName, OrganizationStatisticId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrganizationStatistic(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrganizationStatistic(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrganizationStatistic(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrganizationStatistic(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Hour that the statistic measurement was taken.</para>
		/// <para>ReadOnly - Required - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Hour</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Hour
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Hour); }
		}

		/// <summary>
		/// <para>Unique identifier of the record.</para>
		/// <para>ReadOnly - Primary Key - Uniqueidentifier</para>
		/// <para>Org Statistic</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OrganizationStatisticId
		{
			get { return Id; }
		}

		/// <summary>
		/// <para>Server that owns this record.</para>
		/// <para>ReadOnly - String - MaxLength: 256</para>
		/// <para>Server Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ServerName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ServerName); }
		}

		/// <summary>
		/// <para>Statistic type that is being measured.</para>
		/// <para>ReadOnly - Required - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Statistic Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StatisticType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StatisticType); }
		}

		/// <summary>
		/// <para>Value of the statistic.</para>
		/// <para>ReadOnly - Required - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Statistic Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StatisticValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StatisticValue); }
		}
	}
}
