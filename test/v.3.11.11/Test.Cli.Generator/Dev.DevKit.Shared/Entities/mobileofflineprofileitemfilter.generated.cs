//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets
{
	public enum subtype
	{
		/// <summary>
		/// CUD_IN = 0
		/// </summary>
		CUD_IN = 0,
		/// <summary>
		/// CUD_OUT = 4
		/// </summary>
		CUD_OUT = 4,
		/// <summary>
		/// FULL_SYNC = 5
		/// </summary>
		FULL_SYNC = 5,
		/// <summary>
		/// RELATED_CUD_IN = 1
		/// </summary>
		RELATED_CUD_IN = 1,
		/// <summary>
		/// RELATED_ENTITIES = 6
		/// </summary>
		RELATED_ENTITIES = 6,
		/// <summary>
		/// RELATED_SHARED_IN = 3
		/// </summary>
		RELATED_SHARED_IN = 3,
		/// <summary>
		/// SHARED_IN = 2
		/// </summary>
		SHARED_IN = 2
	}

	public enum type
	{
		/// <summary>
		/// DELTA_IN = 0
		/// </summary>
		DELTA_IN = 0,
		/// <summary>
		/// DELTA_OUT = 1
		/// </summary>
		DELTA_OUT = 1,
		/// <summary>
		/// FULL_SYNC = 2
		/// </summary>
		FULL_SYNC = 2,
		/// <summary>
		/// RELATED_ENTITIES = 4
		/// </summary>
		RELATED_ENTITIES = 4,
		/// <summary>
		/// TOP_1 = 3
		/// </summary>
		TOP_1 = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class mobileofflineprofileitemfilter : EntityBase
	{
		public struct Fields
		{
			public const string CreatedOn = "createdon";
			public const string fetchxml = "fetchxml";
			public const string mobileofflineprofileid = "mobileofflineprofileid";
			public const string mobileofflineprofileitemfilterId = "mobileofflineprofileitemfilterid";
			public const string mobileofflineprofileitemid = "mobileofflineprofileitemid";
			public const string ModifiedOn = "modifiedon";
			public const string Name = "name";
			public const string offlinesql = "offlinesql";
			public const string OrganizationId = "organizationid";
			public const string subtype = "subtype";
			public const string type = "type";
			public const string versionnumber = "versionnumber";
		}

		public const string EntityLogicalName = "mobileofflineprofileitemfilter";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10109;

		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(Guid mobileofflineprofileitemfilterId)
		{
			Entity = new Entity(EntityLogicalName, mobileofflineprofileitemfilterId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public mobileofflineprofileitemfilter(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>FetchXML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string fetchxml
		{
			get { return Entity.GetAttributeValue<string>(Fields.fetchxml); }
			set { Entity.Attributes[Fields.fetchxml] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Mobile Offline Profile associated with MobileOfflineProfileItemFilter.</para>
		/// <para>Lookup to mobileofflineprofile</para>
		/// <para>MobileOfflineProfile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mobileofflineprofileid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mobileofflineprofileid); }
			set { Entity.Attributes[Fields.mobileofflineprofileid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>MobileOfflineProfileItemFilter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid mobileofflineprofileitemfilterId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.mobileofflineprofileitemfilterId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Uniqueidentifier</para>
		/// <para>MobileOfflineProfileItemId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? mobileofflineprofileitemid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.mobileofflineprofileitemid); }
			set { Entity.Attributes[Fields.mobileofflineprofileitemid] = value; }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Name</para>
		/// <para>String - MaxLength: 64</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>OfflineSQL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string offlinesql
		{
			get { return Entity.GetAttributeValue<string>(Fields.offlinesql); }
			set { Entity.Attributes[Fields.offlinesql] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Subtype</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.subtype? subtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.subtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.subtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.subtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.subtype] = null;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.type? type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mobileofflineprofileitemfilterOptionSets.type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.type] = null;
			}
		}

		/// <summary>
		/// <para>Version number.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? versionnumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.versionnumber); }
		}
	}
}
