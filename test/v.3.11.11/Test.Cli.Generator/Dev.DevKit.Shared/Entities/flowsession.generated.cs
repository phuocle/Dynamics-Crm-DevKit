//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.flowsessionOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Aborted = 11
		/// </summary>
		Aborted = 11,
		/// <summary>
		/// Cancelled = 7
		/// </summary>
		Cancelled = 7,
		/// <summary>
		/// Deleted = 13
		/// </summary>
		Deleted = 13,
		/// <summary>
		/// Failed = 8
		/// </summary>
		Failed = 8,
		/// <summary>
		/// Faulted = 9
		/// </summary>
		Faulted = 9,
		/// <summary>
		/// Ignored = 12
		/// </summary>
		Ignored = 12,
		/// <summary>
		/// NotSpecified = 0
		/// </summary>
		NotSpecified = 0,
		/// <summary>
		/// Paused = 1
		/// </summary>
		Paused = 1,
		/// <summary>
		/// Running = 2
		/// </summary>
		Running = 2,
		/// <summary>
		/// Skipped = 5
		/// </summary>
		Skipped = 5,
		/// <summary>
		/// Succeeded = 4
		/// </summary>
		Succeeded = 4,
		/// <summary>
		/// Suspended = 6
		/// </summary>
		Suspended = 6,
		/// <summary>
		/// Terminated = 14
		/// </summary>
		Terminated = 14,
		/// <summary>
		/// TimedOut = 10
		/// </summary>
		TimedOut = 10,
		/// <summary>
		/// Waiting = 3
		/// </summary>
		Waiting = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class flowsession : EntityBase
	{
		public struct Fields
		{
			public const string AdditionalContext = "additionalcontext";
			public const string CompletedOn = "completedon";
			public const string Context = "context";
			public const string CorrelationId = "correlationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ErrorCode = "errorcode";
			public const string ErrorDetails = "errordetails";
			public const string ErrorMessage = "errormessage";
			public const string flowsessionId = "flowsessionid";
			public const string Gateway = "gateway";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string MachineGroupId = "machinegroupid";
			public const string MachineId = "machineid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string Outputs = "outputs";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProcessVersion = "processversion";
			public const string RegardingObjectId = "regardingobjectid";
			public const string StartedOn = "startedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "flowsession";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4720;

		[DebuggerNonUserCode()]
		public flowsession()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public flowsession(Guid flowsessionId)
		{
			Entity = new Entity(EntityLogicalName, flowsessionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public flowsession(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public flowsession(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public flowsession(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public flowsession(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Additional context about flow session.</para>
		/// <para>ReadOnly - Virtual</para>
		/// <para>AdditionalContext</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdditionalContext
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdditionalContext); }
		}

		/// <summary>
		/// <para>The date and time at which the flow session was completed.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
			set { Entity.Attributes[Fields.CompletedOn] = value; }
		}

		/// <summary>
		/// <para>Context about flow session.</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Context</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Context
		{
			get { return Entity.GetAttributeValue<string>(Fields.Context); }
			set { Entity.Attributes[Fields.Context] = value; }
		}

		/// <summary>
		/// <para>Unique identifier used to correlate between multiple SDK requests and flow executions.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>CorrelationId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.CorrelationId); }
			set { Entity.Attributes[Fields.CorrelationId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Error code describing the failure in flow session execution.</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>ErrorCode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorCode); }
			set { Entity.Attributes[Fields.ErrorCode] = value; }
		}

		/// <summary>
		/// <para>Details of the failure in flow session execution.</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>ErrorDetails</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDetails); }
			set { Entity.Attributes[Fields.ErrorDetails] = value; }
		}

		/// <summary>
		/// <para>Message describing the failure in flow session execution.</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>ErrorMessage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorMessage); }
			set { Entity.Attributes[Fields.ErrorMessage] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>FlowSession</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid flowsessionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.flowsessionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The name of the gateway used.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Gateway</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Gateway
		{
			get { return Entity.GetAttributeValue<string>(Fields.Gateway); }
			set { Entity.Attributes[Fields.Gateway] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Lookup to flowmachinegroup</para>
		/// <para>Flow Machine Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MachineGroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MachineGroupId); }
			set { Entity.Attributes[Fields.MachineGroupId] = value; }
		}

		/// <summary>
		/// <para>Lookup to flowmachine</para>
		/// <para>Flow Machine</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MachineId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MachineId); }
			set { Entity.Attributes[Fields.MachineId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Outputs generated by the flow session execution.</para>
		/// <para>ReadOnly - Virtual</para>
		/// <para>Outputs</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Outputs
		{
			get { return Entity.GetAttributeValue<string>(Fields.Outputs); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>The version of the process with which the flow session is associated.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Process Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProcessVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProcessVersion); }
			set { Entity.Attributes[Fields.ProcessVersion] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the process with which the flow session is associated.</para>
		/// <para>Lookup to workflow</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>The date and time at which the flow session was started.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartedOn); }
			set { Entity.Attributes[Fields.StartedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the FlowSession</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowsessionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowsessionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the FlowSession</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowsessionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowsessionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
