//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.PrivilegeOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Privilege : EntityBase
	{
		public struct Fields
		{
			public const string AccessRight = "accessright";
			public const string CanBeBasic = "canbebasic";
			public const string CanBeDeep = "canbedeep";
			public const string CanBeEntityReference = "canbeentityreference";
			public const string CanBeGlobal = "canbeglobal";
			public const string CanBeLocal = "canbelocal";
			public const string CanBeParentEntityReference = "canbeparententityreference";
			public const string ComponentState = "componentstate";
			public const string IntroducedVersion = "introducedversion";
			public const string IsDisabledWhenIntegrated = "isdisabledwhenintegrated";
			public const string IsManaged = "ismanaged";
			public const string Name = "name";
			public const string OverwriteTime = "overwritetime";
			public const string PrivilegeId = "privilegeid";
			public const string PrivilegeRowId = "privilegerowid";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "privilege";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1023;

		[DebuggerNonUserCode()]
		public Privilege()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Privilege(Guid PrivilegeId)
		{
			Entity = new Entity(EntityLogicalName, PrivilegeId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Privilege(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Privilege(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Privilege(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Privilege(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Rights a user has to an instance of an entity.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AccessRight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AccessRight); }
			set { Entity.Attributes[Fields.AccessRight] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the privilege applies to the user, the user&apos;s team, or objects shared by the user.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeBasic
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeBasic); }
			set { Entity.Attributes[Fields.CanBeBasic] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the privilege applies to child business units of the business unit associated with the user.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeDeep
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeDeep); }
			set { Entity.Attributes[Fields.CanBeDeep] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the privilege applies to the local reference of an external party.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeEntityReference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeEntityReference); }
			set { Entity.Attributes[Fields.CanBeEntityReference] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the privilege applies to the entire organization.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeGlobal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeGlobal); }
			set { Entity.Attributes[Fields.CanBeGlobal] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the privilege applies to the user&apos;s business unit.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeLocal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeLocal); }
			set { Entity.Attributes[Fields.CanBeLocal] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the privilege applies to parent reference of the external party.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeParentEntityReference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeParentEntityReference); }
			set { Entity.Attributes[Fields.CanBeParentEntityReference] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrivilegeOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrivilegeOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Version in which the component is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Specifies whether the privilege is disabled.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabledWhenIntegrated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabledWhenIntegrated); }
		}

		/// <summary>
		/// <para>Information that specifies whether this component is managed.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Name of the privilege.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the privilege.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PrivilegeId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PrivilegeId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the Privilege used when synchronizing customizations for the Microsoft Dynamics CRM client for Outlook</para>
		/// <para>Uniqueidentifier</para>
		/// <para>App Module Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrivilegeRowId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrivilegeRowId); }
			set { Entity.Attributes[Fields.PrivilegeRowId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
