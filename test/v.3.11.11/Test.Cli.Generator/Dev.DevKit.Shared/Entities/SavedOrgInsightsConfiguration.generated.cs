//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets
{
	public enum Lookback
	{
		/// <summary>
		/// 2H = 1
		/// </summary>
		_2H = 1,
		/// <summary>
		/// 30D = 4
		/// </summary>
		_30D = 4,
		/// <summary>
		/// 48H = 2
		/// </summary>
		_48H = 2,
		/// <summary>
		/// 7D = 3
		/// </summary>
		_7D = 3
	}

	public enum MetricType
	{
		/// <summary>
		/// Category = 2
		/// </summary>
		Category = 2,
		/// <summary>
		/// Time Series = 1
		/// </summary>
		Time_Series = 1
	}

	public enum PlotOption
	{
		/// <summary>
		/// Area = 3
		/// </summary>
		Area = 3,
		/// <summary>
		/// Bar = 5
		/// </summary>
		Bar = 5,
		/// <summary>
		/// Bubble = 11
		/// </summary>
		Bubble = 11,
		/// <summary>
		/// Column = 2
		/// </summary>
		Column = 2,
		/// <summary>
		/// Donut = 6
		/// </summary>
		Donut = 6,
		/// <summary>
		/// DoubleDonut = 9
		/// </summary>
		DoubleDonut = 9,
		/// <summary>
		/// Infocard = 7
		/// </summary>
		Infocard = 7,
		/// <summary>
		/// Line = 1
		/// </summary>
		Line = 1,
		/// <summary>
		/// LinearGauge = 10
		/// </summary>
		LinearGauge = 10,
		/// <summary>
		/// List = 8
		/// </summary>
		List = 8,
		/// <summary>
		/// Pie = 4
		/// </summary>
		Pie = 4
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SavedOrgInsightsConfiguration : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string IsDefault = "isdefault";
			public const string IsDrilldown = "isdrilldown";
			public const string JsonData = "jsondata";
			public const string JsonDataEndTime = "jsondataendtime";
			public const string JsonDataStartTime = "jsondatastarttime";
			public const string Lookback = "lookback";
			public const string MetricType = "metrictype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string Parameters = "parameters";
			public const string PlotOption = "plotoption";
			public const string SavedOrgInsightsConfigurationId = "savedorginsightsconfigurationid";
		}

		public const string EntityLogicalName = "savedorginsightsconfiguration";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1309;

		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(Guid SavedOrgInsightsConfigurationId)
		{
			Entity = new Entity(EntityLogicalName, SavedOrgInsightsConfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the saved organization insights configuration</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Description of the saved organization insights configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Indicates whether this saved organization insights configuration is the default config</para>
		/// <para>Boolean</para>
		/// <para>Default Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefault); }
			set { Entity.Attributes[Fields.IsDefault] = value; }
		}

		/// <summary>
		/// <para>Indicates whether this configuration indicates a drilldown chart</para>
		/// <para>Boolean</para>
		/// <para>Is Drilldown</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDrilldown
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDrilldown); }
			set { Entity.Attributes[Fields.IsDrilldown] = value; }
		}

		/// <summary>
		/// <para>Metrics Data in Json format for those metrics defined in parameters</para>
		/// <para>ReadOnly - Memo - MaxLength: 2000</para>
		/// <para>Metrics Data in Json format for the metrics defined in parameters</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JsonData
		{
			get { return Entity.GetAttributeValue<string>(Fields.JsonData); }
		}

		/// <summary>
		/// <para>End Time</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? JsonDataEndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.JsonDataEndTime); }
		}

		/// <summary>
		/// <para>Start Time</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? JsonDataStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.JsonDataStartTime); }
		}

		/// <summary>
		/// <para>Lookback period</para>
		/// <para>Picklist</para>
		/// <para>Lookback</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.Lookback? Lookback
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Lookback);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.Lookback)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Lookback] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Lookback] = null;
			}
		}

		/// <summary>
		/// <para>Type of the metric</para>
		/// <para>Picklist</para>
		/// <para>Metric Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.MetricType? MetricType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MetricType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.MetricType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MetricType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MetricType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Display name</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Display name for the saved organization insights configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the solution</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Parameters needed for data retrieval</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Parameters needed for data retrieval</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Parameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.Parameters); }
			set { Entity.Attributes[Fields.Parameters] = value; }
		}

		/// <summary>
		/// <para>Plot Option</para>
		/// <para>Picklist</para>
		/// <para>Plot Option</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.PlotOption? PlotOption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PlotOption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.PlotOption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PlotOption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PlotOption] = null;
			}
		}

		/// <summary>
		/// <para>Shows the ID of the Saved Organization Insights Configuration</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>SavedOrgInsightsConfigurationId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SavedOrgInsightsConfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SavedOrgInsightsConfigurationId] = value;
				Entity.Id = value;
			}
		}
	}
}
