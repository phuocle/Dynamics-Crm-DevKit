//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ProvisionLanguageForUserOptionSets
{
	public enum OperationStatus
	{
		/// <summary>
		/// Completed = 1
		/// </summary>
		Completed = 1,
		/// <summary>
		/// Failed = 3
		/// </summary>
		Failed = 3,
		/// <summary>
		/// Queued = 0
		/// </summary>
		Queued = 0,
		/// <summary>
		/// Waiting For Language Provision = 2
		/// </summary>
		Waiting_For_Language_Provision = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ProvisionLanguageForUser : EntityBase
	{
		public struct Fields
		{
			public const string AsyncOperationId = "asyncoperationid";
			public const string Lcid = "lcid";
			public const string Name = "name";
			public const string OperationStatus = "operationstatus";
			public const string OrganizationId = "organizationid";
			public const string ProvisionLanguageForUserId = "provisionlanguageforuserid";
			public const string UserId = "userid";
		}

		public const string EntityLogicalName = "provisionlanguageforuser";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10024;

		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(Guid ProvisionLanguageForUserId)
		{
			Entity = new Entity(EntityLogicalName, ProvisionLanguageForUserId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Uniqueidentifier</para>
		/// <para>AsyncOperationId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AsyncOperationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AsyncOperationId); }
			set { Entity.Attributes[Fields.AsyncOperationId] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Lcid</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Lcid
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Lcid); }
			set { Entity.Attributes[Fields.Lcid] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>OperationStatus</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProvisionLanguageForUserOptionSets.OperationStatus? OperationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProvisionLanguageForUserOptionSets.OperationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OperationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OperationStatus] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>ProvisionLanguageForUser</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ProvisionLanguageForUserId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ProvisionLanguageForUserId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Uniqueidentifier</para>
		/// <para>UserId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UserId); }
			set { Entity.Attributes[Fields.UserId] = value; }
		}
	}
}
