//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.availabletimesOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class availabletimes : EntityBase
	{
		public struct Fields
		{
			public const string availabletimesId = "availabletimesid";
			public const string Name = "name";
			public const string Resources = "resources";
			public const string ResourcesJson = "resourcesJson";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledEndLocalTime = "scheduledendlocaltime";
			public const string ScheduledStart = "scheduledstart";
			public const string ScheduledStartLocalTime = "scheduledstartlocaltime";
			public const string Site = "site";
			public const string SiteId = "siteid";
		}

		public const string EntityLogicalName = "availabletimes";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10144;

		[DebuggerNonUserCode()]
		public availabletimes()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public availabletimes(Guid availabletimesId)
		{
			Entity = new Entity(EntityLogicalName, availabletimesId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public availabletimes(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public availabletimes(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public availabletimes(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public availabletimes(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>AvailableTimes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid availabletimesId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.availabletimesId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The name of the available times virtual entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Resources</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Resources
		{
			get { return Entity.GetAttributeValue<string>(Fields.Resources); }
			set { Entity.Attributes[Fields.Resources] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Resources IDs</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ResourcesJson
		{
			get { return Entity.GetAttributeValue<string>(Fields.ResourcesJson); }
			set { Entity.Attributes[Fields.ResourcesJson] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Scheduled End UTC time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
			set { Entity.Attributes[Fields.ScheduledEnd] = value; }
		}

		/// <summary>
		/// <para>Scheduled End Local Time</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Scheduled End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ScheduledEndLocalTime
		{
			get { return Entity.GetAttributeValue<string>(Fields.ScheduledEndLocalTime); }
			set { Entity.Attributes[Fields.ScheduledEndLocalTime] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Scheduled Start UTC time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
			set { Entity.Attributes[Fields.ScheduledStart] = value; }
		}

		/// <summary>
		/// <para>Scheduled Start Local Time</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Scheduled Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ScheduledStartLocalTime
		{
			get { return Entity.GetAttributeValue<string>(Fields.ScheduledStartLocalTime); }
			set { Entity.Attributes[Fields.ScheduledStartLocalTime] = value; }
		}

		/// <summary>
		/// <para>Site</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Site</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Site
		{
			get { return Entity.GetAttributeValue<string>(Fields.Site); }
			set { Entity.Attributes[Fields.Site] = value; }
		}

		/// <summary>
		/// <para>Site Identifier</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Site Identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SiteId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SiteId); }
			set { Entity.Attributes[Fields.SiteId] = value; }
		}
	}
}
