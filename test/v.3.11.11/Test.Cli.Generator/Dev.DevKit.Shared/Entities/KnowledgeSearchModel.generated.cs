//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.KnowledgeSearchModelOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum SourceEntity
	{
		/// <summary>
		/// Case = 112
		/// </summary>
		Case = 112
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class KnowledgeSearchModel : EntityBase
	{
		public struct Fields
		{
			public const string AzureServiceConnectionId = "azureserviceconnectionid";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string Entity = "entity";
			public const string FetchXmlList = "fetchxmllist";
			public const string IsManaged = "ismanaged";
			public const string KnowledgeSearchModelId = "knowledgesearchmodelid";
			public const string KnowledgeSearchModelIdUnique = "knowledgesearchmodelidunique";
			public const string MaxKeyWords = "maxkeywords";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NgramSize = "ngramsize";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string SourceEntity = "sourceentity";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
		}

		public const string EntityLogicalName = "knowledgesearchmodel";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9947;

		[DebuggerNonUserCode()]
		public KnowledgeSearchModel()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeSearchModel(Guid KnowledgeSearchModelId)
		{
			Entity = new Entity(EntityLogicalName, KnowledgeSearchModelId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeSearchModel(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeSearchModel(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeSearchModel(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeSearchModel(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier for AzureServiceConnection associated with KnowledgeSearchModel.</para>
		/// <para>Required - Lookup to azureserviceconnection</para>
		/// <para>Connection</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AzureServiceConnectionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AzureServiceConnectionId); }
			set { Entity.Attributes[Fields.AzureServiceConnectionId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeSearchModelOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeSearchModelOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the Knowledge Search Model.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the Knowledge Search Model was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the knowledge search Model.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enter a description for the search configuration</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>entity</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity); }
			set { Entity.Attributes[Fields.Entity] = value; }
		}

		/// <summary>
		/// <para>FetchXml.</para>
		/// <para>Memo - MaxLength: 500000</para>
		/// <para>FetchXml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FetchXmlList
		{
			get { return Entity.GetAttributeValue<string>(Fields.FetchXmlList); }
			set { Entity.Attributes[Fields.FetchXmlList] = value; }
		}

		/// <summary>
		/// <para>Is Manageed</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Knowledge Search Model</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid KnowledgeSearchModelId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.KnowledgeSearchModelId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the Knowledge Search Model used when synchronizing customizations for the Microsoft Dynamics 365 client for Outlook</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Knowledge Search Model Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? KnowledgeSearchModelIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.KnowledgeSearchModelIdUnique); }
		}

		/// <summary>
		/// <para>Enter the maximum number of keywords or key phrases to be determined using text analytics.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 1,000</para>
		/// <para>Maximum Number of Key Phrases</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxKeyWords
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxKeyWords); }
			set { Entity.Attributes[Fields.MaxKeyWords] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the Knowledge Search Model.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the Knowledge Search model was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the knowledge search model.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a logical name for the search configuration.</para>
		/// <para>Required - String - MaxLength: 160</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Enter the maximum number of key phrase words to use in a topic.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 3</para>
		/// <para>Maximum Key Phrase Words</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NgramSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NgramSize); }
			set { Entity.Attributes[Fields.NgramSize] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the Knowledge Search Model entity.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Enter an entity that articles are suggested for.</para>
		/// <para>Required - EntityName</para>
		/// <para>Source Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceEntity); }
			set { Entity.Attributes[Fields.SourceEntity] = value; }
		}

		/// <summary>
		/// <para>Status of the Knowledge Search Model</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeSearchModelOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeSearchModelOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Knowledge Search Model</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeSearchModelOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeSearchModelOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
	}
}
