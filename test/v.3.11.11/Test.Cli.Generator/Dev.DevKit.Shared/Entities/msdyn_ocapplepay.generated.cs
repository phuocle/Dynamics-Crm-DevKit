//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets
{
	public enum msdyn_merchantcapabilities
	{
		/// <summary>
		/// 3D Secure = 192350002
		/// </summary>
		_3D_Secure = 192350002,
		/// <summary>
		/// Credit = 192350001
		/// </summary>
		Credit = 192350001,
		/// <summary>
		/// Debit = 192350000
		/// </summary>
		Debit = 192350000
	}

	public enum msdyn_supportednetworks
	{
		/// <summary>
		/// American Express = 192350000
		/// </summary>
		American_Express = 192350000,
		/// <summary>
		/// Discover = 192350002
		/// </summary>
		Discover = 192350002,
		/// <summary>
		/// MasterCard = 192350003
		/// </summary>
		MasterCard = 192350003,
		/// <summary>
		/// Visa = 192350001
		/// </summary>
		Visa = 192350001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ocapplepay : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_countrycode = "msdyn_countrycode";
			public const string msdyn_fallbackurl = "msdyn_fallbackurl";
			public const string msdyn_merchantcapabilities = "msdyn_merchantcapabilities";
			public const string msdyn_merchantdisplayname = "msdyn_merchantdisplayname";
			public const string msdyn_merchantid = "msdyn_merchantid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocapplepayId = "msdyn_ocapplepayid";
			public const string msdyn_ocbase64merchantcertstring = "msdyn_ocbase64merchantcertstring";
			public const string msdyn_ocbase64merchantcertstringcontd = "msdyn_ocbase64merchantcertstringcontd";
			public const string msdyn_ocmerchantcertfilename = "msdyn_ocmerchantcertfilename";
			public const string msdyn_ocmerchantcertificatepassword = "msdyn_ocmerchantcertificatepassword";
			public const string msdyn_ocmerchantdomainurl = "msdyn_ocmerchantdomainurl";
			public const string msdyn_ordertrackingurl = "msdyn_ordertrackingurl";
			public const string msdyn_paymentgatewayurl = "msdyn_paymentgatewayurl";
			public const string msdyn_paymentmethodupdateurl = "msdyn_paymentmethodupdateurl";
			public const string msdyn_shippingcontactupdateurl = "msdyn_shippingcontactupdateurl";
			public const string msdyn_shippingmethodupdateurl = "msdyn_shippingmethodupdateurl";
			public const string msdyn_supportednetworks = "msdyn_supportednetworks";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_ocapplepay";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10852;

		[DebuggerNonUserCode()]
		public msdyn_ocapplepay()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(Guid msdyn_ocapplepayId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ocapplepayId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Merchant Country Code</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Country Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_countrycode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_countrycode); }
			set { Entity.Attributes[Fields.msdyn_countrycode] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Fallback URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_fallbackurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_fallbackurl); }
			set { Entity.Attributes[Fields.msdyn_fallbackurl] = value; }
		}

		/// <summary>
		/// <para>Required - MultiSelectPicklist</para>
		/// <para>Merchant Capabilities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_merchantcapabilities> msdyn_merchantcapabilities
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_merchantcapabilities>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_merchantcapabilities);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_merchantcapabilities)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_merchantcapabilities] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_merchantcapabilities] = data;
				}
			}
		}

		/// <summary>
		/// <para>Merchant display name or domain name</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Merchant Display Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_merchantdisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_merchantdisplayname); }
			set { Entity.Attributes[Fields.msdyn_merchantdisplayname] = value; }
		}

		/// <summary>
		/// <para>Apple Pay Merchant ID</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Merchant ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_merchantid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_merchantid); }
			set { Entity.Attributes[Fields.msdyn_merchantid] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>OC Apple Pay Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ocapplepayId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ocapplepayId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The Apple Pay Merchant Certificate (Base 64 string)</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>The Apple Pay Merchant Certificate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocbase64merchantcertstring
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocbase64merchantcertstring); }
			set { Entity.Attributes[Fields.msdyn_ocbase64merchantcertstring] = value; }
		}

		/// <summary>
		/// <para>The Apple Pay Merchant Certificate (Base 64 string)</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>The Apple Pay Merchant Certificate - Continued</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocbase64merchantcertstringcontd
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocbase64merchantcertstringcontd); }
			set { Entity.Attributes[Fields.msdyn_ocbase64merchantcertstringcontd] = value; }
		}

		/// <summary>
		/// <para>Merchant Certificate File Name</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Merchant Certificate File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocmerchantcertfilename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocmerchantcertfilename); }
			set { Entity.Attributes[Fields.msdyn_ocmerchantcertfilename] = value; }
		}

		/// <summary>
		/// <para>The password for the Apple Pay Merchant certificate</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Merchant Certificate Password</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocmerchantcertificatepassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocmerchantcertificatepassword); }
			set { Entity.Attributes[Fields.msdyn_ocmerchantcertificatepassword] = value; }
		}

		/// <summary>
		/// <para>Merchant Domain URL</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Merchant Domain URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocmerchantdomainurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocmerchantdomainurl); }
			set { Entity.Attributes[Fields.msdyn_ocmerchantdomainurl] = value; }
		}

		/// <summary>
		/// <para>Order Tracking URL</para>
		/// <para>String - MaxLength: 300</para>
		/// <para>Order Tracking URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ordertrackingurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ordertrackingurl); }
			set { Entity.Attributes[Fields.msdyn_ordertrackingurl] = value; }
		}

		/// <summary>
		/// <para>The URL of the payment service provider</para>
		/// <para>Required - String - MaxLength: 300</para>
		/// <para>Payment Gateway URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_paymentgatewayurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_paymentgatewayurl); }
			set { Entity.Attributes[Fields.msdyn_paymentgatewayurl] = value; }
		}

		/// <summary>
		/// <para>The URL that Apple calls into when payment method is updated</para>
		/// <para>String - MaxLength: 300</para>
		/// <para>Payment Method Update URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_paymentmethodupdateurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_paymentmethodupdateurl); }
			set { Entity.Attributes[Fields.msdyn_paymentmethodupdateurl] = value; }
		}

		/// <summary>
		/// <para>The URL that Apple will call into when there is a shipping contact update</para>
		/// <para>String - MaxLength: 300</para>
		/// <para>Shipping Contact Update URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_shippingcontactupdateurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_shippingcontactupdateurl); }
			set { Entity.Attributes[Fields.msdyn_shippingcontactupdateurl] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 300</para>
		/// <para>Shipping Method Update URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_shippingmethodupdateurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_shippingmethodupdateurl); }
			set { Entity.Attributes[Fields.msdyn_shippingmethodupdateurl] = value; }
		}

		/// <summary>
		/// <para>Required - MultiSelectPicklist</para>
		/// <para>Supported Networks</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_supportednetworks> msdyn_supportednetworks
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_supportednetworks>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_supportednetworks);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_supportednetworks)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_supportednetworks] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_supportednetworks] = data;
				}
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the OC Apple Pay Entity</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the OC Apple Pay Entity</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
