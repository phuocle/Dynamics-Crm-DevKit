//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_projectparameterOptionSets
{
	public enum msdyn_resourceallocationmode
	{
		/// <summary>
		/// Centralized = 1
		/// </summary>
		Centralized = 1,
		/// <summary>
		/// Hybrid = 2
		/// </summary>
		Hybrid = 2
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_projectparameter : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Allowskillupdatebyresource = "msdyn_allowskillupdatebyresource";
			public const string msdyn_BackgroundApprovalThreshold = "msdyn_backgroundapprovalthreshold";
			public const string msdyn_defaultorganizationalunit = "msdyn_defaultorganizationalunit";
			public const string msdyn_defaultWorkTemplate = "msdyn_defaultworktemplate";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_invoicefrequency = "msdyn_invoicefrequency";
			public const string msdyn_pricelistdefaultingiscurrencyagnostic = "msdyn_pricelistdefaultingiscurrencyagnostic";
			public const string msdyn_projectmanagerrole = "msdyn_projectmanagerrole";
			public const string msdyn_projectparameterId = "msdyn_projectparameterid";
			public const string msdyn_Projectresourcerequirementsvisibletore = "msdyn_projectresourcerequirementsvisibletore";
			public const string msdyn_resourceallocationmode = "msdyn_resourceallocationmode";
			public const string msdyn_teammemberrole = "msdyn_teammemberrole";
			public const string msdyn_upgradebatchsize = "msdyn_upgradebatchsize";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_projectparameter";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10530;

		[DebuggerNonUserCode()]
		public msdyn_projectparameter()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectparameter(Guid msdyn_projectparameterId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_projectparameterId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectparameter(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectparameter(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectparameter(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectparameter(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Allow resources to update their skills via the Project Finder Mobile app.</para>
		/// <para>Boolean</para>
		/// <para>Allow skill update by resource (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Allowskillupdatebyresource
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Allowskillupdatebyresource); }
			set { Entity.Attributes[Fields.msdyn_Allowskillupdatebyresource] = value; }
		}

		/// <summary>
		/// <para>Process approvals in the background when the number of approvals exceed this number.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Background Approval Threshold</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_BackgroundApprovalThreshold
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_BackgroundApprovalThreshold); }
			set { Entity.Attributes[Fields.msdyn_BackgroundApprovalThreshold] = value; }
		}

		/// <summary>
		/// <para>Select the default organizational unit that will be used for new resources.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Default Organizational Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_defaultorganizationalunit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_defaultorganizationalunit); }
			set { Entity.Attributes[Fields.msdyn_defaultorganizationalunit] = value; }
		}

		/// <summary>
		/// <para>Select the default work template for new projects.</para>
		/// <para>Lookup to msdyn_workhourtemplate</para>
		/// <para>defaultWorkTemplate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_defaultWorkTemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_defaultWorkTemplate); }
			set { Entity.Attributes[Fields.msdyn_defaultWorkTemplate] = value; }
		}

		/// <summary>
		/// <para>Type the name of the project parameters.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>Select the default frequency for generating invoices.</para>
		/// <para>Lookup to msdyn_invoicefrequency</para>
		/// <para>Invoice Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_invoicefrequency
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_invoicefrequency); }
			set { Entity.Attributes[Fields.msdyn_invoicefrequency] = value; }
		}

		/// <summary>
		/// <para>Enabling this will make cost price list selection on projects agnostic of contracting unit currency and cost price lists will allow price setup in multiple currencies</para>
		/// <para>Boolean</para>
		/// <para>Enable multi-currency cost price list</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_pricelistdefaultingiscurrencyagnostic
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_pricelistdefaultingiscurrencyagnostic); }
			set { Entity.Attributes[Fields.msdyn_pricelistdefaultingiscurrencyagnostic] = value; }
		}

		/// <summary>
		/// <para>Shows the default role to be used when a project manager is added to the project team.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Project Manager Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectmanagerrole
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectmanagerrole); }
			set { Entity.Attributes[Fields.msdyn_projectmanagerrole] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Project Parameter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_projectparameterId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_projectparameterId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select whether project resource requirements are visible to resources.</para>
		/// <para>Boolean</para>
		/// <para>Resource requirements visible to resources (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Projectresourcerequirementsvisibletore
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Projectresourcerequirementsvisibletore); }
			set { Entity.Attributes[Fields.msdyn_Projectresourcerequirementsvisibletore] = value; }
		}

		/// <summary>
		/// <para>Select the default method for allocating resources to projects.</para>
		/// <para>Required - Picklist</para>
		/// <para>Resource allocation mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectparameterOptionSets.msdyn_resourceallocationmode? msdyn_resourceallocationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_resourceallocationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectparameterOptionSets.msdyn_resourceallocationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_resourceallocationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_resourceallocationmode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the default role to be used when a team member is added to the project team.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Team Member Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_teammemberrole
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_teammemberrole); }
			set { Entity.Attributes[Fields.msdyn_teammemberrole] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Upgrade Batch Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_upgradebatchsize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_upgradebatchsize); }
			set { Entity.Attributes[Fields.msdyn_upgradebatchsize] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the Project Parameter</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectparameterOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectparameterOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Project Parameter</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectparameterOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectparameterOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
