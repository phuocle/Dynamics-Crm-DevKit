//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SalesOrderOptionSets
{
	public enum FreightTermsCode
	{
		/// <summary>
		/// FOB = 1
		/// </summary>
		FOB = 1,
		/// <summary>
		/// No Charge = 2
		/// </summary>
		No_Charge = 2
	}

	public enum msdyn_ordertype
	{
		/// <summary>
		/// Item based = 192350000
		/// </summary>
		Item_based = 192350000,
		/// <summary>
		/// Service-Maintenance Based = 690970002
		/// </summary>
		Service_Maintenance_Based = 690970002,
		/// <summary>
		/// Work based = 192350001
		/// </summary>
		Work_based = 192350001
	}

	public enum msdyn_PSAState
	{
		/// <summary>
		/// Active = 192350002
		/// </summary>
		Active = 192350002,
		/// <summary>
		/// Closed = 192350003
		/// </summary>
		Closed = 192350003,
		/// <summary>
		/// Draft = 192350000
		/// </summary>
		Draft = 192350000,
		/// <summary>
		/// On hold = 192350001
		/// </summary>
		On_hold = 192350001
	}

	public enum msdyn_PSAStatusReason
	{
		/// <summary>
		/// Abandoned = 192350006
		/// </summary>
		Abandoned = 192350006,
		/// <summary>
		/// Completed = 192350004
		/// </summary>
		Completed = 192350004,
		/// <summary>
		/// Confirmed = 192350003
		/// </summary>
		Confirmed = 192350003,
		/// <summary>
		/// Draft = 192350000
		/// </summary>
		Draft = 192350000,
		/// <summary>
		/// In review = 192350001
		/// </summary>
		In_review = 192350001,
		/// <summary>
		/// Lost = 192350005
		/// </summary>
		Lost = 192350005,
		/// <summary>
		/// On hold = 192350002
		/// </summary>
		On_hold = 192350002
	}

	public enum PaymentTermsCode
	{
		/// <summary>
		/// 2% 10, Net 30 = 2
		/// </summary>
		_2_10_Net_30 = 2,
		/// <summary>
		/// Net 30 = 1
		/// </summary>
		Net_30 = 1,
		/// <summary>
		/// Net 45 = 3
		/// </summary>
		Net_45 = 3,
		/// <summary>
		/// Net 60 = 4
		/// </summary>
		Net_60 = 4
	}

	public enum PricingErrorCode
	{
		/// <summary>
		/// Base Currency Attribute Overflow = 36
		/// </summary>
		Base_Currency_Attribute_Overflow = 36,
		/// <summary>
		/// Base Currency Attribute Underflow = 37
		/// </summary>
		Base_Currency_Attribute_Underflow = 37,
		/// <summary>
		/// Detail Error = 1
		/// </summary>
		Detail_Error = 1,
		/// <summary>
		/// Discount Type Invalid State = 27
		/// </summary>
		Discount_Type_Invalid_State = 27,
		/// <summary>
		/// Inactive Discount Type = 33
		/// </summary>
		Inactive_Discount_Type = 33,
		/// <summary>
		/// Inactive Price Level = 3
		/// </summary>
		Inactive_Price_Level = 3,
		/// <summary>
		/// Invalid Current Cost = 20
		/// </summary>
		Invalid_Current_Cost = 20,
		/// <summary>
		/// Invalid Discount = 28
		/// </summary>
		Invalid_Discount = 28,
		/// <summary>
		/// Invalid Discount Type = 26
		/// </summary>
		Invalid_Discount_Type = 26,
		/// <summary>
		/// Invalid Price = 19
		/// </summary>
		Invalid_Price = 19,
		/// <summary>
		/// Invalid Price Level Amount = 17
		/// </summary>
		Invalid_Price_Level_Amount = 17,
		/// <summary>
		/// Invalid Price Level Currency = 34
		/// </summary>
		Invalid_Price_Level_Currency = 34,
		/// <summary>
		/// Invalid Price Level Percentage = 18
		/// </summary>
		Invalid_Price_Level_Percentage = 18,
		/// <summary>
		/// Invalid Pricing Code = 9
		/// </summary>
		Invalid_Pricing_Code = 9,
		/// <summary>
		/// Invalid Pricing Precision = 30
		/// </summary>
		Invalid_Pricing_Precision = 30,
		/// <summary>
		/// Invalid Product = 7
		/// </summary>
		Invalid_Product = 7,
		/// <summary>
		/// Invalid Quantity = 29
		/// </summary>
		Invalid_Quantity = 29,
		/// <summary>
		/// Invalid Rounding Amount = 24
		/// </summary>
		Invalid_Rounding_Amount = 24,
		/// <summary>
		/// Invalid Rounding Option = 23
		/// </summary>
		Invalid_Rounding_Option = 23,
		/// <summary>
		/// Invalid Rounding Policy = 22
		/// </summary>
		Invalid_Rounding_Policy = 22,
		/// <summary>
		/// Invalid Standard Cost = 21
		/// </summary>
		Invalid_Standard_Cost = 21,
		/// <summary>
		/// Missing Current Cost = 15
		/// </summary>
		Missing_Current_Cost = 15,
		/// <summary>
		/// Missing Price = 14
		/// </summary>
		Missing_Price = 14,
		/// <summary>
		/// Missing Price Level = 2
		/// </summary>
		Missing_Price_Level = 2,
		/// <summary>
		/// Missing Price Level Amount = 12
		/// </summary>
		Missing_Price_Level_Amount = 12,
		/// <summary>
		/// Missing Price Level Percentage = 13
		/// </summary>
		Missing_Price_Level_Percentage = 13,
		/// <summary>
		/// Missing Pricing Code = 8
		/// </summary>
		Missing_Pricing_Code = 8,
		/// <summary>
		/// Missing Product = 6
		/// </summary>
		Missing_Product = 6,
		/// <summary>
		/// Missing Product Default UOM = 31
		/// </summary>
		Missing_Product_Default_UOM = 31,
		/// <summary>
		/// Missing Product UOM Schedule  = 32
		/// </summary>
		Missing_Product_UOM_Schedule = 32,
		/// <summary>
		/// Missing Quantity = 4
		/// </summary>
		Missing_Quantity = 4,
		/// <summary>
		/// Missing Standard Cost = 16
		/// </summary>
		Missing_Standard_Cost = 16,
		/// <summary>
		/// Missing Unit Price = 5
		/// </summary>
		Missing_Unit_Price = 5,
		/// <summary>
		/// Missing UOM = 10
		/// </summary>
		Missing_UOM = 10,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Price Attribute Out Of Range = 35
		/// </summary>
		Price_Attribute_Out_Of_Range = 35,
		/// <summary>
		/// Price Calculation Error = 25
		/// </summary>
		Price_Calculation_Error = 25,
		/// <summary>
		/// Product Not In Price Level = 11
		/// </summary>
		Product_Not_In_Price_Level = 11,
		/// <summary>
		/// Transaction currency is not set for the product price list item = 38
		/// </summary>
		Transaction_currency_is_not_set_for_the_product_price_list_item = 38
	}

	public enum PriorityCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum ShippingMethodCode
	{
		/// <summary>
		/// Airborne = 1
		/// </summary>
		Airborne = 1,
		/// <summary>
		/// DHL = 2
		/// </summary>
		DHL = 2,
		/// <summary>
		/// FedEx = 3
		/// </summary>
		FedEx = 3,
		/// <summary>
		/// Full Load = 6
		/// </summary>
		Full_Load = 6,
		/// <summary>
		/// Postal Mail = 5
		/// </summary>
		Postal_Mail = 5,
		/// <summary>
		/// UPS = 4
		/// </summary>
		UPS = 4,
		/// <summary>
		/// Will Call = 7
		/// </summary>
		Will_Call = 7
	}

	public enum ShipTo_FreightTermsCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum SkipPriceCalculation
	{
		/// <summary>
		/// DoPriceCalcAlways = 0
		/// </summary>
		DoPriceCalcAlways = 0,
		/// <summary>
		/// SkipPriceCalcOnRetrieve = 1
		/// </summary>
		SkipPriceCalcOnRetrieve = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Canceled = 2
		/// </summary>
		Canceled = 2,
		/// <summary>
		/// Fulfilled = 3
		/// </summary>
		Fulfilled = 3,
		/// <summary>
		/// Invoiced = 4
		/// </summary>
		Invoiced = 4,
		/// <summary>
		/// Submitted = 1
		/// </summary>
		Submitted = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Complete = 100001
		/// </summary>
		Complete = 100001,
		/// <summary>
		/// In Progress = 3
		/// </summary>
		In_Progress = 3,
		/// <summary>
		/// Invoiced = 100003
		/// </summary>
		Invoiced = 100003,
		/// <summary>
		/// New = 1
		/// </summary>
		New = 1,
		/// <summary>
		/// No Money = 4
		/// </summary>
		No_Money = 4,
		/// <summary>
		/// On hold = 690970000
		/// </summary>
		On_hold = 690970000,
		/// <summary>
		/// Partial = 100002
		/// </summary>
		Partial = 100002,
		/// <summary>
		/// Pending = 2
		/// </summary>
		Pending = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SalesOrder : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string BillTo_AddressId = "billto_addressid";
			public const string BillTo_City = "billto_city";
			public const string BillTo_Composite = "billto_composite";
			public const string BillTo_ContactName = "billto_contactname";
			public const string BillTo_Country = "billto_country";
			public const string BillTo_Fax = "billto_fax";
			public const string BillTo_Line1 = "billto_line1";
			public const string BillTo_Line2 = "billto_line2";
			public const string BillTo_Line3 = "billto_line3";
			public const string BillTo_Name = "billto_name";
			public const string BillTo_PostalCode = "billto_postalcode";
			public const string BillTo_StateOrProvince = "billto_stateorprovince";
			public const string BillTo_Telephone = "billto_telephone";
			public const string CampaignId = "campaignid";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string DateFulfilled = "datefulfilled";
			public const string Description = "description";
			public const string DiscountAmount = "discountamount";
			public const string DiscountAmount_Base = "discountamount_base";
			public const string DiscountPercentage = "discountpercentage";
			public const string EmailAddress = "emailaddress";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FreightAmount = "freightamount";
			public const string FreightAmount_Base = "freightamount_base";
			public const string FreightTermsCode = "freighttermscode";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsPriceLocked = "ispricelocked";
			public const string LastBackofficeSubmit = "lastbackofficesubmit";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Account = "msdyn_account";
			public const string msdyn_AccountManagerId = "msdyn_accountmanagerid";
			public const string msdyn_ContractOrganizationalUnitId = "msdyn_contractorganizationalunitid";
			public const string msdyn_ordertype = "msdyn_ordertype";
			public const string msdyn_ProcessStartedOn = "msdyn_processstartedon";
			public const string msdyn_PSAState = "msdyn_psastate";
			public const string msdyn_PSAStatusReason = "msdyn_psastatusreason";
			public const string msdyn_TotalChargeableCostRollup = "msdyn_totalchargeablecostrollup";
			public const string msdyn_totalchargeablecostrollup_Base = "msdyn_totalchargeablecostrollup_base";
			public const string msdyn_TotalChargeableCostRollup_Date = "msdyn_totalchargeablecostrollup_date";
			public const string msdyn_TotalChargeableCostRollup_State = "msdyn_totalchargeablecostrollup_state";
			public const string msdyn_TotalNonchargeableCostRollup = "msdyn_totalnonchargeablecostrollup";
			public const string msdyn_totalnonchargeablecostrollup_Base = "msdyn_totalnonchargeablecostrollup_base";
			public const string msdyn_TotalNonchargeableCostRollup_Date = "msdyn_totalnonchargeablecostrollup_date";
			public const string msdyn_TotalNonchargeableCostRollup_State = "msdyn_totalnonchargeablecostrollup_state";
			public const string Name = "name";
			public const string OnHoldTime = "onholdtime";
			public const string OpportunityId = "opportunityid";
			public const string OrderNumber = "ordernumber";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PaymentTermsCode = "paymenttermscode";
			public const string PriceLevelId = "pricelevelid";
			public const string PricingErrorCode = "pricingerrorcode";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string QuoteId = "quoteid";
			public const string RequestDeliveryBy = "requestdeliveryby";
			public const string SalesOrderId = "salesorderid";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string ShipTo_AddressId = "shipto_addressid";
			public const string ShipTo_City = "shipto_city";
			public const string ShipTo_Composite = "shipto_composite";
			public const string ShipTo_ContactName = "shipto_contactname";
			public const string ShipTo_Country = "shipto_country";
			public const string ShipTo_Fax = "shipto_fax";
			public const string ShipTo_FreightTermsCode = "shipto_freighttermscode";
			public const string ShipTo_Line1 = "shipto_line1";
			public const string ShipTo_Line2 = "shipto_line2";
			public const string ShipTo_Line3 = "shipto_line3";
			public const string ShipTo_Name = "shipto_name";
			public const string ShipTo_PostalCode = "shipto_postalcode";
			public const string ShipTo_StateOrProvince = "shipto_stateorprovince";
			public const string ShipTo_Telephone = "shipto_telephone";
			public const string SkipPriceCalculation = "skippricecalculation";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubmitDate = "submitdate";
			public const string SubmitStatus = "submitstatus";
			public const string SubmitStatusDescription = "submitstatusdescription";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalAmount = "totalamount";
			public const string TotalAmount_Base = "totalamount_base";
			public const string TotalAmountLessFreight = "totalamountlessfreight";
			public const string TotalAmountLessFreight_Base = "totalamountlessfreight_base";
			public const string TotalDiscountAmount = "totaldiscountamount";
			public const string TotalDiscountAmount_Base = "totaldiscountamount_base";
			public const string TotalLineItemAmount = "totallineitemamount";
			public const string TotalLineItemAmount_Base = "totallineitemamount_base";
			public const string TotalLineItemDiscountAmount = "totallineitemdiscountamount";
			public const string TotalLineItemDiscountAmount_Base = "totallineitemdiscountamount_base";
			public const string TotalTax = "totaltax";
			public const string TotalTax_Base = "totaltax_base";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WillCall = "willcall";
		}

		public const string EntityLogicalName = "salesorder";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1088;

		[DebuggerNonUserCode()]
		public SalesOrder()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesOrder(Guid SalesOrderId)
		{
			Entity = new Entity(EntityLogicalName, SalesOrderId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesOrder(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesOrder(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesOrder(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SalesOrder(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the parent account related to the record. This information is used to link the sales order to the account selected in the Customer field for reporting and analytics.</para>
		/// <para>ReadOnly - Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}

		/// <summary>
		/// <para>Unique identifier of the billing address.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Bill To Address ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BillTo_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BillTo_AddressId); }
			set { Entity.Attributes[Fields.BillTo_AddressId] = value; }
		}

		/// <summary>
		/// <para>Type the city for the customer&apos;s billing address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Bill To City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_City); }
			set { Entity.Attributes[Fields.BillTo_City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete Bill To address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Bill To Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Composite); }
		}

		/// <summary>
		/// <para>Type the primary contact name at the customer&apos;s billing address.</para>
		/// <para>String - MaxLength: 150</para>
		/// <para>Bill To Contact Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_ContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_ContactName); }
			set { Entity.Attributes[Fields.BillTo_ContactName] = value; }
		}

		/// <summary>
		/// <para>Type the country or region for the customer&apos;s billing address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Bill To Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Country); }
			set { Entity.Attributes[Fields.BillTo_Country] = value; }
		}

		/// <summary>
		/// <para>Type the fax number for the customer&apos;s billing address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Bill To Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Fax); }
			set { Entity.Attributes[Fields.BillTo_Fax] = value; }
		}

		/// <summary>
		/// <para>Type the first line of the customer&apos;s billing address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Bill To Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Line1); }
			set { Entity.Attributes[Fields.BillTo_Line1] = value; }
		}

		/// <summary>
		/// <para>Type the second line of the customer&apos;s billing address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Bill To Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Line2); }
			set { Entity.Attributes[Fields.BillTo_Line2] = value; }
		}

		/// <summary>
		/// <para>Type the third line of the billing address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Bill To Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Line3); }
			set { Entity.Attributes[Fields.BillTo_Line3] = value; }
		}

		/// <summary>
		/// <para>Type a name for the customer&apos;s billing address, such as &quot;Headquarters&quot; or &quot;Field office&quot;, to identify the address.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Bill To Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Name); }
			set { Entity.Attributes[Fields.BillTo_Name] = value; }
		}

		/// <summary>
		/// <para>Type the ZIP Code or postal code for the billing address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Bill To ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_PostalCode); }
			set { Entity.Attributes[Fields.BillTo_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Type the state or province for the billing address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Bill To State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_StateOrProvince); }
			set { Entity.Attributes[Fields.BillTo_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Type the phone number for the customer&apos;s billing address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Bill To Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Telephone
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Telephone); }
			set { Entity.Attributes[Fields.BillTo_Telephone] = value; }
		}

		/// <summary>
		/// <para>Shows the campaign that the order was created from.</para>
		/// <para>Lookup to campaign</para>
		/// <para>Source Campaign</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CampaignId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CampaignId); }
			set { Entity.Attributes[Fields.CampaignId] = value; }
		}

		/// <summary>
		/// <para>Shows the parent contact related to the record. This information is used to link the contract to the contact selected in the Customer field for reporting and analytics.</para>
		/// <para>ReadOnly - Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
		/// <para>Required - Lookup to account, contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}

		/// <summary>
		/// <para>Enter the date that all or part of the order was shipped to the customer.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date Fulfilled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DateFulfilledUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DateFulfilled); }
			set { Entity.Attributes[Fields.DateFulfilled] = value; }
		}

		/// <summary>
		/// <para>Type additional information to describe the order, such as the products or services offered or details about the customer&apos;s product preferences.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Type the discount amount for the order if the customer is eligible for special savings.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Order Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.DiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.DiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Order Discount Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Order Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.DiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Type the discount rate that should be applied to the Detail Amount field to include additional savings for the customer in the order.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100</para>
		/// <para>Order Discount (%)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountPercentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.DiscountPercentage); }
			set { Entity.Attributes[Fields.DiscountPercentage] = value; }
		}

		/// <summary>
		/// <para>The primary email address for the entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Type the cost of freight or shipping for the products included in the order for use in calculating the Total Amount field.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Freight Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? FreightAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.FreightAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.FreightAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Freight Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Freight Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? FreightAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.FreightAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select the freight terms to make sure shipping charges are processed correctly.</para>
		/// <para>Picklist</para>
		/// <para>Freight Terms</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.FreightTermsCode? FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FreightTermsCode] = null;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Select whether prices specified on the invoice are locked from any further updates.</para>
		/// <para>Required - Boolean</para>
		/// <para>Prices Locked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPriceLocked
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPriceLocked); }
			set { Entity.Attributes[Fields.IsPriceLocked] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time when the order was last submitted to an accounting or ERP system for processing.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Last Submitted to Back Office</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastBackofficeSubmitUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastBackofficeSubmit); }
			set { Entity.Attributes[Fields.LastBackofficeSubmit] = value; }
		}

		/// <summary>
		/// <para>Contains the date time stamp of the last on hold time.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last On Hold Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Customer Account associated with this Order</para>
		/// <para>Lookup to account</para>
		/// <para>Potential Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Account
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Account); }
			set { Entity.Attributes[Fields.msdyn_Account] = value; }
		}

		/// <summary>
		/// <para>User responsible for managing the account referenced by this contract.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Account Manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AccountManagerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AccountManagerId); }
			set { Entity.Attributes[Fields.msdyn_AccountManagerId] = value; }
		}

		/// <summary>
		/// <para>Organizational unit responsible for this contract.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Contracting Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContractOrganizationalUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContractOrganizationalUnitId); }
			set { Entity.Attributes[Fields.msdyn_ContractOrganizationalUnitId] = value; }
		}

		/// <summary>
		/// <para>Internal use only</para>
		/// <para>Picklist</para>
		/// <para>Order Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_ordertype? msdyn_ordertype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ordertype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_ordertype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ordertype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ordertype] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Process Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ProcessStartedOn
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ProcessStartedOn); }
			set { Entity.Attributes[Fields.msdyn_ProcessStartedOn] = value; }
		}

		/// <summary>
		/// <para>Shows the current state of the project contract.</para>
		/// <para>Required - Picklist</para>
		/// <para>Contract Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_PSAState? msdyn_PSAState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_PSAState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_PSAState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PSAState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_PSAState] = null;
			}
		}

		/// <summary>
		/// <para>Shows the reason for the project contract status.</para>
		/// <para>Required - Picklist</para>
		/// <para>Contract Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_PSAStatusReason? msdyn_PSAStatusReason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_PSAStatusReason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_PSAStatusReason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PSAStatusReason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_PSAStatusReason] = null;
			}
		}

		/// <summary>
		/// <para>Value of the estimated chargeable cost.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Chargeable Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalChargeableCostRollup
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalChargeableCostRollup);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Total Chargeable Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Chargeable Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalchargeablecostrollup_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalchargeablecostrollup_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Last Updated time of rollup field Total Chargeable Cost.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Total Chargeable Cost (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TotalChargeableCostRollup_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TotalChargeableCostRollup_Date); }
		}

		/// <summary>
		/// <para>State of rollup field Total Chargeable Cost.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Total Chargeable Cost (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalChargeableCostRollup_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalChargeableCostRollup_State); }
		}

		/// <summary>
		/// <para>Total estimated cost that will not be charged to the customer.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Non-chargeable Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalNonchargeableCostRollup
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalNonchargeableCostRollup);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Total Non-chargeable Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Non-chargeable Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalnonchargeablecostrollup_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalnonchargeablecostrollup_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Last Updated time of rollup field Total Non-chargeable Cost.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Total Non-chargeable Cost (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TotalNonchargeableCostRollup_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TotalNonchargeableCostRollup_Date); }
		}

		/// <summary>
		/// <para>State of rollup field Total Non-chargeable Cost.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Total Non-chargeable Cost (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalNonchargeableCostRollup_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalNonchargeableCostRollup_State); }
		}

		/// <summary>
		/// <para>Type a descriptive name for the order.</para>
		/// <para>Required - String - MaxLength: 300</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Shows the duration in minutes for which the order was on hold.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>On Hold Time (Minutes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}

		/// <summary>
		/// <para>Choose the related opportunity so that the data for the order and opportunity are linked for reporting and analytics.</para>
		/// <para>Lookup to opportunity</para>
		/// <para>Opportunity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OpportunityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OpportunityId); }
			set { Entity.Attributes[Fields.OpportunityId] = value; }
		}

		/// <summary>
		/// <para>Shows the order number for customer reference and to use in search. The number cannot be modified.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Order ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OrderNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.OrderNumber); }
			set { Entity.Attributes[Fields.OrderNumber] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
		/// <para>Picklist</para>
		/// <para>Payment Terms</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PaymentTermsCode? PaymentTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PaymentTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PaymentTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PaymentTermsCode] = null;
			}
		}

		/// <summary>
		/// <para>Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
		/// <para>Required - Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PriceLevelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PriceLevelId); }
			set { Entity.Attributes[Fields.PriceLevelId] = value; }
		}

		/// <summary>
		/// <para>Select the type of pricing error, such as a missing or invalid product, or missing quantity.</para>
		/// <para>Picklist</para>
		/// <para>Pricing Error</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PricingErrorCode? PricingErrorCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PricingErrorCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PricingErrorCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricingErrorCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PricingErrorCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para>Picklist</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Choose the related quote so that order data and quote data are linked for reporting and analytics.</para>
		/// <para>Lookup to quote</para>
		/// <para>Quote</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QuoteId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QuoteId); }
			set { Entity.Attributes[Fields.QuoteId] = value; }
		}

		/// <summary>
		/// <para>Enter the delivery date requested by the customer for all products in the order.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Requested Delivery Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? RequestDeliveryByUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.RequestDeliveryBy); }
			set { Entity.Attributes[Fields.RequestDeliveryBy] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the order.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SalesOrderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SalesOrderId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select a shipping method for deliveries sent to this address.</para>
		/// <para>Picklist</para>
		/// <para>Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the shipping address.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Ship To Address ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ShipTo_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ShipTo_AddressId); }
			set { Entity.Attributes[Fields.ShipTo_AddressId] = value; }
		}

		/// <summary>
		/// <para>Type the city for the customer&apos;s shipping address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Ship To City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_City); }
			set { Entity.Attributes[Fields.ShipTo_City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete Ship To address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Ship To Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Composite); }
		}

		/// <summary>
		/// <para>Type the primary contact name at the customer&apos;s shipping address.</para>
		/// <para>String - MaxLength: 150</para>
		/// <para>Ship To Contact Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_ContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_ContactName); }
			set { Entity.Attributes[Fields.ShipTo_ContactName] = value; }
		}

		/// <summary>
		/// <para>Type the country or region for the customer&apos;s shipping address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Ship To Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Country); }
			set { Entity.Attributes[Fields.ShipTo_Country] = value; }
		}

		/// <summary>
		/// <para>Type the fax number for the customer&apos;s shipping address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Ship to Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Fax); }
			set { Entity.Attributes[Fields.ShipTo_Fax] = value; }
		}

		/// <summary>
		/// <para>Select the freight terms to make sure shipping orders are processed correctly.</para>
		/// <para>Picklist</para>
		/// <para>Ship To Freight Terms</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShipTo_FreightTermsCode? ShipTo_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShipTo_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShipTo_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShipTo_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShipTo_FreightTermsCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the first line of the customer&apos;s shipping address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Ship To Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Line1); }
			set { Entity.Attributes[Fields.ShipTo_Line1] = value; }
		}

		/// <summary>
		/// <para>Type the second line of the customer&apos;s shipping address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Ship To Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Line2); }
			set { Entity.Attributes[Fields.ShipTo_Line2] = value; }
		}

		/// <summary>
		/// <para>Type the third line of the shipping address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Ship To Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Line3); }
			set { Entity.Attributes[Fields.ShipTo_Line3] = value; }
		}

		/// <summary>
		/// <para>Type a name for the customer&apos;s shipping address, such as &quot;Headquarters&quot; or &quot;Field office&quot;,  to identify the address.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Ship To Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Name); }
			set { Entity.Attributes[Fields.ShipTo_Name] = value; }
		}

		/// <summary>
		/// <para>Type the ZIP Code or postal code for the shipping address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Ship To ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_PostalCode); }
			set { Entity.Attributes[Fields.ShipTo_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Type the state or province for the shipping address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Ship To State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_StateOrProvince); }
			set { Entity.Attributes[Fields.ShipTo_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Type the phone number for the customer&apos;s shipping address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Ship To Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Telephone
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Telephone); }
			set { Entity.Attributes[Fields.ShipTo_Telephone] = value; }
		}

		/// <summary>
		/// <para>Skip Price Calculation</para>
		/// <para>Picklist</para>
		/// <para>Skip Price Calculation (For Internal Use)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.SkipPriceCalculation? SkipPriceCalculation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SkipPriceCalculation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.SkipPriceCalculation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SkipPriceCalculation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SkipPriceCalculation] = null;
			}
		}

		/// <summary>
		/// <para>Choose the service level agreement (SLA) that you want to apply to the sales order record.</para>
		/// <para>Lookup to sla</para>
		/// <para>SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}

		/// <summary>
		/// <para>Last SLA that was applied to this sales order. This field is for internal use only.</para>
		/// <para>ReadOnly - Lookup to sla</para>
		/// <para>Last SLA applied</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Shows whether the order is active, submitted, fulfilled, canceled, or invoiced. Only active orders can be edited.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the order&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Enter the date when the order was submitted to the fulfillment or shipping center.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date Submitted</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SubmitDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SubmitDate); }
			set { Entity.Attributes[Fields.SubmitDate] = value; }
		}

		/// <summary>
		/// <para>Type the code for the submitted status in the fulfillment or shipping center system.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Submitted Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SubmitStatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SubmitStatus); }
			set { Entity.Attributes[Fields.SubmitStatus] = value; }
		}

		/// <summary>
		/// <para>Type additional details or notes about the order for the fulfillment or shipping center.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Submitted Status Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SubmitStatusDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.SubmitStatusDescription); }
			set { Entity.Attributes[Fields.SubmitStatusDescription] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the order.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total product amount for the order, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount due for the order.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Pre-Freight Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmountLessFreight
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmountLessFreight);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalAmountLessFreight] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalAmountLessFreight] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Pre-Freight Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Pre-Freight Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmountLessFreight_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmountLessFreight_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total discount amount, based on the discount price and rate entered on the order.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalDiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Discount Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the sum of all existing and write-in products included on the order, based on the specified price list and quantities.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Detail Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalLineItemAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalLineItemAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Detail Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Detail Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total of the Manual Discount amounts specified on all products included in the order. This value is reflected in the Detail Amount field on the order and is added to any discount amount or rate specified on the order.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Line Item Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalLineItemDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalLineItemDiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Line Item Discount Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Line Item Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the Tax amounts specified on all products included in the order, included in the Total Amount due calculation for the order.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Tax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalTax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalTax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalTax] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Tax in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Tax (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalTax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Select whether the products included in the order should be shipped to the specified address or held until the customer calls with further pick-up or delivery instructions.</para>
		/// <para>Boolean</para>
		/// <para>Ship To</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? WillCall
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.WillCall); }
			set { Entity.Attributes[Fields.WillCall] = value; }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
