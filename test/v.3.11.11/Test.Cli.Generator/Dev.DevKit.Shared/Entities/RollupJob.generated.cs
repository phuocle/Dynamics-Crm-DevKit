//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.RollupJobOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// Completed = 3
		/// </summary>
		Completed = 3,
		/// <summary>
		/// Locked = 2
		/// </summary>
		Locked = 2,
		/// <summary>
		/// Ready = 0
		/// </summary>
		Ready = 0,
		/// <summary>
		/// Suspended = 1
		/// </summary>
		Suspended = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Canceled = 32
		/// </summary>
		Canceled = 32,
		/// <summary>
		/// Canceling = 22
		/// </summary>
		Canceling = 22,
		/// <summary>
		/// Failed = 31
		/// </summary>
		Failed = 31,
		/// <summary>
		/// In Progress = 20
		/// </summary>
		In_Progress = 20,
		/// <summary>
		/// Pausing = 21
		/// </summary>
		Pausing = 21,
		/// <summary>
		/// Succeeded = 30
		/// </summary>
		Succeeded = 30,
		/// <summary>
		/// Waiting = 10
		/// </summary>
		Waiting = 10,
		/// <summary>
		/// Waiting For Resources = 0
		/// </summary>
		Waiting_For_Resources = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RollupJob : EntityBase
	{
		public struct Fields
		{
			public const string DepthProcessed = "depthprocessed";
			public const string PostponeUntil = "postponeuntil";
			public const string RecordCreatedOn = "recordcreatedon";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RetryCount = "retrycount";
			public const string RollupJobId = "rollupjobid";
			public const string RollupPropertiesId = "rolluppropertiesid";
			public const string SourceEntityTypeCode = "sourceentitytypecode";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
		}

		public const string EntityLogicalName = "rollupjob";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9511;

		[DebuggerNonUserCode()]
		public RollupJob()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupJob(Guid RollupJobId)
		{
			Entity = new Entity(EntityLogicalName, RollupJobId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupJob(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupJob(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupJob(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RollupJob(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DepthProcessed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DepthProcessed); }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeUntil); }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? RecordCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.RecordCreatedOn); }
		}

		/// <summary>
		/// <para>ReadOnly - Lookup to </para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
		}

		/// <summary>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RetryCount); }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RollupJobId1
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RollupJobId); }
		}

		/// <summary>
		/// <para>ReadOnly - Lookup to rollupproperties</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollupPropertiesId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollupPropertiesId); }
		}

		/// <summary>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SourceEntityTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SourceEntityTypeCode); }
		}

		/// <summary>
		/// <para>ReadOnly - State</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupJobOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupJobOptionSets.StateCode)value.Value;
			}
		}

		/// <summary>
		/// <para>ReadOnly - Status</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupJobOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupJobOptionSets.StatusCode)value.Value;
			}
		}
	}
}
