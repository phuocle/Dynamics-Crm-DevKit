//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.LanguageProvisioningStateOptionSets
{
	public enum ProvisioningStage
	{
		/// <summary>
		/// FileBased = 1
		/// </summary>
		FileBased = 1,
		/// <summary>
		/// MetadataHelperDependent = 2
		/// </summary>
		MetadataHelperDependent = 2,
		/// <summary>
		/// Other = 4
		/// </summary>
		Other = 4,
		/// <summary>
		/// Ribbon = 5
		/// </summary>
		Ribbon = 5,
		/// <summary>
		/// SystemOnly = 3
		/// </summary>
		SystemOnly = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class LanguageProvisioningState : EntityBase
	{
		public struct Fields
		{
			public const string ApplicationVersion = "applicationversion";
			public const string LanguageId = "languageid";
			public const string LanguageProvisioningStateId = "languageprovisioningstateid";
			public const string ProvisioningStage = "provisioningstage";
			public const string SolutionFileVersion = "solutionfileversion";
			public const string SolutionUniqueName = "solutionuniquename";
		}

		public const string EntityLogicalName = "languageprovisioningstate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9875;

		[DebuggerNonUserCode()]
		public LanguageProvisioningState()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageProvisioningState(Guid LanguageProvisioningStateId)
		{
			Entity = new Entity(EntityLogicalName, LanguageProvisioningStateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageProvisioningState(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageProvisioningState(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageProvisioningState(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageProvisioningState(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Application Version</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Application Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicationVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicationVersion); }
			set { Entity.Attributes[Fields.ApplicationVersion] = value; }
		}

		/// <summary>
		/// <para>Language Id</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 100,000</para>
		/// <para>Language Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageId); }
			set { Entity.Attributes[Fields.LanguageId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Language Provisioning State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid LanguageProvisioningStateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.LanguageProvisioningStateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Provisioning Stage</para>
		/// <para>Picklist</para>
		/// <para>Provisioning Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LanguageProvisioningStateOptionSets.ProvisioningStage? ProvisioningStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProvisioningStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LanguageProvisioningStateOptionSets.ProvisioningStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProvisioningStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProvisioningStage] = null;
			}
		}

		/// <summary>
		/// <para>Solution File Version</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Solution File Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionFileVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionFileVersion); }
			set { Entity.Attributes[Fields.SolutionFileVersion] = value; }
		}

		/// <summary>
		/// <para>Solution Unique Name</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Solution Unique Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionUniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionUniqueName); }
			set { Entity.Attributes[Fields.SolutionUniqueName] = value; }
		}
	}
}
