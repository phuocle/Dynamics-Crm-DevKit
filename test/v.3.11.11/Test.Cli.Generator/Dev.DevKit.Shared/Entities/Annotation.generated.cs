//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.AnnotationOptionSets
{
	public enum ObjectTypeCode
	{
		/// <summary>
		/// Account = 1
		/// </summary>
		Account = 1,
		/// <summary>
		/// Appointment = 4201
		/// </summary>
		Appointment = 4201,
		/// <summary>
		/// Bulk Import = 4407
		/// </summary>
		Bulk_Import = 4407,
		/// <summary>
		/// Calendar = 4003
		/// </summary>
		Calendar = 4003,
		/// <summary>
		/// Campaign = 4400
		/// </summary>
		Campaign = 4400,
		/// <summary>
		/// Campaign Activity = 4402
		/// </summary>
		Campaign_Activity = 4402,
		/// <summary>
		/// Campaign Response = 4401
		/// </summary>
		Campaign_Response = 4401,
		/// <summary>
		/// Case = 112
		/// </summary>
		Case = 112,
		/// <summary>
		/// Case Resolution = 4206
		/// </summary>
		Case_Resolution = 4206,
		/// <summary>
		/// Commitment = 4215
		/// </summary>
		Commitment = 4215,
		/// <summary>
		/// Competitor = 123
		/// </summary>
		Competitor = 123,
		/// <summary>
		/// Contact = 2
		/// </summary>
		Contact = 2,
		/// <summary>
		/// Contract = 1010
		/// </summary>
		Contract = 1010,
		/// <summary>
		/// Contract Line = 1011
		/// </summary>
		Contract_Line = 1011,
		/// <summary>
		/// Email = 4202
		/// </summary>
		Email = 4202,
		/// <summary>
		/// Facility/Equipment = 4000
		/// </summary>
		FacilityEquipment = 4000,
		/// <summary>
		/// Fax = 4204
		/// </summary>
		Fax = 4204,
		/// <summary>
		/// Invoice = 1090
		/// </summary>
		Invoice = 1090,
		/// <summary>
		/// Lead = 4
		/// </summary>
		Lead = 4,
		/// <summary>
		/// Letter = 4207
		/// </summary>
		Letter = 4207,
		/// <summary>
		/// Marketing List = 4300
		/// </summary>
		Marketing_List = 4300,
		/// <summary>
		/// Opportunity = 3
		/// </summary>
		Opportunity = 3,
		/// <summary>
		/// Opportunity Close = 4208
		/// </summary>
		Opportunity_Close = 4208,
		/// <summary>
		/// Order = 1088
		/// </summary>
		Order = 1088,
		/// <summary>
		/// Order Close = 4209
		/// </summary>
		Order_Close = 4209,
		/// <summary>
		/// Phone Call = 4210
		/// </summary>
		Phone_Call = 4210,
		/// <summary>
		/// Product = 1024
		/// </summary>
		Product = 1024,
		/// <summary>
		/// Quote = 1084
		/// </summary>
		Quote = 1084,
		/// <summary>
		/// Quote Close = 4211
		/// </summary>
		Quote_Close = 4211,
		/// <summary>
		/// Resource Specification = 4006
		/// </summary>
		Resource_Specification = 4006,
		/// <summary>
		/// Routing Rule = 8181
		/// </summary>
		Routing_Rule = 8181,
		/// <summary>
		/// Routing Rule Item = 8199
		/// </summary>
		Routing_Rule_Item = 8199,
		/// <summary>
		/// Service = 4001
		/// </summary>
		Service = 4001,
		/// <summary>
		/// Service Activity = 4214
		/// </summary>
		Service_Activity = 4214,
		/// <summary>
		/// Task = 4212
		/// </summary>
		Task = 4212
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Annotation : EntityBase
	{
		public struct Fields
		{
			public const string AnnotationId = "annotationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DocumentBody = "documentbody";
			[System.Obsolete("Deprecated from version: 9.1.0.0")]
			public const string DummyFileName = "dummyfilename";
			[System.Obsolete("Deprecated from version: 9.1.0.0")]
			public const string DummyRegarding = "dummyregarding";
			public const string FileName = "filename";
			public const string FilePointer = "filepointer";
			public const string FileSize = "filesize";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDocument = "isdocument";
			public const string IsPrivate = "isprivate";
			public const string LangId = "langid";
			public const string MimeType = "mimetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string NoteText = "notetext";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Prefix = "prefix";
			public const string StepId = "stepid";
			public const string StoragePointer = "storagepointer";
			public const string Subject = "subject";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "annotation";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 5;

		[DebuggerNonUserCode()]
		public Annotation()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(Guid AnnotationId)
		{
			Entity = new Entity(EntityLogicalName, AnnotationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the note.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Note</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AnnotationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AnnotationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the note.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the note was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the annotation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Contents of the note&apos;s attachment.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Document</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentBody
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentBody); }
			set { Entity.Attributes[Fields.DocumentBody] = value; }
		}

		/// <summary>
		/// <para>Dummy attribute associated with the note attachment</para>
		/// <para>ReadOnly - String - MaxLength: 500</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.1.0.0")]
		public string DummyFileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DummyFileName); }
		}

		/// <summary>
		/// <para>Dummy attribute associated with the note regarding</para>
		/// <para>ReadOnly - String - MaxLength: 500</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.1.0.0")]
		public string DummyRegarding
		{
			get { return Entity.GetAttributeValue<string>(Fields.DummyRegarding); }
		}

		/// <summary>
		/// <para>File name of the note.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}

		/// <summary>
		/// <para>File pointer of the attachment.</para>
		/// <para>ReadOnly - String - MaxLength: 255</para>
		/// <para>File Pointer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FilePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.FilePointer); }
		}

		/// <summary>
		/// <para>File size of the note.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>File Size (Bytes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Specifies whether the note is an attachment.</para>
		/// <para>Boolean</para>
		/// <para>Is Document</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDocument
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDocument); }
			set { Entity.Attributes[Fields.IsDocument] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}

		/// <summary>
		/// <para>Language identifier for the note.</para>
		/// <para>String - MaxLength: 2</para>
		/// <para>Language ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LangId
		{
			get { return Entity.GetAttributeValue<string>(Fields.LangId); }
			set { Entity.Attributes[Fields.LangId] = value; }
		}

		/// <summary>
		/// <para>MIME type of the note&apos;s attachment.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Mime Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the note.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the note was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the annotation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Text of the note.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NoteText
		{
			get { return Entity.GetAttributeValue<string>(Fields.NoteText); }
			set { Entity.Attributes[Fields.NoteText] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the object with which the note is associated.</para>
		/// <para>Lookup to account, appointment, bookableresource, bookableresourcebooking, bookableresourcebookingheader, bookableresourcecategoryassn, bookableresourcecharacteristic, bookableresourcegroup, bulkoperation, calendar, campaign, campaignactivity, campaignresponse, channelaccessprofile, channelaccessprofilerule, channelaccessprofileruleitem, chat, commitment, competitor, contact, contract, contractdetail, convertrule, duplicaterule, email, emailserverprofile, entitlement, entitlementchannel, entitlementtemplate, equipment, fax, goal, incident, incidentresolution, invoice, kbarticle, knowledgearticle, knowledgebaserecord, lead, letter, list, mailbox, msdyn_3dmodel, msdyn_accountpricelist, msdyn_actual, msdyn_agreement, msdyn_agreementbookingdate, msdyn_agreementbookingincident, msdyn_agreementbookingproduct, msdyn_agreementbookingservice, msdyn_agreementbookingservicetask, msdyn_agreementbookingsetup, msdyn_agreementinvoicedate, msdyn_agreementinvoiceproduct, msdyn_agreementinvoicesetup, msdyn_agreementsubstatus, msdyn_aifptrainingdocument, msdyn_aimodel, msdyn_aiodimage, msdyn_approval, msdyn_approvalset, msdyn_bookingalert, msdyn_bookingalertstatus, msdyn_bookingjournal, msdyn_bookingrule, msdyn_bookingtimestamp, msdyn_characteristicreqforteammember, msdyn_contactpricelist, msdyn_customerasset, msdyn_dataexport, msdyn_delegation, msdyn_estimate, msdyn_estimateline, msdyn_expense, msdyn_expensecategory, msdyn_expensereceipt, msdyn_fact, msdyn_fieldservicesetting, msdyn_findworkevent, msdyn_incidenttype, msdyn_incidenttypecharacteristic, msdyn_incidenttypeproduct, msdyn_incidenttypeservice, msdyn_incidenttypessetup, msdyn_inspectionattachment, msdyn_inventoryadjustment, msdyn_inventoryadjustmentproduct, msdyn_inventoryjournal, msdyn_inventorytransfer, msdyn_invoicelinetransaction, msdyn_iotalert, msdyn_iotdevice, msdyn_iotdevicecategory, msdyn_iotdevicecommand, msdyn_iotdeviceregistrationhistory, msdyn_journal, msdyn_journalline, msdyn_liveconversation, msdyn_ocflaggedspam, msdyn_ocliveworkitem, msdyn_ocoutboundmessage, msdyn_ocsession, msdyn_opportunitylineresourcecategory, msdyn_opportunitylinetransaction, msdyn_opportunitylinetransactioncategory, msdyn_opportunitylinetransactionclassificatio, msdyn_opportunitypricelist, msdyn_orderlineresourcecategory, msdyn_orderlinetransaction, msdyn_orderlinetransactioncategory, msdyn_orderlinetransactionclassification, msdyn_orderpricelist, msdyn_organizationalunit, msdyn_overflowactionconfig, msdyn_payment, msdyn_paymentdetail, msdyn_paymentmethod, msdyn_paymentterm, msdyn_personalsoundsetting, msdyn_playbookinstance, msdyn_playbooktemplate, msdyn_postalbum, msdyn_postalcode, msdyn_priority, msdyn_processnotes, msdyn_productinventory, msdyn_project, msdyn_projectapproval, msdyn_projectparameter, msdyn_projectparameterpricelist, msdyn_projectpricelist, msdyn_projecttask, msdyn_projecttaskdependency, msdyn_projecttaskstatususer, msdyn_projectteam, msdyn_projectteammembersignup, msdyn_projecttransactioncategory, msdyn_purchaseorder, msdyn_purchaseorderbill, msdyn_purchaseorderproduct, msdyn_purchaseorderreceipt, msdyn_purchaseorderreceiptproduct, msdyn_purchaseordersubstatus, msdyn_quotebookingincident, msdyn_quotebookingproduct, msdyn_quotebookingservice, msdyn_quotebookingservicetask, msdyn_quotelineresourcecategory, msdyn_quotelinetransaction, msdyn_quotelinetransactioncategory, msdyn_quotelinetransactionclassification, msdyn_quotepricelist, msdyn_requirementcharacteristic, msdyn_requirementresourcecategory, msdyn_requirementresourcepreference, msdyn_requirementstatus, msdyn_resourcecategorypricelevel, msdyn_resourcepaytype, msdyn_resourcerequest, msdyn_resourcerequirement, msdyn_resourcerequirementdetail, msdyn_resourceterritory, msdyn_rma, msdyn_rmaproduct, msdyn_rmareceipt, msdyn_rmareceiptproduct, msdyn_rmasubstatus, msdyn_rolecompetencyrequirement, msdyn_rtv, msdyn_rtvproduct, msdyn_rtvsubstatus, msdyn_salessuggestion, msdyn_servicetasktype, msdyn_shipvia, msdyn_soundfile, msdyn_soundnotificationsetting, msdyn_systemuserschedulersetting, msdyn_taxcode, msdyn_taxcodedetail, msdyn_timeentry, msdyn_timegroup, msdyn_timegroupdetail, msdyn_timeoffrequest, msdyn_transactioncategory, msdyn_transactioncategoryclassification, msdyn_transactioncategoryhierarchyelement, msdyn_transactioncategorypricelevel, msdyn_transactionconnection, msdyn_transactionorigin, msdyn_transactiontype, msdyn_transcript, msdyn_warehouse, msdyn_workhourtemplate, msdyn_workorder, msdyn_workordercharacteristic, msdyn_workorderincident, msdyn_workorderproduct, msdyn_workorderresourcerestriction, msdyn_workorderservice, msdyn_workorderservicetask, msdyn_workordersubstatus, msdyusd_agentscriptaction, msdyusd_answer, msdyusd_configuration, msdyusd_customizationfiles, msdyusd_entityassignment, msdyusd_entitysearch, msdyusd_form, msdyusd_languagemodule, msdyusd_scriptlet, msdyusd_scripttasktrigger, msdyusd_search, msdyusd_sessioninformation, msdyusd_task, msdyusd_toolbarbutton, msdyusd_toolbarstrip, msdyusd_tracesourcesetting, msdyusd_uiievent, msdyusd_windowroute, msfp_alert, msfp_question, msfp_surveyinvite, msfp_surveyresponse, opportunity, opportunityclose, orderclose, phonecall, product, quote, quoteclose, recurringappointmentmaster, resourcespec, routingrule, routingruleitem, salesorder, service, serviceappointment, sharepointdocument, sla, socialactivity, task, uii_action, uii_hostedapplication, uii_nonhostedapplication, uii_option, uii_workflow, uii_workflowstep, uii_workflow_workflowstep_mapping, workflow</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>Type of entity with which the note is associated.</para>
		/// <para>EntityName</para>
		/// <para>Object Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the note.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the note.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the note.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the note.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Prefix of the file pointer in blob storage.</para>
		/// <para>ReadOnly - String - MaxLength: 10</para>
		/// <para>Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Prefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.Prefix); }
		}

		/// <summary>
		/// <para>workflow step id associated with the note.</para>
		/// <para>String - MaxLength: 32</para>
		/// <para>Step Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StepId
		{
			get { return Entity.GetAttributeValue<string>(Fields.StepId); }
			set { Entity.Attributes[Fields.StepId] = value; }
		}

		/// <summary>
		/// <para>Storage pointer.</para>
		/// <para>ReadOnly - String - MaxLength: 10</para>
		/// <para>Storage Pointer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StoragePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.StoragePointer); }
		}

		/// <summary>
		/// <para>Subject associated with the note.</para>
		/// <para>Required - String - MaxLength: 500</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}

		/// <summary>
		/// <para>Version number of the note.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
