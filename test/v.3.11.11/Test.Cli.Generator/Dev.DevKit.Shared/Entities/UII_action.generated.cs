//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.UII_actionOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}

	public enum UII_AutomationMode
	{
		/// <summary>
		/// No Automation = 1
		/// </summary>
		No_Automation = 1,
		/// <summary>
		/// Use Workflow Assembly = 2
		/// </summary>
		Use_Workflow_Assembly = 2,
		/// <summary>
		/// Use Workflow XAML = 3
		/// </summary>
		Use_Workflow_XAML = 3
	}

	public enum UII_Method
	{
		/// <summary>
		/// GET = 1
		/// </summary>
		GET = 1,
		/// <summary>
		/// POST = 2
		/// </summary>
		POST = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class UII_action : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyusd_Help = "msdyusd_help";
			public const string msdyusd_UnifiedServiceDeskCreated = "msdyusd_unifiedservicedeskcreated";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UII_actionId = "uii_actionid";
			public const string UII_AutomationMode = "uii_automationmode";
			public const string UII_ExtensionsXML = "uii_extensionsxml";
			public const string uii_hostedapplicationid = "uii_hostedapplicationid";
			public const string UII_isDefault = "uii_isdefault";
			public const string UII_isFocussedApplication = "uii_isfocussedapplication";
			public const string UII_isRunModeAsynchronous = "uii_isrunmodeasynchronous";
			public const string UII_Method = "uii_method";
			public const string UII_name = "uii_name";
			public const string UII_QueryString = "uii_querystring";
			public const string UII_ScriptFilePathtoRun = "uii_scriptfilepathtorun";
			public const string UII_URL = "uii_url";
			public const string UII_WorkflowAssemblyType = "uii_workflowassemblytype";
			public const string UII_WorkflowRules = "uii_workflowrules";
			public const string UII_WorkflowXAML = "uii_workflowxaml";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "uii_action";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10869;

		[DebuggerNonUserCode()]
		public UII_action()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_action(Guid UII_actionId)
		{
			Entity = new Entity(EntityLogicalName, UII_actionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_action(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_action(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_action(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_action(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Help text used to describe action parameters</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Help</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_Help
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_Help); }
			set { Entity.Attributes[Fields.msdyusd_Help] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Unified Service Desk Created</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyusd_UnifiedServiceDeskCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyusd_UnifiedServiceDeskCreated); }
			set { Entity.Attributes[Fields.msdyusd_UnifiedServiceDeskCreated] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the UII Action</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_actionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_actionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the UII Action</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_actionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_actionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>UII Action</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid UII_actionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.UII_actionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Determines the mode of automation for this action</para>
		/// <para>Required - Picklist</para>
		/// <para>Automation Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_actionOptionSets.UII_AutomationMode? UII_AutomationMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UII_AutomationMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_actionOptionSets.UII_AutomationMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UII_AutomationMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UII_AutomationMode] = null;
			}
		}

		/// <summary>
		/// <para>THis attribute captures the additional data in an xml format which can be used by the action.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Extensions XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ExtensionsXML
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ExtensionsXML); }
			set { Entity.Attributes[Fields.UII_ExtensionsXML] = value; }
		}

		/// <summary>
		/// <para>Every Action should be mapped to a Hosted Application. The Hosted Application can have many Actions.</para>
		/// <para>Required - Lookup to uii_hostedapplication</para>
		/// <para>Hosted Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference uii_hostedapplicationid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.uii_hostedapplicationid); }
			set { Entity.Attributes[Fields.uii_hostedapplicationid] = value; }
		}

		/// <summary>
		/// <para>sets whether this action is executed as default action for the hosted application</para>
		/// <para>Boolean</para>
		/// <para>isDefault</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isDefault); }
			set { Entity.Attributes[Fields.UII_isDefault] = value; }
		}

		/// <summary>
		/// <para>Focus the application after the action is completed</para>
		/// <para>Boolean</para>
		/// <para>Focus Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isFocussedApplication
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isFocussedApplication); }
			set { Entity.Attributes[Fields.UII_isFocussedApplication] = value; }
		}

		/// <summary>
		/// <para>Run automation asynchronously to desktop thread</para>
		/// <para>Boolean</para>
		/// <para>Run automation asynchronously to desktop thread</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isRunModeAsynchronous
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isRunModeAsynchronous); }
			set { Entity.Attributes[Fields.UII_isRunModeAsynchronous] = value; }
		}

		/// <summary>
		/// <para>Specify the Method to be used to Navigate</para>
		/// <para>Picklist</para>
		/// <para>Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_actionOptionSets.UII_Method? UII_Method
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UII_Method);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_actionOptionSets.UII_Method)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UII_Method] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UII_Method] = null;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_name); }
			set { Entity.Attributes[Fields.UII_name] = value; }
		}

		/// <summary>
		/// <para>Speify the Query String needs to be added to the URL attribute.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Query String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_QueryString
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_QueryString); }
			set { Entity.Attributes[Fields.UII_QueryString] = value; }
		}

		/// <summary>
		/// <para>Captures the Script path file which will be executed on selection of No Automation mode.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Script File Path to Run</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ScriptFilePathtoRun
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ScriptFilePathtoRun); }
			set { Entity.Attributes[Fields.UII_ScriptFilePathtoRun] = value; }
		}

		/// <summary>
		/// <para>Specify the URL to which the hosted web application should navigate.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_URL
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_URL); }
			set { Entity.Attributes[Fields.UII_URL] = value; }
		}

		/// <summary>
		/// <para>Captures the Workflow Assembly Type. This is required when Workflow Automation mode is selected</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Workflow Assembly Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_WorkflowAssemblyType
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_WorkflowAssemblyType); }
			set { Entity.Attributes[Fields.UII_WorkflowAssemblyType] = value; }
		}

		/// <summary>
		/// <para>When Workflow XAML mode is selected for automation mode, this attribute captures the Rules xml.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Workflow Rules</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_WorkflowRules
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_WorkflowRules); }
			set { Entity.Attributes[Fields.UII_WorkflowRules] = value; }
		}

		/// <summary>
		/// <para>When Workflow XAML mode is selected for automation mode, this attribute captures the XAML code</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Workflow XAML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_WorkflowXAML
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_WorkflowXAML); }
			set { Entity.Attributes[Fields.UII_WorkflowXAML] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
