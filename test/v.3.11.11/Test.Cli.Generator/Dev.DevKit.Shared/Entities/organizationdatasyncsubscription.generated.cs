//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets
{
	public enum BlobPartitionBy
	{
		/// <summary>
		/// Day = 1
		/// </summary>
		Day = 1,
		/// <summary>
		/// Month = 2
		/// </summary>
		Month = 2,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Year = 3
		/// </summary>
		Year = 3
	}

	public enum DataEndpointPostingType
	{
		/// <summary>
		/// DefaultEndpoint = 0
		/// </summary>
		DefaultEndpoint = 0,
		/// <summary>
		/// HTTPS = 2
		/// </summary>
		HTTPS = 2,
		/// <summary>
		/// ServiceBusEventHub = 3
		/// </summary>
		ServiceBusEventHub = 3,
		/// <summary>
		/// ServiceBusTopic = 1
		/// </summary>
		ServiceBusTopic = 1
	}

	public enum DataProcessingType
	{
		/// <summary>
		/// Batch = 2
		/// </summary>
		Batch = 2,
		/// <summary>
		/// Mixed = 3
		/// </summary>
		Mixed = 3,
		/// <summary>
		/// NotificationOnly = 4
		/// </summary>
		NotificationOnly = 4,
		/// <summary>
		/// Streaming = 1
		/// </summary>
		Streaming = 1,
		/// <summary>
		/// Unknown = 0
		/// </summary>
		Unknown = 0
	}

	public enum MigrationState
	{
		/// <summary>
		/// DsfCloudService = 0
		/// </summary>
		DsfCloudService = 0,
		/// <summary>
		/// DsfSdk = 1
		/// </summary>
		DsfSdk = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Activated = 4
		/// </summary>
		Activated = 4,
		/// <summary>
		/// Deactivated = 5
		/// </summary>
		Deactivated = 5,
		/// <summary>
		/// Uninitialized = 3
		/// </summary>
		Uninitialized = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class organizationdatasyncsubscription : EntityBase
	{
		public struct Fields
		{
			public const string AadApplicationId = "aadapplicationid";
			public const string BlobPartitionBy = "blobpartitionby";
			public const string CanSyncAllMetadata = "cansyncallmetadata";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DataEndpointPostingType = "dataendpointpostingtype";
			public const string DataProcessingType = "dataprocessingtype";
			public const string EndpointSettings = "endpointsettings";
			public const string EntityFilters = "entityfilters";
			public const string EntitySettings = "entitysettings";
			public const string FullSyncOnly = "fullsynconly";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsOutOfBoxSubscription = "isoutofboxsubscription";
			public const string MigrationState = "migrationstate";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string NeedCopyAttachmentsToBlob = "needcopyattachmentstoblob";
			public const string NeedToCopyFilesToBlob = "needtocopyfilestoblob";
			public const string NewEntities = "newentities";
			public const string organizationdatasyncsubscriptionId = "organizationdatasyncsubscriptionid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PartnerPrefix = "partnerprefix";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SubscriptionEndpointStatus = "subscriptionendpointstatus";
			public const string SubscriptionEntities = "subscriptionentities";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UnsubscribedEntities = "unsubscribedentities";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "organizationdatasyncsubscription";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10112;

		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(Guid organizationdatasyncsubscriptionId)
		{
			Entity = new Entity(EntityLogicalName, organizationdatasyncsubscriptionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Required - String - MaxLength: 150</para>
		/// <para>AadApplicationId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AadApplicationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.AadApplicationId); }
			set { Entity.Attributes[Fields.AadApplicationId] = value; }
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>BlobPartitionBy</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.BlobPartitionBy? BlobPartitionBy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BlobPartitionBy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.BlobPartitionBy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BlobPartitionBy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BlobPartitionBy] = null;
			}
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>CanSyncAllMetadata</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanSyncAllMetadata
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanSyncAllMetadata); }
			set { Entity.Attributes[Fields.CanSyncAllMetadata] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>DataEndpointPostingType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataEndpointPostingType? DataEndpointPostingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataEndpointPostingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataEndpointPostingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataEndpointPostingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataEndpointPostingType] = null;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>DataProcessingType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataProcessingType? DataProcessingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataProcessingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataProcessingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataProcessingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataProcessingType] = null;
			}
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>EndpointSettings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EndpointSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.EndpointSettings); }
			set { Entity.Attributes[Fields.EndpointSettings] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>EntityFilters</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityFilters
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityFilters); }
			set { Entity.Attributes[Fields.EntityFilters] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 50000</para>
		/// <para>EntitySettings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntitySettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntitySettings); }
			set { Entity.Attributes[Fields.EntitySettings] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>FullSyncOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FullSyncOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FullSyncOnly); }
			set { Entity.Attributes[Fields.FullSyncOnly] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>IsOutOfBoxSubscription</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOutOfBoxSubscription
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOutOfBoxSubscription); }
			set { Entity.Attributes[Fields.IsOutOfBoxSubscription] = value; }
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>MigrationState</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.MigrationState? MigrationState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MigrationState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.MigrationState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MigrationState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MigrationState] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>NeedCopyAttachmentsToBlob</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NeedCopyAttachmentsToBlob
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NeedCopyAttachmentsToBlob); }
			set { Entity.Attributes[Fields.NeedCopyAttachmentsToBlob] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>NeedToCopyFilesToBlob</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NeedToCopyFilesToBlob
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NeedToCopyFilesToBlob); }
			set { Entity.Attributes[Fields.NeedToCopyFilesToBlob] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>NewEntities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NewEntities
		{
			get { return Entity.GetAttributeValue<string>(Fields.NewEntities); }
			set { Entity.Attributes[Fields.NewEntities] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>OrganizationDataSyncSubscription</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid organizationdatasyncsubscriptionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.organizationdatasyncsubscriptionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Required - String - MaxLength: 50</para>
		/// <para>PartnerPrefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartnerPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartnerPrefix); }
			set { Entity.Attributes[Fields.PartnerPrefix] = value; }
		}

		/// <summary>
		/// <para>Status of the OrganizationDataSyncSubscription</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the OrganizationDataSyncSubscription</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 6</para>
		/// <para>SubscriptionEndpointStatus</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SubscriptionEndpointStatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SubscriptionEndpointStatus); }
			set { Entity.Attributes[Fields.SubscriptionEndpointStatus] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>subscriptionentities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SubscriptionEntities
		{
			get { return Entity.GetAttributeValue<string>(Fields.SubscriptionEntities); }
			set { Entity.Attributes[Fields.SubscriptionEntities] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>UnsubscribedEntities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UnsubscribedEntities
		{
			get { return Entity.GetAttributeValue<string>(Fields.UnsubscribedEntities); }
			set { Entity.Attributes[Fields.UnsubscribedEntities] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version number of OrganizationDataSyncSubscription.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
