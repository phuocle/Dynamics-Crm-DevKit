//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.CardTypeOptionSets
{
	public enum ClientAvailability
	{
		/// <summary>
		/// MocaAndWeb = 3
		/// </summary>
		MocaAndWeb = 3,
		/// <summary>
		/// MocaOnly = 2
		/// </summary>
		MocaOnly = 2,
		/// <summary>
		/// WebClientOnly = 1
		/// </summary>
		WebClientOnly = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CardType : EntityBase
	{
		public struct Fields
		{
			public const string Actions = "actions";
			public const string AdaptiveCardTemplate = "adaptivecardtemplate";
			public const string BoolCardOption = "boolcardoption";
			public const string CardName = "cardname";
			public const string CardType = "cardtype";
			public const string CardTypeIcon = "cardtypeicon";
			public const string CardTypeId = "cardtypeid";
			public const string ClientAvailability = "clientavailability";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string GroupCategory = "groupcategory";
			public const string GroupType = "grouptype";
			public const string HasSnoozeDismiss = "hassnoozedismiss";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntCardOption = "intcardoption";
			public const string IsBaseCard = "isbasecard";
			public const string IsEnabled = "isenabled";
			public const string IsLiveOnly = "isliveonly";
			public const string IsPreviewCard = "ispreviewcard";
			public const string LastSyncTime = "lastsynctime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string Priority = "priority";
			public const string PublisherName = "publishername";
			public const string ScheduleTime = "scheduletime";
			public const string SoftTitle = "softtitle";
			public const string StringCardOption = "stringcardoption";
			public const string SummaryText = "summarytext";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "cardtype";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9983;

		[DebuggerNonUserCode()]
		public CardType()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CardType(Guid CardTypeId)
		{
			Entity = new Entity(EntityLogicalName, CardTypeId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CardType(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CardType(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CardType(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CardType(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 8192</para>
		/// <para>CommandBar Actions JSON definition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Actions
		{
			get { return Entity.GetAttributeValue<string>(Fields.Actions); }
			set { Entity.Attributes[Fields.Actions] = value; }
		}

		/// <summary>
		/// <para>AdaptiveCard template.</para>
		/// <para>Memo - MaxLength: 8192</para>
		/// <para>AdaptiveCard template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdaptiveCardTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdaptiveCardTemplate); }
			set { Entity.Attributes[Fields.AdaptiveCardTemplate] = value; }
		}

		/// <summary>
		/// <para>Bolean option for a cardtype.</para>
		/// <para>Boolean</para>
		/// <para>Bolean option for a cardtype.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? BoolCardOption
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.BoolCardOption); }
			set { Entity.Attributes[Fields.BoolCardOption] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>CardName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CardName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CardName); }
			set { Entity.Attributes[Fields.CardName] = value; }
		}

		/// <summary>
		/// <para>The CardType ENUM value.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>CardType ENUM</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CardType1
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CardType); }
			set { Entity.Attributes[Fields.CardType] = value; }
		}

		/// <summary>
		/// <para>The CardTypeIcon of the card.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>CardTypeIcon</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CardTypeIcon
		{
			get { return Entity.GetAttributeValue<string>(Fields.CardTypeIcon); }
			set { Entity.Attributes[Fields.CardTypeIcon] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>CardType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CardTypeId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CardTypeId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Determines on which client is this card available on.</para>
		/// <para>Picklist</para>
		/// <para>Card Client Availability</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CardTypeOptionSets.ClientAvailability? ClientAvailability
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ClientAvailability);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CardTypeOptionSets.ClientAvailability)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ClientAvailability] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ClientAvailability] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the CardType with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>ExchangeRate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>GroupCategory dictates the grouping of cards in the Assistant.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>GroupCategory ENUM</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? GroupCategory
		{
			get { return Entity.GetAttributeValue<int?>(Fields.GroupCategory); }
			set { Entity.Attributes[Fields.GroupCategory] = value; }
		}

		/// <summary>
		/// <para>Specifies the card group type</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>GroupType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupType
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupType); }
			set { Entity.Attributes[Fields.GroupType] = value; }
		}

		/// <summary>
		/// <para>Specifies if the card type has snooze dismiss</para>
		/// <para>Boolean</para>
		/// <para>HasSnoozeDismiss</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? HasSnoozeDismiss
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.HasSnoozeDismiss); }
			set { Entity.Attributes[Fields.HasSnoozeDismiss] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Any int option for a cardtype.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 180</para>
		/// <para>Any int option for a cardtype.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IntCardOption
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IntCardOption); }
			set { Entity.Attributes[Fields.IntCardOption] = value; }
		}

		/// <summary>
		/// <para>IsBaseCard</para>
		/// <para>Boolean</para>
		/// <para>IsBaseCard</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBaseCard
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBaseCard); }
			set { Entity.Attributes[Fields.IsBaseCard] = value; }
		}

		/// <summary>
		/// <para>IsEnabled</para>
		/// <para>Boolean</para>
		/// <para>IsEnabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEnabled); }
			set { Entity.Attributes[Fields.IsEnabled] = value; }
		}

		/// <summary>
		/// <para>IsLiveOnly</para>
		/// <para>Boolean</para>
		/// <para>IsLiveOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLiveOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLiveOnly); }
			set { Entity.Attributes[Fields.IsLiveOnly] = value; }
		}

		/// <summary>
		/// <para>IsPreviewCard</para>
		/// <para>Boolean</para>
		/// <para>IsPreviewCard</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPreviewCard
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPreviewCard); }
			set { Entity.Attributes[Fields.IsPreviewCard] = value; }
		}

		/// <summary>
		/// <para>This column is updated by the Plugin based on the last fetched data.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>LastSyncTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncTime); }
			set { Entity.Attributes[Fields.LastSyncTime] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>The Priority of the CardType</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Priority
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Priority); }
			set { Entity.Attributes[Fields.Priority] = value; }
		}

		/// <summary>
		/// <para>The publisher name of card type</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>PublisherName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PublisherName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PublisherName); }
			set { Entity.Attributes[Fields.PublisherName] = value; }
		}

		/// <summary>
		/// <para>This column is updated by the Plugin based on the last fetched data.</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>ScheduleTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleTime); }
			set { Entity.Attributes[Fields.ScheduleTime] = value; }
		}

		/// <summary>
		/// <para>The soft title of the card.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Soft Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SoftTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.SoftTitle); }
			set { Entity.Attributes[Fields.SoftTitle] = value; }
		}

		/// <summary>
		/// <para>Any string option for a cardtype.</para>
		/// <para>Memo - MaxLength: 8192</para>
		/// <para>Any string option for a cardtype.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StringCardOption
		{
			get { return Entity.GetAttributeValue<string>(Fields.StringCardOption); }
			set { Entity.Attributes[Fields.StringCardOption] = value; }
		}

		/// <summary>
		/// <para>The summary text of the card.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Summary Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SummaryText
		{
			get { return Entity.GetAttributeValue<string>(Fields.SummaryText); }
			set { Entity.Attributes[Fields.SummaryText] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the CardType with respect to the base currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
