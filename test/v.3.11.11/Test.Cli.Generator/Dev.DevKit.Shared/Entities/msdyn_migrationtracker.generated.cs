//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets
{
	public enum msdyn_MigrationStatus
	{
		/// <summary>
		/// In Progress = 0
		/// </summary>
		In_Progress = 0,
		/// <summary>
		/// Incomplete = 2
		/// </summary>
		Incomplete = 2,
		/// <summary>
		/// Migrated = 1
		/// </summary>
		Migrated = 1
	}

	public enum msdyn_MigrationType
	{
		/// <summary>
		/// Migration = 0
		/// </summary>
		Migration = 0,
		/// <summary>
		/// PreValidation = 1
		/// </summary>
		PreValidation = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_migrationtracker : EntityBase
	{
		public struct Fields
		{
			public const string CorrelationId = "correlationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_CorrelationId = "msdyn_correlationid";
			public const string msdyn_IsMigrationComplete = "msdyn_IsMigrationComplete";
			public const string msdyn_LegacyConvertRuleId = "msdyn_legacyconvertruleid";
			public const string msdyn_LegacyConvertRuleItemId = "msdyn_legacyconvertruleitemid";
			public const string msdyn_LegacyRuleIdName = "msdyn_legacyruleidname";
			public const string msdyn_LegacyRuleItemIdName = "msdyn_legacyruleitemidname";
			public const string msdyn_LegacySLAId = "msdyn_legacyslaid";
			public const string msdyn_LegacySLAItemId = "msdyn_legacyslaitemid";
			public const string msdyn_MigrationStatus = "msdyn_migrationstatus";
			public const string msdyn_MigrationStatusException = "msdyn_migrationstatusexception";
			public const string msdyn_MigrationStatusReason = "msdyn_migrationstatusreason";
			public const string msdyn_migrationtrackerId = "msdyn_migrationtrackerid";
			public const string msdyn_MigrationType = "msdyn_migrationtype";
			public const string msdyn_ModernConvertRuleId = "msdyn_modernconvertruleid";
			public const string msdyn_ModernConvertRuleItemId = "msdyn_modernconvertruleitemid";
			public const string msdyn_ModernRuleIdName = "msdyn_modernruleidname";
			public const string msdyn_ModernRuleItemIdName = "msdyn_modernruleitemidname";
			public const string msdyn_ModernSLAId = "msdyn_modernslaid";
			public const string msdyn_ModernSLAItemId = "msdyn_modernslaitemid";
			public const string msdyn_Name = "msdyn_name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_migrationtracker";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10148;

		[DebuggerNonUserCode()]
		public msdyn_migrationtracker()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(Guid msdyn_migrationtrackerId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_migrationtrackerId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier to distinguish each batch of migration(Deprecated)</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>CorrelationId(Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.CorrelationId); }
			set { Entity.Attributes[Fields.CorrelationId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier to distinguish each batch of migration</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>CorrelationId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CorrelationId); }
			set { Entity.Attributes[Fields.msdyn_CorrelationId] = value; }
		}

		/// <summary>
		/// <para>Indicates if the migration was successfully completed or not</para>
		/// <para>Boolean</para>
		/// <para>Is Migration Complete</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsMigrationComplete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsMigrationComplete); }
			set { Entity.Attributes[Fields.msdyn_IsMigrationComplete] = value; }
		}

		/// <summary>
		/// <para>Id of the legacy ARC rule to be migrated</para>
		/// <para>Lookup to convertrule</para>
		/// <para>Legacy Convert Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LegacyConvertRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LegacyConvertRuleId); }
			set { Entity.Attributes[Fields.msdyn_LegacyConvertRuleId] = value; }
		}

		/// <summary>
		/// <para>Id of the legacy ARC item to be migrated</para>
		/// <para>Lookup to convertruleitem</para>
		/// <para>Legacy convert rule item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LegacyConvertRuleItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LegacyConvertRuleItemId); }
			set { Entity.Attributes[Fields.msdyn_LegacyConvertRuleItemId] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LegacyRuleIdName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LegacyRuleIdName); }
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LegacyRuleItemIdName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LegacyRuleItemIdName); }
		}

		/// <summary>
		/// <para>Id of the legacy SLA to be migrated</para>
		/// <para>Lookup to sla</para>
		/// <para>Legacy SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LegacySLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LegacySLAId); }
			set { Entity.Attributes[Fields.msdyn_LegacySLAId] = value; }
		}

		/// <summary>
		/// <para>Id of the legacy SLA item to be migrated</para>
		/// <para>Lookup to slaitem</para>
		/// <para>Legacy sla item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LegacySLAItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LegacySLAItemId); }
			set { Entity.Attributes[Fields.msdyn_LegacySLAItemId] = value; }
		}

		/// <summary>
		/// <para>The overall status of a migration process</para>
		/// <para>Picklist</para>
		/// <para>Migration status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationStatus? msdyn_MigrationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_MigrationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_MigrationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_MigrationStatus] = null;
			}
		}

		/// <summary>
		/// <para>The exception of a certain status</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Migration status reason exception</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MigrationStatusException
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MigrationStatusException); }
			set { Entity.Attributes[Fields.msdyn_MigrationStatusException] = value; }
		}

		/// <summary>
		/// <para>The reason of a certain status</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Migration status reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MigrationStatusReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MigrationStatusReason); }
			set { Entity.Attributes[Fields.msdyn_MigrationStatusReason] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Migration tracker id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_migrationtrackerId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_migrationtrackerId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Indicates whether the request is a pre-validation check or an actual migration run</para>
		/// <para>Picklist</para>
		/// <para>Migration Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationType? msdyn_MigrationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_MigrationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_MigrationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_MigrationType] = null;
			}
		}

		/// <summary>
		/// <para>Id of the Uci ARC rule created post migration</para>
		/// <para>Lookup to convertrule</para>
		/// <para>Modern Convert rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ModernConvertRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ModernConvertRuleId); }
			set { Entity.Attributes[Fields.msdyn_ModernConvertRuleId] = value; }
		}

		/// <summary>
		/// <para>Id of the Uci ARC item created post migration</para>
		/// <para>Lookup to convertruleitem</para>
		/// <para>Modern convert rule item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ModernConvertRuleItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ModernConvertRuleItemId); }
			set { Entity.Attributes[Fields.msdyn_ModernConvertRuleItemId] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModernRuleIdName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModernRuleIdName); }
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModernRuleItemIdName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModernRuleItemIdName); }
		}

		/// <summary>
		/// <para>Id of the Uci SLA created post migration</para>
		/// <para>Lookup to sla</para>
		/// <para>Modern SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ModernSLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ModernSLAId); }
			set { Entity.Attributes[Fields.msdyn_ModernSLAId] = value; }
		}

		/// <summary>
		/// <para>Id of the Uci SLA item created post migration</para>
		/// <para>Lookup to slaitem</para>
		/// <para>Modern SLA item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ModernSLAItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ModernSLAItemId); }
			set { Entity.Attributes[Fields.msdyn_ModernSLAItemId] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Name); }
			set { Entity.Attributes[Fields.msdyn_Name] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Migration tracker</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Migration tracker</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
