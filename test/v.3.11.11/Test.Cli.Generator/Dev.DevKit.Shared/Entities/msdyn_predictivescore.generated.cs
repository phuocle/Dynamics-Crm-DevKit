//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets
{
	public enum msdyn_Grade
	{
		/// <summary>
		/// Grade A = 0
		/// </summary>
		Grade_A = 0,
		/// <summary>
		/// Grade B = 1
		/// </summary>
		Grade_B = 1,
		/// <summary>
		/// Grade C = 2
		/// </summary>
		Grade_C = 2,
		/// <summary>
		/// Grade D = 3
		/// </summary>
		Grade_D = 3
	}

	public enum msdyn_ScoreTrend
	{
		/// <summary>
		/// Declining = 2
		/// </summary>
		Declining = 2,
		/// <summary>
		/// Improving = 0
		/// </summary>
		Improving = 0,
		/// <summary>
		/// Not enough info = 3
		/// </summary>
		Not_enough_info = 3,
		/// <summary>
		/// Steady = 1
		/// </summary>
		Steady = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_predictivescore : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ContributingPredictionIDs = "msdyn_contributingpredictionids";
			public const string msdyn_EntityId = "msdyn_entityid";
			public const string msdyn_EntityType = "msdyn_entitytype";
			public const string msdyn_Grade = "msdyn_grade";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_predictivescoreId = "msdyn_predictivescoreid";
			public const string msdyn_Score = "msdyn_score";
			public const string msdyn_ScoredOn = "msdyn_scoredon";
			public const string msdyn_ScoreReasons = "msdyn_scorereasons";
			public const string msdyn_ScoreTrend = "msdyn_scoretrend";
			public const string msdyn_similaropportunities = "msdyn_similaropportunities";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_predictivescore";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10318;

		[DebuggerNonUserCode()]
		public msdyn_predictivescore()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_predictivescore(Guid msdyn_predictivescoreId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_predictivescoreId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_predictivescore(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_predictivescore(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_predictivescore(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_predictivescore(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Contributing prediction IDs.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Contributing prediction IDs</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ContributingPredictionIDs
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ContributingPredictionIDs); }
			set { Entity.Attributes[Fields.msdyn_ContributingPredictionIDs] = value; }
		}

		/// <summary>
		/// <para>Entity ID of primary entity.</para>
		/// <para>Required - String - MaxLength: 256</para>
		/// <para>Entity ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EntityId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EntityId); }
			set { Entity.Attributes[Fields.msdyn_EntityId] = value; }
		}

		/// <summary>
		/// <para>Entity type of primary entity.</para>
		/// <para>Required - String - MaxLength: 128</para>
		/// <para>Entity type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EntityType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EntityType); }
			set { Entity.Attributes[Fields.msdyn_EntityType] = value; }
		}

		/// <summary>
		/// <para>Grade of prediction score.</para>
		/// <para>Picklist</para>
		/// <para>Grade</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets.msdyn_Grade? msdyn_Grade
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Grade);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets.msdyn_Grade)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Grade] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Grade] = null;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Predictive score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_predictivescoreId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_predictivescoreId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Prediction score.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Score
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Score); }
			set { Entity.Attributes[Fields.msdyn_Score] = value; }
		}

		/// <summary>
		/// <para>Scored on.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Scored on</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ScoredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ScoredOn); }
			set { Entity.Attributes[Fields.msdyn_ScoredOn] = value; }
		}

		/// <summary>
		/// <para>Score reasons.</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Score reasons</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreReasons
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreReasons); }
			set { Entity.Attributes[Fields.msdyn_ScoreReasons] = value; }
		}

		/// <summary>
		/// <para>Score trend.</para>
		/// <para>Picklist</para>
		/// <para>Score trend</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets.msdyn_ScoreTrend? msdyn_ScoreTrend
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ScoreTrend);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets.msdyn_ScoreTrend)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ScoreTrend] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ScoreTrend] = null;
			}
		}

		/// <summary>
		/// <para>Similar Opportunities data</para>
		/// <para>Memo - MaxLength: 65536</para>
		/// <para>Similar Opportunities data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_similaropportunities
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_similaropportunities); }
			set { Entity.Attributes[Fields.msdyn_similaropportunities] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the Predictive Score.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Predictive Score.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_predictivescoreOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
