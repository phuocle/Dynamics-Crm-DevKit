//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets
{
	public enum msdyn_fiscalmonth
	{
		/// <summary>
		/// April = 3
		/// </summary>
		April = 3,
		/// <summary>
		/// August = 7
		/// </summary>
		August = 7,
		/// <summary>
		/// December = 11
		/// </summary>
		December = 11,
		/// <summary>
		/// February = 1
		/// </summary>
		February = 1,
		/// <summary>
		/// January = 0
		/// </summary>
		January = 0,
		/// <summary>
		/// July = 6
		/// </summary>
		July = 6,
		/// <summary>
		/// June = 5
		/// </summary>
		June = 5,
		/// <summary>
		/// March = 2
		/// </summary>
		March = 2,
		/// <summary>
		/// May = 4
		/// </summary>
		May = 4,
		/// <summary>
		/// November = 10
		/// </summary>
		November = 10,
		/// <summary>
		/// October = 9
		/// </summary>
		October = 9,
		/// <summary>
		/// September = 8
		/// </summary>
		September = 8
	}

	public enum msdyn_fiscalquarter
	{
		/// <summary>
		/// Q1 = 0
		/// </summary>
		Q1 = 0,
		/// <summary>
		/// Q2 = 1
		/// </summary>
		Q2 = 1,
		/// <summary>
		/// Q3 = 2
		/// </summary>
		Q3 = 2,
		/// <summary>
		/// Q4 = 3
		/// </summary>
		Q4 = 3
	}

	public enum msdyn_fiscalyear
	{
		/// <summary>
		/// FY2018 = 0
		/// </summary>
		FY2018 = 0,
		/// <summary>
		/// FY2019 = 1
		/// </summary>
		FY2019 = 1,
		/// <summary>
		/// FY2020 = 2
		/// </summary>
		FY2020 = 2,
		/// <summary>
		/// FY2021 = 3
		/// </summary>
		FY2021 = 3,
		/// <summary>
		/// FY2022 = 4
		/// </summary>
		FY2022 = 4,
		/// <summary>
		/// FY2023 = 5
		/// </summary>
		FY2023 = 5,
		/// <summary>
		/// FY2024 = 6
		/// </summary>
		FY2024 = 6,
		/// <summary>
		/// FY2025 = 7
		/// </summary>
		FY2025 = 7,
		/// <summary>
		/// FY2026 = 8
		/// </summary>
		FY2026 = 8,
		/// <summary>
		/// FY2027 = 9
		/// </summary>
		FY2027 = 9,
		/// <summary>
		/// FY2028 = 10
		/// </summary>
		FY2028 = 10,
		/// <summary>
		/// FY2029 = 11
		/// </summary>
		FY2029 = 11,
		/// <summary>
		/// FY2030 = 12
		/// </summary>
		FY2030 = 12,
		/// <summary>
		/// FY2031 = 13
		/// </summary>
		FY2031 = 13,
		/// <summary>
		/// FY2032 = 14
		/// </summary>
		FY2032 = 14,
		/// <summary>
		/// FY2033 = 15
		/// </summary>
		FY2033 = 15,
		/// <summary>
		/// FY2034 = 16
		/// </summary>
		FY2034 = 16,
		/// <summary>
		/// FY2035 = 17
		/// </summary>
		FY2035 = 17,
		/// <summary>
		/// FY2036 = 18
		/// </summary>
		FY2036 = 18,
		/// <summary>
		/// FY2037 = 19
		/// </summary>
		FY2037 = 19,
		/// <summary>
		/// FY2038 = 20
		/// </summary>
		FY2038 = 20,
		/// <summary>
		/// FY2039 = 21
		/// </summary>
		FY2039 = 21,
		/// <summary>
		/// FY2040 = 22
		/// </summary>
		FY2040 = 22
	}

	public enum msdyn_forecastperiodtype
	{
		/// <summary>
		/// Custom = 2
		/// </summary>
		Custom = 2,
		/// <summary>
		/// Monthly = 0
		/// </summary>
		Monthly = 0,
		/// <summary>
		/// Quarterly = 1
		/// </summary>
		Quarterly = 1
	}

	public enum msdyn_quotasource
	{
		/// <summary>
		/// Goal-based = 192350000
		/// </summary>
		Goal_based = 192350000,
		/// <summary>
		/// Manual = 192350001
		/// </summary>
		Manual = 192350001
	}

	public enum statecode
	{
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0,
		/// <summary>
		/// Published = 1
		/// </summary>
		Published = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Draft = 1
		/// </summary>
		Draft = 1,
		/// <summary>
		/// Failed = 4
		/// </summary>
		Failed = 4,
		/// <summary>
		/// In progress = 2
		/// </summary>
		In_progress = 2,
		/// <summary>
		/// Success = 3
		/// </summary>
		Success = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_forecastdefinition : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_fiscalmonth = "msdyn_fiscalmonth";
			public const string msdyn_fiscalquarter = "msdyn_fiscalquarter";
			public const string msdyn_fiscalyear = "msdyn_fiscalyear";
			public const string msdyn_forecastdefinitionId = "msdyn_forecastdefinitionid";
			public const string msdyn_forecastdefinitionname = "msdyn_forecastdefinitionname";
			public const string msdyn_forecastperiodtype = "msdyn_forecastperiodtype";
			public const string msdyn_metricid = "msdyn_metricid";
			public const string msdyn_numberofrecurrences = "msdyn_numberofrecurrences";
			public const string msdyn_quotasource = "msdyn_quotasource";
			public const string msdyn_rollupquery = "msdyn_rollupquery";
			public const string msdyn_validfrom = "msdyn_validfrom";
			public const string msdyn_validto = "msdyn_validto";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_forecastdefinition";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10266;

		[DebuggerNonUserCode()]
		public msdyn_forecastdefinition()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_forecastdefinition(Guid msdyn_forecastdefinitionId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_forecastdefinitionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_forecastdefinition(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_forecastdefinition(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_forecastdefinition(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_forecastdefinition(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the fiscal month for the forecast definition.</para>
		/// <para>Picklist</para>
		/// <para>Fiscal month</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_fiscalmonth? msdyn_fiscalmonth
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_fiscalmonth);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_fiscalmonth)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_fiscalmonth] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_fiscalmonth] = null;
			}
		}

		/// <summary>
		/// <para>Select the fiscal quarter for the forecast definition.</para>
		/// <para>Picklist</para>
		/// <para>Fiscal quarter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_fiscalquarter? msdyn_fiscalquarter
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_fiscalquarter);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_fiscalquarter)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_fiscalquarter] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_fiscalquarter] = null;
			}
		}

		/// <summary>
		/// <para>Select the fiscal year for the forecast definition.</para>
		/// <para>Picklist</para>
		/// <para>Fiscal year</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_fiscalyear? msdyn_fiscalyear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_fiscalyear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_fiscalyear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_fiscalyear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_fiscalyear] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the forecast definition.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Forecast definition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_forecastdefinitionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_forecastdefinitionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Name of the forecast definition.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Forecast name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_forecastdefinitionname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_forecastdefinitionname); }
			set { Entity.Attributes[Fields.msdyn_forecastdefinitionname] = value; }
		}

		/// <summary>
		/// <para>Select the type of period for which the forecast must be generated.</para>
		/// <para>Required - Picklist</para>
		/// <para>Forecast period</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_forecastperiodtype? msdyn_forecastperiodtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_forecastperiodtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_forecastperiodtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_forecastperiodtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_forecastperiodtype] = null;
			}
		}

		/// <summary>
		/// <para>Select metric to attach with forecast</para>
		/// <para>Required - Lookup to metric</para>
		/// <para>Forecast metric</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_metricid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_metricid); }
			set { Entity.Attributes[Fields.msdyn_metricid] = value; }
		}

		/// <summary>
		/// <para>Indicate the number of recurrences that the forecast will be generated.</para>
		/// <para>Required - Integer - MinValue: 1 - MaxValue: 12</para>
		/// <para>Number of recurrences</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_numberofrecurrences
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_numberofrecurrences); }
			set { Entity.Attributes[Fields.msdyn_numberofrecurrences] = value; }
		}

		/// <summary>
		/// <para>Select whether the quota for the forecast must to be taken from a goal or entered manually.</para>
		/// <para>Required - Picklist</para>
		/// <para>Quota source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_quotasource? msdyn_quotasource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_quotasource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.msdyn_quotasource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_quotasource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_quotasource] = null;
			}
		}

		/// <summary>
		/// <para>Select the query that will be used to calculate data for the rollup field.</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_rollupquery
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_rollupquery); }
			set { Entity.Attributes[Fields.msdyn_rollupquery] = value; }
		}

		/// <summary>
		/// <para>Shows the date from which the forecast is applicable. The date and time are displayed in the time zone selected in Dynamics 365 Customer Engagement apps options.</para>
		/// <para>Required - DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Valid from</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? msdyn_validfrom
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.msdyn_validfrom);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.msdyn_validfrom] = dateTime;
				}
				else
					Entity.Attributes[Fields.msdyn_validfrom] = null;
			}
		}

		/// <summary>
		/// <para>Shows the date till which the forecast is applicable. The date and time are displayed in the time zone selected in Dynamics 365 Customer Engagement apps options.</para>
		/// <para>Required - DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Valid to</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? msdyn_validto
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.msdyn_validto);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.msdyn_validto] = dateTime;
				}
				else
					Entity.Attributes[Fields.msdyn_validto] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Forecast Definition</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Forecast Definition</para>
		/// <para>Status</para>
		/// <para>Status reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastdefinitionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
