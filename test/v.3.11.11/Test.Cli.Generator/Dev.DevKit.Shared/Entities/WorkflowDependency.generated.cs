//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.WorkflowDependencyOptionSets
{
	public enum Type
	{
		/// <summary>
		/// Argument Entity that workflow depends on = 9
		/// </summary>
		Argument_Entity_that_workflow_depends_on = 9,
		/// <summary>
		/// Attribute definition that workflow depends on = 8
		/// </summary>
		Attribute_definition_that_workflow_depends_on = 8,
		/// <summary>
		/// Custom entity definition that workflow depends on = 7
		/// </summary>
		Custom_entity_definition_that_workflow_depends_on = 7,
		/// <summary>
		/// Local parameter = 2
		/// </summary>
		Local_parameter = 2,
		/// <summary>
		/// Primary entity = 3
		/// </summary>
		Primary_entity = 3,
		/// <summary>
		/// Primary entity - after SDK operation = 5
		/// </summary>
		Primary_entity_after_SDK_operation = 5,
		/// <summary>
		/// Primary entity - before SDK operation = 4
		/// </summary>
		Primary_entity_before_SDK_operation = 4,
		/// <summary>
		/// Related entity = 6
		/// </summary>
		Related_entity = 6,
		/// <summary>
		/// Sdk association = 1
		/// </summary>
		Sdk_association = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class WorkflowDependency : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomEntityName = "customentityname";
			public const string DependentAttributeName = "dependentattributename";
			public const string DependentEntityName = "dependententityname";
			public const string EntityAttributes = "entityattributes";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string ParameterName = "parametername";
			public const string ParameterType = "parametertype";
			public const string RelatedAttributeName = "relatedattributename";
			public const string RelatedEntityName = "relatedentityname";
			public const string SdkMessageId = "sdkmessageid";
			public const string Type = "type";
			public const string VersionNumber = "versionnumber";
			public const string WorkflowDependencyId = "workflowdependencyid";
			public const string WorkflowId = "workflowid";
		}

		public const string EntityLogicalName = "workflowdependency";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4704;

		[DebuggerNonUserCode()]
		public WorkflowDependency()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowDependency(Guid WorkflowDependencyId)
		{
			Entity = new Entity(EntityLogicalName, WorkflowDependencyId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowDependency(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowDependency(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowDependency(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowDependency(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the process dependency.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the process dependency was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the process dependency.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the entity used in the process.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Custom Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomEntityName); }
			set { Entity.Attributes[Fields.CustomEntityName] = value; }
		}

		/// <summary>
		/// <para>Name of the attribute used in the process.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Dependent Attribute Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DependentAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DependentAttributeName); }
			set { Entity.Attributes[Fields.DependentAttributeName] = value; }
		}

		/// <summary>
		/// <para>Name of the entity used in the process.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Dependent Entity Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DependentEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DependentEntityName); }
			set { Entity.Attributes[Fields.DependentEntityName] = value; }
		}

		/// <summary>
		/// <para>Comma-separated list of attributes that will be passed to process instance.</para>
		/// <para>String - MaxLength: 100000</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityAttributes); }
			set { Entity.Attributes[Fields.EntityAttributes] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the process dependency.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the process dependency was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the process dependency.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the parent workflow instance.</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the process dependency.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the process dependency.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningUser
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Name of the process parameter.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParameterName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParameterName); }
			set { Entity.Attributes[Fields.ParameterName] = value; }
		}

		/// <summary>
		/// <para>Fully qualified name of the CLR type of the local parameter.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParameterType
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParameterType); }
			set { Entity.Attributes[Fields.ParameterType] = value; }
		}

		/// <summary>
		/// <para>Attribute of the primary entity that specifies related entity.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedAttributeName); }
			set { Entity.Attributes[Fields.RelatedAttributeName] = value; }
		}

		/// <summary>
		/// <para>Name of the related entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Related Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedEntityName); }
			set { Entity.Attributes[Fields.RelatedEntityName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message.</para>
		/// <para>Lookup to sdkmessage</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageId); }
			set { Entity.Attributes[Fields.SdkMessageId] = value; }
		}

		/// <summary>
		/// <para>Type of the process dependency.</para>
		/// <para>Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowDependencyOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowDependencyOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Unique identifier of the process dependency.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Process Dependency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WorkflowDependencyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WorkflowDependencyId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the process with which the dependency is associated.</para>
		/// <para>Lookup to workflow</para>
		/// <para>Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference WorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.WorkflowId); }
			set { Entity.Attributes[Fields.WorkflowId] = value; }
		}
	}
}
