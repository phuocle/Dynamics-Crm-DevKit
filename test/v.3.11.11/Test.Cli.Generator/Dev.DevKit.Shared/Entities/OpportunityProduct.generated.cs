//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.OpportunityProductOptionSets
{
	public enum msdyn_BillingMethod
	{
		/// <summary>
		/// Fixed Price = 192350001
		/// </summary>
		Fixed_Price = 192350001,
		/// <summary>
		/// Time and Material = 192350000
		/// </summary>
		Time_and_Material = 192350000
	}

	public enum msdyn_LineType
	{
		/// <summary>
		/// Field Service Line = 690970001
		/// </summary>
		Field_Service_Line = 690970001,
		/// <summary>
		/// Project Service Line = 690970000
		/// </summary>
		Project_Service_Line = 690970000
	}

	public enum PricingErrorCode
	{
		/// <summary>
		/// Base Currency Attribute Overflow = 36
		/// </summary>
		Base_Currency_Attribute_Overflow = 36,
		/// <summary>
		/// Base Currency Attribute Underflow = 37
		/// </summary>
		Base_Currency_Attribute_Underflow = 37,
		/// <summary>
		/// Detail Error = 1
		/// </summary>
		Detail_Error = 1,
		/// <summary>
		/// Discount Type Invalid State = 27
		/// </summary>
		Discount_Type_Invalid_State = 27,
		/// <summary>
		/// Inactive Discount Type = 33
		/// </summary>
		Inactive_Discount_Type = 33,
		/// <summary>
		/// Inactive Price Level = 3
		/// </summary>
		Inactive_Price_Level = 3,
		/// <summary>
		/// Invalid Current Cost = 20
		/// </summary>
		Invalid_Current_Cost = 20,
		/// <summary>
		/// Invalid Discount = 28
		/// </summary>
		Invalid_Discount = 28,
		/// <summary>
		/// Invalid Discount Type = 26
		/// </summary>
		Invalid_Discount_Type = 26,
		/// <summary>
		/// Invalid Price = 19
		/// </summary>
		Invalid_Price = 19,
		/// <summary>
		/// Invalid Price Level Amount = 17
		/// </summary>
		Invalid_Price_Level_Amount = 17,
		/// <summary>
		/// Invalid Price Level Currency = 34
		/// </summary>
		Invalid_Price_Level_Currency = 34,
		/// <summary>
		/// Invalid Price Level Percentage = 18
		/// </summary>
		Invalid_Price_Level_Percentage = 18,
		/// <summary>
		/// Invalid Pricing Code = 9
		/// </summary>
		Invalid_Pricing_Code = 9,
		/// <summary>
		/// Invalid Pricing Precision = 30
		/// </summary>
		Invalid_Pricing_Precision = 30,
		/// <summary>
		/// Invalid Product = 7
		/// </summary>
		Invalid_Product = 7,
		/// <summary>
		/// Invalid Quantity = 29
		/// </summary>
		Invalid_Quantity = 29,
		/// <summary>
		/// Invalid Rounding Amount = 24
		/// </summary>
		Invalid_Rounding_Amount = 24,
		/// <summary>
		/// Invalid Rounding Option = 23
		/// </summary>
		Invalid_Rounding_Option = 23,
		/// <summary>
		/// Invalid Rounding Policy = 22
		/// </summary>
		Invalid_Rounding_Policy = 22,
		/// <summary>
		/// Invalid Standard Cost = 21
		/// </summary>
		Invalid_Standard_Cost = 21,
		/// <summary>
		/// Missing Current Cost = 15
		/// </summary>
		Missing_Current_Cost = 15,
		/// <summary>
		/// Missing Price = 14
		/// </summary>
		Missing_Price = 14,
		/// <summary>
		/// Missing Price Level = 2
		/// </summary>
		Missing_Price_Level = 2,
		/// <summary>
		/// Missing Price Level Amount = 12
		/// </summary>
		Missing_Price_Level_Amount = 12,
		/// <summary>
		/// Missing Price Level Percentage = 13
		/// </summary>
		Missing_Price_Level_Percentage = 13,
		/// <summary>
		/// Missing Pricing Code = 8
		/// </summary>
		Missing_Pricing_Code = 8,
		/// <summary>
		/// Missing Product = 6
		/// </summary>
		Missing_Product = 6,
		/// <summary>
		/// Missing Product Default UOM = 31
		/// </summary>
		Missing_Product_Default_UOM = 31,
		/// <summary>
		/// Missing Product UOM Schedule  = 32
		/// </summary>
		Missing_Product_UOM_Schedule = 32,
		/// <summary>
		/// Missing Quantity = 4
		/// </summary>
		Missing_Quantity = 4,
		/// <summary>
		/// Missing Standard Cost = 16
		/// </summary>
		Missing_Standard_Cost = 16,
		/// <summary>
		/// Missing Unit Price = 5
		/// </summary>
		Missing_Unit_Price = 5,
		/// <summary>
		/// Missing UOM = 10
		/// </summary>
		Missing_UOM = 10,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Price Attribute Out Of Range = 35
		/// </summary>
		Price_Attribute_Out_Of_Range = 35,
		/// <summary>
		/// Price Calculation Error = 25
		/// </summary>
		Price_Calculation_Error = 25,
		/// <summary>
		/// Product Not In Price Level = 11
		/// </summary>
		Product_Not_In_Price_Level = 11,
		/// <summary>
		/// Transaction currency is not set for the product price list item = 38
		/// </summary>
		Transaction_currency_is_not_set_for_the_product_price_list_item = 38
	}

	public enum ProductTypeCode
	{
		/// <summary>
		/// Bundle = 2
		/// </summary>
		Bundle = 2,
		/// <summary>
		/// Optional Bundle Product = 4
		/// </summary>
		Optional_Bundle_Product = 4,
		/// <summary>
		/// Product = 1
		/// </summary>
		Product = 1,
		/// <summary>
		/// Project-based Service = 5
		/// </summary>
		Project_based_Service = 5,
		/// <summary>
		/// Required Bundle Product = 3
		/// </summary>
		Required_Bundle_Product = 3
	}

	public enum PropertyConfigurationStatus
	{
		/// <summary>
		/// Edit = 0
		/// </summary>
		Edit = 0,
		/// <summary>
		/// Not Configured = 2
		/// </summary>
		Not_Configured = 2,
		/// <summary>
		/// Rectify = 1
		/// </summary>
		Rectify = 1
	}

	public enum SkipPriceCalculation
	{
		/// <summary>
		/// DoPriceCalcAlways = 0
		/// </summary>
		DoPriceCalcAlways = 0,
		/// <summary>
		/// SkipPriceCalcOnCreate = 1
		/// </summary>
		SkipPriceCalcOnCreate = 1,
		/// <summary>
		/// SkipPriceCalcOnUpdate = 2
		/// </summary>
		SkipPriceCalcOnUpdate = 2,
		/// <summary>
		/// SkipPriceCalcOnUpSert = 3
		/// </summary>
		SkipPriceCalcOnUpSert = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class OpportunityProduct : EntityBase
	{
		public struct Fields
		{
			public const string BaseAmount = "baseamount";
			public const string BaseAmount_Base = "baseamount_base";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ExtendedAmount = "extendedamount";
			public const string ExtendedAmount_Base = "extendedamount_base";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsPriceOverridden = "ispriceoverridden";
			public const string IsProductOverridden = "isproductoverridden";
			public const string LineItemNumber = "lineitemnumber";
			public const string ManualDiscountAmount = "manualdiscountamount";
			public const string ManualDiscountAmount_Base = "manualdiscountamount_base";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_BillingMethod = "msdyn_billingmethod";
			public const string msdyn_BudgetAmount = "msdyn_budgetamount";
			public const string msdyn_budgetamount_Base = "msdyn_budgetamount_base";
			public const string msdyn_CostAmount = "msdyn_costamount";
			public const string msdyn_costamount_Base = "msdyn_costamount_base";
			public const string msdyn_CostPricePerUnit = "msdyn_costpriceperunit";
			public const string msdyn_costpriceperunit_Base = "msdyn_costpriceperunit_base";
			public const string msdyn_Duration = "msdyn_duration";
			public const string msdyn_enddate = "msdyn_enddate";
			public const string msdyn_LineType = "msdyn_linetype";
			public const string msdyn_pricelist = "msdyn_pricelist";
			public const string msdyn_Project = "msdyn_project";
			public const string msdyn_serviceaccount = "msdyn_serviceaccount";
			public const string msdyn_startdate = "msdyn_startdate";
			public const string OpportunityId = "opportunityid";
			public const string OpportunityProductId = "opportunityproductid";
			public const string OpportunityProductName = "opportunityproductname";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentBundleId = "parentbundleid";
			public const string ParentBundleIdRef = "parentbundleidref";
			public const string PricePerUnit = "priceperunit";
			public const string PricePerUnit_Base = "priceperunit_base";
			public const string PricingErrorCode = "pricingerrorcode";
			public const string ProductAssociationId = "productassociationid";
			public const string ProductDescription = "productdescription";
			public const string ProductId = "productid";
			public const string ProductName = "productname";
			public const string ProductTypeCode = "producttypecode";
			public const string PropertyConfigurationStatus = "propertyconfigurationstatus";
			public const string Quantity = "quantity";
			public const string SequenceNumber = "sequencenumber";
			public const string SkipPriceCalculation = "skippricecalculation";
			public const string Tax = "tax";
			public const string Tax_Base = "tax_base";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UoMId = "uomid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string VolumeDiscountAmount = "volumediscountamount";
			public const string VolumeDiscountAmount_Base = "volumediscountamount_base";
		}

		public const string EntityLogicalName = "opportunityproduct";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1083;

		[DebuggerNonUserCode()]
		public OpportunityProduct()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OpportunityProduct(Guid OpportunityProductId)
		{
			Entity = new Entity(EntityLogicalName, OpportunityProductId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OpportunityProduct(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OpportunityProduct(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OpportunityProduct(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OpportunityProduct(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the total price of the opportunity product, based on the price per unit, volume discount, and quantity.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BaseAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BaseAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BaseAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.BaseAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BaseAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BaseAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type additional information to describe the opportunity product, such as manufacturing details.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Shows the total amount due for the opportunity product, calculated on the Amount value minus the Manual Discount amount.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Extended Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExtendedAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ExtendedAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExtendedAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ExtendedAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Extended Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Extended Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExtendedAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ExtendedAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Select whether the pricing on the opportunity product reflects an override of the product catalog pricing.</para>
		/// <para>Boolean</para>
		/// <para>Price Overridden</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPriceOverridden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPriceOverridden); }
			set { Entity.Attributes[Fields.IsPriceOverridden] = value; }
		}

		/// <summary>
		/// <para>For system use only.</para>
		/// <para>Boolean</para>
		/// <para>Select Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsProductOverridden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsProductOverridden); }
			set { Entity.Attributes[Fields.IsProductOverridden] = value; }
		}

		/// <summary>
		/// <para>Type the line item number for the opportunity product to easily identify the product in the opportunity documents and make sure it&apos;s listed in the correct order.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Line Item Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LineItemNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LineItemNumber); }
			set { Entity.Attributes[Fields.LineItemNumber] = value; }
		}

		/// <summary>
		/// <para>Type the manual discount amount for the opportunity product to deduct any negotiated or other savings from the product total.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Manual Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ManualDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ManualDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ManualDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ManualDiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Manual Discount Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Manual Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ManualDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ManualDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the opportunityproduct.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Billing method for the project opportunity line. Valid values are Time and Material and Fixed Price</para>
		/// <para>Picklist</para>
		/// <para>Billing Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.msdyn_BillingMethod? msdyn_BillingMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BillingMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.msdyn_BillingMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BillingMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BillingMethod] = null;
			}
		}

		/// <summary>
		/// <para>Enter the customer budget amount for this opportunity line.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Budget Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_BudgetAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_BudgetAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BudgetAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_BudgetAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Budget Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Budget Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_budgetamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_budgetamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total cost price of the product based on the cost price per unit and quantity.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CostAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CostAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_CostAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Cost Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Cost price per unit of the product. The default is the cost price of the product.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Price Per Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostPricePerUnit
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CostPricePerUnit);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CostPricePerUnit] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_CostPricePerUnit] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Cost Price Per Unit in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Price Per Unit (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costpriceperunit_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costpriceperunit_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the duration of the agreement</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Duration); }
			set { Entity.Attributes[Fields.msdyn_Duration] = value; }
		}

		/// <summary>
		/// <para>Enter the end date of the agreement</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_enddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_enddate); }
			set { Entity.Attributes[Fields.msdyn_enddate] = value; }
		}

		/// <summary>
		/// <para>The field to distinguish the order lines to be of project service or field service</para>
		/// <para>Picklist</para>
		/// <para>Line Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.msdyn_LineType? msdyn_LineType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_LineType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.msdyn_LineType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_LineType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_LineType] = null;
			}
		}

		/// <summary>
		/// <para>Select a price list for the opportunity line</para>
		/// <para>Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_pricelist
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_pricelist); }
			set { Entity.Attributes[Fields.msdyn_pricelist] = value; }
		}

		/// <summary>
		/// <para>Select the project for this opportunity line.</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Project); }
			set { Entity.Attributes[Fields.msdyn_Project] = value; }
		}

		/// <summary>
		/// <para>Select the service account for the opportunity line</para>
		/// <para>Lookup to account</para>
		/// <para>Service Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_serviceaccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_serviceaccount); }
			set { Entity.Attributes[Fields.msdyn_serviceaccount] = value; }
		}

		/// <summary>
		/// <para>Start date of the Agreement</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startdate); }
			set { Entity.Attributes[Fields.msdyn_startdate] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the opportunity with which the opportunity product is associated.</para>
		/// <para>Lookup to opportunity</para>
		/// <para>Opportunity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OpportunityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OpportunityId); }
			set { Entity.Attributes[Fields.OpportunityId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the opportunity product.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Opportunity Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OpportunityProductId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.OpportunityProductId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Opportunity Product Name. Added for 1:n referential relationship (internal purposes only)</para>
		/// <para>Required - String - MaxLength: 500</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OpportunityProductName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OpportunityProductName); }
			set { Entity.Attributes[Fields.OpportunityProductName] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Required - Lookup to </para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Required - Lookup to </para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose the parent bundle associated with this product</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Parent Bundle</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ParentBundleId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ParentBundleId); }
			set { Entity.Attributes[Fields.ParentBundleId] = value; }
		}

		/// <summary>
		/// <para>Choose the parent bundle associated with this product</para>
		/// <para>Lookup to opportunityproduct</para>
		/// <para>Parent bundle product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBundleIdRef
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBundleIdRef); }
			set { Entity.Attributes[Fields.ParentBundleIdRef] = value; }
		}

		/// <summary>
		/// <para>Shows the price per unit of the opportunity product, based on the price list specified on the parent opportunity.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Price Per Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? PricePerUnit
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.PricePerUnit);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricePerUnit] = new Money(value.Value);
				else
					Entity.Attributes[Fields.PricePerUnit] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Price Per Unit in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Price Per Unit (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? PricePerUnit_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.PricePerUnit_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select the pricing error for the opportunity product.</para>
		/// <para>Picklist</para>
		/// <para>Pricing Error</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PricingErrorCode? PricingErrorCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PricingErrorCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PricingErrorCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricingErrorCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PricingErrorCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the product line item association with bundle in the opportunity</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Bundle Item Association</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProductAssociationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProductAssociationId); }
			set { Entity.Attributes[Fields.ProductAssociationId] = value; }
		}

		/// <summary>
		/// <para>Type a detailed product description or additional notes about the opportunity product, such as talking points or product updates, that will assist the sales team when they discuss the product with the customer.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Write-In Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductDescription); }
			set { Entity.Attributes[Fields.ProductDescription] = value; }
		}

		/// <summary>
		/// <para>Choose the product to include on the opportunity to link the product&apos;s pricing and other information to the opportunity.</para>
		/// <para>Lookup to product</para>
		/// <para>Existing Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProductId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProductId); }
			set { Entity.Attributes[Fields.ProductId] = value; }
		}

		/// <summary>
		/// <para>Calculated field that will be populated by name and description of the product.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Product Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductName); }
			set { Entity.Attributes[Fields.ProductName] = value; }
		}

		/// <summary>
		/// <para>Product Type</para>
		/// <para>Picklist</para>
		/// <para>Product type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.ProductTypeCode? ProductTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProductTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.ProductTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProductTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProductTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Status of the property configuration.</para>
		/// <para>Picklist</para>
		/// <para>Property Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PropertyConfigurationStatus? PropertyConfigurationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PropertyConfigurationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PropertyConfigurationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PropertyConfigurationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PropertyConfigurationStatus] = null;
			}
		}

		/// <summary>
		/// <para>Type the amount or quantity of the product the customer would like to purchase.</para>
		/// <para>Required - Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Quantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Quantity); }
			set { Entity.Attributes[Fields.Quantity] = value; }
		}

		/// <summary>
		/// <para>Shows the ID of the data that maintains the sequence.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SequenceNumber); }
			set { Entity.Attributes[Fields.SequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Skip price calculation</para>
		/// <para>Picklist</para>
		/// <para>Skip Price Calculation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.SkipPriceCalculation? SkipPriceCalculation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SkipPriceCalculation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.SkipPriceCalculation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SkipPriceCalculation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SkipPriceCalculation] = null;
			}
		}

		/// <summary>
		/// <para>Type the tax amount to be applied on the opportunity product.</para>
		/// <para>Money - MinValue: -100,000,000,000,000 - MaxValue: 100,000,000,000,000</para>
		/// <para>Tax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Tax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Tax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Tax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Tax] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Tax in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Tax (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Tax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Tax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Choose the unit of measurement for the base unit quantity for this purchase, such as each or dozen.</para>
		/// <para>Lookup to uom</para>
		/// <para>Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference UoMId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.UoMId); }
			set { Entity.Attributes[Fields.UoMId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Shows the discount amount per unit if a specified volume is purchased. Configure volume discounts in the Product Catalog in the Settings area.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Volume Discount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? VolumeDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.VolumeDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Volume Discount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Volume Discount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? VolumeDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.VolumeDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
