//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_projectOptionSets
{
	public enum msdyn_BulkGenerationStatus
	{
		/// <summary>
		/// Failed = 192350001
		/// </summary>
		Failed = 192350001,
		/// <summary>
		/// Processing = 192350000
		/// </summary>
		Processing = 192350000
	}

	public enum msdyn_CostPerformence
	{
		/// <summary>
		/// On Budget = 192350000
		/// </summary>
		On_Budget = 192350000,
		/// <summary>
		/// Over Budget = 192350001
		/// </summary>
		Over_Budget = 192350001,
		/// <summary>
		/// Under Budget = 192350002
		/// </summary>
		Under_Budget = 192350002
	}

	public enum msdyn_overallprojectstatus
	{
		/// <summary>
		/// Green = 1
		/// </summary>
		Green = 1,
		/// <summary>
		/// Red = 3
		/// </summary>
		Red = 3,
		/// <summary>
		/// Yellow = 2
		/// </summary>
		Yellow = 2
	}

	public enum msdyn_scheduleperformance
	{
		/// <summary>
		/// Ahead = 192350001
		/// </summary>
		Ahead = 192350001,
		/// <summary>
		/// Behind = 192350002
		/// </summary>
		Behind = 192350002,
		/// <summary>
		/// On Time = 192350000
		/// </summary>
		On_Time = 192350000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Closed - Sets project to read only and cancels future bookings = 192350000
		/// </summary>
		Closed_Sets_project_to_read_only_and_cancels_future_bookings = 192350000,
		/// <summary>
		/// Inactive - Sets project to read only = 2
		/// </summary>
		Inactive_Sets_project_to_read_only = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_project : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_actualdurationminutes = "msdyn_actualdurationminutes";
			public const string msdyn_actualend = "msdyn_actualend";
			public const string msdyn_actualexpensecost = "msdyn_actualexpensecost";
			public const string msdyn_actualexpensecost_Base = "msdyn_actualexpensecost_base";
			public const string msdyn_ActualExpenseSales = "msdyn_actualexpensesales";
			public const string msdyn_actualexpensesales_Base = "msdyn_actualexpensesales_base";
			public const string msdyn_actualhours = "msdyn_actualhours";
			public const string msdyn_actuallaborcost = "msdyn_actuallaborcost";
			public const string msdyn_actuallaborcost_Base = "msdyn_actuallaborcost_base";
			public const string msdyn_ActualSales = "msdyn_actualsales";
			public const string msdyn_actualsales_Base = "msdyn_actualsales_base";
			public const string msdyn_actualstart = "msdyn_actualstart";
			public const string msdyn_BulkGenerationStatus = "msdyn_bulkgenerationstatus";
			public const string msdyn_calendarid = "msdyn_calendarid";
			public const string msdyn_comments = "msdyn_comments";
			public const string msdyn_ContractOrganizationalUnitId = "msdyn_contractorganizationalunitid";
			public const string msdyn_CostConsumption = "msdyn_costconsumption";
			public const string msdyn_CostEstimateAtComplete = "msdyn_costestimateatcomplete";
			public const string msdyn_costestimateatcomplete_Base = "msdyn_costestimateatcomplete_base";
			public const string msdyn_CostPerformence = "msdyn_costperformence";
			public const string msdyn_CostVariance = "msdyn_costvariance";
			public const string msdyn_costvariance_Base = "msdyn_costvariance_base";
			public const string msdyn_customer = "msdyn_customer";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_disablecreateofteammemberformanager = "msdyn_disablecreateofteammemberformanager";
			public const string msdyn_EffortestimateatcompleteEAC = "msdyn_effortestimateatcompleteeac";
			public const string msdyn_exchangerate = "msdyn_exchangerate";
			public const string msdyn_IsLinkedToMSProjectClient = "msdyn_islinkedtomsprojectclient";
			public const string msdyn_istemplate = "msdyn_istemplate";
			public const string msdyn_linkeddocumenturl = "msdyn_linkeddocumenturl";
			public const string msdyn_overallprojectstatus = "msdyn_overallprojectstatus";
			public const string msdyn_plannedexpensecost = "msdyn_plannedexpensecost";
			public const string msdyn_plannedexpensecost_Base = "msdyn_plannedexpensecost_base";
			public const string msdyn_PlannedExpenseSales = "msdyn_plannedexpensesales";
			public const string msdyn_plannedexpensesales_Base = "msdyn_plannedexpensesales_base";
			public const string msdyn_plannedhours = "msdyn_plannedhours";
			public const string msdyn_plannedlaborcost = "msdyn_plannedlaborcost";
			public const string msdyn_plannedlaborcost_Base = "msdyn_plannedlaborcost_base";
			public const string msdyn_PlannedSales = "msdyn_plannedsales";
			public const string msdyn_plannedsales_Base = "msdyn_plannedsales_base";
			public const string msdyn_Progress = "msdyn_progress";
			public const string msdyn_projectId = "msdyn_projectid";
			public const string msdyn_projectmanager = "msdyn_projectmanager";
			public const string msdyn_projectresourcerequirementsvisibletore = "msdyn_projectresourcerequirementsvisibletore";
			public const string msdyn_projectteamid = "msdyn_projectteamid";
			public const string msdyn_ProjectTemplate = "msdyn_projecttemplate";
			public const string msdyn_RemainingCost = "msdyn_remainingcost";
			public const string msdyn_remainingcost_Base = "msdyn_remainingcost_base";
			public const string msdyn_RemainingHours = "msdyn_remaininghours";
			public const string msdyn_RemainingSales = "msdyn_remainingsales";
			public const string msdyn_remainingsales_Base = "msdyn_remainingsales_base";
			public const string msdyn_SalesConsumption = "msdyn_salesconsumption";
			public const string msdyn_SalesEstimateAtCompleteEAC = "msdyn_salesestimateatcompleteeac";
			public const string msdyn_salesestimateatcompleteeac_Base = "msdyn_salesestimateatcompleteeac_base";
			public const string msdyn_salesorderid = "msdyn_salesorderid";
			public const string msdyn_SalesVariance = "msdyn_salesvariance";
			public const string msdyn_salesvariance_Base = "msdyn_salesvariance_base";
			public const string msdyn_scheduleddurationminutes = "msdyn_scheduleddurationminutes";
			public const string msdyn_scheduledend = "msdyn_scheduledend";
			public const string msdyn_scheduledstart = "msdyn_scheduledstart";
			public const string msdyn_scheduleperformance = "msdyn_scheduleperformance";
			public const string msdyn_ScheduleVariance = "msdyn_schedulevariance";
			public const string msdyn_StageName = "msdyn_stagename";
			public const string msdyn_statusupdatedon = "msdyn_statusupdatedon";
			public const string msdyn_subject = "msdyn_subject";
			public const string msdyn_teamsize = "msdyn_teamsize";
			public const string msdyn_teamsize_Date = "msdyn_teamsize_date";
			public const string msdyn_teamsize_State = "msdyn_teamsize_state";
			public const string msdyn_TotalActualCost = "msdyn_totalactualcost";
			public const string msdyn_totalactualcost_Base = "msdyn_totalactualcost_base";
			public const string msdyn_TotalActualSales = "msdyn_totalactualsales";
			public const string msdyn_totalactualsales_Base = "msdyn_totalactualsales_base";
			public const string msdyn_TotalPlannedCost = "msdyn_totalplannedcost";
			public const string msdyn_totalplannedcost_Base = "msdyn_totalplannedcost_base";
			public const string msdyn_TotalPlannedSales = "msdyn_totalplannedsales";
			public const string msdyn_totalplannedsales_Base = "msdyn_totalplannedsales_base";
			public const string msdyn_wbsduration = "msdyn_wbsduration";
			public const string msdyn_workhourtemplate = "msdyn_workhourtemplate";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_project";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10528;

		[DebuggerNonUserCode()]
		public msdyn_project()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_project(Guid msdyn_projectId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_projectId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_project(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_project(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_project(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_project(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the actual duration of the project in minutes.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Actual Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_actualdurationminutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_actualdurationminutes); }
			set { Entity.Attributes[Fields.msdyn_actualdurationminutes] = value; }
		}

		/// <summary>
		/// <para>Enter the actual end time of the project.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Actual End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_actualendUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_actualend); }
			set { Entity.Attributes[Fields.msdyn_actualend] = value; }
		}

		/// <summary>
		/// <para>Shows the aggregate of actual expense cost on the project. System Field - For PSA Use Only.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Expense Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualexpensecost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actualexpensecost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_actualexpensecost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_actualexpensecost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Expense Cost in base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Expense Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualexpensecost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actualexpensecost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the aggregate of actual expense sales on the project - For PSA use only</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Expense Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActualExpenseSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActualExpenseSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActualExpenseSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActualExpenseSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the actual expense sales in the base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Expense Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualexpensesales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actualexpensesales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total actual hours of the project. System Field - For PSA Use Only.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Actual Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualhours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_actualhours); }
			set { Entity.Attributes[Fields.msdyn_actualhours] = value; }
		}

		/// <summary>
		/// <para>Shows the aggregate of actual labor cost on the project. System Field - For PSA Use Only.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Labor Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actuallaborcost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actuallaborcost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_actuallaborcost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_actuallaborcost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Labor Cost in base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Labor Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actuallaborcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actuallaborcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the aggregate of actual labor sales on the project - For PSA use only</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Labor Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActualSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActualSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActualSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActualSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the actual labor sales in the base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Labor Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actualsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the actual start time of the project.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Actual Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_actualstartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_actualstart); }
			set { Entity.Attributes[Fields.msdyn_actualstart] = value; }
		}

		/// <summary>
		/// <para>The status of the bulk generation operations running on the project entity. If no operation is running, the value is null. System Field - For PSA Use Only.</para>
		/// <para>Picklist</para>
		/// <para>Bulk Generation Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.msdyn_BulkGenerationStatus? msdyn_BulkGenerationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BulkGenerationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.msdyn_BulkGenerationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BulkGenerationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BulkGenerationStatus] = null;
			}
		}

		/// <summary>
		/// <para>Id of the calendar for the project.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Calendar Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_calendarid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_calendarid); }
			set { Entity.Attributes[Fields.msdyn_calendarid] = value; }
		}

		/// <summary>
		/// <para>Enter the comments that are used to describe the current project status.</para>
		/// <para>Memo - MaxLength: 20000</para>
		/// <para>Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_comments
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_comments); }
			set { Entity.Attributes[Fields.msdyn_comments] = value; }
		}

		/// <summary>
		/// <para>Select the organizational unit sponsoring the project.</para>
		/// <para>Required - Lookup to msdyn_organizationalunit</para>
		/// <para>Contracting Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContractOrganizationalUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContractOrganizationalUnitId); }
			set { Entity.Attributes[Fields.msdyn_ContractOrganizationalUnitId] = value; }
		}

		/// <summary>
		/// <para>Shows the actual cost divided by the estimated cost at completion. System Field - For PSA Use Only.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Cost Consumption %</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostConsumption
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_CostConsumption); }
			set { Entity.Attributes[Fields.msdyn_CostConsumption] = value; }
		}

		/// <summary>
		/// <para>Sum of Actual Cost and Remaining cost. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost estimate at completion (EAC)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostEstimateAtComplete
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CostEstimateAtComplete);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Cost estimate at completion (EAC) in base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost estimate at completion (EAC)(Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costestimateatcomplete_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costestimateatcomplete_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Cost Performance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.msdyn_CostPerformence? msdyn_CostPerformence
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CostPerformence);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.msdyn_CostPerformence)value.Value;
			}
		}

		/// <summary>
		/// <para>Variance between the estimated cost and the forecasted cost based on the estimate at completion (EAC). System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Variance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostVariance
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CostVariance);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the value of the cost variance in the base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Variance (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costvariance_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costvariance_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the customer who the project is associated with.</para>
		/// <para>Lookup to account</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_customer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_customer); }
			set { Entity.Attributes[Fields.msdyn_customer] = value; }
		}

		/// <summary>
		/// <para>Enter a description of the project.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>This is an internal field, mainly used during import so that we don&apos;t create a team member record for the project manager. System Field - For PSA Use Only.</para>
		/// <para>Boolean</para>
		/// <para>Disable create of team member for project manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_disablecreateofteammemberformanager
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_disablecreateofteammemberformanager); }
			set { Entity.Attributes[Fields.msdyn_disablecreateofteammemberformanager] = value; }
		}

		/// <summary>
		/// <para>Shows the total of actual hours and the remaining hours.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Effort estimate at complete (EAC)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_EffortestimateatcompleteEAC
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_EffortestimateatcompleteEAC); }
			set { Entity.Attributes[Fields.msdyn_EffortestimateatcompleteEAC] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the project with respect to the base currency.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_exchangerate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_exchangerate); }
			set { Entity.Attributes[Fields.msdyn_exchangerate] = value; }
		}

		/// <summary>
		/// <para>Specifies if the project is linked to a project in MS Project. System Field - For PSA Use Only.</para>
		/// <para>Boolean</para>
		/// <para>Is Linked To MS Project Client</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsLinkedToMSProjectClient
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsLinkedToMSProjectClient); }
			set { Entity.Attributes[Fields.msdyn_IsLinkedToMSProjectClient] = value; }
		}

		/// <summary>
		/// <para>Shows if the project is a project template. System Field - For PSA Use Only.</para>
		/// <para>Required - Boolean</para>
		/// <para>Is Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_istemplate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_istemplate); }
			set { Entity.Attributes[Fields.msdyn_istemplate] = value; }
		}

		/// <summary>
		/// <para>The URL for the linked document. System Field - For PSA Use Only.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Linked Document URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_linkeddocumenturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_linkeddocumenturl); }
			set { Entity.Attributes[Fields.msdyn_linkeddocumenturl] = value; }
		}

		/// <summary>
		/// <para>Describes the project status.</para>
		/// <para>Picklist</para>
		/// <para>Overall Project Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.msdyn_overallprojectstatus? msdyn_overallprojectstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_overallprojectstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.msdyn_overallprojectstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_overallprojectstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_overallprojectstatus] = null;
			}
		}

		/// <summary>
		/// <para>Shows the aggregate of the planned expense cost of all the associated tasks.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Expense Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedexpensecost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedexpensecost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_plannedexpensecost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_plannedexpensecost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Expense Cost in base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Expense Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedexpensecost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedexpensecost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the aggregate of estimated expense sales on the project - For PSA use only</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Expense Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_PlannedExpenseSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_PlannedExpenseSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PlannedExpenseSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_PlannedExpenseSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimated expense sales in the base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Expense Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedexpensesales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedexpensesales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total estimate hours of the project.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Estimated Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedhours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_plannedhours); }
			set { Entity.Attributes[Fields.msdyn_plannedhours] = value; }
		}

		/// <summary>
		/// <para>Shows the aggregate of the planned labor cost of all the associated tasks.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Labor Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedlaborcost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedlaborcost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_plannedlaborcost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_plannedlaborcost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Labor Cost in base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Labor Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedlaborcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedlaborcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the aggregate of estimated labor sales on the project - For PSA use only</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Labor Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_PlannedSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_PlannedSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PlannedSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_PlannedSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimated labor sales in the base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Labor Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the actual hours divided by effort at estimate.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Progress %</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Progress
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_Progress); }
			set { Entity.Attributes[Fields.msdyn_Progress] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_projectId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_projectId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the project manager assigned to the project.</para>
		/// <para>Required - Lookup to systemuser</para>
		/// <para>Project Manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectmanager
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectmanager); }
			set { Entity.Attributes[Fields.msdyn_projectmanager] = value; }
		}

		/// <summary>
		/// <para>Indicates if the project resource requirements are visible to the resources assigned to the project.</para>
		/// <para>Boolean</para>
		/// <para>Project resource requirements visible to resources</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_projectresourcerequirementsvisibletore
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_projectresourcerequirementsvisibletore); }
			set { Entity.Attributes[Fields.msdyn_projectresourcerequirementsvisibletore] = value; }
		}

		/// <summary>
		/// <para>Select the Team associated with Project.</para>
		/// <para>Lookup to team</para>
		/// <para>Project Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectteamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectteamid); }
			set { Entity.Attributes[Fields.msdyn_projectteamid] = value; }
		}

		/// <summary>
		/// <para>Select the project template behind the project.</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ProjectTemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ProjectTemplate); }
			set { Entity.Attributes[Fields.msdyn_ProjectTemplate] = value; }
		}

		/// <summary>
		/// <para>Shows the difference between the estimated labor cost and the actual labor cost.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Remaining Labor Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_RemainingCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_RemainingCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_RemainingCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_RemainingCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the remaining labor cost in the  base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Remaining Labor Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_remainingcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_remainingcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the difference between the estimate at completion (EAC) and the actual hours.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Remaining Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_RemainingHours
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_RemainingHours); }
			set { Entity.Attributes[Fields.msdyn_RemainingHours] = value; }
		}

		/// <summary>
		/// <para>Shows the difference between the estimated labor sales and the actual labor sales.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Remaining Labor Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_RemainingSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_RemainingSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_RemainingSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_RemainingSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the remaining labor sales in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Remaining Labor Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_remainingsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_remainingsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the actual sales divided by the estimated sales.</para>
		/// <para>ReadOnly - Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Sales Consumption %</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SalesConsumption
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_SalesConsumption); }
		}

		/// <summary>
		/// <para>Shows the total of actual and remaining sales.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Estimate At Complete (EAC)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SalesEstimateAtCompleteEAC
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_SalesEstimateAtCompleteEAC);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Sales Estimate At Complete (EAC) in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Estimate At Complete (EAC) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_salesestimateatcompleteeac_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_salesestimateatcompleteeac_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the contract for this project.</para>
		/// <para>Lookup to salesorder</para>
		/// <para>Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_salesorderid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_salesorderid); }
			set { Entity.Attributes[Fields.msdyn_salesorderid] = value; }
		}

		/// <summary>
		/// <para>Shows the difference between the planned sales and the sales estimate at completion (EAC).</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Variance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SalesVariance
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_SalesVariance);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the value of the sales variance in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Variance (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_salesvariance_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_salesvariance_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the scheduled duration of the project, specified in minutes.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Scheduled Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_scheduleddurationminutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_scheduleddurationminutes); }
			set { Entity.Attributes[Fields.msdyn_scheduleddurationminutes] = value; }
		}

		/// <summary>
		/// <para>Enter the scheduled end time of the project.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Estimated Finish Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_scheduledendUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_scheduledend); }
			set { Entity.Attributes[Fields.msdyn_scheduledend] = value; }
		}

		/// <summary>
		/// <para>Enter the scheduled start time of the project.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_scheduledstartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_scheduledstart); }
			set { Entity.Attributes[Fields.msdyn_scheduledstart] = value; }
		}

		/// <summary>
		/// <para>Describes the schedule performance of the project.</para>
		/// <para>Picklist</para>
		/// <para>Schedule Performance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.msdyn_scheduleperformance? msdyn_scheduleperformance
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_scheduleperformance);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.msdyn_scheduleperformance)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_scheduleperformance] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_scheduleperformance] = null;
			}
		}

		/// <summary>
		/// <para>Shows the difference between the planned effort and the estimate at completion (EAC).</para>
		/// <para>Double - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Schedule Variance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_ScheduleVariance
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_ScheduleVariance); }
			set { Entity.Attributes[Fields.msdyn_ScheduleVariance] = value; }
		}

		/// <summary>
		/// <para>Shows the stage of the project (Deprecated in v3.0).</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Stage Name (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_StageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_StageName); }
			set { Entity.Attributes[Fields.msdyn_StageName] = value; }
		}

		/// <summary>
		/// <para>Shows the most recent update on a status field(comments or overall project status).</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Status Updated On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_statusupdatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_statusupdatedon); }
			set { Entity.Attributes[Fields.msdyn_statusupdatedon] = value; }
		}

		/// <summary>
		/// <para>Type the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_subject); }
			set { Entity.Attributes[Fields.msdyn_subject] = value; }
		}

		/// <summary>
		/// <para>Shows the total number of team members assigned to this project</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Team Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_teamsize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_teamsize); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field Team Size.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Team Size (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_teamsize_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_teamsize_Date); }
		}

		/// <summary>
		/// <para>State of rollup field Team Size.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Team Size (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_teamsize_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_teamsize_State); }
		}

		/// <summary>
		/// <para>Shows the aggregated cost from actuals on the project.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Total Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalActualCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalActualCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalActualCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalActualCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the total actual cost in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Total Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalactualcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalactualcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows aggregated sales values from all project actuals - For PSA use only</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Total Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalActualSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalActualSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalActualSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalActualSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the actual total sales in the base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Total Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalactualsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalactualsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the aggregate of the total planned cost of all the associated tasks.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Total Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalPlannedCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalPlannedCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalPlannedCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalPlannedCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the total planned cost in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Total Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalplannedcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalplannedcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows aggregate of estimated sales values on the project - For PSA use only</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Total Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalPlannedSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalPlannedSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalPlannedSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalPlannedSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimated total sales in the base currency. System Field - For PSA Use Only.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Total Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalplannedsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalplannedsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the work breakdown structure (WBS) duration in days.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_wbsduration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_wbsduration); }
			set { Entity.Attributes[Fields.msdyn_wbsduration] = value; }
		}

		/// <summary>
		/// <para>Select the work hour template used to create the project calendar.</para>
		/// <para>Required - Lookup to msdyn_workhourtemplate</para>
		/// <para>Work hour template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workhourtemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workhourtemplate); }
			set { Entity.Attributes[Fields.msdyn_workhourtemplate] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the Project</para>
		/// <para>State</para>
		/// <para>Project Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Project</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the currency associated with the entity.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
