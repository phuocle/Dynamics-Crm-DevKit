//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ImportFileOptionSets
{
	public enum DataDelimiterCode
	{
		/// <summary>
		/// DoubleQuote = 1
		/// </summary>
		DoubleQuote = 1,
		/// <summary>
		/// None = 2
		/// </summary>
		None = 2,
		/// <summary>
		/// SingleQuote = 3
		/// </summary>
		SingleQuote = 3
	}

	public enum FieldDelimiterCode
	{
		/// <summary>
		/// Colon = 1
		/// </summary>
		Colon = 1,
		/// <summary>
		/// Comma = 2
		/// </summary>
		Comma = 2,
		/// <summary>
		/// Semicolon = 4
		/// </summary>
		Semicolon = 4,
		/// <summary>
		/// Tab = 3
		/// </summary>
		Tab = 3
	}

	public enum FileTypeCode
	{
		/// <summary>
		/// Attachment = 2
		/// </summary>
		Attachment = 2,
		/// <summary>
		/// CSV = 0
		/// </summary>
		CSV = 0,
		/// <summary>
		/// XLSX = 3
		/// </summary>
		XLSX = 3,
		/// <summary>
		/// XML Spreadsheet 2003 = 1
		/// </summary>
		XML_Spreadsheet_2003 = 1
	}

	public enum ProcessCode
	{
		/// <summary>
		/// Ignore = 2
		/// </summary>
		Ignore = 2,
		/// <summary>
		/// Internal = 3
		/// </summary>
		Internal = 3,
		/// <summary>
		/// Process = 1
		/// </summary>
		Process = 1
	}

	public enum ProcessingStatus
	{
		/// <summary>
		/// Complex Transformation = 4
		/// </summary>
		Complex_Transformation = 4,
		/// <summary>
		/// Import Complete = 11
		/// </summary>
		Import_Complete = 11,
		/// <summary>
		/// Import Pass 1 = 9
		/// </summary>
		Import_Pass_1 = 9,
		/// <summary>
		/// Import Pass 2 = 10
		/// </summary>
		Import_Pass_2 = 10,
		/// <summary>
		/// Lookup Transformation = 5
		/// </summary>
		Lookup_Transformation = 5,
		/// <summary>
		/// Not Started = 1
		/// </summary>
		Not_Started = 1,
		/// <summary>
		/// Owner Transformation = 7
		/// </summary>
		Owner_Transformation = 7,
		/// <summary>
		/// Parsing = 2
		/// </summary>
		Parsing = 2,
		/// <summary>
		/// Parsing Complete = 3
		/// </summary>
		Parsing_Complete = 3,
		/// <summary>
		/// Picklist Transformation = 6
		/// </summary>
		Picklist_Transformation = 6,
		/// <summary>
		/// Primary Key Transformation = 12
		/// </summary>
		Primary_Key_Transformation = 12,
		/// <summary>
		/// Transformation Complete = 8
		/// </summary>
		Transformation_Complete = 8
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0
	}

	public enum StatusCode
	{
		/// <summary>
		/// Completed = 4
		/// </summary>
		Completed = 4,
		/// <summary>
		/// Failed = 5
		/// </summary>
		Failed = 5,
		/// <summary>
		/// Importing = 3
		/// </summary>
		Importing = 3,
		/// <summary>
		/// Parsing = 1
		/// </summary>
		Parsing = 1,
		/// <summary>
		/// Submitted = 0
		/// </summary>
		Submitted = 0,
		/// <summary>
		/// Transforming = 2
		/// </summary>
		Transforming = 2
	}

	public enum UpsertModeCode
	{
		/// <summary>
		/// Create = 0
		/// </summary>
		Create = 0,
		/// <summary>
		/// Ignore = 2
		/// </summary>
		Ignore = 2,
		/// <summary>
		/// Update = 1
		/// </summary>
		Update = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ImportFile : EntityBase
	{
		public struct Fields
		{
			public const string AdditionalHeaderRow = "additionalheaderrow";
			public const string CompletedOn = "completedon";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DataDelimiterCode = "datadelimitercode";
			public const string EnableDuplicateDetection = "enableduplicatedetection";
			public const string EntityKeyId = "entitykeyid";
			public const string FailureCount = "failurecount";
			public const string FieldDelimiterCode = "fielddelimitercode";
			public const string FileTypeCode = "filetypecode";
			public const string HeaderRow = "headerrow";
			public const string ImportFileId = "importfileid";
			public const string ImportId = "importid";
			public const string ImportMapId = "importmapid";
			public const string IsFirstRowHeader = "isfirstrowheader";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParsedTableColumnPrefix = "parsedtablecolumnprefix";
			public const string ParsedTableColumnsNumber = "parsedtablecolumnsnumber";
			public const string ParsedTableName = "parsedtablename";
			public const string PartialFailureCount = "partialfailurecount";
			public const string ProcessCode = "processcode";
			public const string ProcessingStatus = "processingstatus";
			public const string ProgressCounter = "progresscounter";
			public const string RecordsOwnerId = "recordsownerid";
			public const string RelatedEntityColumns = "relatedentitycolumns";
			public const string Size = "size";
			public const string Source = "source";
			public const string SourceEntityName = "sourceentityname";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SuccessCount = "successcount";
			public const string TargetEntityName = "targetentityname";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalCount = "totalcount";
			public const string UpsertModeCode = "upsertmodecode";
			public const string UseSystemMap = "usesystemmap";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}

		public const string EntityLogicalName = "importfile";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4412;

		[DebuggerNonUserCode()]
		public ImportFile()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportFile(Guid ImportFileId)
		{
			Entity = new Entity(EntityLogicalName, ImportFileId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportFile(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportFile(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportFile(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportFile(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the secondary column headers. The additional headers are used during the process of transforming the import file into import data records.</para>
		/// <para>ReadOnly - String - MaxLength: 100000</para>
		/// <para>Additional Header</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdditionalHeaderRow
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdditionalHeaderRow); }
		}

		/// <summary>
		/// <para>Shows the date and time when the import associated with the import file was completed.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
		}

		/// <summary>
		/// <para>Stores the content of the import file, stored as comma-separated values.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the single-character data delimiter used in the import file. This is typically a single or double quotation mark.</para>
		/// <para>Picklist</para>
		/// <para>Data Delimiter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.DataDelimiterCode? DataDelimiterCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataDelimiterCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.DataDelimiterCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataDelimiterCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataDelimiterCode] = null;
			}
		}

		/// <summary>
		/// <para>Select whether duplicate-detection rules should be run against the import job.</para>
		/// <para>Boolean</para>
		/// <para>Enable Duplicate Detection</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableDuplicateDetection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableDuplicateDetection); }
			set { Entity.Attributes[Fields.EnableDuplicateDetection] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the Alternate key Id</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Entity Key ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityKeyId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityKeyId); }
			set { Entity.Attributes[Fields.EntityKeyId] = value; }
		}

		/// <summary>
		/// <para>Shows the number of records in the import file that cannot be imported.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Errors</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailureCount); }
		}

		/// <summary>
		/// <para>Select the character that is used to separate each field in the import file. Typically, it is a comma.</para>
		/// <para>Picklist</para>
		/// <para>Field Delimiter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.FieldDelimiterCode? FieldDelimiterCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FieldDelimiterCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.FieldDelimiterCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FieldDelimiterCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FieldDelimiterCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the type of source file that is uploaded for import.</para>
		/// <para>Picklist</para>
		/// <para>File Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.FileTypeCode? FileTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FileTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.FileTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FileTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FileTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows a list of each column header in the import file separated by a comma. The header is used for parsing the file during the import job.</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para>Header</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HeaderRow
		{
			get { return Entity.GetAttributeValue<string>(Fields.HeaderRow); }
		}

		/// <summary>
		/// <para>Unique identifier of the import file.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Import</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ImportFileId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ImportFileId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Choose the import job that the file was uploaded for.</para>
		/// <para>Lookup to import</para>
		/// <para>Import Job ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImportId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImportId); }
			set { Entity.Attributes[Fields.ImportId] = value; }
		}

		/// <summary>
		/// <para>Choose a data map to match the import file and its column headers with the record types and fields in Microsoft Dynamics 365. If the column headers in the file match the display names of the target fields in Microsoft Dynamics 365, we import the data automatically. If not, you can manually define matches during import.</para>
		/// <para>Lookup to importmap</para>
		/// <para>Data Map</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImportMapId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImportMapId); }
			set { Entity.Attributes[Fields.ImportMapId] = value; }
		}

		/// <summary>
		/// <para>Select whether the first row of the import file contains column headings, which are used for data mapping during the import job.</para>
		/// <para>Boolean</para>
		/// <para>Is First Row Header</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFirstRowHeader
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFirstRowHeader); }
			set { Entity.Attributes[Fields.IsFirstRowHeader] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the name of the import file. This name is based on the name of the uploaded file.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Import Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Enter the user who is assigned to follow up with or manage the import file. This field is updated every time the import file is assigned to a different user.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Shows the business unit that the record owner belongs to.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the import file.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the import file.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Shows the prefix applied to each column after the import file is parsed.</para>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para>Parse Table Column Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTableColumnPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTableColumnPrefix); }
		}

		/// <summary>
		/// <para>Shows the number of columns included in the parsed import file.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Parse Table Column Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ParsedTableColumnsNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ParsedTableColumnsNumber); }
		}

		/// <summary>
		/// <para>Shows the name of the table that contains the parsed data from the import file.</para>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para>Parse Table</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTableName); }
		}

		/// <summary>
		/// <para>Shows the number of records in this file that had failures during the import.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Partial Failures</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PartialFailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PartialFailureCount); }
		}

		/// <summary>
		/// <para>Tells whether the import file should be ignored or processed during the import.</para>
		/// <para>Picklist</para>
		/// <para>Process Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode? ProcessCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProcessCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProcessCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the import file&apos;s processing status code. This indicates whether the data in the import file has been parsed, transformed, or imported.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Processing Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessingStatus? ProcessingStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessingStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessingStatus)value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the progress code for the processing of the import file. This field is used when a paused import job is resumed.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Progress Counter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProgressCounter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProgressCounter); }
		}

		/// <summary>
		/// <para>Choose the user that the records created during the import job should be assigned to.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Records Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RecordsOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RecordsOwnerId); }
			set { Entity.Attributes[Fields.RecordsOwnerId] = value; }
		}

		/// <summary>
		/// <para>Shows the columns that are mapped to a related record type (entity) of the primary record type (entity) included in the import file.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedEntityColumns
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedEntityColumns); }
			set { Entity.Attributes[Fields.RelatedEntityColumns] = value; }
		}

		/// <summary>
		/// <para>Shows the size of the import file, in kilobytes.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Size
		{
			get { return Entity.GetAttributeValue<string>(Fields.Size); }
			set { Entity.Attributes[Fields.Size] = value; }
		}

		/// <summary>
		/// <para>Shows the name of the data source file uploaded in the import job.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Source
		{
			get { return Entity.GetAttributeValue<string>(Fields.Source); }
			set { Entity.Attributes[Fields.Source] = value; }
		}

		/// <summary>
		/// <para>Shows the record type (entity) of the source data.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Source Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceEntityName); }
			set { Entity.Attributes[Fields.SourceEntityName] = value; }
		}

		/// <summary>
		/// <para>Shows the status of the import file record. By default, all records are active and can&apos;t be deactivated.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the reason code that explains the import file&apos;s status to identify the stage of the import process, from parsing the data to completed.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the number of records in the import file that are imported successfully.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Successes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SuccessCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SuccessCount); }
		}

		/// <summary>
		/// <para>Select the target record type (entity) for the records that will be created during the import job.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Target Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TargetEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.TargetEntityName); }
			set { Entity.Attributes[Fields.TargetEntityName] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the total number of records in the import file.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Total Processed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TotalCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TotalCount); }
		}

		/// <summary>
		/// <para>Select the value which is used for identify the upsert mode. By Default, it is a Create.</para>
		/// <para>Picklist</para>
		/// <para>Upsert Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode? UpsertModeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UpsertModeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UpsertModeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UpsertModeCode] = null;
			}
		}

		/// <summary>
		/// <para>Tells whether an automatic system map was applied to the import file, which automatically maps the import data to the target entity in Microsoft Dynamics 365.</para>
		/// <para>Boolean</para>
		/// <para>Use System Map</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseSystemMap
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseSystemMap); }
			set { Entity.Attributes[Fields.UseSystemMap] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}
