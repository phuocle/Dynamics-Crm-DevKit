//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_ciproviderOptionSets
{
	public enum msdyn_ciproviderapiversion
	{
		/// <summary>
		/// 1.0 = 0
		/// </summary>
		_10 = 0,
		/// <summary>
		/// 2.0 = 1
		/// </summary>
		_20 = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ciprovider : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AppSelector = "msdyn_appselector";
			public const string msdyn_cifsolversion = "msdyn_cifsolversion";
			public const string msdyn_ciproviderapiversion = "msdyn_ciproviderapiversion";
			public const string msdyn_ciproviderId = "msdyn_ciproviderid";
			public const string msdyn_ClickToAct = "msdyn_clicktoact";
			public const string msdyn_customparams = "msdyn_customparams";
			public const string msdyn_EnableAnalytics = "msdyn_enableanalytics";
			public const string msdyn_Label = "msdyn_label";
			public const string msdyn_LandingUrl = "msdyn_landingurl";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_RoleSelector = "msdyn_roleselector";
			public const string msdyn_SortOrder = "msdyn_sortorder";
			public const string msdyn_trusteddomain = "msdyn_trusteddomain";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_ciprovider";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10690;

		[DebuggerNonUserCode()]
		public msdyn_ciprovider()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ciprovider(Guid msdyn_ciproviderId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ciproviderId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ciprovider(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ciprovider(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ciprovider(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ciprovider(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select Unified Interface Apps for the Channel</para>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>App Selector</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AppSelector
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AppSelector); }
			set { Entity.Attributes[Fields.msdyn_AppSelector] = value; }
		}

		/// <summary>
		/// <para>Version of the CIF Solution</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>CIF Sol Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cifsolversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cifsolversion); }
			set { Entity.Attributes[Fields.msdyn_cifsolversion] = value; }
		}

		/// <summary>
		/// <para>API Version</para>
		/// <para>Picklist</para>
		/// <para>API Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ciproviderOptionSets.msdyn_ciproviderapiversion? msdyn_ciproviderapiversion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ciproviderapiversion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ciproviderOptionSets.msdyn_ciproviderapiversion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ciproviderapiversion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ciproviderapiversion] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for CIProvider records</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>CIProviderId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ciproviderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ciproviderId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Enable Outbound Communication</para>
		/// <para>Required - Boolean</para>
		/// <para>Enable Outbound Communication</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ClickToAct
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ClickToAct); }
			set { Entity.Attributes[Fields.msdyn_ClickToAct] = value; }
		}

		/// <summary>
		/// <para>Custom Parameters for the Widget to load</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Custom Parameters</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_customparams
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_customparams); }
			set { Entity.Attributes[Fields.msdyn_customparams] = value; }
		}

		/// <summary>
		/// <para>Enable CIF Analytics for the current provider</para>
		/// <para>Boolean</para>
		/// <para>Enable Analytics</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableAnalytics
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableAnalytics); }
			set { Entity.Attributes[Fields.msdyn_EnableAnalytics] = value; }
		}

		/// <summary>
		/// <para>The label is displayed as the title on the widget</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Label</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Label
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Label); }
			set { Entity.Attributes[Fields.msdyn_Label] = value; }
		}

		/// <summary>
		/// <para>URL for the Channel provider</para>
		/// <para>Required - String - MaxLength: 1024</para>
		/// <para>Channel URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LandingUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LandingUrl); }
			set { Entity.Attributes[Fields.msdyn_LandingUrl] = value; }
		}

		/// <summary>
		/// <para>Name of the Channel provider</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Select the Roles for the Channel</para>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>Role Selector</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RoleSelector
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RoleSelector); }
			set { Entity.Attributes[Fields.msdyn_RoleSelector] = value; }
		}

		/// <summary>
		/// <para>Select Channel Order as 0 for this Channel to take precedence over others.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 1,000</para>
		/// <para>Channel Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_SortOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_SortOrder); }
			set { Entity.Attributes[Fields.msdyn_SortOrder] = value; }
		}

		/// <summary>
		/// <para>Domain to be whitelisted</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Trusted Domain</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_trusteddomain
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_trusteddomain); }
			set { Entity.Attributes[Fields.msdyn_trusteddomain] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the Channel Provider</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ciproviderOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ciproviderOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Channel Provider</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ciproviderOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ciproviderOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
