//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.PriceLevelOptionSets
{
	public enum FreightTermsCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum msdyn_Entity
	{
		/// <summary>
		/// Customer = 192350001
		/// </summary>
		Customer = 192350001,
		/// <summary>
		/// Organization = 192350000
		/// </summary>
		Organization = 192350000,
		/// <summary>
		/// Project = 192350003
		/// </summary>
		Project = 192350003,
		/// <summary>
		/// Sales document = 192350002
		/// </summary>
		Sales_document = 192350002
	}

	public enum msdyn_Module
	{
		/// <summary>
		/// Cost = 192350000
		/// </summary>
		Cost = 192350000,
		/// <summary>
		/// Purchase = 192350001
		/// </summary>
		Purchase = 192350001,
		/// <summary>
		/// Sales = 192350002
		/// </summary>
		Sales = 192350002
	}

	public enum PaymentMethodCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum ShippingMethodCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 100001
		/// </summary>
		Active = 100001,
		/// <summary>
		/// Inactive = 100002
		/// </summary>
		Inactive = 100002
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PriceLevel : EntityBase
	{
		public struct Fields
		{
			public const string BeginDate = "begindate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EndDate = "enddate";
			public const string ExchangeRate = "exchangerate";
			public const string FreightTermsCode = "freighttermscode";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_BreakHoursBillable = "msdyn_breakhoursbillable";
			public const string msdyn_CopiedFromPriceLevel = "msdyn_copiedfrompricelevel";
			public const string msdyn_Entity = "msdyn_entity";
			public const string msdyn_Module = "msdyn_module";
			public const string msdyn_TimeUnit = "msdyn_timeunit";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PaymentMethodCode = "paymentmethodcode";
			public const string PriceLevelId = "pricelevelid";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "pricelevel";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1022;

		[DebuggerNonUserCode()]
		public PriceLevel()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PriceLevel(Guid PriceLevelId)
		{
			Entity = new Entity(EntityLogicalName, PriceLevelId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PriceLevel(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PriceLevel(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PriceLevel(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PriceLevel(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Date on which the price list becomes effective.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? BeginDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.BeginDate); }
			set { Entity.Attributes[Fields.BeginDate] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the price list.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the pricelevel.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the price list.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Date that is the last day the price list is valid.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndDate); }
			set { Entity.Attributes[Fields.EndDate] = value; }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Freight terms for the price list.</para>
		/// <para>Picklist</para>
		/// <para>Freight Terms</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PriceLevelOptionSets.FreightTermsCode? FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PriceLevelOptionSets.FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FreightTermsCode] = null;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the price list.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the pricelevel.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Break Hours Billable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_BreakHoursBillable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_BreakHoursBillable); }
			set { Entity.Attributes[Fields.msdyn_BreakHoursBillable] = value; }
		}

		/// <summary>
		/// <para>Shows the price level that this price level was copied from.</para>
		/// <para>Lookup to pricelevel</para>
		/// <para>Copied From</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CopiedFromPriceLevel
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CopiedFromPriceLevel); }
			set { Entity.Attributes[Fields.msdyn_CopiedFromPriceLevel] = value; }
		}

		/// <summary>
		/// <para>Select the entity for this price level.</para>
		/// <para>Picklist</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PriceLevelOptionSets.msdyn_Entity? msdyn_Entity
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Entity);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PriceLevelOptionSets.msdyn_Entity)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Entity] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Entity] = null;
			}
		}

		/// <summary>
		/// <para>Select the context for this price level i.e whether it is sales prices, cost prices or purchase prices</para>
		/// <para>Required - Picklist</para>
		/// <para>Context</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PriceLevelOptionSets.msdyn_Module? msdyn_Module
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Module);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PriceLevelOptionSets.msdyn_Module)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Module] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Module] = null;
			}
		}

		/// <summary>
		/// <para>Select the default unit of role based time on this price list</para>
		/// <para>Lookup to uom</para>
		/// <para>Time Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeUnit); }
			set { Entity.Attributes[Fields.msdyn_TimeUnit] = value; }
		}

		/// <summary>
		/// <para>Name of the price list.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Payment terms to use with the price list.</para>
		/// <para>Picklist</para>
		/// <para>Payment Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PriceLevelOptionSets.PaymentMethodCode? PaymentMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PriceLevelOptionSets.PaymentMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PaymentMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PaymentMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the price list.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PriceLevelId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PriceLevelId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Method of shipment for products in the price list.</para>
		/// <para>Picklist</para>
		/// <para>Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PriceLevelOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PriceLevelOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Status of the price list.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PriceLevelOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PriceLevelOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the price list.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PriceLevelOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PriceLevelOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the price level.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
