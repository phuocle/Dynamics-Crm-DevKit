//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SdkMessageOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SdkMessage : EntityBase
	{
		public struct Fields
		{
			public const string AutoTransact = "autotransact";
			public const string Availability = "availability";
			public const string CategoryName = "categoryname";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomizationLevel = "customizationlevel";
			public const string ExecutePrivilegeName = "executeprivilegename";
			public const string Expand = "expand";
			public const string IntroducedVersion = "introducedversion";
			public const string IsActive = "isactive";
			public const string IsManaged = "ismanaged";
			public const string IsPrivate = "isprivate";
			public const string IsReadOnly = "isreadonly";
			public const string IsValidForExecuteAsync = "isvalidforexecuteasync";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string SdkMessageId = "sdkmessageid";
			public const string SdkMessageIdUnique = "sdkmessageidunique";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string Template = "template";
			public const string ThrottleSettings = "throttlesettings";
			public const string VersionNumber = "versionnumber";
			public const string WorkflowSdkStepEnabled = "workflowsdkstepenabled";
		}

		public const string EntityLogicalName = "sdkmessage";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4606;

		[DebuggerNonUserCode()]
		public SdkMessage()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessage(Guid SdkMessageId)
		{
			Entity = new Entity(EntityLogicalName, SdkMessageId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessage(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessage(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessage(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessage(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Information about whether the SDK message is automatically transacted.</para>
		/// <para>Boolean</para>
		/// <para>Auto Transact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AutoTransact
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AutoTransact); }
			set { Entity.Attributes[Fields.AutoTransact] = value; }
		}

		/// <summary>
		/// <para>Identifies where a method will be exposed. 0 - Server, 1 - Client, 2 - both.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Availability</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Availability
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Availability); }
			set { Entity.Attributes[Fields.Availability] = value; }
		}

		/// <summary>
		/// <para>If this is a categorized method, this is the name, otherwise None.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para>Category Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CategoryName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CategoryName); }
			set { Entity.Attributes[Fields.CategoryName] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SdkMessageOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SdkMessageOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the SDK message.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the SDK message was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the sdkmessage.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Customization level of the SDK message.</para>
		/// <para>ReadOnly - Integer - MinValue: -255 - MaxValue: 255</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CustomizationLevel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CustomizationLevel); }
		}

		/// <summary>
		/// <para>Name of the privilege that allows execution of the SDK message</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Execute Privilege Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExecutePrivilegeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExecutePrivilegeName); }
			set { Entity.Attributes[Fields.ExecutePrivilegeName] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the SDK message should have its requests expanded per primary entity defined in its filters.</para>
		/// <para>Boolean</para>
		/// <para>Expand</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Expand
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Expand); }
			set { Entity.Attributes[Fields.Expand] = value; }
		}

		/// <summary>
		/// <para>Version in which the component is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Information about whether the SDK message is active.</para>
		/// <para>Boolean</para>
		/// <para>Is Active</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActive
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActive); }
			set { Entity.Attributes[Fields.IsActive] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether this component is managed.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Indicates whether the SDK message is private.</para>
		/// <para>Boolean</para>
		/// <para>Is Private</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
			set { Entity.Attributes[Fields.IsPrivate] = value; }
		}

		/// <summary>
		/// <para>Identifies whether an SDK message will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly .</para>
		/// <para>Boolean</para>
		/// <para>Intent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsReadOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsReadOnly); }
			set { Entity.Attributes[Fields.IsReadOnly] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Valid for Execute Async</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsValidForExecuteAsync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsValidForExecuteAsync); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the SDK message.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the SDK message was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the sdkmessage.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the SDK message.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization with which the SDK message is associated.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message entity.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SdkMessageId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SdkMessageId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SdkMessageIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SdkMessageIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Indicates whether the SDK message is a template.</para>
		/// <para>Boolean</para>
		/// <para>Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Template
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Template); }
			set { Entity.Attributes[Fields.Template] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - String - MaxLength: 512</para>
		/// <para>Throttle Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ThrottleSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.ThrottleSettings); }
		}

		/// <summary>
		/// <para>Number that identifies a specific revision of the SDK message.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Whether or not the SDK message can be called from a workflow.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>WorkflowSdkStepEnabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? WorkflowSdkStepEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.WorkflowSdkStepEnabled); }
		}
	}
}
