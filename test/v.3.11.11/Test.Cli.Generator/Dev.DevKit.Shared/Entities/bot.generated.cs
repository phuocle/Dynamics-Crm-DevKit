//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.botOptionSets
{
	public enum accesscontrolpolicy
	{
		/// <summary>
		/// Any = 0
		/// </summary>
		Any = 0,
		/// <summary>
		/// Chatbot readers = 1
		/// </summary>
		Chatbot_readers = 1,
		/// <summary>
		/// Group membership = 2
		/// </summary>
		Group_membership = 2
	}

	public enum authenticationmode
	{
		/// <summary>
		/// Custom Azure Active Directory = 3
		/// </summary>
		Custom_Azure_Active_Directory = 3,
		/// <summary>
		/// Generic OAuth2 = 4
		/// </summary>
		Generic_OAuth2 = 4,
		/// <summary>
		/// Integrated = 2
		/// </summary>
		Integrated = 2,
		/// <summary>
		/// None = 1
		/// </summary>
		None = 1,
		/// <summary>
		/// Unspecified = 0
		/// </summary>
		Unspecified = 0
	}

	public enum authenticationtrigger
	{
		/// <summary>
		/// Always = 1
		/// </summary>
		Always = 1,
		/// <summary>
		/// As Needed = 0
		/// </summary>
		As_Needed = 0
	}

	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum Language
	{
		/// <summary>
		/// Arabic = 1025
		/// </summary>
		Arabic = 1025,
		/// <summary>
		/// Chinese (Simplified) = 2052
		/// </summary>
		Chinese_Simplified = 2052,
		/// <summary>
		/// Chinese (Traditional) = 1028
		/// </summary>
		Chinese_Traditional = 1028,
		/// <summary>
		/// Czech = 1029
		/// </summary>
		Czech = 1029,
		/// <summary>
		/// Danish = 1030
		/// </summary>
		Danish = 1030,
		/// <summary>
		/// Dutch = 1043
		/// </summary>
		Dutch = 1043,
		/// <summary>
		/// English = 1033
		/// </summary>
		English = 1033,
		/// <summary>
		/// Finnish = 1035
		/// </summary>
		Finnish = 1035,
		/// <summary>
		/// French = 1036
		/// </summary>
		French = 1036,
		/// <summary>
		/// German = 1031
		/// </summary>
		German = 1031,
		/// <summary>
		/// Greek = 1032
		/// </summary>
		Greek = 1032,
		/// <summary>
		/// Hindi = 1081
		/// </summary>
		Hindi = 1081,
		/// <summary>
		/// Indonesian = 1057
		/// </summary>
		Indonesian = 1057,
		/// <summary>
		/// Italian = 1040
		/// </summary>
		Italian = 1040,
		/// <summary>
		/// Japanese = 1041
		/// </summary>
		Japanese = 1041,
		/// <summary>
		/// Korean = 1042
		/// </summary>
		Korean = 1042,
		/// <summary>
		/// Norwegian = 1044
		/// </summary>
		Norwegian = 1044,
		/// <summary>
		/// Polish = 1045
		/// </summary>
		Polish = 1045,
		/// <summary>
		/// Portuguese (Brazilian) = 1046
		/// </summary>
		Portuguese_Brazilian = 1046,
		/// <summary>
		/// Russian = 1049
		/// </summary>
		Russian = 1049,
		/// <summary>
		/// Spanish = 1034
		/// </summary>
		Spanish = 1034,
		/// <summary>
		/// Swedish = 1053
		/// </summary>
		Swedish = 1053,
		/// <summary>
		/// Thai = 1054
		/// </summary>
		Thai = 1054,
		/// <summary>
		/// Turkish = 1055
		/// </summary>
		Turkish = 1055
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Deprovisioned = 2
		/// </summary>
		Deprovisioned = 2,
		/// <summary>
		/// MissingLicense = 5
		/// </summary>
		MissingLicense = 5,
		/// <summary>
		/// Provisioned = 1
		/// </summary>
		Provisioned = 1,
		/// <summary>
		/// ProvisionFailed = 4
		/// </summary>
		ProvisionFailed = 4,
		/// <summary>
		/// Provisioning = 3
		/// </summary>
		Provisioning = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class bot : EntityBase
	{
		public struct Fields
		{
			public const string accesscontrolpolicy = "accesscontrolpolicy";
			public const string applicationmanifestinformation = "applicationmanifestinformation";
			public const string authenticationmode = "authenticationmode";
			public const string authenticationtrigger = "authenticationtrigger";
			public const string authorizedsecuritygroupids = "authorizedsecuritygroupids";
			public const string botId = "botid";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string Configuration = "configuration";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string iconbase64 = "iconbase64";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string Language = "language";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string publishedby = "publishedby";
			public const string publishedon = "publishedon";
			public const string SchemaName = "schemaname";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string SynchronizationStatus = "synchronizationstatus";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "bot";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10078;

		[DebuggerNonUserCode()]
		public bot()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public bot(Guid botId)
		{
			Entity = new Entity(EntityLogicalName, botId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public bot(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public bot(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public bot(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public bot(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Defines which users may interact with the bot.</para>
		/// <para>Required - Picklist</para>
		/// <para>Access Control Policy</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy? accesscontrolpolicy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.accesscontrolpolicy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.accesscontrolpolicy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.accesscontrolpolicy] = null;
			}
		}

		/// <summary>
		/// <para>Stores information with application manifest data such as Teams application information.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Application Manifest Information</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string applicationmanifestinformation
		{
			get { return Entity.GetAttributeValue<string>(Fields.applicationmanifestinformation); }
			set { Entity.Attributes[Fields.applicationmanifestinformation] = value; }
		}

		/// <summary>
		/// <para>Defines how the bot should be authenticated to the user.</para>
		/// <para>Required - Picklist</para>
		/// <para>Authentication Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode? authenticationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.authenticationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.authenticationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.authenticationmode] = null;
			}
		}

		/// <summary>
		/// <para>Defines at which point authentication for the bot should be triggered. Security can be enforced at the bot entry point, removing the need for explicit authentication nodes in the dialog flow.</para>
		/// <para>Required - Picklist</para>
		/// <para>Authentication trigger</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger? authenticationtrigger
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.authenticationtrigger);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.authenticationtrigger] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.authenticationtrigger] = null;
			}
		}

		/// <summary>
		/// <para>Contains a comma-delimited list of up to 20 Azure Active Directory Group IDs that are allowed to interact with the bot. This field is ignored if Access Control Policy is not set to Group membership.</para>
		/// <para>String - MaxLength: 739</para>
		/// <para>Authorized Security Groups</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string authorizedsecuritygroupids
		{
			get { return Entity.GetAttributeValue<string>(Fields.authorizedsecuritygroupids); }
			set { Entity.Attributes[Fields.authorizedsecuritygroupids] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the Chatbot.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Bot</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid botId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.botId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Row id unique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Used to store content of bot configuration data.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Configuration
		{
			get { return Entity.GetAttributeValue<string>(Fields.Configuration); }
			set { Entity.Attributes[Fields.Configuration] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Used to visually identify your bot in channels and services. Represented in a base64 encoded string. Must be in PNG format, and no larger than 30K in size. This value can be changed at any time.</para>
		/// <para>Memo - MaxLength: 51200</para>
		/// <para>Icon (Base64)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string iconbase64
		{
			get { return Entity.GetAttributeValue<string>(Fields.iconbase64); }
			set { Entity.Attributes[Fields.iconbase64] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>The language identifier (LCID) of this Chatbot.</para>
		/// <para>Required - Picklist</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.Language? Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Language] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The display name of the Chatbot.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last published the bot.</para>
		/// <para>Required - Lookup to systemuser</para>
		/// <para>Published By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference publishedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.publishedby); }
			set { Entity.Attributes[Fields.publishedby] = value; }
		}

		/// <summary>
		/// <para>Date and time when the Chatbot was last published</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Published On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? publishedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.publishedon); }
			set { Entity.Attributes[Fields.publishedon] = value; }
		}

		/// <summary>
		/// <para>Unique name identifying the Chatbot.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>SchemaName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaName); }
			set { Entity.Attributes[Fields.SchemaName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Status of the Chatbot</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Chatbot</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Used to store information about the synchronization operations of the bot</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>SynchronizationStatus</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SynchronizationStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.SynchronizationStatus); }
			set { Entity.Attributes[Fields.SynchronizationStatus] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
