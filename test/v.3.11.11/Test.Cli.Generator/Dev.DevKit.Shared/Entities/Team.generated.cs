//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.TeamOptionSets
{
	public enum MembershipType
	{
		/// <summary>
		/// Guests = 3
		/// </summary>
		Guests = 3,
		/// <summary>
		/// Members = 1
		/// </summary>
		Members = 1,
		/// <summary>
		/// Members and guests = 0
		/// </summary>
		Members_and_guests = 0,
		/// <summary>
		/// Owners = 2
		/// </summary>
		Owners = 2
	}

	public enum TeamType
	{
		/// <summary>
		/// AAD Office Group = 3
		/// </summary>
		AAD_Office_Group = 3,
		/// <summary>
		/// AAD Security Group = 2
		/// </summary>
		AAD_Security_Group = 2,
		/// <summary>
		/// Access = 1
		/// </summary>
		Access = 1,
		/// <summary>
		/// Owner = 0
		/// </summary>
		Owner = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Team : EntityBase
	{
		public struct Fields
		{
			public const string AdministratorId = "administratorid";
			public const string AzureActiveDirectoryObjectId = "azureactivedirectoryobjectid";
			public const string BusinessUnitId = "businessunitid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EMailAddress = "emailaddress";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDefault = "isdefault";
			public const string IsSasTokenSet = "issastokenset";
			public const string MembershipType = "membershiptype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ProcessId = "processid";
			public const string QueueId = "queueid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string SasToken = "sastoken";
			public const string ShareLinkQualifier = "sharelinkqualifier";
			public const string StageId = "stageid";
			public const string SystemManaged = "systemmanaged";
			public const string TeamId = "teamid";
			public const string TeamTemplateId = "teamtemplateid";
			public const string TeamType = "teamtype";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string VersionNumber = "versionnumber";
			public const string YomiName = "yominame";
		}

		public const string EntityLogicalName = "team";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9;

		[DebuggerNonUserCode()]
		public Team()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Team(Guid TeamId)
		{
			Entity = new Entity(EntityLogicalName, TeamId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Team(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Team(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Team(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Team(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user primary responsible for the team.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Administrator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AdministratorId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AdministratorId); }
			set { Entity.Attributes[Fields.AdministratorId] = value; }
		}

		/// <summary>
		/// <para>The Azure active directory object Id for a group.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Azure AD Object Id for a group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AzureActiveDirectoryObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AzureActiveDirectoryObjectId); }
			set { Entity.Attributes[Fields.AzureActiveDirectoryObjectId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit with which the team is associated.</para>
		/// <para>Lookup to businessunit</para>
		/// <para>Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the team.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the team was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the team.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the team.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Email address for the team.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress); }
			set { Entity.Attributes[Fields.EMailAddress] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the team with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Information about whether the team is a default business unit team.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefault); }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSasTokenSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSasTokenSet); }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Membership Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TeamOptionSets.MembershipType? MembershipType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MembershipType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TeamOptionSets.MembershipType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MembershipType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MembershipType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the team.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the team was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the team.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the team.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Team Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the team.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Shows the ID of the process.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the default queue for the team.</para>
		/// <para>Lookup to queue</para>
		/// <para>Default Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QueueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QueueId); }
			set { Entity.Attributes[Fields.QueueId] = value; }
		}

		/// <summary>
		/// <para>Choose the record that the team relates to.</para>
		/// <para>Lookup to knowledgearticle, opportunity</para>
		/// <para>Regarding Object Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Sas Token for Team.</para>
		/// <para>ReadOnly - String - MaxLength: 50</para>
		/// <para>Sas Token</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SasToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.SasToken); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - String - MaxLength: 1250</para>
		/// <para>Share Link Qualifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShareLinkQualifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShareLinkQualifier); }
		}

		/// <summary>
		/// <para>Shows the ID of the stage.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Process Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Select whether the team will be managed by the system.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is System Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SystemManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SystemManaged); }
		}

		/// <summary>
		/// <para>Unique identifier for the team.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TeamId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TeamId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the team template that is associated with the team.</para>
		/// <para>Lookup to teamtemplate</para>
		/// <para>Team Template Identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TeamTemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TeamTemplateId); }
			set { Entity.Attributes[Fields.TeamTemplateId] = value; }
		}

		/// <summary>
		/// <para>Select the team type.</para>
		/// <para>Picklist</para>
		/// <para>Team Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TeamOptionSets.TeamType? TeamType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TeamType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TeamOptionSets.TeamType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TeamType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TeamType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the team.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Version number of the team.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Pronunciation of the full name of the team, written in phonetic hiragana or katakana characters.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Yomi Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiName); }
			set { Entity.Attributes[Fields.YomiName] = value; }
		}
	}
}
