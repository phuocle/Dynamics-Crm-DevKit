//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets
{
	public enum msdyn_externalparticipantchanneltype
	{
		/// <summary>
		/// Phone Number = 426120000
		/// </summary>
		Phone_Number = 426120000
	}

	public enum msdyn_mode
	{
		/// <summary>
		/// Consult = 192350003
		/// </summary>
		Consult = 192350003,
		/// <summary>
		/// Monitor = 192350004
		/// </summary>
		Monitor = 192350004,
		/// <summary>
		/// Preview = 192350005
		/// </summary>
		Preview = 192350005,
		/// <summary>
		/// Primary = 192350002
		/// </summary>
		Primary = 192350002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sessionparticipant : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_activedirectoryuserid = "msdyn_activedirectoryuserid";
			public const string msdyn_activetime = "msdyn_activetime";
			public const string msdyn_addedon = "msdyn_addedon";
			public const string msdyn_agentid = "msdyn_agentid";
			public const string msdyn_externalparticipantchannel = "msdyn_externalparticipantchannel";
			public const string msdyn_externalparticipantchanneltype = "msdyn_externalparticipantchanneltype";
			public const string msdyn_idletime = "msdyn_idletime";
			public const string msdyn_inactivetime = "msdyn_inactivetime";
			public const string msdyn_joinedon = "msdyn_joinedon";
			public const string msdyn_lefton = "msdyn_lefton";
			public const string msdyn_mode = "msdyn_mode";
			public const string msdyn_modifiedon = "msdyn_modifiedon";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_omnichannelsession = "msdyn_omnichannelsession";
			public const string msdyn_sessionparticipantId = "msdyn_sessionparticipantid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_sessionparticipant";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10780;

		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(Guid msdyn_sessionparticipantId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sessionparticipantId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of Active Directory User participating in session.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Active Directory User Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_activedirectoryuserid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_activedirectoryuserid); }
			set { Entity.Attributes[Fields.msdyn_activedirectoryuserid] = value; }
		}

		/// <summary>
		/// <para>Active time for agent on the session</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Active time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_activetime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_activetime); }
			set { Entity.Attributes[Fields.msdyn_activetime] = value; }
		}

		/// <summary>
		/// <para>Date and time when agent assigned to the session.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Added On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_addedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_addedon); }
			set { Entity.Attributes[Fields.msdyn_addedon] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of System User participating in session.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Agent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_agentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_agentid); }
			set { Entity.Attributes[Fields.msdyn_agentid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>External channel of participant</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_externalparticipantchannel
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_externalparticipantchannel); }
			set { Entity.Attributes[Fields.msdyn_externalparticipantchannel] = value; }
		}

		/// <summary>
		/// <para>Channel type of external participant</para>
		/// <para>Picklist</para>
		/// <para>Channel type of external participant</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_externalparticipantchanneltype? msdyn_externalparticipantchanneltype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_externalparticipantchanneltype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_externalparticipantchanneltype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_externalparticipantchanneltype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_externalparticipantchanneltype] = null;
			}
		}

		/// <summary>
		/// <para>Idle time for agent on the session</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Idle time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_idletime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_idletime); }
			set { Entity.Attributes[Fields.msdyn_idletime] = value; }
		}

		/// <summary>
		/// <para>Inactive time for agent on the session</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Inactive time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_inactivetime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_inactivetime); }
			set { Entity.Attributes[Fields.msdyn_inactivetime] = value; }
		}

		/// <summary>
		/// <para>Date and time when agent accepted the session.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Joined On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_joinedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_joinedon); }
			set { Entity.Attributes[Fields.msdyn_joinedon] = value; }
		}

		/// <summary>
		/// <para>Date and time when agent left the session.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Left On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_leftonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lefton); }
			set { Entity.Attributes[Fields.msdyn_lefton] = value; }
		}

		/// <summary>
		/// <para>Mode of Agent participation i.e. primary, consult, monitor, preview etc.</para>
		/// <para>Picklist</para>
		/// <para>Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_mode? msdyn_mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_mode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_mode] = null;
			}
		}

		/// <summary>
		/// <para>Date and time when session participant information was last modified.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Session Participant Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_modifiedon); }
			set { Entity.Attributes[Fields.msdyn_modifiedon] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the session associated to the participant.</para>
		/// <para>Lookup to msdyn_ocsession</para>
		/// <para>Omni Channel Session</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_omnichannelsession
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_omnichannelsession); }
			set { Entity.Attributes[Fields.msdyn_omnichannelsession] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Session participant</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sessionparticipantId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sessionparticipantId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Session participant</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Session participant</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
