//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_geolocationsettingsOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_geolocationsettings : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_BeaconConfiguration = "msdyn_beaconconfiguration";
			public const string msdyn_EnableLocationTracking = "msdyn_enablelocationtracking";
			public const string msdyn_fridayendtime = "msdyn_fridayendtime";
			public const string msdyn_fridaystarttime = "msdyn_fridaystarttime";
			public const string msdyn_geolocationsettingsId = "msdyn_geolocationsettingsid";
			public const string msdyn_mondayendtime = "msdyn_mondayendtime";
			public const string msdyn_mondaystarttime = "msdyn_mondaystarttime";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_refreshIntervalSeconds = "msdyn_refreshintervalseconds";
			public const string msdyn_saturdayendtime = "msdyn_saturdayendtime";
			public const string msdyn_saturdaystarttime = "msdyn_saturdaystarttime";
			public const string msdyn_sundayendtime = "msdyn_sundayendtime";
			public const string msdyn_sundaystarttime = "msdyn_sundaystarttime";
			public const string msdyn_thursdayendtime = "msdyn_thursdayendtime";
			public const string msdyn_thursdaystarttime = "msdyn_thursdaystarttime";
			public const string msdyn_tuesdayendtime = "msdyn_tuesdayendtime";
			public const string msdyn_tuesdaystarttime = "msdyn_tuesdaystarttime";
			public const string msdyn_wednesdayendtime = "msdyn_wednesdayendtime";
			public const string msdyn_wednesdaystarttime = "msdyn_wednesdaystarttime";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_geolocationsettings";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10675;

		[DebuggerNonUserCode()]
		public msdyn_geolocationsettings()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_geolocationsettings(Guid msdyn_geolocationsettingsId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_geolocationsettingsId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_geolocationsettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_geolocationsettings(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_geolocationsettings(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_geolocationsettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The Beacon configuration</para>
		/// <para>Memo - MaxLength: 20000</para>
		/// <para>Beacon Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BeaconConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BeaconConfiguration); }
			set { Entity.Attributes[Fields.msdyn_BeaconConfiguration] = value; }
		}

		/// <summary>
		/// <para>Checks if location tracking is enabled.</para>
		/// <para>Required - Boolean</para>
		/// <para>Enable Location Tracking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableLocationTracking
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableLocationTracking); }
			set { Entity.Attributes[Fields.msdyn_EnableLocationTracking] = value; }
		}

		/// <summary>
		/// <para>The Friday tracking end time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Friday End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_fridayendtime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_fridayendtime); }
			set { Entity.Attributes[Fields.msdyn_fridayendtime] = value; }
		}

		/// <summary>
		/// <para>The Friday tracking start time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Friday Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_fridaystarttime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_fridaystarttime); }
			set { Entity.Attributes[Fields.msdyn_fridaystarttime] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>GeolocationSettings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_geolocationsettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_geolocationsettingsId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The Monday tracking end time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Monday End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_mondayendtime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_mondayendtime); }
			set { Entity.Attributes[Fields.msdyn_mondayendtime] = value; }
		}

		/// <summary>
		/// <para>The Monday tracking start time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Monday Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_mondaystarttime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_mondaystarttime); }
			set { Entity.Attributes[Fields.msdyn_mondaystarttime] = value; }
		}

		/// <summary>
		/// <para>The name of the geolocation settings</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>The frequency in seconds at which location data should be uploaded from mobile clients to the server</para>
		/// <para>Integer - MinValue: 60 - MaxValue: 2,147,483,647</para>
		/// <para>Refresh interval</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_refreshIntervalSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_refreshIntervalSeconds); }
			set { Entity.Attributes[Fields.msdyn_refreshIntervalSeconds] = value; }
		}

		/// <summary>
		/// <para>The Saturday tracking end time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Saturday End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_saturdayendtime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_saturdayendtime); }
			set { Entity.Attributes[Fields.msdyn_saturdayendtime] = value; }
		}

		/// <summary>
		/// <para>The Saturday tracking start time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Saturday Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_saturdaystarttime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_saturdaystarttime); }
			set { Entity.Attributes[Fields.msdyn_saturdaystarttime] = value; }
		}

		/// <summary>
		/// <para>The Sunday tracking end time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Sunday End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_sundayendtime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_sundayendtime); }
			set { Entity.Attributes[Fields.msdyn_sundayendtime] = value; }
		}

		/// <summary>
		/// <para>The Sunday tracking start time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Sunday Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_sundaystarttime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_sundaystarttime); }
			set { Entity.Attributes[Fields.msdyn_sundaystarttime] = value; }
		}

		/// <summary>
		/// <para>The Thursday tracking end time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Thursday End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_thursdayendtime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_thursdayendtime); }
			set { Entity.Attributes[Fields.msdyn_thursdayendtime] = value; }
		}

		/// <summary>
		/// <para>The Thursday tracking start time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Thursday Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_thursdaystarttime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_thursdaystarttime); }
			set { Entity.Attributes[Fields.msdyn_thursdaystarttime] = value; }
		}

		/// <summary>
		/// <para>The Tuesday tracking end time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Tuesday End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_tuesdayendtime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_tuesdayendtime); }
			set { Entity.Attributes[Fields.msdyn_tuesdayendtime] = value; }
		}

		/// <summary>
		/// <para>The Tuesday tracking start time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Tuesday Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_tuesdaystarttime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_tuesdaystarttime); }
			set { Entity.Attributes[Fields.msdyn_tuesdaystarttime] = value; }
		}

		/// <summary>
		/// <para>The Wednesday tracking end time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Wednesday End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_wednesdayendtime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_wednesdayendtime); }
			set { Entity.Attributes[Fields.msdyn_wednesdayendtime] = value; }
		}

		/// <summary>
		/// <para>The Wednesday tracking start time</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Wednesday Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_wednesdaystarttime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_wednesdaystarttime); }
			set { Entity.Attributes[Fields.msdyn_wednesdaystarttime] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the GeolocationSettings</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_geolocationsettingsOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_geolocationsettingsOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the GeolocationSettings</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_geolocationsettingsOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_geolocationsettingsOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
