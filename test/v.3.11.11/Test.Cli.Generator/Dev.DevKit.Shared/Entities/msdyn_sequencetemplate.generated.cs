//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets
{
	public enum msdyn_language
	{
		/// <summary>
		/// Arabic - Saudi Arabia = 1025
		/// </summary>
		Arabic_Saudi_Arabia = 1025,
		/// <summary>
		/// Basque - Spain = 1069
		/// </summary>
		Basque_Spain = 1069,
		/// <summary>
		/// Bulgarian - Bulgaria = 1026
		/// </summary>
		Bulgarian_Bulgaria = 1026,
		/// <summary>
		/// Catalan - Spain = 1027
		/// </summary>
		Catalan_Spain = 1027,
		/// <summary>
		/// Chinese - China = 2052
		/// </summary>
		Chinese_China = 2052,
		/// <summary>
		/// Chinese - Hong Kong = 3076
		/// </summary>
		Chinese_Hong_Kong = 3076,
		/// <summary>
		/// Chinese (Traditional) = 1028
		/// </summary>
		Chinese_Traditional = 1028,
		/// <summary>
		/// Croatian - Croatia = 1050
		/// </summary>
		Croatian_Croatia = 1050,
		/// <summary>
		/// Czech - Czech Republic = 1029
		/// </summary>
		Czech_Czech_Republic = 1029,
		/// <summary>
		/// Danish - Denmark = 1030
		/// </summary>
		Danish_Denmark = 1030,
		/// <summary>
		/// Dutch - Netherlands = 1043
		/// </summary>
		Dutch_Netherlands = 1043,
		/// <summary>
		/// English - United States = 1033
		/// </summary>
		English_United_States = 1033,
		/// <summary>
		/// Estonian - Estonia = 1061
		/// </summary>
		Estonian_Estonia = 1061,
		/// <summary>
		/// Finnish - Finland = 1035
		/// </summary>
		Finnish_Finland = 1035,
		/// <summary>
		/// French - France = 1036
		/// </summary>
		French_France = 1036,
		/// <summary>
		/// Galician - Spain = 1110
		/// </summary>
		Galician_Spain = 1110,
		/// <summary>
		/// German - Germany = 1031
		/// </summary>
		German_Germany = 1031,
		/// <summary>
		/// Greek - Greece = 1032
		/// </summary>
		Greek_Greece = 1032,
		/// <summary>
		/// Hebrew - Israel = 1037
		/// </summary>
		Hebrew_Israel = 1037,
		/// <summary>
		/// Hindi - India = 1081
		/// </summary>
		Hindi_India = 1081,
		/// <summary>
		/// Hungarian - Hungary = 1038
		/// </summary>
		Hungarian_Hungary = 1038,
		/// <summary>
		/// Indonesian - Indonesia = 1057
		/// </summary>
		Indonesian_Indonesia = 1057,
		/// <summary>
		/// Italian - Italy = 1040
		/// </summary>
		Italian_Italy = 1040,
		/// <summary>
		/// Japanese - Japan = 1041
		/// </summary>
		Japanese_Japan = 1041,
		/// <summary>
		/// Kazakh - Kazakhstan = 1087
		/// </summary>
		Kazakh_Kazakhstan = 1087,
		/// <summary>
		/// Korean - Korea = 1042
		/// </summary>
		Korean_Korea = 1042,
		/// <summary>
		/// Latvian - Latvia = 1062
		/// </summary>
		Latvian_Latvia = 1062,
		/// <summary>
		/// Lithuanian - Lithuania = 1063
		/// </summary>
		Lithuanian_Lithuania = 1063,
		/// <summary>
		/// Malay - Malaysia = 1086
		/// </summary>
		Malay_Malaysia = 1086,
		/// <summary>
		/// Norwegian Bokmal - Norway = 1044
		/// </summary>
		Norwegian_Bokmal_Norway = 1044,
		/// <summary>
		/// Polish - Poland = 1045
		/// </summary>
		Polish_Poland = 1045,
		/// <summary>
		/// Portuguese - Brazil = 1046
		/// </summary>
		Portuguese_Brazil = 1046,
		/// <summary>
		/// Portuguese - Portugal = 2070
		/// </summary>
		Portuguese_Portugal = 2070,
		/// <summary>
		/// Romanian - Romania = 1048
		/// </summary>
		Romanian_Romania = 1048,
		/// <summary>
		/// Russian - Russia = 1049
		/// </summary>
		Russian_Russia = 1049,
		/// <summary>
		/// Serbian (Cyrillic) - Serbia = 3098
		/// </summary>
		Serbian_Cyrillic_Serbia = 3098,
		/// <summary>
		/// Serbian (Latin) - Serbia = 2074
		/// </summary>
		Serbian_Latin_Serbia = 2074,
		/// <summary>
		/// Slovak - Slovakia = 1051
		/// </summary>
		Slovak_Slovakia = 1051,
		/// <summary>
		/// Slovenian - Slovenia = 1060
		/// </summary>
		Slovenian_Slovenia = 1060,
		/// <summary>
		/// Spanish - Spain = 3082
		/// </summary>
		Spanish_Spain = 3082,
		/// <summary>
		/// Swedish - Sweden = 1053
		/// </summary>
		Swedish_Sweden = 1053,
		/// <summary>
		/// Thai - Thailand = 1054
		/// </summary>
		Thai_Thailand = 1054,
		/// <summary>
		/// Turkish - Turkey = 1055
		/// </summary>
		Turkish_Turkey = 1055,
		/// <summary>
		/// Ukrainian - Ukraine = 1058
		/// </summary>
		Ukrainian_Ukraine = 1058,
		/// <summary>
		/// Vietnamese - Vietnam = 1066
		/// </summary>
		Vietnamese_Vietnam = 1066
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sequencetemplate : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_cjodefinition = "msdyn_cjodefinition";
			public const string msdyn_cjodefinitionnew = "msdyn_cjodefinitionnew";
			public const string msdyn_definition = "msdyn_definition";
			public const string msdyn_definitionnew = "msdyn_definitionnew";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_language = "msdyn_language";
			public const string msdyn_maxduration = "msdyn_maxduration";
			public const string msdyn_maxstepcount = "msdyn_maxstepcount";
			public const string msdyn_maxstepcounttext = "msdyn_maxstepcounttext";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_prefferedregardingentitydisplayname = "msdyn_prefferedregardingentitydisplayname";
			public const string msdyn_prefferedregardingEntityName = "msdyn_prefferedregardingEntityName";
			public const string msdyn_sequencetemplateId = "msdyn_sequencetemplateid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_sequencetemplate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10293;

		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(Guid msdyn_sequencetemplateId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sequencetemplateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>CJO Definition Old</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>CJO Definition Old</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cjodefinition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cjodefinition); }
			set { Entity.Attributes[Fields.msdyn_cjodefinition] = value; }
		}

		/// <summary>
		/// <para>CJO Definition</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>CJO Definition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cjodefinitionnew
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cjodefinitionnew); }
			set { Entity.Attributes[Fields.msdyn_cjodefinitionnew] = value; }
		}

		/// <summary>
		/// <para>Sequence definition Old</para>
		/// <para>Required - String - MaxLength: 4000</para>
		/// <para>Definition Old</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_definition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_definition); }
			set { Entity.Attributes[Fields.msdyn_definition] = value; }
		}

		/// <summary>
		/// <para>Sequence definition</para>
		/// <para>Required - Memo - MaxLength: 1000000</para>
		/// <para>Definition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_definitionnew
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_definitionnew); }
			set { Entity.Attributes[Fields.msdyn_definitionnew] = value; }
		}

		/// <summary>
		/// <para>Description</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.msdyn_language? msdyn_language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.msdyn_language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_language] = null;
			}
		}

		/// <summary>
		/// <para>Maximum number of days to complete the sequence</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Maximum completion days</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_maxduration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_maxduration); }
			set { Entity.Attributes[Fields.msdyn_maxduration] = value; }
		}

		/// <summary>
		/// <para>The max step count for the sequence.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000</para>
		/// <para>Maximum steps</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_maxstepcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_maxstepcount); }
			set { Entity.Attributes[Fields.msdyn_maxstepcount] = value; }
		}

		/// <summary>
		/// <para>Maximum number of days to complete the sequence</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Maximum step</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_maxstepcounttext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_maxstepcounttext); }
			set { Entity.Attributes[Fields.msdyn_maxstepcounttext] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>The display name information about record to which this sequence could be associated</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Preffered Record type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_prefferedregardingentitydisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_prefferedregardingentitydisplayname); }
			set { Entity.Attributes[Fields.msdyn_prefferedregardingentitydisplayname] = value; }
		}

		/// <summary>
		/// <para>The logical name of regarding entity</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Preffered Regarding Entity Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_prefferedregardingEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_prefferedregardingEntityName); }
			set { Entity.Attributes[Fields.msdyn_prefferedregardingEntityName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Sequence Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sequencetemplateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sequencetemplateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Sequence Template</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Sequence Template</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
