//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.MailboxOptionSets
{
	public enum ACTDeliveryMethod
	{
		/// <summary>
		/// Microsoft Dynamics 365 for Outlook = 0
		/// </summary>
		Microsoft_Dynamics_365_for_Outlook = 0,
		/// <summary>
		/// None = 2
		/// </summary>
		None = 2,
		/// <summary>
		/// Server-Side Synchronization = 1
		/// </summary>
		Server_Side_Synchronization = 1
	}

	public enum ACTStatus
	{
		/// <summary>
		/// Failure = 2
		/// </summary>
		Failure = 2,
		/// <summary>
		/// Not Run = 0
		/// </summary>
		Not_Run = 0,
		/// <summary>
		/// Success = 1
		/// </summary>
		Success = 1
	}

	public enum EmailRouterAccessApproval
	{
		/// <summary>
		/// Approved = 1
		/// </summary>
		Approved = 1,
		/// <summary>
		/// Empty = 0
		/// </summary>
		Empty = 0,
		/// <summary>
		/// Pending Approval = 2
		/// </summary>
		Pending_Approval = 2,
		/// <summary>
		/// Rejected = 3
		/// </summary>
		Rejected = 3
	}

	public enum ExchangeContactsImportStatus
	{
		/// <summary>
		/// Imported = 1
		/// </summary>
		Imported = 1,
		/// <summary>
		/// ImportFailed = 2
		/// </summary>
		ImportFailed = 2,
		/// <summary>
		/// NotImported = 0
		/// </summary>
		NotImported = 0
	}

	public enum IncomingEmailDeliveryMethod
	{
		/// <summary>
		/// Forward Mailbox = 3
		/// </summary>
		Forward_Mailbox = 3,
		/// <summary>
		/// Microsoft Dynamics 365 for Outlook = 1
		/// </summary>
		Microsoft_Dynamics_365_for_Outlook = 1,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Server-Side Synchronization or Email Router = 2
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}

	public enum IncomingEmailStatus
	{
		/// <summary>
		/// Failure = 2
		/// </summary>
		Failure = 2,
		/// <summary>
		/// Not Run = 0
		/// </summary>
		Not_Run = 0,
		/// <summary>
		/// Success = 1
		/// </summary>
		Success = 1
	}

	public enum MailboxStatus
	{
		/// <summary>
		/// Failure = 2
		/// </summary>
		Failure = 2,
		/// <summary>
		/// Not Run = 0
		/// </summary>
		Not_Run = 0,
		/// <summary>
		/// Success = 1
		/// </summary>
		Success = 1
	}

	public enum OfficeAppsDeploymentStatus
	{
		/// <summary>
		/// Installed = 1
		/// </summary>
		Installed = 1,
		/// <summary>
		/// InstallFailed = 2
		/// </summary>
		InstallFailed = 2,
		/// <summary>
		/// NotInstalled = 0
		/// </summary>
		NotInstalled = 0,
		/// <summary>
		/// UninstallFailed = 3
		/// </summary>
		UninstallFailed = 3,
		/// <summary>
		/// UpgradeRequired = 4
		/// </summary>
		UpgradeRequired = 4
	}

	public enum OutgoingEmailDeliveryMethod
	{
		/// <summary>
		/// Microsoft Dynamics 365 for Outlook = 1
		/// </summary>
		Microsoft_Dynamics_365_for_Outlook = 1,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Server-Side Synchronization or Email Router = 2
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}

	public enum OutgoingEmailStatus
	{
		/// <summary>
		/// Failure = 2
		/// </summary>
		Failure = 2,
		/// <summary>
		/// Not Run = 0
		/// </summary>
		Not_Run = 0,
		/// <summary>
		/// Success = 1
		/// </summary>
		Success = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Mailbox : EntityBase
	{
		public struct Fields
		{
			public const string ACTDeliveryMethod = "actdeliverymethod";
			public const string ACTStatus = "actstatus";
			public const string AllowEmailConnectorToUseCredentials = "allowemailconnectortousecredentials";
			public const string AverageTotalDuration = "averagetotalduration";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EmailAddress = "emailaddress";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			public const string EmailServerProfile = "emailserverprofile";
			public const string EnabledForACT = "enabledforact";
			public const string EnabledForIncomingEmail = "enabledforincomingemail";
			public const string EnabledForOutgoingEmail = "enabledforoutgoingemail";
			public const string EntityImageId = "entityimageid";
			public const string EWSURL = "ewsurl";
			public const string ExchangeContactsImportCompletedOn = "exchangecontactsimportcompletedon";
			public const string ExchangeContactsImportStatus = "exchangecontactsimportstatus";
			public const string ExchangeSyncStateXml = "exchangesyncstatexml";
			public const string ExchangeSyncStateXmlFileRef = "exchangesyncstatexmlfileref";
			public const string FolderHierarchy = "folderhierarchy";
			public const string ForcedUnlockCount = "forcedunlockcount";
			public const string HostId = "hostid";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string IncomingEmailStatus = "incomingemailstatus";
			public const string IsACTSyncOrgFlagSet = "isactsyncorgflagset";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			public const string IsExchangeContactsImportScheduled = "isexchangecontactsimportscheduled";
			public const string IsForwardMailbox = "isforwardmailbox";
			public const string IsOauthAccessTokenSet = "isoauthaccesstokenset";
			public const string IsOauthRefreshTokenSet = "isoauthrefreshtokenset";
			public const string IsPasswordSet = "ispasswordset";
			public const string IsServiceAccount = "isserviceaccount";
			public const string ItemsFailedForLastSync = "itemsfailedforlastsync";
			public const string ItemsProcessedForLastSync = "itemsprocessedforlastsync";
			public const string LastActiveOn = "lastactiveon";
			public const string LastAutoDiscoveredOn = "lastautodiscoveredon";
			public const string LastDuration = "lastduration";
			public const string LastMailboxForcedUnlockOccurredOn = "lastmailboxforcedunlockoccurredon";
			public const string LastMessageId = "lastmessageid";
			public const string LastSuccessfulSyncCompletedOn = "lastsuccessfulsynccompletedon";
			public const string LastSyncError = "lastsyncerror";
			public const string LastSyncErrorCode = "lastsyncerrorcode";
			public const string LastSyncErrorCount = "lastsyncerrorcount";
			public const string LastSyncErrorMachineName = "lastsyncerrormachinename";
			public const string LastSyncErrorOccurredOn = "lastsyncerroroccurredon";
			public const string LastSyncStartedOn = "lastsyncstartedon";
			public const string LastTaggedMessageId = "lasttaggedmessageid";
			public const string MailboxId = "mailboxid";
			public const string MailboxProcessingContext = "mailboxprocessingcontext";
			public const string MailboxStatus = "mailboxstatus";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NextScheduledACTSyncInSeconds = "nextscheduledactsyncinseconds";
			public const string NoACTCount = "noactcount";
			public const string NoEmailCount = "noemailcount";
			public const string OauthAccessToken = "oauthaccesstoken";
			public const string OauthRefreshToken = "oauthrefreshtoken";
			public const string OauthTokenExpiresOn = "oauthtokenexpireson";
			public const string OfficeAppsDeploymentCompleteOn = "officeappsdeploymentcompleteon";
			public const string OfficeAppsDeploymentError = "officeappsdeploymenterror";
			public const string OfficeAppsDeploymentScheduled = "officeappsdeploymentscheduled";
			public const string OfficeAppsDeploymentStatus = "officeappsdeploymentstatus";
			public const string OrganizationId = "organizationid";
			public const string OrgMarkedAsPrimaryForExchangeSync = "orgmarkedasprimaryforexchangesync";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OutgoingEmailStatus = "outgoingemailstatus";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Password = "password";
			public const string PostponeMailboxProcessingUntil = "postponemailboxprocessinguntil";
			public const string PostponeOfficeAppsDeploymentUntil = "postponeofficeappsdeploymentuntil";
			public const string PostponeSendingUntil = "postponesendinguntil";
			public const string PostponeTestEmailConfigurationUntil = "postponetestemailconfigurationuntil";
			public const string ProcessAndDeleteEmails = "processanddeleteemails";
			public const string ProcessedTimes = "processedtimes";
			public const string ProcessEmailReceivedAfter = "processemailreceivedafter";
			public const string ProcessingLastAttemptedOn = "processinglastattemptedon";
			public const string ProcessingStateCode = "processingstatecode";
			public const string ReceivingPostponedUntil = "receivingpostponeduntil";
			public const string ReceivingPostponedUntilForACT = "receivingpostponeduntilforact";
			public const string RegardingObjectId = "regardingobjectid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TagEmailsAfter = "tagemailsafter";
			public const string TestEmailConfigurationRetryCount = "testemailconfigurationretrycount";
			public const string TestEmailConfigurationScheduled = "testemailconfigurationscheduled";
			public const string TestMailboxAccessCompletedOn = "testmailboxaccesscompletedon";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransientFailureCount = "transientfailurecount";
			public const string UndeliverableFolder = "undeliverablefolder";
			public const string Username = "username";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VerboseLoggingEnabled = "verboseloggingenabled";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "mailbox";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9606;

		[DebuggerNonUserCode()]
		public Mailbox()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Mailbox(Guid MailboxId)
		{
			Entity = new Entity(EntityLogicalName, MailboxId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Mailbox(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Mailbox(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Mailbox(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Mailbox(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Choose the delivery method for the mailbox for appointments, contacts, and tasks.</para>
		/// <para>Picklist</para>
		/// <para>Appointments, Contacts, and Tasks</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTDeliveryMethod? ACTDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ACTDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ACTDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ACTDeliveryMethod] = null;
			}
		}

		/// <summary>
		/// <para>Status of the Appointments, Contacts, and Tasks.</para>
		/// <para>Picklist</para>
		/// <para>Appointments, Contacts, and Tasks Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTStatus? ACTStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ACTStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ACTStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ACTStatus] = null;
			}
		}

		/// <summary>
		/// <para>Choose whether to allow the email connector to use credentials.</para>
		/// <para>Boolean</para>
		/// <para>Allow to Use Credentials for Email Processing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowEmailConnectorToUseCredentials
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowEmailConnectorToUseCredentials); }
			set { Entity.Attributes[Fields.AllowEmailConnectorToUseCredentials] = value; }
		}

		/// <summary>
		/// <para>Mailbox Total Duration in Average</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Monitor Total Performance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AverageTotalDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AverageTotalDuration); }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type the email address of the mailbox.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}

		/// <summary>
		/// <para>Shows the status of the email address.</para>
		/// <para>Picklist</para>
		/// <para>Email Address Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.EmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailRouterAccessApproval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.EmailRouterAccessApproval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailRouterAccessApproval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailRouterAccessApproval] = null;
			}
		}

		/// <summary>
		/// <para>Select the email server profile of the mailbox.</para>
		/// <para>Lookup to emailserverprofile</para>
		/// <para>Server Profile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EmailServerProfile
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EmailServerProfile); }
			set { Entity.Attributes[Fields.EmailServerProfile] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the mailbox is enabled for Appointments, Contacts, and Tasks.</para>
		/// <para>Boolean</para>
		/// <para>Enabled For Appointments, Contacts, And Tasks</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnabledForACT
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnabledForACT); }
			set { Entity.Attributes[Fields.EnabledForACT] = value; }
		}

		/// <summary>
		/// <para>Choose whether the mailbox is enabled for receiving email.</para>
		/// <para>Boolean</para>
		/// <para>Enabled For Incoming Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnabledForIncomingEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnabledForIncomingEmail); }
			set { Entity.Attributes[Fields.EnabledForIncomingEmail] = value; }
		}

		/// <summary>
		/// <para>Choose whether the mailbox is enabled for sending email.</para>
		/// <para>Boolean</para>
		/// <para>Enabled For Outgoing Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnabledForOutgoingEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnabledForOutgoingEmail); }
			set { Entity.Attributes[Fields.EnabledForOutgoingEmail] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Entity Image Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Exchange web services endpoint URL for the mailbox.</para>
		/// <para>String - MaxLength: 2084</para>
		/// <para>Exchange Web Services URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EWSURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.EWSURL); }
			set { Entity.Attributes[Fields.EWSURL] = value; }
		}

		/// <summary>
		/// <para>Date and time when the exchange contacts import was last completed for a mailbox record.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Exchange Contacts Import Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExchangeContactsImportCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExchangeContactsImportCompletedOn); }
		}

		/// <summary>
		/// <para>Indicates the exchange contacts import status for a mailbox record.</para>
		/// <para>Picklist</para>
		/// <para>Exchange Contacts Import Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.ExchangeContactsImportStatus? ExchangeContactsImportStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExchangeContactsImportStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.ExchangeContactsImportStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExchangeContactsImportStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ExchangeContactsImportStatus] = null;
			}
		}

		/// <summary>
		/// <para>Contains the exchange synchronization state in XML format.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Exchange Sync State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeSyncStateXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeSyncStateXml); }
			set { Entity.Attributes[Fields.ExchangeSyncStateXml] = value; }
		}

		/// <summary>
		/// <para>Reference to the ExchangeSyncStateXml file on Azure.</para>
		/// <para>ReadOnly - Virtual</para>
		/// <para>ExchangeSyncStateXml File Ref</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeSyncStateXmlFileRef
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeSyncStateXmlFileRef); }
		}

		/// <summary>
		/// <para>Holds the hierarchy of folders under inbox in XML format.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Folder Hierarchy</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FolderHierarchy
		{
			get { return Entity.GetAttributeValue<string>(Fields.FolderHierarchy); }
			set { Entity.Attributes[Fields.FolderHierarchy] = value; }
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Count of the number of times a mailbox gets forced unlocked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ForcedUnlockCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ForcedUnlockCount); }
		}

		/// <summary>
		/// <para>Unique identifier of the async host that is processing this mailbox.</para>
		/// <para>ReadOnly - String - MaxLength: 256</para>
		/// <para>Host</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HostId
		{
			get { return Entity.GetAttributeValue<string>(Fields.HostId); }
		}

		/// <summary>
		/// <para>Select how incoming email will be delivered to the mailbox.</para>
		/// <para>Picklist</para>
		/// <para>Incoming Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = null;
			}
		}

		/// <summary>
		/// <para>Select the status that will be assigned to incoming email messages.</para>
		/// <para>Picklist</para>
		/// <para>Incoming Email Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailStatus? IncomingEmailStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailStatus] = null;
			}
		}

		/// <summary>
		/// <para>Set the current organization as the synchronization organization.</para>
		/// <para>Boolean</para>
		/// <para>Set Current Organization as Synchronization Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsACTSyncOrgFlagSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsACTSyncOrgFlagSet); }
			set { Entity.Attributes[Fields.IsACTSyncOrgFlagSet] = value; }
		}

		/// <summary>
		/// <para>Shows the status of approval of the email address by O365 Admin.</para>
		/// <para>Boolean</para>
		/// <para>Email Address O365 Admin Approval Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressApprovedByO365Admin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressApprovedByO365Admin); }
			set { Entity.Attributes[Fields.IsEmailAddressApprovedByO365Admin] = value; }
		}

		/// <summary>
		/// <para>Is Exchange Contacts Import Scheduled.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Exchange Contacts Import Scheduled.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsExchangeContactsImportScheduled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsExchangeContactsImportScheduled); }
		}

		/// <summary>
		/// <para>Select whether the mailbox is a forward mailbox.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Forward Mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsForwardMailbox
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsForwardMailbox); }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOauthAccessTokenSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOauthAccessTokenSet); }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOauthRefreshTokenSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOauthRefreshTokenSet); }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPasswordSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPasswordSet); }
		}

		/// <summary>
		/// <para>Select whether the mailbox corresponds to one for the service account.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Service Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsServiceAccount
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsServiceAccount); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Items Failed For Last Sync</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ItemsFailedForLastSync
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ItemsFailedForLastSync); }
			set { Entity.Attributes[Fields.ItemsFailedForLastSync] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Items Processed For Last Sync</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ItemsProcessedForLastSync
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ItemsProcessedForLastSync); }
			set { Entity.Attributes[Fields.ItemsProcessedForLastSync] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Active On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastActiveOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastActiveOn); }
		}

		/// <summary>
		/// <para>Shows the date and time when the Exchange web services URL was last discovered using the AutoDiscover service.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Auto Discovered On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastAutoDiscoveredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastAutoDiscoveredOn); }
			set { Entity.Attributes[Fields.LastAutoDiscoveredOn] = value; }
		}

		/// <summary>
		/// <para>Last Duration for the mailbox</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Monitor last duration Performance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LastDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LastDuration); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Date Time when a mailbox got forced unlocked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastMailboxForcedUnlockOccurredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastMailboxForcedUnlockOccurredOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the last message.</para>
		/// <para>ReadOnly - String - MaxLength: 320</para>
		/// <para>Last Message ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastMessageId
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastMessageId); }
		}

		/// <summary>
		/// <para>Last Successful Sync Time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Successful Sync Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSuccessfulSyncCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSuccessfulSyncCompletedOn); }
			set { Entity.Attributes[Fields.LastSuccessfulSyncCompletedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 2048</para>
		/// <para>Last Sync Error Stack</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncError
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncError); }
			set { Entity.Attributes[Fields.LastSyncError] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Last Sync Error Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LastSyncErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LastSyncErrorCode); }
			set { Entity.Attributes[Fields.LastSyncErrorCode] = value; }
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Last Sync Error Continuous Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LastSyncErrorCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LastSyncErrorCount); }
			set { Entity.Attributes[Fields.LastSyncErrorCount] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 320</para>
		/// <para>Last Sync Error Machine Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncErrorMachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncErrorMachineName); }
			set { Entity.Attributes[Fields.LastSyncErrorMachineName] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Sync Error Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncErrorOccurredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncErrorOccurredOn); }
			set { Entity.Attributes[Fields.LastSyncErrorOccurredOn] = value; }
		}

		/// <summary>
		/// <para>Last Sync Start Time</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Sync Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncStartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncStartedOn); }
		}

		/// <summary>
		/// <para>Identifies the last MessageId that has been processed for tagging in the remote system.</para>
		/// <para>String - MaxLength: 320</para>
		/// <para>Last Tagged MessageId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastTaggedMessageId
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastTaggedMessageId); }
			set { Entity.Attributes[Fields.LastTaggedMessageId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the mailbox.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid MailboxId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.MailboxId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Processing Context of the Mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MailboxProcessingContext
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MailboxProcessingContext); }
			set { Entity.Attributes[Fields.MailboxProcessingContext] = value; }
		}

		/// <summary>
		/// <para>Last Sync Status for Outgoing, Incoming and ACT as a whole.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Mailbox Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.MailboxStatus? MailboxStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MailboxStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.MailboxStatus)value.Value;
			}
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type the name of the mailbox.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>The next scheduled ACT sync delay, in seconds, to apply to the mailbox.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Next Scheduled ACT Sync Delay In Seconds</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NextScheduledACTSyncInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NextScheduledACTSyncInSeconds); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Zero appointment, contact, task count for mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NoACTCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NoACTCount); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Zero email count for mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NoEmailCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NoEmailCount); }
		}

		/// <summary>
		/// <para>Type the Oauth access token for the mailbox.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Oauth access token</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OauthAccessToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.OauthAccessToken); }
			set { Entity.Attributes[Fields.OauthAccessToken] = value; }
		}

		/// <summary>
		/// <para>Type the Oauth refresh token for the mailbox.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Oauth refresh token</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OauthRefreshToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.OauthRefreshToken); }
			set { Entity.Attributes[Fields.OauthRefreshToken] = value; }
		}

		/// <summary>
		/// <para>Date and time when the Oauth token will expire</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Oauth token expiration datetime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OauthTokenExpiresOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OauthTokenExpiresOn); }
			set { Entity.Attributes[Fields.OauthTokenExpiresOn] = value; }
		}

		/// <summary>
		/// <para>Date and time when the last office apps deployment was completed for a mailbox record.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Office Apps Deployment Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OfficeAppsDeploymentCompleteOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OfficeAppsDeploymentCompleteOn); }
		}

		/// <summary>
		/// <para>The Office Apps deployment error.</para>
		/// <para>ReadOnly - String - MaxLength: 2048</para>
		/// <para>Office Apps Deployment Error</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OfficeAppsDeploymentError
		{
			get { return Entity.GetAttributeValue<string>(Fields.OfficeAppsDeploymentError); }
		}

		/// <summary>
		/// <para>Indicates if the office apps deployment has been scheduled for a mailbox record.</para>
		/// <para>Boolean</para>
		/// <para>Office Apps Deployment Scheduled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OfficeAppsDeploymentScheduled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OfficeAppsDeploymentScheduled); }
			set { Entity.Attributes[Fields.OfficeAppsDeploymentScheduled] = value; }
		}

		/// <summary>
		/// <para>Indicates the office apps deployment type for a mailbox record.</para>
		/// <para>Picklist</para>
		/// <para>Office Apps Deployment Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.OfficeAppsDeploymentStatus? OfficeAppsDeploymentStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OfficeAppsDeploymentStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.OfficeAppsDeploymentStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OfficeAppsDeploymentStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OfficeAppsDeploymentStatus] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the record.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Indicates if the crm org is to be marked as primary syncing org for the mailbox record.</para>
		/// <para>Boolean</para>
		/// <para>Crm Org Marked as Primary Org for Exchange Mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OrgMarkedAsPrimaryForExchangeSync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OrgMarkedAsPrimaryForExchangeSync); }
			set { Entity.Attributes[Fields.OrgMarkedAsPrimaryForExchangeSync] = value; }
		}

		/// <summary>
		/// <para>Select how outgoing email will be sent from the mailbox.</para>
		/// <para>Picklist</para>
		/// <para>Outgoing Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = null;
			}
		}

		/// <summary>
		/// <para>Select the status of outgoing email messages.</para>
		/// <para>Picklist</para>
		/// <para>Outgoing Email Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailStatus? OutgoingEmailStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailStatus] = null;
			}
		}

		/// <summary>
		/// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Select the business unit that owns the record.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Type the password for the mailbox.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Password</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Password
		{
			get { return Entity.GetAttributeValue<string>(Fields.Password); }
			set { Entity.Attributes[Fields.Password] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when processing will begin on this mailbox.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Postpone Mailbox Processing Until</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeMailboxProcessingUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeMailboxProcessingUntil); }
			set { Entity.Attributes[Fields.PostponeMailboxProcessingUntil] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the next outlook mail app install will be run for a mailbox record.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Postpone Outlook Mail App Install Until</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeOfficeAppsDeploymentUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeOfficeAppsDeploymentUntil); }
			set { Entity.Attributes[Fields.PostponeOfficeAppsDeploymentUntil] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the mailbox can start sending emails.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Postpone Sending Until</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeSendingUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeSendingUntil); }
			set { Entity.Attributes[Fields.PostponeSendingUntil] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the next email configuration test will be run for a mailbox record.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Postpone Test Email Configuration Until</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeTestEmailConfigurationUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeTestEmailConfigurationUntil); }
			set { Entity.Attributes[Fields.PostponeTestEmailConfigurationUntil] = value; }
		}

		/// <summary>
		/// <para>Select whether to delete emails from the mailbox after processing.</para>
		/// <para>Boolean</para>
		/// <para>Delete Emails after Processing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ProcessAndDeleteEmails
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ProcessAndDeleteEmails); }
			set { Entity.Attributes[Fields.ProcessAndDeleteEmails] = value; }
		}

		/// <summary>
		/// <para>The number of times mailbox has processed</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Monitor Performance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessedTimes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessedTimes); }
		}

		/// <summary>
		/// <para>Shows the date and time to start processing email received by the mailbox.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Process Email Received After</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProcessEmailReceivedAfterUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProcessEmailReceivedAfter); }
			set { Entity.Attributes[Fields.ProcessEmailReceivedAfter] = value; }
		}

		/// <summary>
		/// <para>Date and time when the processing of the mailbox was last attempted.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Date Processing Last Attempted</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProcessingLastAttemptedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProcessingLastAttemptedOn); }
		}

		/// <summary>
		/// <para>Information that indicates whether email will be processed for this mailbox</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Mailbox Processing State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessingStateCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessingStateCode); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Postpone receiving emails for the mailbox until the specified data and time.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ReceivingPostponedUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ReceivingPostponedUntil); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Postpone processing Appointments, Contacts, and Tasks for the mailbox until the specified data and time.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ReceivingPostponedUntilForACTUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ReceivingPostponedUntilForACT); }
		}

		/// <summary>
		/// <para>Choose the user associated to the mailbox.</para>
		/// <para>ReadOnly - Lookup to queue, systemuser</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
		}

		/// <summary>
		/// <para>Shows whether the mailbox is active or inactive.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the mailbox&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Identifies the timestamp after for which emails should be tagged in the remote system.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Tag Emails After</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? TagEmailsAfterUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.TagEmailsAfter); }
			set { Entity.Attributes[Fields.TagEmailsAfter] = value; }
		}

		/// <summary>
		/// <para>Shows the number of times an email configuration test has been performed.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Test Email Configuration Retry Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TestEmailConfigurationRetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TestEmailConfigurationRetryCount); }
			set { Entity.Attributes[Fields.TestEmailConfigurationRetryCount] = value; }
		}

		/// <summary>
		/// <para>Indicates if the email configuration test has been scheduled for a mailbox record.</para>
		/// <para>Boolean</para>
		/// <para>Test Email Configuration Scheduled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TestEmailConfigurationScheduled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TestEmailConfigurationScheduled); }
			set { Entity.Attributes[Fields.TestEmailConfigurationScheduled] = value; }
		}

		/// <summary>
		/// <para>Date and time when the last email configuration test was completed for a mailbox record.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Mailbox Test Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? TestMailboxAccessCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.TestMailboxAccessCompletedOn); }
			set { Entity.Attributes[Fields.TestMailboxAccessCompletedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Concatenation of transient failure counts of all mailbox operations.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Transient Failure Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TransientFailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TransientFailureCount); }
		}

		/// <summary>
		/// <para>Shows the ID of the Undeliverable folder in the mailbox managed by Microsoft Exchange.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Undeliverable Folder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UndeliverableFolder
		{
			get { return Entity.GetAttributeValue<string>(Fields.UndeliverableFolder); }
			set { Entity.Attributes[Fields.UndeliverableFolder] = value; }
		}

		/// <summary>
		/// <para>Type a user name used for mailbox authentication.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>User Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Username
		{
			get { return Entity.GetAttributeValue<string>(Fields.Username); }
			set { Entity.Attributes[Fields.Username] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Indicates if verbose tracing needs to be enabled for this mailbox.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 100</para>
		/// <para>Verbose Logging</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? VerboseLoggingEnabled
		{
			get { return Entity.GetAttributeValue<int?>(Fields.VerboseLoggingEnabled); }
			set { Entity.Attributes[Fields.VerboseLoggingEnabled] = value; }
		}

		/// <summary>
		/// <para>Version number of the mailbox.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
