//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_solutionhistoryOptionSets
{
	public enum msdyn_operation
	{
		/// <summary>
		/// Export = 2
		/// </summary>
		Export = 2,
		/// <summary>
		/// Import = 0
		/// </summary>
		Import = 0,
		/// <summary>
		/// ImportTranslation = 6
		/// </summary>
		ImportTranslation = 6,
		/// <summary>
		/// LanguageProvision = 5
		/// </summary>
		LanguageProvision = 5,
		/// <summary>
		/// None = 9
		/// </summary>
		None = 9,
		/// <summary>
		/// Publish = 3
		/// </summary>
		Publish = 3,
		/// <summary>
		/// PublishAll = 4
		/// </summary>
		PublishAll = 4,
		/// <summary>
		/// RibbonMetadataGeneration = 7
		/// </summary>
		RibbonMetadataGeneration = 7,
		/// <summary>
		/// Uninstall = 1
		/// </summary>
		Uninstall = 1,
		/// <summary>
		/// WorkflowSetState = 8
		/// </summary>
		WorkflowSetState = 8
	}

	public enum msdyn_status
	{
		/// <summary>
		/// Completed = 1
		/// </summary>
		Completed = 1,
		/// <summary>
		/// Started = 0
		/// </summary>
		Started = 0
	}

	public enum msdyn_suboperation
	{
		/// <summary>
		/// Delete = 4
		/// </summary>
		Delete = 4,
		/// <summary>
		/// New = 1
		/// </summary>
		New = 1,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Update = 3
		/// </summary>
		Update = 3,
		/// <summary>
		/// Upgrade = 2
		/// </summary>
		Upgrade = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_solutionhistory : EntityBase
	{
		public struct Fields
		{
			public const string msdyn_activityid = "msdyn_activityid";
			public const string msdyn_correlationid = "msdyn_correlationid";
			public const string msdyn_endtime = "msdyn_endtime";
			public const string msdyn_errorcode = "msdyn_errorcode";
			public const string msdyn_exceptionmessage = "msdyn_exceptionmessage";
			public const string msdyn_exceptionstack = "msdyn_exceptionstack";
			public const string msdyn_ismanaged = "msdyn_ismanaged";
			public const string msdyn_isoverwritecustomizations = "msdyn_isoverwritecustomizations";
			public const string msdyn_ispatch = "msdyn_ispatch";
			public const string msdyn_maxretries = "msdyn_maxretries";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_operation = "msdyn_operation";
			public const string msdyn_packagename = "msdyn_packagename";
			public const string msdyn_packageversion = "msdyn_packageversion";
			public const string msdyn_publisherid = "msdyn_publisherid";
			public const string msdyn_publishername = "msdyn_publishername";
			public const string msdyn_result = "msdyn_result";
			public const string msdyn_retrycount = "msdyn_retrycount";
			public const string msdyn_solutionhistoryId = "msdyn_solutionhistoryid";
			public const string msdyn_solutionid = "msdyn_solutionid";
			public const string msdyn_solutionversion = "msdyn_solutionversion";
			public const string msdyn_starttime = "msdyn_starttime";
			public const string msdyn_status = "msdyn_status";
			public const string msdyn_suboperation = "msdyn_suboperation";
			public const string msdyn_totaltime = "msdyn_totaltime";
		}

		public const string EntityLogicalName = "msdyn_solutionhistory";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10004;

		[DebuggerNonUserCode()]
		public msdyn_solutionhistory()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhistory(Guid msdyn_solutionhistoryId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_solutionhistoryId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhistory(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhistory(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhistory(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhistory(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Activity Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_activityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_activityid); }
			set { Entity.Attributes[Fields.msdyn_activityid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Correlation Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_correlationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_correlationid); }
			set { Entity.Attributes[Fields.msdyn_correlationid] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>End Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_endtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_endtime); }
			set { Entity.Attributes[Fields.msdyn_endtime] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Error Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_errorcode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_errorcode); }
			set { Entity.Attributes[Fields.msdyn_errorcode] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Exception Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_exceptionmessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_exceptionmessage); }
			set { Entity.Attributes[Fields.msdyn_exceptionmessage] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Exception Stack</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_exceptionstack
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_exceptionstack); }
			set { Entity.Attributes[Fields.msdyn_exceptionstack] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ismanaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ismanaged); }
			set { Entity.Attributes[Fields.msdyn_ismanaged] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Overwrite Customizations</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isoverwritecustomizations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isoverwritecustomizations); }
			set { Entity.Attributes[Fields.msdyn_isoverwritecustomizations] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Patch</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ispatch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ispatch); }
			set { Entity.Attributes[Fields.msdyn_ispatch] = value; }
		}

		/// <summary>
		/// <para>Maximum number of retries.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum Retries</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_maxretries
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_maxretries); }
			set { Entity.Attributes[Fields.msdyn_maxretries] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Solution Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Operation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_solutionhistoryOptionSets.msdyn_operation? msdyn_operation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_operation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_solutionhistoryOptionSets.msdyn_operation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_operation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_operation] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Package Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_packagename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_packagename); }
			set { Entity.Attributes[Fields.msdyn_packagename] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Package Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_packageversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_packageversion); }
			set { Entity.Attributes[Fields.msdyn_packageversion] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Publisher Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_publisherid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_publisherid); }
			set { Entity.Attributes[Fields.msdyn_publisherid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Publisher Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_publishername
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_publishername); }
			set { Entity.Attributes[Fields.msdyn_publishername] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Result</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_result
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_result); }
			set { Entity.Attributes[Fields.msdyn_result] = value; }
		}

		/// <summary>
		/// <para>Retry count</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Retry count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_retrycount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_retrycount); }
			set { Entity.Attributes[Fields.msdyn_retrycount] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Solutionhistory</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_solutionhistoryId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_solutionhistoryId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Solution Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_solutionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_solutionid); }
			set { Entity.Attributes[Fields.msdyn_solutionid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Solution Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_solutionversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_solutionversion); }
			set { Entity.Attributes[Fields.msdyn_solutionversion] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_starttimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_starttime); }
			set { Entity.Attributes[Fields.msdyn_starttime] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_solutionhistoryOptionSets.msdyn_status? msdyn_status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_solutionhistoryOptionSets.msdyn_status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_status] = null;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Suboperation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_solutionhistoryOptionSets.msdyn_suboperation? msdyn_suboperation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_suboperation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_solutionhistoryOptionSets.msdyn_suboperation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_suboperation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_suboperation] = null;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Total Time (seconds)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totaltime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totaltime); }
			set { Entity.Attributes[Fields.msdyn_totaltime] = value; }
		}
	}
}
