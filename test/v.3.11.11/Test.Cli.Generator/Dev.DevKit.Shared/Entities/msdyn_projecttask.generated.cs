//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_projecttaskOptionSets
{
	public enum msdyn_AggregationDirection
	{
		/// <summary>
		/// Both = 2
		/// </summary>
		Both = 2,
		/// <summary>
		/// Downstream = 1
		/// </summary>
		Downstream = 1,
		/// <summary>
		/// Upstream = 0
		/// </summary>
		Upstream = 0
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_projecttask : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Actualcost = "msdyn_actualcost";
			public const string msdyn_actualcost_Base = "msdyn_actualcost_base";
			public const string msdyn_actualdurationminutes = "msdyn_actualdurationminutes";
			public const string msdyn_ActualEffort = "msdyn_actualeffort";
			public const string msdyn_actualend = "msdyn_actualend";
			public const string msdyn_ActualSales = "msdyn_actualsales";
			public const string msdyn_actualsales_Base = "msdyn_actualsales_base";
			public const string msdyn_actualstart = "msdyn_actualstart";
			public const string msdyn_AggregationDirection = "msdyn_aggregationdirection";
			public const string msdyn_AssignedResources = "msdyn_assignedresources";
			public const string msdyn_AssignedTeamMembers = "msdyn_assignedteammembers";
			public const string msdyn_autoscheduling = "msdyn_autoscheduling";
			public const string msdyn_CostAtCompleteEstimate = "msdyn_costatcompleteestimate";
			public const string msdyn_costatcompleteestimate_Base = "msdyn_costatcompleteestimate_base";
			public const string msdyn_CostConsumptionPercentage = "msdyn_costconsumptionpercentage";
			public const string msdyn_CostEstimateContour = "msdyn_costestimatecontour";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_duration = "msdyn_duration";
			public const string msdyn_Effort = "msdyn_effort";
			public const string msdyn_EffortContour = "msdyn_effortcontour";
			public const string msdyn_EffortEstimateAtComplete = "msdyn_effortestimateatcomplete";
			public const string msdyn_IsLineTask = "msdyn_islinetask";
			public const string msdyn_IsMilestone = "msdyn_ismilestone";
			public const string msdyn_MSProjectClientId = "msdyn_msprojectclientid";
			public const string msdyn_numberofresources = "msdyn_numberofresources";
			public const string msdyn_OrganizationalUnitPricingDimension = "msdyn_organizationalunitpricingdimension";
			public const string msdyn_parenttask = "msdyn_parenttask";
			public const string msdyn_plannedCost = "msdyn_plannedcost";
			public const string msdyn_plannedcost_Base = "msdyn_plannedcost_base";
			public const string msdyn_PlannedSales = "msdyn_plannedsales";
			public const string msdyn_plannedsales_Base = "msdyn_plannedsales_base";
			public const string msdyn_PluginProcessingData = "msdyn_pluginprocessingdata";
			public const string msdyn_Progress = "msdyn_progress";
			public const string msdyn_project = "msdyn_project";
			public const string msdyn_projecttaskId = "msdyn_projecttaskid";
			public const string msdyn_RemainingCost = "msdyn_remainingcost";
			public const string msdyn_remainingcost_Base = "msdyn_remainingcost_base";
			public const string msdyn_RemainingHours = "msdyn_remaininghours";
			public const string msdyn_RemainingSales = "msdyn_remainingsales";
			public const string msdyn_remainingsales_Base = "msdyn_remainingsales_base";
			public const string msdyn_RequestedHours = "msdyn_requestedhours";
			public const string msdyn_resourcecategory = "msdyn_resourcecategory";
			public const string msdyn_ResourceCategoryPricingDimension = "msdyn_resourcecategorypricingdimension";
			public const string msdyn_ResourceOrganizationalUnitId = "msdyn_resourceorganizationalunitid";
			public const string msdyn_ResourceUtilization = "msdyn_resourceutilization";
			public const string msdyn_SalesConsumptionPercentage = "msdyn_salesconsumptionpercentage";
			public const string msdyn_SalesEstimateAtComplete = "msdyn_salesestimateatcomplete";
			public const string msdyn_salesestimateatcomplete_Base = "msdyn_salesestimateatcomplete_base";
			public const string msdyn_SalesEstimateContour = "msdyn_salesestimatecontour";
			public const string msdyn_SalesVariance = "msdyn_salesvariance";
			public const string msdyn_salesvariance_Base = "msdyn_salesvariance_base";
			public const string msdyn_scheduleddurationminutes = "msdyn_scheduleddurationminutes";
			public const string msdyn_scheduledend = "msdyn_scheduledend";
			public const string msdyn_ScheduledHours = "msdyn_scheduledhours";
			public const string msdyn_scheduledstart = "msdyn_scheduledstart";
			public const string msdyn_ScheduleVariance = "msdyn_schedulevariance";
			public const string msdyn_skipupdateestimateline = "msdyn_skipupdateestimateline";
			public const string msdyn_subject = "msdyn_subject";
			public const string msdyn_transactioncategory = "msdyn_transactioncategory";
			public const string msdyn_VarianceOfCost = "msdyn_varianceofcost";
			public const string msdyn_varianceofcost_Base = "msdyn_varianceofcost_base";
			public const string msdyn_WBSID = "msdyn_wbsid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string StageId = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_projecttask";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10533;

		[DebuggerNonUserCode()]
		public msdyn_projecttask()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projecttask(Guid msdyn_projecttaskId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_projecttaskId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projecttask(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projecttask(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projecttask(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projecttask(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the project task was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of user who last modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enter the value of the actual cost consumed based on work reported to be completed on the task.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Actualcost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Actualcost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Actualcost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Actualcost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actualcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the actual duration of the project task in days</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Actual Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_actualdurationminutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_actualdurationminutes); }
			set { Entity.Attributes[Fields.msdyn_actualdurationminutes] = value; }
		}

		/// <summary>
		/// <para>Shows the hours submitted against the task.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Actual Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_ActualEffort
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_ActualEffort); }
			set { Entity.Attributes[Fields.msdyn_ActualEffort] = value; }
		}

		/// <summary>
		/// <para>Enter the actual end time of the project task.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Actual End Date/Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_actualendUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_actualend); }
			set { Entity.Attributes[Fields.msdyn_actualend] = value; }
		}

		/// <summary>
		/// <para>Actual Sales Amount</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ActualSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_ActualSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActualSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActualSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the actual sales in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actualsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the actual start time of the project task.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Actual Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_actualstartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_actualstart); }
			set { Entity.Attributes[Fields.msdyn_actualstart] = value; }
		}

		/// <summary>
		/// <para>Shows whether the aggregation is happening upstream or downstream.</para>
		/// <para>Picklist</para>
		/// <para>Aggregation Direction</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projecttaskOptionSets.msdyn_AggregationDirection? msdyn_AggregationDirection
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AggregationDirection);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projecttaskOptionSets.msdyn_AggregationDirection)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AggregationDirection] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AggregationDirection] = null;
			}
		}

		/// <summary>
		/// <para>Type the project team members that are assigned to task.</para>
		/// <para>String - MaxLength: 300</para>
		/// <para>Assigned Resources (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AssignedResources
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AssignedResources); }
			set { Entity.Attributes[Fields.msdyn_AssignedResources] = value; }
		}

		/// <summary>
		/// <para>Select the project team member that has been assigned to a task.</para>
		/// <para>Lookup to msdyn_projectteam</para>
		/// <para>Assigned Team Members (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AssignedTeamMembers
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AssignedTeamMembers); }
			set { Entity.Attributes[Fields.msdyn_AssignedTeamMembers] = value; }
		}

		/// <summary>
		/// <para>Shows whether auto scheduling was used for this task.</para>
		/// <para>Required - Boolean</para>
		/// <para>Auto Scheduling</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_autoscheduling
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_autoscheduling); }
			set { Entity.Attributes[Fields.msdyn_autoscheduling] = value; }
		}

		/// <summary>
		/// <para>Enter the forecast of the total cost to complete the task.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost estimate at complete (EAC)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostAtCompleteEstimate
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CostAtCompleteEstimate);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Cost estimate at complete (EAC) in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost estimate at completion (EAC) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costatcompleteestimate_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costatcompleteestimate_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the consumption of the total cost in percentage.</para>
		/// <para>ReadOnly - Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Cost Consumption %</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostConsumptionPercentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_CostConsumptionPercentage); }
		}

		/// <summary>
		/// <para>The cost estimate contour for the task</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>CostEstimateContour (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CostEstimateContour
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CostEstimateContour); }
			set { Entity.Attributes[Fields.msdyn_CostEstimateContour] = value; }
		}

		/// <summary>
		/// <para>Enter a description of the project task.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>Shows the duration in days for the task.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_duration
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_duration); }
			set { Entity.Attributes[Fields.msdyn_duration] = value; }
		}

		/// <summary>
		/// <para>Shows the effort hours required for the task.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimated Effort</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Effort
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Effort); }
			set { Entity.Attributes[Fields.msdyn_Effort] = value; }
		}

		/// <summary>
		/// <para>The effort distribution</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Effort Contour (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EffortContour
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EffortContour); }
			set { Entity.Attributes[Fields.msdyn_EffortContour] = value; }
		}

		/// <summary>
		/// <para>Shows the forecast of total effort to complete the task.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Effort estimate at complete (EAC)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_EffortEstimateAtComplete
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_EffortEstimateAtComplete); }
			set { Entity.Attributes[Fields.msdyn_EffortEstimateAtComplete] = value; }
		}

		/// <summary>
		/// <para>Shows whether the task is a line task</para>
		/// <para>Boolean</para>
		/// <para>IsLineTask</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsLineTask
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsLineTask); }
			set { Entity.Attributes[Fields.msdyn_IsLineTask] = value; }
		}

		/// <summary>
		/// <para>Show whether this task is a milestone.</para>
		/// <para>Boolean</para>
		/// <para>Is Milestone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsMilestone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsMilestone); }
			set { Entity.Attributes[Fields.msdyn_IsMilestone] = value; }
		}

		/// <summary>
		/// <para>The id of the project task in MS Project Client.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>MS Project Client Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MSProjectClientId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MSProjectClientId); }
			set { Entity.Attributes[Fields.msdyn_MSProjectClientId] = value; }
		}

		/// <summary>
		/// <para>Shows the number of resources that are estimated for the task. This is not the number of resources assigned to the task.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Number of resources (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_numberofresources
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_numberofresources); }
			set { Entity.Attributes[Fields.msdyn_numberofresources] = value; }
		}

		/// <summary>
		/// <para>Select the organizational unit of the resource who should perform the work.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Organizational Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OrganizationalUnitPricingDimension
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OrganizationalUnitPricingDimension); }
			set { Entity.Attributes[Fields.msdyn_OrganizationalUnitPricingDimension] = value; }
		}

		/// <summary>
		/// <para>Select the summary or parent task in the hierarchy that contains a child task.</para>
		/// <para>Lookup to msdyn_projecttask</para>
		/// <para>Parent Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_parenttask
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_parenttask); }
			set { Entity.Attributes[Fields.msdyn_parenttask] = value; }
		}

		/// <summary>
		/// <para>Enter the value of the cost the service provider will incur based on the estimated work and cost rates in the pricelist.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Planned cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_plannedCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_plannedCost] = null;
			}
		}

		/// <summary>
		/// <para>Enter the value of cost estimated in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Planned Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Planned Sales Amount</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Planned Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_PlannedSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_PlannedSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PlannedSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_PlannedSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the planned sales in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Planned Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Processing data for the plugin pipeline</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Plugin Processing Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PluginProcessingData
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PluginProcessingData); }
			set { Entity.Attributes[Fields.msdyn_PluginProcessingData] = value; }
		}

		/// <summary>
		/// <para>Enter the percentage indicating work completed.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100</para>
		/// <para>Progress %</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Progress
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_Progress); }
			set { Entity.Attributes[Fields.msdyn_Progress] = value; }
		}

		/// <summary>
		/// <para>Select the project name.</para>
		/// <para>Required - Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_project); }
			set { Entity.Attributes[Fields.msdyn_project] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Project task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_projecttaskId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_projecttaskId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Enter the cost left over that can be consumed for future work.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Remaining Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_RemainingCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_RemainingCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_RemainingCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_RemainingCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the remaining cost in the  base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Remaining Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_remainingcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_remainingcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the hours remaining to complete the task.</para>
		/// <para>Double - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Remaining Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_RemainingHours
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_RemainingHours); }
			set { Entity.Attributes[Fields.msdyn_RemainingHours] = value; }
		}

		/// <summary>
		/// <para>Remaining Sales Amount</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Remaining Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_RemainingSales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_RemainingSales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_RemainingSales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_RemainingSales] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the remaining sales in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Remaining Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_remainingsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_remainingsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the hours assigned by generic resource.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Requested Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_RequestedHours
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_RequestedHours); }
			set { Entity.Attributes[Fields.msdyn_RequestedHours] = value; }
		}

		/// <summary>
		/// <para>Select the resource role for the task.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Role (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_resourcecategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_resourcecategory); }
			set { Entity.Attributes[Fields.msdyn_resourcecategory] = value; }
		}

		/// <summary>
		/// <para>Select the resource role for the task.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceCategoryPricingDimension
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceCategoryPricingDimension); }
			set { Entity.Attributes[Fields.msdyn_ResourceCategoryPricingDimension] = value; }
		}

		/// <summary>
		/// <para>Select the organizational unit of the resource who should perform the work.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Resourcing unit (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceOrganizationalUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceOrganizationalUnitId); }
			set { Entity.Attributes[Fields.msdyn_ResourceOrganizationalUnitId] = value; }
		}

		/// <summary>
		/// <para>Shows the utilization units for a resource that is assigned to a project task</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>ResourceUtilization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ResourceUtilization
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ResourceUtilization); }
			set { Entity.Attributes[Fields.msdyn_ResourceUtilization] = value; }
		}

		/// <summary>
		/// <para>Shows the sales consumption percentage for this task.</para>
		/// <para>ReadOnly - Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Sales Consumption %</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SalesConsumptionPercentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_SalesConsumptionPercentage); }
		}

		/// <summary>
		/// <para>Shows the sales estimate at the completion of this task.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Estimate At Complete (EAC)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SalesEstimateAtComplete
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_SalesEstimateAtComplete);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Sales Estimate At Complete (EAC) in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Estimate At Complete (EAC) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_salesestimateatcomplete_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_salesestimateatcomplete_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>The sales estimate contour</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>SalesEstimateContour (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SalesEstimateContour
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SalesEstimateContour); }
			set { Entity.Attributes[Fields.msdyn_SalesEstimateContour] = value; }
		}

		/// <summary>
		/// <para>Shows the sales variance for this task.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Variance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SalesVariance
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_SalesVariance);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the value of the sales variance in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Variance (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_salesvariance_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_salesvariance_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the scheduled duration of the project task, specified in minutes.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Scheduled Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_scheduleddurationminutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_scheduleddurationminutes); }
			set { Entity.Attributes[Fields.msdyn_scheduleddurationminutes] = value; }
		}

		/// <summary>
		/// <para>Enter the scheduled end time of the project.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Due Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_scheduledendUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_scheduledend); }
			set { Entity.Attributes[Fields.msdyn_scheduledend] = value; }
		}

		/// <summary>
		/// <para>Shows the scheduled hours for the task.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Scheduled Hours (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_ScheduledHours
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_ScheduledHours); }
			set { Entity.Attributes[Fields.msdyn_ScheduledHours] = value; }
		}

		/// <summary>
		/// <para>Enter the scheduled start time of the project task.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_scheduledstartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_scheduledstart); }
			set { Entity.Attributes[Fields.msdyn_scheduledstart] = value; }
		}

		/// <summary>
		/// <para>Shows the variance between the estimated work and the forecasted work based on the estimate at completion (EAC).</para>
		/// <para>Double - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Schedule Variance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_ScheduleVariance
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_ScheduleVariance); }
			set { Entity.Attributes[Fields.msdyn_ScheduleVariance] = value; }
		}

		/// <summary>
		/// <para>Internal flag to avoid the update process on the estimate lines of the project task (Deprecated in v3.0)</para>
		/// <para>Boolean</para>
		/// <para>Skip Update Estimate Line (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_skipupdateestimateline
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_skipupdateestimateline); }
			set { Entity.Attributes[Fields.msdyn_skipupdateestimateline] = value; }
		}

		/// <summary>
		/// <para>Type the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 450</para>
		/// <para>Project Task Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_subject); }
			set { Entity.Attributes[Fields.msdyn_subject] = value; }
		}

		/// <summary>
		/// <para>Select the transaction category for the task.</para>
		/// <para>Lookup to msdyn_transactioncategory</para>
		/// <para>Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_transactioncategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_transactioncategory); }
			set { Entity.Attributes[Fields.msdyn_transactioncategory] = value; }
		}

		/// <summary>
		/// <para>Enter the variance between the estimated cost and the forecasted cost based on the estimate at completion (EAC).</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Variance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_VarianceOfCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_VarianceOfCost);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the value of the cost variance in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Variance (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_varianceofcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_varianceofcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the ID of the task in the work breakdown structure (WBS).</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>WBS ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WBSID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WBSID); }
			set { Entity.Attributes[Fields.msdyn_WBSID] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the Stage.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Status of the Project Task</para>
		/// <para>State</para>
		/// <para>Project Task Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projecttaskOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projecttaskOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Project Task</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projecttaskOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projecttaskOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
