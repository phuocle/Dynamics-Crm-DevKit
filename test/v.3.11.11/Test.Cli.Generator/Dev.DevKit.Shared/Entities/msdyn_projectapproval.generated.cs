//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets
{
	public enum msdyn_BillingType
	{
		/// <summary>
		/// Chargeable = 192350001
		/// </summary>
		Chargeable = 192350001,
		/// <summary>
		/// Complimentary = 192350002
		/// </summary>
		Complimentary = 192350002,
		/// <summary>
		/// Non Chargeable = 192350000
		/// </summary>
		Non_Chargeable = 192350000,
		/// <summary>
		/// Not Available = 192350003
		/// </summary>
		Not_Available = 192350003
	}

	public enum msdyn_EntryType
	{
		/// <summary>
		/// Expense = 1
		/// </summary>
		Expense = 1,
		/// <summary>
		/// Time = 0
		/// </summary>
		Time = 0
	}

	public enum msdyn_recordstage
	{
		/// <summary>
		/// Approved = 2
		/// </summary>
		Approved = 2,
		/// <summary>
		/// Pending = 3
		/// </summary>
		Pending = 3,
		/// <summary>
		/// Recall Request Approved = 5
		/// </summary>
		Recall_Request_Approved = 5,
		/// <summary>
		/// Recall Request Rejected = 6
		/// </summary>
		Recall_Request_Rejected = 6,
		/// <summary>
		/// Recall Requested = 4
		/// </summary>
		Recall_Requested = 4,
		/// <summary>
		/// Rejected = 1
		/// </summary>
		Rejected = 1,
		/// <summary>
		/// Submitted = 0
		/// </summary>
		Submitted = 0
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_projectapproval : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ApprovalSet = "msdyn_approvalset";
			public const string msdyn_ApprovedBy = "msdyn_approvedby";
			public const string msdyn_ApprovedOn = "msdyn_approvedon";
			public const string msdyn_BillingType = "msdyn_billingtype";
			public const string msdyn_bookableresource = "msdyn_bookableresource";
			public const string msdyn_costamount = "msdyn_costamount";
			public const string msdyn_costamount_Base = "msdyn_costamount_base";
			public const string msdyn_CostPrice = "msdyn_costprice";
			public const string msdyn_costprice_Base = "msdyn_costprice_base";
			public const string msdyn_CostQuantity = "msdyn_costquantity";
			public const string msdyn_date = "msdyn_date";
			public const string msdyn_EntryType = "msdyn_entrytype";
			public const string msdyn_ExpenseCategory = "msdyn_expensecategory";
			public const string msdyn_ExpenseEntry = "msdyn_expenseentry";
			public const string msdyn_ExternalComments = "msdyn_externalcomments";
			public const string msdyn_hasreceipt = "msdyn_hasreceipt";
			public const string msdyn_InternalComments = "msdyn_internalcomments";
			public const string msdyn_JournalTransaction = "msdyn_journaltransaction";
			public const string msdyn_Manager = "msdyn_manager";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_Project = "msdyn_project";
			public const string msdyn_projectapprovalId = "msdyn_projectapprovalid";
			public const string msdyn_ProjectTask = "msdyn_projecttask";
			public const string msdyn_recordstage = "msdyn_recordstage";
			public const string msdyn_referenceexpenseid = "msdyn_referenceexpenseid";
			public const string msdyn_referencejournalline = "msdyn_referencejournalline";
			public const string msdyn_referencetimeid = "msdyn_referencetimeid";
			public const string msdyn_ResourceCategory = "msdyn_resourcecategory";
			public const string msdyn_salesamount = "msdyn_salesamount";
			public const string msdyn_salesamount_Base = "msdyn_salesamount_base";
			public const string msdyn_SalesPrice = "msdyn_salesprice";
			public const string msdyn_salesprice_Base = "msdyn_salesprice_base";
			public const string msdyn_SalesQuantity = "msdyn_salesquantity";
			public const string msdyn_SubmittedBy = "msdyn_submittedby";
			public const string msdyn_TimeEntry = "msdyn_timeentry";
			public const string msdyn_TransactionCategory = "msdyn_transactioncategory";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_projectapproval";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10529;

		[DebuggerNonUserCode()]
		public msdyn_projectapproval()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectapproval(Guid msdyn_projectapprovalId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_projectapprovalId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectapproval(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectapproval(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectapproval(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_projectapproval(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the Approval Set that the transaction references.</para>
		/// <para>Lookup to msdyn_approvalset</para>
		/// <para>Approval Set</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ApprovalSet
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ApprovalSet); }
			set { Entity.Attributes[Fields.msdyn_ApprovalSet] = value; }
		}

		/// <summary>
		/// <para>Shows the name of the approver.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Approved By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ApprovedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ApprovedBy); }
			set { Entity.Attributes[Fields.msdyn_ApprovedBy] = value; }
		}

		/// <summary>
		/// <para>Shows the date of the approval.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Approved On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ApprovedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ApprovedOn); }
			set { Entity.Attributes[Fields.msdyn_ApprovedOn] = value; }
		}

		/// <summary>
		/// <para>Billing type for the project approval line.</para>
		/// <para>Picklist</para>
		/// <para>Billing Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.msdyn_BillingType? msdyn_BillingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BillingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.msdyn_BillingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BillingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BillingType] = null;
			}
		}

		/// <summary>
		/// <para>Shows the resource that the entry is submitted for.</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookableresource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookableresource); }
			set { Entity.Attributes[Fields.msdyn_bookableresource] = value; }
		}

		/// <summary>
		/// <para>Shows the cost amount of the transaction.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costamount);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Cost Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the cost price of the transaction.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CostPrice);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CostPrice] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_CostPrice] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Cost Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costprice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costprice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the hours submitted for the transaction.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Submitted (hrs)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_CostQuantity); }
			set { Entity.Attributes[Fields.msdyn_CostQuantity] = value; }
		}

		/// <summary>
		/// <para>Shows the date of the transaction.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_dateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_date); }
			set { Entity.Attributes[Fields.msdyn_date] = value; }
		}

		/// <summary>
		/// <para>Shows the entry type of the transaction.</para>
		/// <para>Picklist</para>
		/// <para>Entry Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.msdyn_EntryType? msdyn_EntryType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EntryType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.msdyn_EntryType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EntryType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EntryType] = null;
			}
		}

		/// <summary>
		/// <para>Shows the expense category of the transaction.</para>
		/// <para>Lookup to msdyn_expensecategory</para>
		/// <para>Expense Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ExpenseCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ExpenseCategory); }
			set { Entity.Attributes[Fields.msdyn_ExpenseCategory] = value; }
		}

		/// <summary>
		/// <para>Expense Entry Id.</para>
		/// <para>Lookup to msdyn_expense</para>
		/// <para>Expense Entry</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ExpenseEntry
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ExpenseEntry); }
			set { Entity.Attributes[Fields.msdyn_ExpenseEntry] = value; }
		}

		/// <summary>
		/// <para>Shows the external comments entered for the transaction.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>External Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ExternalComments
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ExternalComments); }
			set { Entity.Attributes[Fields.msdyn_ExternalComments] = value; }
		}

		/// <summary>
		/// <para>Shows whether the transaction has a receipt.</para>
		/// <para>Boolean</para>
		/// <para>Has Receipt</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_hasreceipt
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_hasreceipt); }
			set { Entity.Attributes[Fields.msdyn_hasreceipt] = value; }
		}

		/// <summary>
		/// <para>Shows the internal comments entered for the transaction.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Internal Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalComments
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalComments); }
			set { Entity.Attributes[Fields.msdyn_InternalComments] = value; }
		}

		/// <summary>
		/// <para>Shows whether the transaction was entered by a journal.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>JournalTransaction</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_JournalTransaction
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_JournalTransaction); }
			set { Entity.Attributes[Fields.msdyn_JournalTransaction] = value; }
		}

		/// <summary>
		/// <para>Shows the manager of the person who submitted the transaction.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Manager
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Manager); }
			set { Entity.Attributes[Fields.msdyn_Manager] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Shows the project for the transaction.</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Project); }
			set { Entity.Attributes[Fields.msdyn_Project] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>ApprovalsTable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_projectapprovalId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_projectapprovalId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the project task for the transaction.</para>
		/// <para>Lookup to msdyn_projecttask</para>
		/// <para>Project Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ProjectTask
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ProjectTask); }
			set { Entity.Attributes[Fields.msdyn_ProjectTask] = value; }
		}

		/// <summary>
		/// <para>Shows the stage of the record.</para>
		/// <para>Picklist</para>
		/// <para>Record Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.msdyn_recordstage? msdyn_recordstage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_recordstage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.msdyn_recordstage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_recordstage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_recordstage] = null;
			}
		}

		/// <summary>
		/// <para>Shows the reference ID for the expense entry.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Reference expense id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_referenceexpenseid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_referenceexpenseid); }
			set { Entity.Attributes[Fields.msdyn_referenceexpenseid] = value; }
		}

		/// <summary>
		/// <para>Shows the journal line ID for the journal transaction.</para>
		/// <para>Lookup to msdyn_journalline</para>
		/// <para>reference journal line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_referencejournalline
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_referencejournalline); }
			set { Entity.Attributes[Fields.msdyn_referencejournalline] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Reference time id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_referencetimeid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_referencetimeid); }
			set { Entity.Attributes[Fields.msdyn_referencetimeid] = value; }
		}

		/// <summary>
		/// <para>Shows the role for the resource for this transaction.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Resource Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceCategory); }
			set { Entity.Attributes[Fields.msdyn_ResourceCategory] = value; }
		}

		/// <summary>
		/// <para>Shows the sales amount of the transaction.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_salesamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_salesamount);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Sales Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_salesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_salesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the sales price of the transaction.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SalesPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_SalesPrice);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SalesPrice] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_SalesPrice] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Sales Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_salesprice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_salesprice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the billable hours for the transaction.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Billable (hrs)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SalesQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_SalesQuantity); }
			set { Entity.Attributes[Fields.msdyn_SalesQuantity] = value; }
		}

		/// <summary>
		/// <para>Resource that has submitted the entry for approval.</para>
		/// <para>Required - Lookup to bookableresource</para>
		/// <para>Submitted By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SubmittedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SubmittedBy); }
			set { Entity.Attributes[Fields.msdyn_SubmittedBy] = value; }
		}

		/// <summary>
		/// <para>Time Entry Id.</para>
		/// <para>Lookup to msdyn_timeentry</para>
		/// <para>Time Entry</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeEntry
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeEntry); }
			set { Entity.Attributes[Fields.msdyn_TimeEntry] = value; }
		}

		/// <summary>
		/// <para>Shows the transaction category.</para>
		/// <para>Lookup to msdyn_transactioncategory</para>
		/// <para>Transaction Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TransactionCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TransactionCategory); }
			set { Entity.Attributes[Fields.msdyn_TransactionCategory] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the ApprovalsTable</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the ApprovalsTable</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_projectapprovalOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
