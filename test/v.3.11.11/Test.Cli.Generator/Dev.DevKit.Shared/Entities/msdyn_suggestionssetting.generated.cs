//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_suggestionssettingOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_suggestionssetting : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_CaseDetailMapping = "msdyn_casedetailmapping";
			public const string msdyn_CaseDetailModelMapping = "msdyn_casedetailmodelmapping";
			public const string msdyn_CaseIsEnabled = "msdyn_caseisenabled";
			public const string msdyn_CaseTitleMapping = "msdyn_casetitlemapping";
			public const string msdyn_CaseTitleModelMapping = "msdyn_casetitlemodelmapping";
			public const string msdyn_KBContentMapping = "msdyn_kbcontentmapping";
			public const string msdyn_KBContentModelMapping = "msdyn_kbcontentmodelmapping";
			public const string msdyn_KBIsEnabled = "msdyn_kbisenabled";
			public const string msdyn_KBTitleMapping = "msdyn_kbtitlemapping";
			public const string msdyn_KBTitleModelMapping = "msdyn_kbtitlemodelmapping";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_suggestionssettingId = "msdyn_suggestionssettingid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_suggestionssetting";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10226;

		[DebuggerNonUserCode()]
		public msdyn_suggestionssetting()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_suggestionssetting(Guid msdyn_suggestionssettingId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_suggestionssettingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_suggestionssetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_suggestionssetting(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_suggestionssetting(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_suggestionssetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Row id unique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_suggestionssettingOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_suggestionssettingOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Case attribute which describes Issue Detail</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Case Detail Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CaseDetailMapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CaseDetailMapping); }
			set { Entity.Attributes[Fields.msdyn_CaseDetailMapping] = value; }
		}

		/// <summary>
		/// <para>Case attribute which describes Issue Detail</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Case Detail Model Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CaseDetailModelMapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CaseDetailModelMapping); }
			set { Entity.Attributes[Fields.msdyn_CaseDetailModelMapping] = value; }
		}

		/// <summary>
		/// <para>Is Similar Case Suggestion Enabled for Case Entity. Default set is No.</para>
		/// <para>Required - Boolean</para>
		/// <para>Case Is Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CaseIsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CaseIsEnabled); }
			set { Entity.Attributes[Fields.msdyn_CaseIsEnabled] = value; }
		}

		/// <summary>
		/// <para>Case attribute which describes Issue Summary</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Case Title Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CaseTitleMapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CaseTitleMapping); }
			set { Entity.Attributes[Fields.msdyn_CaseTitleMapping] = value; }
		}

		/// <summary>
		/// <para>Case attribute which describes Issue Summary</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Case Title Model Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CaseTitleModelMapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CaseTitleModelMapping); }
			set { Entity.Attributes[Fields.msdyn_CaseTitleModelMapping] = value; }
		}

		/// <summary>
		/// <para>Knowledge attribute which describes Issue Detail</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>KB Content Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_KBContentMapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_KBContentMapping); }
			set { Entity.Attributes[Fields.msdyn_KBContentMapping] = value; }
		}

		/// <summary>
		/// <para>Knowledge Content attribute mapping which describes Issue Detail and Training pipeline has used to generate model data.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>KB Content Model Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_KBContentModelMapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_KBContentModelMapping); }
			set { Entity.Attributes[Fields.msdyn_KBContentModelMapping] = value; }
		}

		/// <summary>
		/// <para>Is Similar KB Suggestions is enabled. Default is No</para>
		/// <para>Required - Boolean</para>
		/// <para>KB Is Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_KBIsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_KBIsEnabled); }
			set { Entity.Attributes[Fields.msdyn_KBIsEnabled] = value; }
		}

		/// <summary>
		/// <para>Knowledge attribute which describes Issue Summary</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>KB Title Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_KBTitleMapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_KBTitleMapping); }
			set { Entity.Attributes[Fields.msdyn_KBTitleMapping] = value; }
		}

		/// <summary>
		/// <para>Knowledge Title mapping attribute which used by training pipeline to generate model data.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>KB Title Model Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_KBTitleModelMapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_KBTitleModelMapping); }
			set { Entity.Attributes[Fields.msdyn_KBTitleModelMapping] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Suggestions Setting Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_suggestionssettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_suggestionssettingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Status of the suggestionssetting</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_suggestionssettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_suggestionssettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the suggestionssetting</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_suggestionssettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_suggestionssettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
