//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.DataPerformanceOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class DataPerformance : EntityBase
	{
		public struct Fields
		{
			public const string AnyOptimizationApplied = "anyoptimizationapplied";
			public const string AnyOptimizationAvailable = "anyoptimizationavailable";
			public const string Component = "component";
			public const string Count = "count";
			public const string DataPerformanceId = "dataperformanceid";
			public const string Entity = "entity";
			public const string EstimatedOptimizationImpact = "estimatedoptimizationimpact";
			public const string ExecutionPeriod = "executionperiod";
			public const string LastActionResult = "lastactionresult";
			public const string LastOptimizationDate = "lastoptimizationdate";
			public const string MaxTime = "maxtime";
			public const string MedianTime = "mediantime";
			public const string MinTime = "mintime";
			public const string Operation = "operation";
			public const string OptimizationStatus = "optimizationstatus";
			public const string OptimizationStorage = "optimizationstorage";
			public const string OrganizationId = "organizationid";
			public const string RealizedOptimizationImpact = "realizedoptimizationimpact";
			public const string Solution = "solution";
			public const string Weight = "weight";
		}

		public const string EntityLogicalName = "dataperformance";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4450;

		[DebuggerNonUserCode()]
		public DataPerformance()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DataPerformance(Guid DataPerformanceId)
		{
			Entity = new Entity(EntityLogicalName, DataPerformanceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DataPerformance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DataPerformance(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DataPerformance(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DataPerformance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>An internal state which indicates whether at least one optimization is applied.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Any Optimization Applied</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AnyOptimizationApplied
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AnyOptimizationApplied); }
		}

		/// <summary>
		/// <para>An internal state which indicates whether at least one optimization is available for this record.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Any Optimization Available</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AnyOptimizationAvailable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AnyOptimizationAvailable); }
		}

		/// <summary>
		/// <para>Name of the component</para>
		/// <para>ReadOnly - String - MaxLength: 100000</para>
		/// <para>Component</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Component
		{
			get { return Entity.GetAttributeValue<string>(Fields.Component); }
		}

		/// <summary>
		/// <para>Number of times a queries were executed (Aggregated)</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Count
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Count); }
		}

		/// <summary>
		/// <para>Unique identifier of the performance suggestion.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid DataPerformanceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.DataPerformanceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Primary entity</para>
		/// <para>ReadOnly - String - MaxLength: 100000</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity); }
		}

		/// <summary>
		/// <para>The expected average cost benefit of an optimization.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimated Optimization Impact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedOptimizationImpact
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.EstimatedOptimizationImpact); }
		}

		/// <summary>
		/// <para>The execution period for which the performance metrics are calculated.</para>
		/// <para>ReadOnly - String - MaxLength: 50</para>
		/// <para>Execution Period</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExecutionPeriod
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExecutionPeriod); }
		}

		/// <summary>
		/// <para>An internal state which shows the result of the last action that was taken on this record.</para>
		/// <para>ReadOnly - String - MaxLength: 50</para>
		/// <para>Last Action Result</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastActionResult
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastActionResult); }
		}

		/// <summary>
		/// <para>Last time an optimization was applied.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Optimization Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOptimizationDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOptimizationDate); }
		}

		/// <summary>
		/// <para>Maximum execution time in seconds. (Aggregated)</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Max Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MaxTime
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MaxTime); }
		}

		/// <summary>
		/// <para>Average execution time in seconds. (Aggregated)</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Median Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MedianTime
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MedianTime); }
		}

		/// <summary>
		/// <para>Minimum execution time in seconds. (Aggregated)</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Min Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MinTime
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MinTime); }
		}

		/// <summary>
		/// <para>Data operation that triggered the query (Retrieve Multiple, etc.)</para>
		/// <para>ReadOnly - String - MaxLength: 100000</para>
		/// <para>Operation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Operation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Operation); }
		}

		/// <summary>
		/// <para>Current optimization status of the record, showed to the customer.</para>
		/// <para>ReadOnly - String - MaxLength: 50</para>
		/// <para>Optimization Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OptimizationStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.OptimizationStatus); }
		}

		/// <summary>
		/// <para>Storage consumed by the optimization. (MB)</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Optimization Storage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? OptimizationStorage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.OptimizationStorage); }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Actual performance change after taking an optimization action on the record.</para>
		/// <para>ReadOnly - String - MaxLength: 50</para>
		/// <para>Optimization Impact (%)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RealizedOptimizationImpact
		{
			get { return Entity.GetAttributeValue<string>(Fields.RealizedOptimizationImpact); }
		}

		/// <summary>
		/// <para>Name of the solution that owns the component</para>
		/// <para>ReadOnly - String - MaxLength: 100000</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Solution
		{
			get { return Entity.GetAttributeValue<string>(Fields.Solution); }
		}

		/// <summary>
		/// <para>Query Weight of the component. Factored with the Optimization Impact to determine the overall importance of applying an optimization. (P2)</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Weight</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Weight
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Weight); }
		}
	}
}
