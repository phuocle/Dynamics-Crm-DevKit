//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets
{
	public enum msdyn_LineStatus
	{
		/// <summary>
		/// Estimated = 690970000
		/// </summary>
		Estimated = 690970000,
		/// <summary>
		/// Used = 690970001
		/// </summary>
		Used = 690970001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_workorderservice : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AdditionalCost = "msdyn_additionalcost";
			public const string msdyn_additionalcost_Base = "msdyn_additionalcost_base";
			public const string msdyn_AgreementBookingService = "msdyn_agreementbookingservice";
			public const string msdyn_Booking = "msdyn_booking";
			public const string msdyn_CalculatedUnitAmount = "msdyn_calculatedunitamount";
			public const string msdyn_calculatedunitamount_Base = "msdyn_calculatedunitamount_base";
			public const string msdyn_CommissionCosts = "msdyn_commissioncosts";
			public const string msdyn_commissioncosts_Base = "msdyn_commissioncosts_base";
			public const string msdyn_CustomerAsset = "msdyn_customerasset";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_DisableEntitlement = "msdyn_disableentitlement";
			public const string msdyn_DiscountAmount = "msdyn_discountamount";
			public const string msdyn_discountamount_Base = "msdyn_discountamount_base";
			public const string msdyn_DiscountPercent = "msdyn_discountpercent";
			public const string msdyn_Duration = "msdyn_duration";
			public const string msdyn_DurationToBill = "msdyn_durationtobill";
			public const string msdyn_Entitlement = "msdyn_entitlement";
			public const string msdyn_EstimateCalculatedUnitAmount = "msdyn_estimatecalculatedunitamount";
			public const string msdyn_estimatecalculatedunitamount_Base = "msdyn_estimatecalculatedunitamount_base";
			public const string msdyn_EstimateDiscountAmount = "msdyn_estimatediscountamount";
			public const string msdyn_estimatediscountamount_Base = "msdyn_estimatediscountamount_base";
			public const string msdyn_EstimateDiscountPercent = "msdyn_estimatediscountpercent";
			public const string msdyn_EstimateDuration = "msdyn_estimateduration";
			public const string msdyn_EstimateSubtotal = "msdyn_estimatesubtotal";
			public const string msdyn_estimatesubtotal_Base = "msdyn_estimatesubtotal_base";
			public const string msdyn_EstimateTotalAmount = "msdyn_estimatetotalamount";
			public const string msdyn_estimatetotalamount_Base = "msdyn_estimatetotalamount_base";
			public const string msdyn_EstimateTotalCost = "msdyn_estimatetotalcost";
			public const string msdyn_estimatetotalcost_Base = "msdyn_estimatetotalcost_base";
			public const string msdyn_EstimateUnitAmount = "msdyn_estimateunitamount";
			public const string msdyn_estimateunitamount_Base = "msdyn_estimateunitamount_base";
			public const string msdyn_EstimateUnitCost = "msdyn_estimateunitcost";
			public const string msdyn_estimateunitcost_Base = "msdyn_estimateunitcost_base";
			public const string msdyn_InternalDescription = "msdyn_internaldescription";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_LineOrder = "msdyn_lineorder";
			public const string msdyn_LineStatus = "msdyn_linestatus";
			public const string msdyn_MinimumChargeAmount = "msdyn_minimumchargeamount";
			public const string msdyn_minimumchargeamount_Base = "msdyn_minimumchargeamount_base";
			public const string msdyn_MinimumChargeDuration = "msdyn_minimumchargeduration";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_PriceList = "msdyn_pricelist";
			public const string msdyn_Service = "msdyn_service";
			public const string msdyn_Subtotal = "msdyn_subtotal";
			public const string msdyn_subtotal_Base = "msdyn_subtotal_base";
			public const string msdyn_Taxable = "msdyn_taxable";
			public const string msdyn_TotalAmount = "msdyn_totalamount";
			public const string msdyn_totalamount_Base = "msdyn_totalamount_base";
			public const string msdyn_TotalCost = "msdyn_totalcost";
			public const string msdyn_totalcost_Base = "msdyn_totalcost_base";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_UnitAmount = "msdyn_unitamount";
			public const string msdyn_unitamount_Base = "msdyn_unitamount_base";
			public const string msdyn_UnitCost = "msdyn_unitcost";
			public const string msdyn_unitcost_Base = "msdyn_unitcost_base";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string msdyn_WorkOrderIncident = "msdyn_workorderincident";
			public const string msdyn_workorderserviceId = "msdyn_workorderserviceid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_workorderservice";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10657;

		[DebuggerNonUserCode()]
		public msdyn_workorderservice()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservice(Guid msdyn_workorderserviceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_workorderserviceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservice(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservice(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservice(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorderservice(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enter any additional costs associated with this service. The values are manually entered. Note: additional cost is not unit dependent.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Additional Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_AdditionalCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_AdditionalCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AdditionalCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_AdditionalCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the additional cost in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Additional Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_additionalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_additionalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Agreement Booking Service linked to this Work Order Service</para>
		/// <para>Lookup to msdyn_agreementbookingservice</para>
		/// <para>Agreement Booking Service</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AgreementBookingService
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AgreementBookingService); }
			set { Entity.Attributes[Fields.msdyn_AgreementBookingService] = value; }
		}

		/// <summary>
		/// <para>Shows the resource booking detail where this product was added.</para>
		/// <para>Lookup to bookableresourcebooking</para>
		/// <para>Booking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Booking
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Booking); }
			set { Entity.Attributes[Fields.msdyn_Booking] = value; }
		}

		/// <summary>
		/// <para>Shows the sale amount per unit calculated by the system considering the minimum charge, if applicable.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Calculated Unit Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CalculatedUnitAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CalculatedUnitAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CalculatedUnitAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_CalculatedUnitAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the calculated unit amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Calculated Unit Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_calculatedunitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_calculatedunitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the commission costs associated with this service. The value is manually specified and isn&apos;t automatically calculated.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Commission Costs</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CommissionCosts
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CommissionCosts);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CommissionCosts] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_CommissionCosts] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the commission costs in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Commission Costs (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_commissioncosts_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_commissioncosts_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Customer Asset associated with Work Order Service.</para>
		/// <para>Lookup to msdyn_customerasset</para>
		/// <para>Customer Asset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomerAsset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomerAsset); }
			set { Entity.Attributes[Fields.msdyn_CustomerAsset] = value; }
		}

		/// <summary>
		/// <para>Enter the description of the service as presented to the customer. The value defaults to the description defined on the service.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}

		/// <summary>
		/// <para>Choose whether to disable entitlement selection for this work order service.</para>
		/// <para>Boolean</para>
		/// <para>Disable Entitlement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisableEntitlement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisableEntitlement); }
			set { Entity.Attributes[Fields.msdyn_DisableEntitlement] = value; }
		}

		/// <summary>
		/// <para>Specify any discount amount on this service. Note: If you enter a discount amount you cannot enter a discount %</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_DiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_DiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_DiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the discount Amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_discountamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_discountamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Specify any discount % on this service. Note: If you enter a discount % it will overwrite the discount $</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Discount %</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_DiscountPercent
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_DiscountPercent); }
			set { Entity.Attributes[Fields.msdyn_DiscountPercent] = value; }
		}

		/// <summary>
		/// <para>Shows the actual duration of service.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Duration); }
			set { Entity.Attributes[Fields.msdyn_Duration] = value; }
		}

		/// <summary>
		/// <para>Enter the quantity you wish to bill the customer for. By default, this will default to the same value as &quot;Quantity.&quot;</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration To Bill</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DurationToBill
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DurationToBill); }
			set { Entity.Attributes[Fields.msdyn_DurationToBill] = value; }
		}

		/// <summary>
		/// <para>Entitlement to apply to the Work Order Service.</para>
		/// <para>Lookup to entitlement</para>
		/// <para>Entitlement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Entitlement
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Entitlement); }
			set { Entity.Attributes[Fields.msdyn_Entitlement] = value; }
		}

		/// <summary>
		/// <para>Shows the estimated sale amount per unit calculated by the system considering the initial charge (if applicable).</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Calculated Unit Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateCalculatedUnitAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateCalculatedUnitAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateCalculatedUnitAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateCalculatedUnitAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimate calculated unit amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimate Calculated Unit Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatecalculatedunitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatecalculatedunitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter a discount amount on the subtotal amount. Note: If you enter a discount amount you cannot enter a discount %</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateDiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimate discount amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimate Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatediscountamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatediscountamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter a discount % on the subtotal amount. Note: If you enter a discount % it will overwrite the discount $</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Discount %</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_EstimateDiscountPercent
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_EstimateDiscountPercent); }
			set { Entity.Attributes[Fields.msdyn_EstimateDiscountPercent] = value; }
		}

		/// <summary>
		/// <para>Enter the estimated duration of this service.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Estimate Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_EstimateDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_EstimateDuration); }
			set { Entity.Attributes[Fields.msdyn_EstimateDuration] = value; }
		}

		/// <summary>
		/// <para>Shows the total amount for this service, excluding discounts.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Subtotal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateSubtotal
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateSubtotal);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateSubtotal] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateSubtotal] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimate subtotal in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimate Subtotal (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatesubtotal_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatesubtotal_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the estimated total amount of this service, including discounts.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Total Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateTotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateTotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateTotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateTotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimate total amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimate Total Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatetotalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatetotalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the estimated total cost of this service.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Total Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateTotalCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateTotalCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateTotalCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateTotalCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimate total cost in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimate Total Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatetotalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatetotalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the estimated sale amount per unit.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Unit Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateUnitAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateUnitAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateUnitAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateUnitAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimate unit amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimate Unit Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimateunitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimateunitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the estimated cost amount per unit.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Unit Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateUnitCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateUnitCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateUnitCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateUnitCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimate unit cost in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimate Unit Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimateunitcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimateunitcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter any internal notes you want to track on this service.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Internal Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalDescription); }
			set { Entity.Attributes[Fields.msdyn_InternalDescription] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Line Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_LineOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_LineOrder); }
			set { Entity.Attributes[Fields.msdyn_LineOrder] = value; }
		}

		/// <summary>
		/// <para>Enter the current status of the line, estimate or used.</para>
		/// <para>Required - Picklist</para>
		/// <para>Line Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.msdyn_LineStatus? msdyn_LineStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_LineStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.msdyn_LineStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_LineStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_LineStatus] = null;
			}
		}

		/// <summary>
		/// <para>Enter the amount charged as a minimum charge.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Minimum Charge Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_MinimumChargeAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_MinimumChargeAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_MinimumChargeAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_MinimumChargeAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the minimum charge amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Minimum Charge Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_minimumchargeamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_minimumchargeamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the duration of up to how long the minimum charge applies.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum Charge Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_MinimumChargeDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_MinimumChargeDuration); }
			set { Entity.Attributes[Fields.msdyn_MinimumChargeDuration] = value; }
		}

		/// <summary>
		/// <para>Enter the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Price List that determines the pricing for this service</para>
		/// <para>Required - Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PriceList
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PriceList); }
			set { Entity.Attributes[Fields.msdyn_PriceList] = value; }
		}

		/// <summary>
		/// <para>Service proposed or used for this work order</para>
		/// <para>Required - Lookup to product</para>
		/// <para>Service</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Service
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Service); }
			set { Entity.Attributes[Fields.msdyn_Service] = value; }
		}

		/// <summary>
		/// <para>Enter the total amount excluding discounts.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Subtotal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Subtotal
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Subtotal);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Subtotal] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Subtotal] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the subtotal in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Subtotal (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_subtotal_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_subtotal_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Specify if service is taxable. If you do not wish to charge tax set this field to No.</para>
		/// <para>Required - Boolean</para>
		/// <para>Taxable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Taxable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Taxable); }
			set { Entity.Attributes[Fields.msdyn_Taxable] = value; }
		}

		/// <summary>
		/// <para>Required - Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Total Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the total amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total cost of this service. This is calculated by (Unit Cost * Units) + Additional Cost + Commission Costs.</para>
		/// <para>Required - Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Total Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the total cost in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>The unit that determines the final quantity for this service</para>
		/// <para>Required - Lookup to uom</para>
		/// <para>Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}

		/// <summary>
		/// <para>Enter the amount you want to charge the customer per unit. By default, this is calculated based on the selected price list. The amount can be changed.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Unit Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_UnitAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_UnitAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UnitAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_UnitAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the unit amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Unit Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the actual cost per unit.</para>
		/// <para>Required - Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Unit Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_UnitCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_UnitCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UnitCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_UnitCost] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the unit cost in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Unit Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>The work order this service relates to</para>
		/// <para>Required - Lookup to msdyn_workorder</para>
		/// <para>Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}

		/// <summary>
		/// <para>The Incident related to this product</para>
		/// <para>Lookup to msdyn_workorderincident</para>
		/// <para>Work Order Incident</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderIncident
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderIncident); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderIncident] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Work Order Service</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_workorderserviceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_workorderserviceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Work Order Service</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Work Order Service</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
