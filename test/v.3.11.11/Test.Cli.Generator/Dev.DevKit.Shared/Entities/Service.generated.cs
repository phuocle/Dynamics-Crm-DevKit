//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ServiceOptionSets
{
	public enum InitialStatusCode
	{
		/// <summary>
		/// Arrived = 7
		/// </summary>
		Arrived = 7,
		/// <summary>
		/// Canceled = 9
		/// </summary>
		Canceled = 9,
		/// <summary>
		/// Completed = 8
		/// </summary>
		Completed = 8,
		/// <summary>
		/// In Progress = 6
		/// </summary>
		In_Progress = 6,
		/// <summary>
		/// No Show = 10
		/// </summary>
		No_Show = 10,
		/// <summary>
		/// Pending = 3
		/// </summary>
		Pending = 3,
		/// <summary>
		/// Requested = 1
		/// </summary>
		Requested = 1,
		/// <summary>
		/// Reserved = 4
		/// </summary>
		Reserved = 4,
		/// <summary>
		/// Tentative = 2
		/// </summary>
		Tentative = 2
	}

	public enum msdyn_SchedulingEngine
	{
		/// <summary>
		/// Legacy Scheduling = 0
		/// </summary>
		Legacy_Scheduling = 0,
		/// <summary>
		/// Universal Resource Scheduling = 1
		/// </summary>
		Universal_Resource_Scheduling = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Service : EntityBase
	{
		public struct Fields
		{
			public const string AnchorOffset = "anchoroffset";
			public const string CalendarId = "calendarid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string Granularity = "granularity";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InitialStatusCode = "initialstatuscode";
			public const string IsSchedulable = "isschedulable";
			public const string IsVisible = "isvisible";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_RequirementGroupId = "msdyn_requirementgroupid";
			public const string msdyn_SchedulingEngine = "msdyn_SchedulingEngine";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ResourceSpecId = "resourcespecid";
			public const string ServiceId = "serviceid";
			public const string ShowResources = "showresources";
			public const string StrategyId = "strategyid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "service";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4001;

		[DebuggerNonUserCode()]
		public Service()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Service(Guid ServiceId)
		{
			Entity = new Entity(EntityLogicalName, ServiceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Service(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Service(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Service(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Service(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Used in conjunction with granularity to describes when services can be performed in relation to midnight on a given day.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 1,440</para>
		/// <para>Anchor Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AnchorOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AnchorOffset); }
			set { Entity.Attributes[Fields.AnchorOffset] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the calendar.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CalendarId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the service.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the service was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the service.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of activity that represents work done to satisfy a customer&apos;s need.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Duration of the service.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}

		/// <summary>
		/// <para>Describes how often the service is performed.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Granularity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Granularity
		{
			get { return Entity.GetAttributeValue<string>(Fields.Granularity); }
			set { Entity.Attributes[Fields.Granularity] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Initial status reason for the service activity.</para>
		/// <para>Status</para>
		/// <para>Initial Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceOptionSets.InitialStatusCode? InitialStatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialStatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceOptionSets.InitialStatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InitialStatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InitialStatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Information about whether the service can be scheduled.</para>
		/// <para>Boolean</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSchedulable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSchedulable); }
			set { Entity.Attributes[Fields.IsSchedulable] = value; }
		}

		/// <summary>
		/// <para>Information about whether the service is visible to users.</para>
		/// <para>Boolean</para>
		/// <para>Is Visible</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsVisible
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsVisible); }
			set { Entity.Attributes[Fields.IsVisible] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the service.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the service was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the service.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier for Requirement Group associated with Service.</para>
		/// <para>Lookup to msdyn_requirementgroup</para>
		/// <para>Requirement Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RequirementGroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RequirementGroupId); }
			set { Entity.Attributes[Fields.msdyn_RequirementGroupId] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Scheduling Engine</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceOptionSets.msdyn_SchedulingEngine? msdyn_SchedulingEngine
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_SchedulingEngine);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceOptionSets.msdyn_SchedulingEngine)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SchedulingEngine] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_SchedulingEngine] = null;
			}
		}

		/// <summary>
		/// <para>Name of the service.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the resource specification with which the service is associated.</para>
		/// <para>Lookup to resourcespec</para>
		/// <para>Required Resources</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ResourceSpecId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ResourceSpecId); }
			set { Entity.Attributes[Fields.ResourceSpecId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated service.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Service</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ServiceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ServiceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Show Resources</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowResources
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowResources); }
			set { Entity.Attributes[Fields.ShowResources] = value; }
		}

		/// <summary>
		/// <para>Value that is taken from PluginTypeId in the Plugin Type record for the scheduling strategy. This is the ID of the scheduling strategy plug-in associated with the service.</para>
		/// <para>Lookup to plugintype</para>
		/// <para>Strategy</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference StrategyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.StrategyId); }
			set { Entity.Attributes[Fields.StrategyId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
