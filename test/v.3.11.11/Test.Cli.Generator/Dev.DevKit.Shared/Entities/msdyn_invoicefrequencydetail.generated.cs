//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets
{
	public enum msdyn_dayofmonth
	{
		/// <summary>
		/// 1 = 192350001
		/// </summary>
		_1 = 192350001,
		/// <summary>
		/// 10 = 192350010
		/// </summary>
		_10 = 192350010,
		/// <summary>
		/// 11 = 192350011
		/// </summary>
		_11 = 192350011,
		/// <summary>
		/// 12 = 192350012
		/// </summary>
		_12 = 192350012,
		/// <summary>
		/// 13 = 192350013
		/// </summary>
		_13 = 192350013,
		/// <summary>
		/// 14 = 192350014
		/// </summary>
		_14 = 192350014,
		/// <summary>
		/// 15 = 192350015
		/// </summary>
		_15 = 192350015,
		/// <summary>
		/// 16 = 192350016
		/// </summary>
		_16 = 192350016,
		/// <summary>
		/// 17 = 192350017
		/// </summary>
		_17 = 192350017,
		/// <summary>
		/// 18 = 192350018
		/// </summary>
		_18 = 192350018,
		/// <summary>
		/// 19 = 192350019
		/// </summary>
		_19 = 192350019,
		/// <summary>
		/// 2 = 192350002
		/// </summary>
		_2 = 192350002,
		/// <summary>
		/// 20 = 192350020
		/// </summary>
		_20 = 192350020,
		/// <summary>
		/// 21 = 192350021
		/// </summary>
		_21 = 192350021,
		/// <summary>
		/// 22 = 192350022
		/// </summary>
		_22 = 192350022,
		/// <summary>
		/// 23 = 192350023
		/// </summary>
		_23 = 192350023,
		/// <summary>
		/// 24 = 192350024
		/// </summary>
		_24 = 192350024,
		/// <summary>
		/// 25 = 192350025
		/// </summary>
		_25 = 192350025,
		/// <summary>
		/// 26 = 192350026
		/// </summary>
		_26 = 192350026,
		/// <summary>
		/// 27 = 192350027
		/// </summary>
		_27 = 192350027,
		/// <summary>
		/// 28 = 192350028
		/// </summary>
		_28 = 192350028,
		/// <summary>
		/// 29 = 192350029
		/// </summary>
		_29 = 192350029,
		/// <summary>
		/// 3 = 192350003
		/// </summary>
		_3 = 192350003,
		/// <summary>
		/// 30 = 192350030
		/// </summary>
		_30 = 192350030,
		/// <summary>
		/// 31 = 192350031
		/// </summary>
		_31 = 192350031,
		/// <summary>
		/// 4 = 192350004
		/// </summary>
		_4 = 192350004,
		/// <summary>
		/// 5 = 192350005
		/// </summary>
		_5 = 192350005,
		/// <summary>
		/// 6 = 192350006
		/// </summary>
		_6 = 192350006,
		/// <summary>
		/// 7 = 192350007
		/// </summary>
		_7 = 192350007,
		/// <summary>
		/// 8 = 192350008
		/// </summary>
		_8 = 192350008,
		/// <summary>
		/// 9 = 192350009
		/// </summary>
		_9 = 192350009
	}

	public enum msdyn_occurrenceofweekday
	{
		/// <summary>
		/// First = 192350000
		/// </summary>
		First = 192350000,
		/// <summary>
		/// Fourth = 192350003
		/// </summary>
		Fourth = 192350003,
		/// <summary>
		/// Last = 192350004
		/// </summary>
		Last = 192350004,
		/// <summary>
		/// Second = 192350001
		/// </summary>
		Second = 192350001,
		/// <summary>
		/// Third = 192350002
		/// </summary>
		Third = 192350002
	}

	public enum msdyn_weekday
	{
		/// <summary>
		/// Friday = 192350005
		/// </summary>
		Friday = 192350005,
		/// <summary>
		/// Monday = 192350001
		/// </summary>
		Monday = 192350001,
		/// <summary>
		/// Saturday = 192350006
		/// </summary>
		Saturday = 192350006,
		/// <summary>
		/// Sunday = 192350000
		/// </summary>
		Sunday = 192350000,
		/// <summary>
		/// Thursday = 192350004
		/// </summary>
		Thursday = 192350004,
		/// <summary>
		/// Tuesday = 192350002
		/// </summary>
		Tuesday = 192350002,
		/// <summary>
		/// Wednesday = 192350003
		/// </summary>
		Wednesday = 192350003
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_invoicefrequencydetail : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_dayofmonth = "msdyn_dayofmonth";
			public const string msdyn_invoicefrequency = "msdyn_invoicefrequency";
			public const string msdyn_invoicefrequencydetailId = "msdyn_invoicefrequencydetailid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_occurrenceofweekday = "msdyn_occurrenceofweekday";
			public const string msdyn_weekday = "msdyn_weekday";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_invoicefrequencydetail";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10512;

		[DebuggerNonUserCode()]
		public msdyn_invoicefrequencydetail()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_invoicefrequencydetail(Guid msdyn_invoicefrequencydetailId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_invoicefrequencydetailId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_invoicefrequencydetail(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_invoicefrequencydetail(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_invoicefrequencydetail(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_invoicefrequencydetail(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Specify the day(s) of the month on which invoicing should run</para>
		/// <para>Picklist</para>
		/// <para>Day of month</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.msdyn_dayofmonth? msdyn_dayofmonth
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_dayofmonth);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.msdyn_dayofmonth)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_dayofmonth] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_dayofmonth] = null;
			}
		}

		/// <summary>
		/// <para>Select the invoice frequency.</para>
		/// <para>Required - Lookup to msdyn_invoicefrequency</para>
		/// <para>Invoice Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_invoicefrequency
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_invoicefrequency); }
			set { Entity.Attributes[Fields.msdyn_invoicefrequency] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Invoice Frequency Detail</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_invoicefrequencydetailId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_invoicefrequencydetailId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Type the name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Specifies which occurrence of a weekday the invoicing job should run if there are multiple occurrences of a weekday in the selected period</para>
		/// <para>Picklist</para>
		/// <para>Occurrence of weekday</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.msdyn_occurrenceofweekday? msdyn_occurrenceofweekday
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_occurrenceofweekday);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.msdyn_occurrenceofweekday)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_occurrenceofweekday] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_occurrenceofweekday] = null;
			}
		}

		/// <summary>
		/// <para>Select the weekday of the invoicing job run.</para>
		/// <para>Picklist</para>
		/// <para>Weekday</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.msdyn_weekday? msdyn_weekday
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_weekday);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.msdyn_weekday)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_weekday] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_weekday] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the Invoice Frequency Detail</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Invoice Frequency Detail</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_invoicefrequencydetailOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
