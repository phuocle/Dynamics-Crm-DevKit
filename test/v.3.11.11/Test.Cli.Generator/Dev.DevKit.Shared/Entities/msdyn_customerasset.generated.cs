//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_customerassetOptionSets
{
	public enum msdyn_RegistrationStatus
	{
		/// <summary>
		/// Error = 192350004
		/// </summary>
		Error = 192350004,
		/// <summary>
		/// In Progress = 192350002
		/// </summary>
		In_Progress = 192350002,
		/// <summary>
		/// Registered = 192350003
		/// </summary>
		Registered = 192350003,
		/// <summary>
		/// Unknown = 192350000
		/// </summary>
		Unknown = 192350000,
		/// <summary>
		/// Unregistered = 192350001
		/// </summary>
		Unregistered = 192350001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_customerasset : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Account = "msdyn_account";
			public const string msdyn_alert = "msdyn_alert";
			public const string msdyn_alertcount = "msdyn_alertcount";
			public const string msdyn_alertcount_Date = "msdyn_alertcount_date";
			public const string msdyn_alertcount_State = "msdyn_alertcount_state";
			public const string msdyn_CustomerAssetCategory = "msdyn_customerassetcategory";
			public const string msdyn_customerassetId = "msdyn_customerassetid";
			public const string msdyn_DeviceId = "msdyn_deviceid";
			public const string msdyn_FunctionalLocation = "msdyn_functionallocation";
			public const string msdyn_LastAlertTime = "msdyn_lastalerttime";
			public const string msdyn_LastAlertTime_Date = "msdyn_lastalerttime_date";
			public const string msdyn_LastAlertTime_State = "msdyn_lastalerttime_state";
			public const string msdyn_LastCommandSent = "msdyn_lastcommandsent";
			public const string msdyn_LastCommandSentTime = "msdyn_lastcommandsenttime";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_MasterAsset = "msdyn_masterasset";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ParentAsset = "msdyn_parentasset";
			public const string msdyn_Product = "msdyn_product";
			public const string msdyn_RegistrationStatus = "msdyn_registrationstatus";
			public const string msdyn_WorkOrderProduct = "msdyn_workorderproduct";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_customerasset";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10151;

		[DebuggerNonUserCode()]
		public msdyn_customerasset()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_customerasset(Guid msdyn_customerassetId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_customerassetId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_customerasset(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_customerasset(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_customerasset(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_customerasset(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Parent Customer of this Asset</para>
		/// <para>Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Account
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Account); }
			set { Entity.Attributes[Fields.msdyn_Account] = value; }
		}

		/// <summary>
		/// <para>If active parent alerts exist for the customer asset</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Active or in-progress alerts</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_alert
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_alert); }
		}

		/// <summary>
		/// <para>Count of parent alerts for this customer asset</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Alert Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_alertcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_alertcount); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field Alert Count.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Alert Count (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_alertcount_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_alertcount_Date); }
		}

		/// <summary>
		/// <para>State of rollup field Alert Count.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Alert Count (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_alertcount_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_alertcount_State); }
		}

		/// <summary>
		/// <para>The category of the customer asset</para>
		/// <para>Lookup to msdyn_customerassetcategory</para>
		/// <para>Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomerAssetCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomerAssetCategory); }
			set { Entity.Attributes[Fields.msdyn_CustomerAssetCategory] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Customer Asset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_customerassetId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_customerassetId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Device ID used to register with the IoT provider. This will not be used if there are two or more connected devices for this asset. This value will be updated based on the connected devices.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Device ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_DeviceId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_DeviceId); }
			set { Entity.Attributes[Fields.msdyn_DeviceId] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_functionallocation</para>
		/// <para>Functional Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_FunctionalLocation
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_FunctionalLocation); }
			set { Entity.Attributes[Fields.msdyn_FunctionalLocation] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last active alert time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_LastAlertTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_LastAlertTime); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field Last active alert time.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last active alert time (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_LastAlertTime_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_LastAlertTime_Date); }
		}

		/// <summary>
		/// <para>State of rollup field Last active alert time.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Last active alert time (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_LastAlertTime_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_LastAlertTime_State); }
		}

		/// <summary>
		/// <para>The last command sent to any of the connected devices for this asset.</para>
		/// <para>Lookup to msdyn_iotdevicecommand</para>
		/// <para>Last Command Sent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LastCommandSent
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LastCommandSent); }
			set { Entity.Attributes[Fields.msdyn_LastCommandSent] = value; }
		}

		/// <summary>
		/// <para>The timestamp of the last command sent for any of the connected devices for this asset.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Last Command Sent Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_LastCommandSentTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_LastCommandSentTime); }
			set { Entity.Attributes[Fields.msdyn_LastCommandSentTime] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}

		/// <summary>
		/// <para>Top-Level Asset, (if this asset is a sub asset)</para>
		/// <para>Lookup to msdyn_customerasset</para>
		/// <para>Top-Level Asset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_MasterAsset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_MasterAsset); }
			set { Entity.Attributes[Fields.msdyn_MasterAsset] = value; }
		}

		/// <summary>
		/// <para>Enter the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Parent Asset</para>
		/// <para>Lookup to msdyn_customerasset</para>
		/// <para>Parent Asset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ParentAsset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ParentAsset); }
			set { Entity.Attributes[Fields.msdyn_ParentAsset] = value; }
		}

		/// <summary>
		/// <para>Reference to Product associated with this Asset</para>
		/// <para>Lookup to product</para>
		/// <para>Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Product
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Product); }
			set { Entity.Attributes[Fields.msdyn_Product] = value; }
		}

		/// <summary>
		/// <para>A status field that denotes whether all the devices connected to this asset are registered with the IoT provider.</para>
		/// <para>Picklist</para>
		/// <para>Registration Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_customerassetOptionSets.msdyn_RegistrationStatus? msdyn_RegistrationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_RegistrationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_customerassetOptionSets.msdyn_RegistrationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_RegistrationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_RegistrationStatus] = null;
			}
		}

		/// <summary>
		/// <para>Indicates a link to the Work Order Product from where this Asset was auto created by the system.</para>
		/// <para>Lookup to msdyn_workorderproduct</para>
		/// <para>Work Order Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderProduct); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderProduct] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Customer Asset</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_customerassetOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_customerassetOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Customer Asset</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_customerassetOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_customerassetOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
