//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets
{
	public enum AllocationTypeCode
	{
		/// <summary>
		/// Number of cases = 0
		/// </summary>
		Number_of_cases = 0,
		/// <summary>
		/// Number of hours = 1
		/// </summary>
		Number_of_hours = 1
	}

	public enum DecreaseRemainingOn
	{
		/// <summary>
		/// Case Creation = 1
		/// </summary>
		Case_Creation = 1,
		/// <summary>
		/// Case Resolution = 0
		/// </summary>
		Case_Resolution = 0
	}

	public enum entitytype
	{
		/// <summary>
		/// Case = 0
		/// </summary>
		Case = 0,
		/// <summary>
		/// Work Order = 192350000
		/// </summary>
		Work_Order = 192350000
	}

	public enum KbAccessLevel
	{
		/// <summary>
		/// None = 2
		/// </summary>
		None = 2,
		/// <summary>
		/// Premium = 1
		/// </summary>
		Premium = 1,
		/// <summary>
		/// Standard = 0
		/// </summary>
		Standard = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class EntitlementTemplate : EntityBase
	{
		public struct Fields
		{
			public const string AllocationTypeCode = "allocationtypecode";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DecreaseRemainingOn = "decreaseremainingon";
			public const string Description = "description";
			public const string EndDate = "enddate";
			public const string EntitlementTemplateId = "entitlementtemplateid";
			public const string entitytype = "entitytype";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string KbAccessLevel = "kbaccesslevel";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string RestrictCaseCreation = "restrictcasecreation";
			public const string SLAId = "slaid";
			public const string StartDate = "startdate";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalTerms = "totalterms";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "entitlementtemplate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9702;

		[DebuggerNonUserCode()]
		public EntitlementTemplate()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntitlementTemplate(Guid EntitlementTemplateId)
		{
			Entity = new Entity(EntityLogicalName, EntitlementTemplateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntitlementTemplate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntitlementTemplate(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntitlementTemplate(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntitlementTemplate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Select whether the entitlement allocation is based on number of cases or number of hours.</para>
		/// <para>Picklist</para>
		/// <para>Allocation Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets.AllocationTypeCode? AllocationTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AllocationTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets.AllocationTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AllocationTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AllocationTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Information about whether to decrease the remaining terms when the case is created or when it is resolved</para>
		/// <para>Picklist</para>
		/// <para>Decrease Remaining On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets.DecreaseRemainingOn? DecreaseRemainingOn
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DecreaseRemainingOn);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets.DecreaseRemainingOn)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DecreaseRemainingOn] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DecreaseRemainingOn] = null;
			}
		}

		/// <summary>
		/// <para>Type additional information to describe the account, such as an excerpt from the company&apos;s website.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time when the entitlement ends.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndDate); }
			set { Entity.Attributes[Fields.EndDate] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Entitlement Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EntitlementTemplateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EntitlementTemplateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Entity type for which the entitlement template applies</para>
		/// <para>Required - Picklist</para>
		/// <para>Entity Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets.entitytype? entitytype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.entitytype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets.entitytype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.entitytype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.entitytype] = null;
			}
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the contact with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Select the access someone will have to the knowledge base on the portal.</para>
		/// <para>Picklist</para>
		/// <para>KB Access Level</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets.KbAccessLevel? KbAccessLevel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.KbAccessLevel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EntitlementTemplateOptionSets.KbAccessLevel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.KbAccessLevel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.KbAccessLevel] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a descriptive name for the entitlement template.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Entitlement Template Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Tells whether case creation is restricted based on entitlement terms.</para>
		/// <para>Boolean</para>
		/// <para>Restrict By Entitlement Terms</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RestrictCaseCreation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RestrictCaseCreation); }
			set { Entity.Attributes[Fields.RestrictCaseCreation] = value; }
		}

		/// <summary>
		/// <para>Choose the service level agreement (SLA) associated with the entitlement.</para>
		/// <para>Lookup to sla</para>
		/// <para>SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time when the entitlement begins.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartDate); }
			set { Entity.Attributes[Fields.StartDate] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Type the total number of entitlement terms.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Total Terms</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTerms
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.TotalTerms); }
			set { Entity.Attributes[Fields.TotalTerms] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the contact.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
