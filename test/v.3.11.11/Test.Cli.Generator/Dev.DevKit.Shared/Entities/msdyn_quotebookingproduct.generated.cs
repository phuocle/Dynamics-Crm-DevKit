//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_quotebookingproductOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_quotebookingproduct : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_currency = "msdyn_currency";
			public const string msdyn_currency_Base = "msdyn_currency_base";
			public const string msdyn_customerasset = "msdyn_customerasset";
			public const string msdyn_EstimatedCost = "msdyn_estimatedcost";
			public const string msdyn_estimatedcost_Base = "msdyn_estimatedcost_base";
			public const string msdyn_EstimatedSalesAmount = "msdyn_estimatedsalesamount";
			public const string msdyn_estimatedsalesamount_Base = "msdyn_estimatedsalesamount_base";
			public const string msdyn_Internalflags = "msdyn_Internalflags";
			public const string msdyn_iscopied = "msdyn_iscopied";
			public const string msdyn_lineorder = "msdyn_lineorder";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_pricelist = "msdyn_pricelist";
			public const string msdyn_product = "msdyn_product";
			public const string msdyn_qtytobill = "msdyn_qtytobill";
			public const string msdyn_quantity = "msdyn_quantity";
			public const string msdyn_quote = "msdyn_quote";
			public const string msdyn_quotebookingincident = "msdyn_quotebookingincident";
			public const string msdyn_quotebookingproductId = "msdyn_quotebookingproductid";
			public const string msdyn_quotebookingsetup = "msdyn_quotebookingsetup";
			public const string msdyn_unit = "msdyn_unit";
			public const string msdyn_unitamount = "msdyn_unitamount";
			public const string msdyn_unitamount_Base = "msdyn_unitamount_base";
			public const string msdyn_unitcostamount = "msdyn_unitcostamount";
			public const string msdyn_unitcostamount_Base = "msdyn_unitcostamount_base";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_quotebookingproduct";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10629;

		[DebuggerNonUserCode()]
		public msdyn_quotebookingproduct()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotebookingproduct(Guid msdyn_quotebookingproductId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_quotebookingproductId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotebookingproduct(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotebookingproduct(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotebookingproduct(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotebookingproduct(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The currency that will be used to charge this product</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_currency
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_currency);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_currency] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_currency] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Currency in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Currency (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_currency_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_currency_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Customer asset related to this Product</para>
		/// <para>Lookup to msdyn_customerasset</para>
		/// <para>Customer Asset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_customerasset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_customerasset); }
			set { Entity.Attributes[Fields.msdyn_customerasset] = value; }
		}

		/// <summary>
		/// <para>The estimated cost of this quote booking product</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedCost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the EstimatedCost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>EstimatedCost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>The estimated sales amount of this quote booking product</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Sales Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedSalesAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedSalesAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedSalesAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedSalesAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the EstimatedSalesAmount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>EstimatedSalesAmount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedsalesamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedsalesamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Internalflags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Internalflags); }
			set { Entity.Attributes[Fields.msdyn_Internalflags] = value; }
		}

		/// <summary>
		/// <para>Internal use only</para>
		/// <para>Boolean</para>
		/// <para>Is Copied</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_iscopied
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_iscopied); }
			set { Entity.Attributes[Fields.msdyn_iscopied] = value; }
		}

		/// <summary>
		/// <para>Shows the order of this task within the quote booking products.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Line Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_lineorder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_lineorder); }
			set { Entity.Attributes[Fields.msdyn_lineorder] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Optionally set Price List that will determine the pricing for this product on the Work Order</para>
		/// <para>Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_pricelist
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_pricelist); }
			set { Entity.Attributes[Fields.msdyn_pricelist] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Product/Service associated with Quote Booking Product.</para>
		/// <para>Required - Lookup to product</para>
		/// <para>Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_product
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_product); }
			set { Entity.Attributes[Fields.msdyn_product] = value; }
		}

		/// <summary>
		/// <para>Enter the quantity you wish to bill the customer for. By default, this will default to the same value as &quot;Quantity.&quot;</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Quantity To Bill</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_qtytobill
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_qtytobill); }
			set { Entity.Attributes[Fields.msdyn_qtytobill] = value; }
		}

		/// <summary>
		/// <para>Shows the actual quantity of the product.</para>
		/// <para>Required - Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_quantity
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_quantity); }
			set { Entity.Attributes[Fields.msdyn_quantity] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Quote associated with Quote Booking Product.</para>
		/// <para>Required - Lookup to quote</para>
		/// <para>Quote</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_quote
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_quote); }
			set { Entity.Attributes[Fields.msdyn_quote] = value; }
		}

		/// <summary>
		/// <para>The Quote Booking Incident related to this product</para>
		/// <para>Lookup to msdyn_quotebookingincident</para>
		/// <para>Quote Booking Incident</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_quotebookingincident
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_quotebookingincident); }
			set { Entity.Attributes[Fields.msdyn_quotebookingincident] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Quote Booking Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_quotebookingproductId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_quotebookingproductId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Quote Booking Setup associated with Quote  Booking Product.</para>
		/// <para>Required - Lookup to msdyn_quotebookingsetup</para>
		/// <para>Quote Booking Setup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_quotebookingsetup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_quotebookingsetup); }
			set { Entity.Attributes[Fields.msdyn_quotebookingsetup] = value; }
		}

		/// <summary>
		/// <para>The unit that determines the pricing for this product when Price List is set</para>
		/// <para>Lookup to uom</para>
		/// <para>Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_unit); }
			set { Entity.Attributes[Fields.msdyn_unit] = value; }
		}

		/// <summary>
		/// <para>Enter the amount you wish to charge the customer per unit. This field is optional.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Unit Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_unitamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_unitamount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Unit Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Unit Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the  unit cost amount. This field is optional.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Unit Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitcostamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitcostamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_unitcostamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_unitcostamount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Unit Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Unit Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitcostamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitcostamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Quote Booking Product</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotebookingproductOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotebookingproductOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Quote Booking Product</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotebookingproductOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotebookingproductOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
