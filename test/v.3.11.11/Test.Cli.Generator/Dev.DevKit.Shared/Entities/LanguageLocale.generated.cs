//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.LanguageLocaleOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class LanguageLocale : EntityBase
	{
		public struct Fields
		{
			public const string Code = "code";
			public const string Language = "language";
			public const string LanguageLocaleId = "languagelocaleid";
			public const string LocaleId = "localeid";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string Region = "region";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "languagelocale";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9957;

		[DebuggerNonUserCode()]
		public LanguageLocale()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageLocale(Guid LanguageLocaleId)
		{
			Entity = new Entity(EntityLogicalName, LanguageLocaleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageLocale(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageLocale(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageLocale(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public LanguageLocale(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Code</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Code
		{
			get { return Entity.GetAttributeValue<string>(Fields.Code); }
		}

		/// <summary>
		/// <para>Language</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Language
		{
			get { return Entity.GetAttributeValue<string>(Fields.Language); }
		}

		/// <summary>
		/// <para>LanguageLocaleId</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid LanguageLocaleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.LanguageLocaleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Locale ID</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Locale ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LocaleId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LocaleId); }
			set { Entity.Attributes[Fields.LocaleId] = value; }
		}

		/// <summary>
		/// <para>Name</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the language locale.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Region</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Region
		{
			get { return Entity.GetAttributeValue<string>(Fields.Region); }
		}

		/// <summary>
		/// <para>State Code</para>
		/// <para>State</para>
		/// <para>State Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LanguageLocaleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LanguageLocaleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Language Status Code</para>
		/// <para>Status</para>
		/// <para>Language Status Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LanguageLocaleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LanguageLocaleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
