//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SavedQueryOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SavedQuery : EntityBase
	{
		public struct Fields
		{
			public const string AdvancedGroupBy = "advancedgroupby";
			public const string ColumnSetXml = "columnsetxml";
			public const string ComponentState = "componentstate";
			public const string ConditionalFormatting = "conditionalformatting";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string FetchXml = "fetchxml";
			public const string IntroducedVersion = "introducedversion";
			public const string IsCustom = "iscustom";
			public const string IsDefault = "isdefault";
			public const string IsManaged = "ismanaged";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string IsPrivate = "isprivate";
			public const string IsQuickFindQuery = "isquickfindquery";
			public const string IsUserDefined = "isuserdefined";
			public const string LayoutJson = "layoutjson";
			public const string LayoutXml = "layoutxml";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OfflineSqlQuery = "offlinesqlquery";
			public const string OrganizationId = "organizationid";
			public const string OrganizationTabOrder = "organizationtaborder";
			public const string OverwriteTime = "overwritetime";
			public const string QueryAPI = "queryapi";
			public const string QueryAppUsage = "queryappusage";
			public const string QueryType = "querytype";
			public const string SavedQueryId = "savedqueryid";
			public const string SavedQueryIdUnique = "savedqueryidunique";
			public const string SolutionId = "solutionid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "savedquery";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1039;

		[DebuggerNonUserCode()]
		public SavedQuery()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedQuery(Guid SavedQueryId)
		{
			Entity = new Entity(EntityLogicalName, SavedQueryId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedQuery(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedQuery(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedQuery(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SavedQuery(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Type the column name that will be used to group the results from the data collected across multiple records from a system view.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Advanced Group By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdvancedGroupBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdvancedGroupBy); }
			set { Entity.Attributes[Fields.AdvancedGroupBy] = value; }
		}

		/// <summary>
		/// <para>Contains the columns and sorting criteria for the view, stored in XML format.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Column Set XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ColumnSetXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ColumnSetXml); }
			set { Entity.Attributes[Fields.ColumnSetXml] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedQueryOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedQueryOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Type information about how the items in the system view are formatted.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Conditional formatting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConditionalFormatting
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConditionalFormatting); }
			set { Entity.Attributes[Fields.ConditionalFormatting] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type additional information to describe the view, such as the filter criteria or intended results set.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>String specifying the query in Fetch XML language.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Fetch XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FetchXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.FetchXml); }
			set { Entity.Attributes[Fields.FetchXml] = value; }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Tells whether a user created the view.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Custom</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCustom
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCustom); }
		}

		/// <summary>
		/// <para>Tells whether the view is the default view for the specified record type (entity).</para>
		/// <para>Boolean</para>
		/// <para>Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefault); }
			set { Entity.Attributes[Fields.IsDefault] = value; }
		}

		/// <summary>
		/// <para>Tells whether the record is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Indicates whether or not this is viewable by the entire organization.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Private</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}

		/// <summary>
		/// <para>Choose whether the view is compatible with Quick Find. When users search for specific items, you define the fields that are searched in.</para>
		/// <para>Boolean</para>
		/// <para>Quick Find Compatible</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsQuickFindQuery
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsQuickFindQuery); }
			set { Entity.Attributes[Fields.IsQuickFindQuery] = value; }
		}

		/// <summary>
		/// <para>Tells whether the view was created by a user.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>User Defined</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsUserDefined
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsUserDefined); }
		}

		/// <summary>
		/// <para>Layout data in JSON format.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Layout data in JSON format.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LayoutJson
		{
			get { return Entity.GetAttributeValue<string>(Fields.LayoutJson); }
			set { Entity.Attributes[Fields.LayoutJson] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Layout XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LayoutXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.LayoutXml); }
			set { Entity.Attributes[Fields.LayoutXml] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a name for the view to describe what results the view will contain. This name is visible to users in the View list.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>String specifying the corresponding sql query for the fetch xml specified for offline use.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Offline SQL Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OfflineSqlQuery
		{
			get { return Entity.GetAttributeValue<string>(Fields.OfflineSqlQuery); }
			set { Entity.Attributes[Fields.OfflineSqlQuery] = value; }
		}

		/// <summary>
		/// <para>Choose the ID of the organization that the record is associated with.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For the organization, type the tab order to determine how users navigate through the screen using only the Tab key.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Default Organization tab order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OrganizationTabOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OrganizationTabOrder); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Query API</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QueryAPI
		{
			get { return Entity.GetAttributeValue<string>(Fields.QueryAPI); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Query Application Usage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QueryAppUsage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QueryAppUsage); }
			set { Entity.Attributes[Fields.QueryAppUsage] = value; }
		}

		/// <summary>
		/// <para>Shows the type of the query.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Query Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QueryType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QueryType); }
			set { Entity.Attributes[Fields.QueryType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the view.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>View</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SavedQueryId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SavedQueryId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SavedQueryIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SavedQueryIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Shows the status of the view.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedQueryOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedQueryOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the reason code that explains the status of the record.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedQueryOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedQueryOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Version number of the view.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
