//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.TimeZoneRuleOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TimeZoneRule : EntityBase
	{
		public struct Fields
		{
			public const string Bias = "bias";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DaylightBias = "daylightbias";
			public const string DaylightDay = "daylightday";
			public const string DaylightDayOfWeek = "daylightdayofweek";
			public const string DaylightHour = "daylighthour";
			public const string DaylightMinute = "daylightminute";
			public const string DaylightMonth = "daylightmonth";
			public const string DaylightSecond = "daylightsecond";
			public const string DaylightYear = "daylightyear";
			public const string EffectiveDateTime = "effectivedatetime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string StandardBias = "standardbias";
			public const string StandardDay = "standardday";
			public const string StandardDayOfWeek = "standarddayofweek";
			public const string StandardHour = "standardhour";
			public const string StandardMinute = "standardminute";
			public const string StandardMonth = "standardmonth";
			public const string StandardSecond = "standardsecond";
			public const string StandardYear = "standardyear";
			public const string TimeZoneDefinitionId = "timezonedefinitionid";
			public const string TimeZoneRuleId = "timezoneruleid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "timezonerule";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4811;

		[DebuggerNonUserCode()]
		public TimeZoneRule()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TimeZoneRule(Guid TimeZoneRuleId)
		{
			Entity = new Entity(EntityLogicalName, TimeZoneRuleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TimeZoneRule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TimeZoneRule(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TimeZoneRule(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TimeZoneRule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Base time bias of the time zone rule.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Bias</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Bias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Bias); }
			set { Entity.Attributes[Fields.Bias] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the time zone rule.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the time zone rule was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the timezonerule.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Time bias in addition to the base bias for daylight savings time.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Daylight Bias</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightBias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightBias); }
			set { Entity.Attributes[Fields.DaylightBias] = value; }
		}

		/// <summary>
		/// <para>Day of the month when daylight savings time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 31</para>
		/// <para>Daylight Day</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightDay
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightDay); }
			set { Entity.Attributes[Fields.DaylightDay] = value; }
		}

		/// <summary>
		/// <para>Day of the week when daylight savings time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 6</para>
		/// <para>Daylight Day Of Week</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightDayOfWeek); }
			set { Entity.Attributes[Fields.DaylightDayOfWeek] = value; }
		}

		/// <summary>
		/// <para>Hour of the day when daylight savings time starts</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 23</para>
		/// <para>Daylight Hour</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightHour
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightHour); }
			set { Entity.Attributes[Fields.DaylightHour] = value; }
		}

		/// <summary>
		/// <para>Minute of the hour when daylight savings time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 59</para>
		/// <para>Daylight Minute</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightMinute
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightMinute); }
			set { Entity.Attributes[Fields.DaylightMinute] = value; }
		}

		/// <summary>
		/// <para>Month when daylight savings time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 12</para>
		/// <para>Daylight Month</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightMonth); }
			set { Entity.Attributes[Fields.DaylightMonth] = value; }
		}

		/// <summary>
		/// <para>Second of the minute when daylight savings time starts</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 59</para>
		/// <para>Daylight Second</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightSecond
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightSecond); }
			set { Entity.Attributes[Fields.DaylightSecond] = value; }
		}

		/// <summary>
		/// <para>Year when daylight savings times starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 32,768</para>
		/// <para>Daylight Year</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightYear
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightYear); }
			set { Entity.Attributes[Fields.DaylightYear] = value; }
		}

		/// <summary>
		/// <para>Time that this rule takes effect, in local time.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Effective Date Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveDateTime); }
			set { Entity.Attributes[Fields.EffectiveDateTime] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the time zone rule.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the time zone rule was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the timezonerule.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the time zone rule.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Time bias in addition to the base bias for standard time.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Standard Bias</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardBias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardBias); }
			set { Entity.Attributes[Fields.StandardBias] = value; }
		}

		/// <summary>
		/// <para>Day of the month when standard time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 31</para>
		/// <para>Standard Day</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardDay
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardDay); }
			set { Entity.Attributes[Fields.StandardDay] = value; }
		}

		/// <summary>
		/// <para>Day of the week when standard time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 6</para>
		/// <para>Standard Day Of Week</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardDayOfWeek); }
			set { Entity.Attributes[Fields.StandardDayOfWeek] = value; }
		}

		/// <summary>
		/// <para>Hour of the day when standard time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 23</para>
		/// <para>Standard Hour</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardHour
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardHour); }
			set { Entity.Attributes[Fields.StandardHour] = value; }
		}

		/// <summary>
		/// <para>Minute of the hour when standard time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 59</para>
		/// <para>Standard Minute</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardMinute
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardMinute); }
			set { Entity.Attributes[Fields.StandardMinute] = value; }
		}

		/// <summary>
		/// <para>Month when standard time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 12</para>
		/// <para>Standard Month</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardMonth); }
			set { Entity.Attributes[Fields.StandardMonth] = value; }
		}

		/// <summary>
		/// <para>Second of the Minute when standard time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 59</para>
		/// <para>Standard Second</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardSecond
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardSecond); }
			set { Entity.Attributes[Fields.StandardSecond] = value; }
		}

		/// <summary>
		/// <para>Year when standard time starts.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 32,768</para>
		/// <para>Standard Year</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardYear
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardYear); }
			set { Entity.Attributes[Fields.StandardYear] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the time zone definition.</para>
		/// <para>Lookup to timezonedefinition</para>
		/// <para>Time Zone Definition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TimeZoneDefinitionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TimeZoneDefinitionId); }
			set { Entity.Attributes[Fields.TimeZoneDefinitionId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the time zone rule.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Time Zone Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TimeZoneRuleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TimeZoneRuleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
