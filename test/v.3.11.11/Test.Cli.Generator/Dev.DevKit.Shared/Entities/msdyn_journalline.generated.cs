//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets
{
	public enum msdyn_AmountMethod
	{
		/// <summary>
		/// Fixed Price = 192350001
		/// </summary>
		Fixed_Price = 192350001,
		/// <summary>
		/// Multiply Basis Amount By Percent = 192350003
		/// </summary>
		Multiply_Basis_Amount_By_Percent = 192350003,
		/// <summary>
		/// Multiply Basis Quantity By Price = 192350002
		/// </summary>
		Multiply_Basis_Quantity_By_Price = 192350002,
		/// <summary>
		/// Multiply Quantity By Price = 192350000
		/// </summary>
		Multiply_Quantity_By_Price = 192350000,
		/// <summary>
		/// Tax Calculation = 690970000
		/// </summary>
		Tax_Calculation = 690970000
	}

	public enum msdyn_BillingStatus
	{
		/// <summary>
		/// Canceled = 192350003
		/// </summary>
		Canceled = 192350003,
		/// <summary>
		/// Customer Invoice Created = 192350001
		/// </summary>
		Customer_Invoice_Created = 192350001,
		/// <summary>
		/// Customer Invoice Posted = 192350002
		/// </summary>
		Customer_Invoice_Posted = 192350002,
		/// <summary>
		/// Ready to Invoice = 192350004
		/// </summary>
		Ready_to_Invoice = 192350004,
		/// <summary>
		/// Unbilled Sales Created = 192350000
		/// </summary>
		Unbilled_Sales_Created = 192350000,
		/// <summary>
		/// Work order closed - posted = 690970000
		/// </summary>
		Work_order_closed_posted = 690970000
	}

	public enum msdyn_BillingType
	{
		/// <summary>
		/// Chargeable = 192350001
		/// </summary>
		Chargeable = 192350001,
		/// <summary>
		/// Complimentary = 192350002
		/// </summary>
		Complimentary = 192350002,
		/// <summary>
		/// Non Chargeable = 192350000
		/// </summary>
		Non_Chargeable = 192350000,
		/// <summary>
		/// Not Available = 192350003
		/// </summary>
		Not_Available = 192350003
	}

	public enum msdyn_CustomerType
	{
		/// <summary>
		/// Account = 192350001
		/// </summary>
		Account = 192350001,
		/// <summary>
		/// Contact = 192350002
		/// </summary>
		Contact = 192350002
	}

	public enum msdyn_TransactionClassification
	{
		/// <summary>
		/// Additional = 690970001
		/// </summary>
		Additional = 690970001,
		/// <summary>
		/// Commission = 690970000
		/// </summary>
		Commission = 690970000,
		/// <summary>
		/// Expense = 192350001
		/// </summary>
		Expense = 192350001,
		/// <summary>
		/// Fee = 192350004
		/// </summary>
		Fee = 192350004,
		/// <summary>
		/// Material = 192350002
		/// </summary>
		Material = 192350002,
		/// <summary>
		/// Milestone = 192350003
		/// </summary>
		Milestone = 192350003,
		/// <summary>
		/// Tax = 690970002
		/// </summary>
		Tax = 690970002,
		/// <summary>
		/// Time = 192350000
		/// </summary>
		Time = 192350000
	}

	public enum msdyn_TransactionTypeCode
	{
		/// <summary>
		/// Billed Sales = 192350006
		/// </summary>
		Billed_Sales = 192350006,
		/// <summary>
		/// Cost = 192350000
		/// </summary>
		Cost = 192350000,
		/// <summary>
		/// Inter-Organizational Sales = 192350008
		/// </summary>
		Inter_Organizational_Sales = 192350008,
		/// <summary>
		/// Project Contract = 192350004
		/// </summary>
		Project_Contract = 192350004,
		/// <summary>
		/// Resourcing Unit Cost = 192350007
		/// </summary>
		Resourcing_Unit_Cost = 192350007,
		/// <summary>
		/// Unbilled Sales = 192350005
		/// </summary>
		Unbilled_Sales = 192350005
	}

	public enum msdyn_VendorType
	{
		/// <summary>
		/// Account = 192350001
		/// </summary>
		Account = 192350001,
		/// <summary>
		/// Contact = 192350002
		/// </summary>
		Contact = 192350002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_journalline : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AccountCustomer = "msdyn_accountcustomer";
			public const string msdyn_AccountingDate = "msdyn_accountingdate";
			public const string msdyn_AccountVendor = "msdyn_accountvendor";
			public const string msdyn_Amount = "msdyn_amount";
			public const string msdyn_amount_Base = "msdyn_amount_base";
			public const string msdyn_AmountMethod = "msdyn_amountmethod";
			public const string msdyn_BasisAmount = "msdyn_basisamount";
			public const string msdyn_basisamount_Base = "msdyn_basisamount_base";
			public const string msdyn_BasisPrice = "msdyn_basisprice";
			public const string msdyn_basisprice_Base = "msdyn_basisprice_base";
			public const string msdyn_BasisQuantity = "msdyn_basisquantity";
			public const string msdyn_BillingStatus = "msdyn_billingstatus";
			public const string msdyn_BillingType = "msdyn_billingtype";
			public const string msdyn_bookableresource = "msdyn_bookableresource";
			public const string msdyn_ContactCustomer = "msdyn_contactcustomer";
			public const string msdyn_ContactVendor = "msdyn_contactvendor";
			public const string msdyn_contractorganizationalunitid = "msdyn_contractorganizationalunitid";
			public const string msdyn_CustomerType = "msdyn_customertype";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_DocumentDate = "msdyn_documentdate";
			public const string msdyn_EndDateTime = "msdyn_enddatetime";
			public const string msdyn_ExchangeRateDate = "msdyn_exchangeratedate";
			public const string msdyn_externaldescription = "msdyn_externaldescription";
			public const string msdyn_IsPosted = "msdyn_isposted";
			public const string msdyn_Journal = "msdyn_journal";
			public const string msdyn_journallineId = "msdyn_journallineid";
			public const string msdyn_Percent = "msdyn_percent";
			public const string msdyn_Price = "msdyn_price";
			public const string msdyn_price_Base = "msdyn_price_base";
			public const string msdyn_PriceList = "msdyn_pricelist";
			public const string msdyn_Product = "msdyn_product";
			public const string msdyn_Project = "msdyn_project";
			public const string msdyn_Quantity = "msdyn_quantity";
			public const string msdyn_ResourceCategory = "msdyn_resourcecategory";
			public const string msdyn_ResourceOrganizationalUnitId = "msdyn_resourceorganizationalunitid";
			public const string msdyn_SalesContract = "msdyn_salescontract";
			public const string msdyn_SalesContractLine = "msdyn_salescontractline";
			public const string msdyn_SalesContractLineId = "msdyn_salescontractlineid";
			public const string msdyn_StartDateTime = "msdyn_startdatetime";
			public const string msdyn_Task = "msdyn_task";
			public const string msdyn_TransactionCategory = "msdyn_transactioncategory";
			public const string msdyn_TransactionClassification = "msdyn_transactionclassification";
			public const string msdyn_TransactionTypeCode = "msdyn_transactiontypecode";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_UnitSchedule = "msdyn_unitschedule";
			public const string msdyn_VendorType = "msdyn_vendortype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_journalline";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10515;

		[DebuggerNonUserCode()]
		public msdyn_journalline()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_journalline(Guid msdyn_journallineId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_journallineId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_journalline(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_journalline(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_journalline(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_journalline(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the customer for the journal line.</para>
		/// <para>Lookup to account</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AccountCustomer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AccountCustomer); }
			set { Entity.Attributes[Fields.msdyn_AccountCustomer] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Accounting Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_AccountingDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_AccountingDate); }
			set { Entity.Attributes[Fields.msdyn_AccountingDate] = value; }
		}

		/// <summary>
		/// <para>Lookup to account</para>
		/// <para>Vendor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AccountVendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AccountVendor); }
			set { Entity.Attributes[Fields.msdyn_AccountVendor] = value; }
		}

		/// <summary>
		/// <para>Shows the amount of the journal line.</para>
		/// <para>Money - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Amount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Amount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Amount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Amount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select the calculation method for the amount.</para>
		/// <para>Picklist</para>
		/// <para>Amount Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_AmountMethod? msdyn_AmountMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AmountMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_AmountMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AmountMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AmountMethod] = null;
			}
		}

		/// <summary>
		/// <para>Enter the basis amount of the journal line.</para>
		/// <para>Money - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Basis Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_BasisAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_BasisAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BasisAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_BasisAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Basis Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Basis Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_basisamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_basisamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the basis price of the journal line.</para>
		/// <para>Money - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Basis Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_BasisPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_BasisPrice);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BasisPrice] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_BasisPrice] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Basis Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Basis Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_basisprice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_basisprice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the basis quantity of the journal line.</para>
		/// <para>Decimal - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Basis Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_BasisQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_BasisQuantity); }
			set { Entity.Attributes[Fields.msdyn_BasisQuantity] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Billing Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_BillingStatus? msdyn_BillingStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BillingStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_BillingStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BillingStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BillingStatus] = null;
			}
		}

		/// <summary>
		/// <para>Select the billing type for the journal line.</para>
		/// <para>Picklist</para>
		/// <para>Billing Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_BillingType? msdyn_BillingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BillingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_BillingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BillingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BillingType] = null;
			}
		}

		/// <summary>
		/// <para>Shows the resource.</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Bookable Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookableresource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookableresource); }
			set { Entity.Attributes[Fields.msdyn_bookableresource] = value; }
		}

		/// <summary>
		/// <para>Lookup to contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContactCustomer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContactCustomer); }
			set { Entity.Attributes[Fields.msdyn_ContactCustomer] = value; }
		}

		/// <summary>
		/// <para>Lookup to contact</para>
		/// <para>Vendor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContactVendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContactVendor); }
			set { Entity.Attributes[Fields.msdyn_ContactVendor] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Organizational Unit associated with Journal Line.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Contracting Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_contractorganizationalunitid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_contractorganizationalunitid); }
			set { Entity.Attributes[Fields.msdyn_contractorganizationalunitid] = value; }
		}

		/// <summary>
		/// <para>Shows the type of customer.</para>
		/// <para>Picklist</para>
		/// <para>Customer Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_CustomerType? msdyn_CustomerType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CustomerType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_CustomerType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CustomerType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CustomerType] = null;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>Enter the transaction date of the journal line.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Document Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DocumentDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DocumentDate); }
			set { Entity.Attributes[Fields.msdyn_DocumentDate] = value; }
		}

		/// <summary>
		/// <para>Enter the end date and time.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>End Date/Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_EndDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_EndDateTime); }
			set { Entity.Attributes[Fields.msdyn_EndDateTime] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Exchange Rate Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ExchangeRateDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ExchangeRateDate); }
			set { Entity.Attributes[Fields.msdyn_ExchangeRateDate] = value; }
		}

		/// <summary>
		/// <para>The external description of the journal line.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>External Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_externaldescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_externaldescription); }
			set { Entity.Attributes[Fields.msdyn_externaldescription] = value; }
		}

		/// <summary>
		/// <para>Shows whether the journal has been submitted.</para>
		/// <para>Boolean</para>
		/// <para>Is Posted</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsPosted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsPosted); }
			set { Entity.Attributes[Fields.msdyn_IsPosted] = value; }
		}

		/// <summary>
		/// <para>Shows the name of the journal.</para>
		/// <para>Lookup to msdyn_journal</para>
		/// <para>Journal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Journal
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Journal); }
			set { Entity.Attributes[Fields.msdyn_Journal] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Journal Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_journallineId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_journallineId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Enter the percent.</para>
		/// <para>Decimal - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Percent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Percent
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_Percent); }
			set { Entity.Attributes[Fields.msdyn_Percent] = value; }
		}

		/// <summary>
		/// <para>Enter the price.</para>
		/// <para>Money - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Price
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Price);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Price] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Price] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_price_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_price_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the price list used for the journal line.</para>
		/// <para>Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PriceList
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PriceList); }
			set { Entity.Attributes[Fields.msdyn_PriceList] = value; }
		}

		/// <summary>
		/// <para>Select the product.</para>
		/// <para>Lookup to product</para>
		/// <para>Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Product
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Product); }
			set { Entity.Attributes[Fields.msdyn_Product] = value; }
		}

		/// <summary>
		/// <para>Select the project.</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Project); }
			set { Entity.Attributes[Fields.msdyn_Project] = value; }
		}

		/// <summary>
		/// <para>Enter the quantity.</para>
		/// <para>Decimal - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Quantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_Quantity); }
			set { Entity.Attributes[Fields.msdyn_Quantity] = value; }
		}

		/// <summary>
		/// <para>Select the resource role.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceCategory); }
			set { Entity.Attributes[Fields.msdyn_ResourceCategory] = value; }
		}

		/// <summary>
		/// <para>Organizational unit at the time the entry was registered of the resource who performed the work.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Resourcing Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceOrganizationalUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceOrganizationalUnitId); }
			set { Entity.Attributes[Fields.msdyn_ResourceOrganizationalUnitId] = value; }
		}

		/// <summary>
		/// <para>Shows the project contract.</para>
		/// <para>Lookup to salesorder</para>
		/// <para>Project Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SalesContract
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SalesContract); }
			set { Entity.Attributes[Fields.msdyn_SalesContract] = value; }
		}

		/// <summary>
		/// <para>(Deprecated) Shows the project contract line.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>(Deprecated) Project Contract Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SalesContractLine
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SalesContractLine); }
			set { Entity.Attributes[Fields.msdyn_SalesContractLine] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Project Contract Line associated with Journal Line.</para>
		/// <para>Lookup to salesorderdetail</para>
		/// <para>Project Contract Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SalesContractLineId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SalesContractLineId); }
			set { Entity.Attributes[Fields.msdyn_SalesContractLineId] = value; }
		}

		/// <summary>
		/// <para>Enter the start date and time.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start Date/Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_StartDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_StartDateTime); }
			set { Entity.Attributes[Fields.msdyn_StartDateTime] = value; }
		}

		/// <summary>
		/// <para>Select the project task.</para>
		/// <para>Lookup to msdyn_projecttask</para>
		/// <para>Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Task
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Task); }
			set { Entity.Attributes[Fields.msdyn_Task] = value; }
		}

		/// <summary>
		/// <para>Select the transaction category.</para>
		/// <para>Lookup to msdyn_transactioncategory</para>
		/// <para>Transaction Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TransactionCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TransactionCategory); }
			set { Entity.Attributes[Fields.msdyn_TransactionCategory] = value; }
		}

		/// <summary>
		/// <para>Select the transaction class.</para>
		/// <para>Required - Picklist</para>
		/// <para>Transaction Class</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_TransactionClassification? msdyn_TransactionClassification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionClassification);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_TransactionClassification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionClassification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionClassification] = null;
			}
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>Transaction Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_TransactionTypeCode? msdyn_TransactionTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_TransactionTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the unit of measurement.</para>
		/// <para>Lookup to uom</para>
		/// <para>Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}

		/// <summary>
		/// <para>Shows the unit schedule.</para>
		/// <para>Lookup to uomschedule</para>
		/// <para>Unit Schedule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_UnitSchedule
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_UnitSchedule); }
			set { Entity.Attributes[Fields.msdyn_UnitSchedule] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Vendor Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_VendorType? msdyn_VendorType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_VendorType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.msdyn_VendorType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_VendorType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_VendorType] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Journal Line</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Journal Line</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_journallineOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
