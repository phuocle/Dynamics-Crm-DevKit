//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.NavigationSettingOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum SettingType
	{
		/// <summary>
		/// Advanced Setup = 0
		/// </summary>
		Advanced_Setup = 0,
		/// <summary>
		/// Advanced Setup Summary = 2
		/// </summary>
		Advanced_Setup_Summary = 2,
		/// <summary>
		/// Basic Setup = 1
		/// </summary>
		Basic_Setup = 1,
		/// <summary>
		/// Basic Setup Summary = 3
		/// </summary>
		Basic_Setup_Summary = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class NavigationSetting : EntityBase
	{
		public struct Fields
		{
			public const string AdvancedSettingOrder = "advancedsettingorder";
			public const string AppConfigId = "appconfigid";
			public const string AppConfigIdUnique = "appconfigidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string GroupName = "groupname";
			public const string IconResourceId = "iconresourceid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NavigationSettingId = "navigationsettingid";
			public const string NavigationSettingIdUnique = "navigationsettingidunique";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string PageUrl = "pageurl";
			public const string ParentNavigationSettingId = "parentnavigationsettingid";
			public const string Privileges = "privileges";
			public const string ProgressState = "progressstate";
			public const string QuickSettingOrder = "quicksettingorder";
			public const string ResourceId = "resourceid";
			public const string SettingType = "settingtype";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
		}

		public const string EntityLogicalName = "navigationsetting";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9900;

		[DebuggerNonUserCode()]
		public NavigationSetting()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public NavigationSetting(Guid NavigationSettingId)
		{
			Entity = new Entity(EntityLogicalName, NavigationSettingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public NavigationSetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public NavigationSetting(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public NavigationSetting(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public NavigationSetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Enter the position of this NavigationSetting as it should appear within its group in the Advanced Setup menu.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>AdvancedOrder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AdvancedSettingOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AdvancedSettingOrder); }
			set { Entity.Attributes[Fields.AdvancedSettingOrder] = value; }
		}

		/// <summary>
		/// <para>Enter the App Config record that this Navigation Setting is associated with.</para>
		/// <para>Required - Lookup to appmodule</para>
		/// <para>AppConfigId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AppConfigId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AppConfigId); }
			set { Entity.Attributes[Fields.AppConfigId] = value; }
		}

		/// <summary>
		/// <para>For system use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>AppConfigIdUnique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AppConfigIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AppConfigIdUnique); }
			set { Entity.Attributes[Fields.AppConfigIdUnique] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a description that describes that Navigation Setting in detail.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Type the name of the group represented by this Navigation Setting record.</para>
		/// <para>String - MaxLength: 400</para>
		/// <para>Group Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupName
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupName); }
			set { Entity.Attributes[Fields.GroupName] = value; }
		}

		/// <summary>
		/// <para>The web resource identifier of the icon to be used for a navigation setting area or sub area.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>IconResourceId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? IconResourceId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.IconResourceId); }
			set { Entity.Attributes[Fields.IconResourceId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
		}

		/// <summary>
		/// <para>Version in which the similarity rule is introduced.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a title or name that describes the Navigation Setting so it can be identified in Dynamics CRM views.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Identifies a single setting page or group of pages configured for use in a single app.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>NavigationSettingId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid NavigationSettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.NavigationSettingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For system use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>NavigationSettingIdUnique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? NavigationSettingIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.NavigationSettingIdUnique); }
			set { Entity.Attributes[Fields.NavigationSettingIdUnique] = value; }
		}

		/// <summary>
		/// <para>Enter the Object Type Code of the entity associated whose page this Navigation Setting record represents.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>EntityObjectTypeCode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>System-populated field that identifies the organization that owns this Navigation Setting record.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Type the URL which locates the page associated with this Navigation Setting record.</para>
		/// <para>String - MaxLength: 400</para>
		/// <para>Page Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PageUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PageUrl); }
			set { Entity.Attributes[Fields.PageUrl] = value; }
		}

		/// <summary>
		/// <para>The Navigation Setting record that represents the group that this record belongs to.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Parent Navigation Setting Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ParentNavigationSettingId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ParentNavigationSettingId); }
			set { Entity.Attributes[Fields.ParentNavigationSettingId] = value; }
		}

		/// <summary>
		/// <para>Enter the Privilege Mask for the entity associated with this navigation setting page that will be the minimum requirement for the page to be made available to a user.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Privileges</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Privileges
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Privileges); }
			set { Entity.Attributes[Fields.Privileges] = value; }
		}

		/// <summary>
		/// <para>Select the setup completion level for this Navigation Setting page.</para>
		/// <para>Boolean</para>
		/// <para>Progress State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ProgressState
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ProgressState); }
			set { Entity.Attributes[Fields.ProgressState] = value; }
		}

		/// <summary>
		/// <para>Enter the position of this NavigationSetting as it should appear in the Quick Setup menu.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>QuickOrder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QuickSettingOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QuickSettingOrder); }
			set { Entity.Attributes[Fields.QuickSettingOrder] = value; }
		}

		/// <summary>
		/// <para>The Web Resource that will be associated with this Navigation Setting record.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Resource Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ResourceId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ResourceId); }
			set { Entity.Attributes[Fields.ResourceId] = value; }
		}

		/// <summary>
		/// <para>Select the type of group this Navigation Setting record represents. This determines which of the three in-app customization menus will contain this group.</para>
		/// <para>Picklist</para>
		/// <para>Group Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.SettingType? SettingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SettingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.SettingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SettingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SettingType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
	}
}
