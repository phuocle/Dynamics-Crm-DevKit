//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.EmailOptionSets
{
    public enum CorrelationMethod
    {
        /// <summary>
        /// ConversationIndex = 5
        /// </summary>
        ConversationIndex = 5,
        /// <summary>
        /// CustomCorrelation = 7
        /// </summary>
        CustomCorrelation = 7,
        /// <summary>
        /// InReplyTo = 3
        /// </summary>
        InReplyTo = 3,
        /// <summary>
        /// None = 0
        /// </summary>
        None = 0,
        /// <summary>
        /// Skipped = 1
        /// </summary>
        Skipped = 1,
        /// <summary>
        /// SmartMatching = 6
        /// </summary>
        SmartMatching = 6,
        /// <summary>
        /// TrackingToken = 4
        /// </summary>
        TrackingToken = 4,
        /// <summary>
        /// XHeader = 2
        /// </summary>
        XHeader = 2
    }

    public enum DeliveryPriorityCode
    {
        /// <summary>
        /// High = 2
        /// </summary>
        High = 2,
        /// <summary>
        /// Low = 0
        /// </summary>
        Low = 0,
        /// <summary>
        /// Normal = 1
        /// </summary>
        Normal = 1
    }

    public enum EmailReminderStatus
    {
        /// <summary>
        /// NotSet = 0
        /// </summary>
        NotSet = 0,
        /// <summary>
        /// ReminderExpired = 2
        /// </summary>
        ReminderExpired = 2,
        /// <summary>
        /// ReminderInvalid = 3
        /// </summary>
        ReminderInvalid = 3,
        /// <summary>
        /// ReminderSet = 1
        /// </summary>
        ReminderSet = 1
    }

    public enum EmailReminderType
    {
        /// <summary>
        /// If_I_do_not_receive_a_reply_by = 0
        /// </summary>
        If_I_do_not_receive_a_reply_by = 0,
        /// <summary>
        /// If_the_email_is_not_opened_by = 1
        /// </summary>
        If_the_email_is_not_opened_by = 1,
        /// <summary>
        /// Remind_me_anyways_at = 2
        /// </summary>
        Remind_me_anyways_at = 2
    }

    public enum Notifications
    {
        /// <summary>
        /// None = 0
        /// </summary>
        None = 0,
        /// <summary>
        /// The_message_was_saved_as_a_Microsoft_Dynamics_365_email_record_but_not_all_the_attachments_could_be_saved_with_it_An_attachment_cannot_be_saved_if_it_is_blocked_or_if_its_file_type_is_invalid = 1
        /// </summary>
        The_message_was_saved_as_a_Microsoft_Dynamics_365_email_record_but_not_all_the_attachments_could_be_saved_with_it_An_attachment_cannot_be_saved_if_it_is_blocked_or_if_its_file_type_is_invalid = 1,
        /// <summary>
        /// Truncated_body = 2
        /// </summary>
        Truncated_body = 2
    }

    public enum PriorityCode
    {
        /// <summary>
        /// High = 2
        /// </summary>
        High = 2,
        /// <summary>
        /// Low = 0
        /// </summary>
        Low = 0,
        /// <summary>
        /// Normal = 1
        /// </summary>
        Normal = 1
    }

    public enum StateCode
    {
        /// <summary>
        /// Canceled = 2
        /// </summary>
        Canceled = 2,
        /// <summary>
        /// Completed = 1
        /// </summary>
        Completed = 1,
        /// <summary>
        /// Open = 0
        /// </summary>
        Open = 0
    }

    public enum StatusCode
    {
        /// <summary>
        /// Canceled = 5
        /// </summary>
        Canceled = 5,
        /// <summary>
        /// Completed = 2
        /// </summary>
        Completed = 2,
        /// <summary>
        /// Draft = 1
        /// </summary>
        Draft = 1,
        /// <summary>
        /// Failed = 8
        /// </summary>
        Failed = 8,
        /// <summary>
        /// Pending_Send = 6
        /// </summary>
        Pending_Send = 6,
        /// <summary>
        /// Received = 4
        /// </summary>
        Received = 4,
        /// <summary>
        /// Sending = 7
        /// </summary>
        Sending = 7,
        /// <summary>
        /// Sent = 3
        /// </summary>
        Sent = 3
    }
}

namespace Dev.DevKit.Shared.Entities
{
    public partial class Email : EntityBase
    {
        public struct Fields
        {
            public const string AcceptingEntityId = "acceptingentityid";
            public const string ActivityAdditionalParams = "activityadditionalparams";
            public const string ActivityId = "activityid";
            public const string ActivityTypeCode = "activitytypecode";
            public const string ActualDurationMinutes = "actualdurationminutes";
            public const string ActualEnd = "actualend";
            public const string ActualStart = "actualstart";
            public const string AttachmentCount = "attachmentcount";
            public const string AttachmentOpenCount = "attachmentopencount";
            public const string BaseConversationIndexHash = "baseconversationindexhash";
            public const string bcc = "bcc";
            public const string Category = "category";
            public const string cc = "cc";
            public const string Compressed = "compressed";
            public const string ConversationIndex = "conversationindex";
            public const string ConversationTrackingId = "conversationtrackingid";
            public const string CorrelatedActivityId = "correlatedactivityid";
            public const string CorrelationMethod = "correlationmethod";
            public const string CreatedBy = "createdby";
            public const string CreatedOn = "createdon";
            public const string CreatedOnBehalfBy = "createdonbehalfby";
            public const string DelayedEmailSendTime = "delayedemailsendtime";
            public const string DeliveryAttempts = "deliveryattempts";
            public const string DeliveryPriorityCode = "deliveryprioritycode";
            public const string DeliveryReceiptRequested = "deliveryreceiptrequested";
            public const string Description = "description";
            public const string DirectionCode = "directioncode";
            public const string EmailReminderExpiryTime = "emailreminderexpirytime";
            public const string EmailReminderStatus = "emailreminderstatus";
            public const string EmailReminderText = "emailremindertext";
            public const string EmailReminderType = "emailremindertype";
            public const string EmailSender = "emailsender";
            public const string EmailTrackingId = "emailtrackingid";
            public const string ExchangeRate = "exchangerate";
            public const string FollowEmailUserPreference = "followemailuserpreference";
            public const string from = "from";
            public const string ImportSequenceNumber = "importsequencenumber";
            public const string InReplyTo = "inreplyto";
            public const string IsBilled = "isbilled";
            public const string IsEmailFollowed = "isemailfollowed";
            public const string IsEmailReminderSet = "isemailreminderset";
            public const string IsRegularActivity = "isregularactivity";
            public const string IsUnsafe = "isunsafe";
            public const string IsWorkflowCreated = "isworkflowcreated";
            public const string LastOnHoldTime = "lastonholdtime";
            public const string LastOpenedTime = "lastopenedtime";
            public const string LinksClickedCount = "linksclickedcount";
            public const string MessageId = "messageid";
            public const string MimeType = "mimetype";
            public const string ModifiedBy = "modifiedby";
            public const string ModifiedOn = "modifiedon";
            public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
            public const string Notifications = "notifications";
            public const string OnHoldTime = "onholdtime";
            public const string OpenCount = "opencount";
            public const string OverriddenCreatedOn = "overriddencreatedon";
            public const string OwnerId = "ownerid";
            public const string OwningBusinessUnit = "owningbusinessunit";
            public const string OwningTeam = "owningteam";
            public const string OwningUser = "owninguser";
            public const string ParentActivityId = "parentactivityid";
            public const string PostponeEmailProcessingUntil = "postponeemailprocessinguntil";
            public const string PriorityCode = "prioritycode";
            public const string ProcessId = "processid";
            public const string ReadReceiptRequested = "readreceiptrequested";
            public const string ReceivingMailboxId = "receivingmailboxid";
            public const string RegardingObjectId = "regardingobjectid";
            public const string ReminderActionCardId = "reminderactioncardid";
            public const string ReplyCount = "replycount";
            public const string ReservedForInternalUse = "reservedforinternaluse";
            public const string ScheduledDurationMinutes = "scheduleddurationminutes";
            public const string ScheduledEnd = "scheduledend";
            public const string ScheduledStart = "scheduledstart";
            public const string Sender = "sender";
            public const string SenderMailboxId = "sendermailboxid";
            public const string SendersAccount = "sendersaccount";
            public const string SentOn = "senton";
            public const string SLAId = "slaid";
            public const string SLAInvokedId = "slainvokedid";
            public const string SortDate = "sortdate";
            public const string StageId = "stageid";
            public const string StateCode = "statecode";
            public const string StatusCode = "statuscode";
            public const string Subcategory = "subcategory";
            public const string Subject = "subject";
            public const string SubmittedBy = "submittedby";
            public const string TemplateId = "templateid";
            public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
            public const string to = "to";
            public const string ToRecipients = "torecipients";
            public const string TrackingToken = "trackingtoken";
            public const string TransactionCurrencyId = "transactioncurrencyid";
            public const string TraversedPath = "traversedpath";
            public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
            public const string VersionNumber = "versionnumber";
        }

        public const string EntityLogicalName = "email";

        public const int EntityTypeCode = 4202;

        [DebuggerNonUserCode()]
        public Email()
        {
            Entity = new Entity(EntityLogicalName);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Email(Guid EmailId)
        {
            Entity = new Entity(EntityLogicalName, EmailId);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Email(string keyName, object keyValue)
        {
            Entity = new Entity(EntityLogicalName, keyName, keyValue);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Email(Entity entity)
        {
            Entity = entity;
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Email(Entity entity, Entity merge)
        {
            Entity = entity;
            foreach (var property in merge?.Attributes)
            {
                var key = property.Key;
                var value = property.Value;
                Entity[key] = value;
            }
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Email(KeyAttributeCollection keys)
        {
            Entity = new Entity(EntityLogicalName, keys);
            PreEntity = CloneThisEntity(Entity);
        }

        /// <summary>
        /// <para>The Entity that Accepted the Email</para>
        /// <para>Lookup to queue;systemuser</para>
        /// <para>Accepting Entity</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference AcceptingEntityId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.AcceptingEntityId); }
            set { Entity.Attributes[Fields.AcceptingEntityId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Memo - MaxLength: 8192</para>
        /// <para>Additional Parameters</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ActivityAdditionalParams
        {
            get { return Entity.GetAttributeValue<string>(Fields.ActivityAdditionalParams); }
            set { Entity.Attributes[Fields.ActivityAdditionalParams] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the email activity.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Email Message</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? ActivityId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
            set { Entity.Attributes[Fields.ActivityId] = value; }
        }

        /// <summary>
        /// <para>Shows the type of activity.</para>
        /// <para>ReadOnly - EntityName</para>
        /// <para>Activity Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ActivityTypeCode
        {
            get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
        }

        /// <summary>
        /// <para>Type the number of minutes spent creating and sending the email. The duration is used in reporting.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Duration</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ActualDurationMinutes
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ActualDurationMinutes); }
            set { Entity.Attributes[Fields.ActualDurationMinutes] = value; }
        }

        /// <summary>
        /// <para>Enter the actual end date and time of the email. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual time to create and send the email.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Actual End</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ActualEndUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
            set { Entity.Attributes[Fields.ActualEnd] = value; }
        }

        /// <summary>
        /// <para>Enter the actual start date and time for the email. By default, it displays the date and time when the activity was created, but can be edited to capture the actual time to create and send the email.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Actual Start</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ActualStartUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
            set { Entity.Attributes[Fields.ActualStart] = value; }
        }

        /// <summary>
        /// <para>Shows the umber of attachments of the email message.</para>
        /// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Attachment Count</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? AttachmentCount
        {
            get { return Entity.GetAttributeValue<int?>(Fields.AttachmentCount); }
        }

        /// <summary>
        /// <para>Shows the number of times an email attachment has been viewed.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Attachment Open Count</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? AttachmentOpenCount
        {
            get { return Entity.GetAttributeValue<int?>(Fields.AttachmentOpenCount); }
            set { Entity.Attributes[Fields.AttachmentOpenCount] = value; }
        }

        /// <summary>
        /// <para>Hash of base of conversation index.</para>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Conversation Index (Hash)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? BaseConversationIndexHash
        {
            get { return Entity.GetAttributeValue<int?>(Fields.BaseConversationIndexHash); }
            set { Entity.Attributes[Fields.BaseConversationIndexHash] = value; }
        }

        /// <summary>
        /// <para>Enter the recipients that are included on the email distribution, but are not displayed to other recipients.</para>
        /// <para>PartyList</para>
        /// <para>Bcc</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public System.Collections.Generic.List<ActivityParty> bcc
        {
            get
            {
                var data = new System.Collections.Generic.List<ActivityParty>();
                foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.bcc).Entities)
                    data.Add(new ActivityParty(item));
                return data;
            }
            set
            {
                var data = new EntityCollection();
                foreach (var item in value)
                    data.Entities.Add(item.Entity);
                Entity.Attributes[Fields.bcc] = data;
            }
        }

        /// <summary>
        /// <para>Type a category to identify the email type, such as lead outreach, customer follow-up, or service alert, to tie the email to a business group or function.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Category</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Category
        {
            get { return Entity.GetAttributeValue<string>(Fields.Category); }
            set { Entity.Attributes[Fields.Category] = value; }
        }

        /// <summary>
        /// <para>Enter the recipients that should be copied on the email.</para>
        /// <para>PartyList</para>
        /// <para>Cc</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public System.Collections.Generic.List<ActivityParty> cc
        {
            get
            {
                var data = new System.Collections.Generic.List<ActivityParty>();
                foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.cc).Entities)
                    data.Add(new ActivityParty(item));
                return data;
            }
            set
            {
                var data = new EntityCollection();
                foreach (var item in value)
                    data.Entities.Add(item.Entity);
                Entity.Attributes[Fields.cc] = data;
            }
        }

        /// <summary>
        /// <para>Indicates if the body is compressed.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Compression</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? Compressed
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.Compressed); }
        }

        /// <summary>
        /// <para>Identifier for all the email responses for this conversation.</para>
        /// <para>ReadOnly - String - MaxLength: 2048</para>
        /// <para>Conversation Index</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ConversationIndex
        {
            get { return Entity.GetAttributeValue<string>(Fields.ConversationIndex); }
        }

        /// <summary>
        /// <para>Conversation Tracking Id.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Conversation Tracking Id</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? ConversationTrackingId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.ConversationTrackingId); }
            set { Entity.Attributes[Fields.ConversationTrackingId] = value; }
        }

        /// <summary>
        /// <para>Correlated Activity Id</para>
        /// <para>Lookup to email</para>
        /// <para>Correlated Activity Id</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CorrelatedActivityId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CorrelatedActivityId); }
            set { Entity.Attributes[Fields.CorrelatedActivityId] = value; }
        }

        /// <summary>
        /// <para>Shows how an email is matched to an existing email in Microsoft Dynamics 365. For system use only.</para>
        /// <para>ReadOnly - Picklist</para>
        /// <para>Correlation Method</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod? CorrelationMethod
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CorrelationMethod);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod)value.Value;
            }
        }

        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
        }

        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? CreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
        }

        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Enter the expected date and time when email will be sent.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Send Later</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? DelayedEmailSendTimeUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.DelayedEmailSendTime); }
            set { Entity.Attributes[Fields.DelayedEmailSendTime] = value; }
        }

        /// <summary>
        /// <para>Shows the count of the number of attempts made to send the email. The count is used as an indicator of email routing issues.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
        /// <para>No. of Delivery Attempts</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? DeliveryAttempts
        {
            get { return Entity.GetAttributeValue<int?>(Fields.DeliveryAttempts); }
            set { Entity.Attributes[Fields.DeliveryAttempts] = value; }
        }

        /// <summary>
        /// <para>Select the priority of delivery of the email to the email server.</para>
        /// <para>Picklist</para>
        /// <para>Delivery Priority</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode? DeliveryPriorityCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeliveryPriorityCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.DeliveryPriorityCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.DeliveryPriorityCode] = null;
            }
        }

        /// <summary>
        /// <para>Select whether the sender should receive confirmation that the email was delivered.</para>
        /// <para>Boolean</para>
        /// <para>Delivery Receipt Requested</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DeliveryReceiptRequested
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DeliveryReceiptRequested); }
            set { Entity.Attributes[Fields.DeliveryReceiptRequested] = value; }
        }

        /// <summary>
        /// <para>Type the greeting and message text of the email.</para>
        /// <para>Memo - MaxLength: 1073741823</para>
        /// <para>Description</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Description
        {
            get { return Entity.GetAttributeValue<string>(Fields.Description); }
            set { Entity.Attributes[Fields.Description] = value; }
        }

        /// <summary>
        /// <para>Select the direction of the email as incoming or outbound.</para>
        /// <para>Boolean</para>
        /// <para>Direction</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DirectionCode
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DirectionCode); }
            set { Entity.Attributes[Fields.DirectionCode] = value; }
        }

        /// <summary>
        /// <para>Shows the date and time when an email reminder expires.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Email Reminder Expiry Time</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? EmailReminderExpiryTimeUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.EmailReminderExpiryTime); }
            set { Entity.Attributes[Fields.EmailReminderExpiryTime] = value; }
        }

        /// <summary>
        /// <para>Shows the status of the email reminder.</para>
        /// <para>ReadOnly - Picklist</para>
        /// <para>Email Reminder Status</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus? EmailReminderStatus
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailReminderStatus);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus)value.Value;
            }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>String - MaxLength: 1250</para>
        /// <para>Email Reminder Text</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EmailReminderText
        {
            get { return Entity.GetAttributeValue<string>(Fields.EmailReminderText); }
            set { Entity.Attributes[Fields.EmailReminderText] = value; }
        }

        /// <summary>
        /// <para>Shows the type of the email reminder.</para>
        /// <para>Picklist</para>
        /// <para>Email Reminder Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType? EmailReminderType
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailReminderType);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.EmailReminderType] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.EmailReminderType] = null;
            }
        }

        /// <summary>
        /// <para>Shows the sender of the email.</para>
        /// <para>ReadOnly - Lookup to account;contact;queue;systemuser</para>
        /// <para>Sender</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference EmailSender
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.EmailSender); }
        }

        /// <summary>
        /// <para>Email Tracking Id.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Email Tracking Id</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? EmailTrackingId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.EmailTrackingId); }
            set { Entity.Attributes[Fields.EmailTrackingId] = value; }
        }

        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
        /// <para>Exchange Rate</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? ExchangeRate
        {
            get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
        }

        /// <summary>
        /// <para>Select whether the email allows following recipient activities sent from Microsoft Dynamics 365.This is user preference state which can be overridden by system evaluated state.</para>
        /// <para>Boolean</para>
        /// <para>Following</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? FollowEmailUserPreference
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmailUserPreference); }
            set { Entity.Attributes[Fields.FollowEmailUserPreference] = value; }
        }

        /// <summary>
        /// <para>Enter the sender of the email.</para>
        /// <para>PartyList</para>
        /// <para>From</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public System.Collections.Generic.List<ActivityParty> from
        {
            get
            {
                var data = new System.Collections.Generic.List<ActivityParty>();
                foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.from).Entities)
                    data.Add(new ActivityParty(item));
                return data;
            }
            set
            {
                var data = new EntityCollection();
                foreach (var item in value)
                    data.Entities.Add(item.Entity);
                Entity.Attributes[Fields.from] = data;
            }
        }

        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Import Sequence Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ImportSequenceNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
            set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
        }

        /// <summary>
        /// <para>Type the ID of the email message that this email activity is a response to.</para>
        /// <para>ReadOnly - String - MaxLength: 320</para>
        /// <para>In Reply To Message</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string InReplyTo
        {
            get { return Entity.GetAttributeValue<string>(Fields.InReplyTo); }
        }

        /// <summary>
        /// <para>Information regarding whether the email activity was billed as part of resolving a case.</para>
        /// <para>Boolean</para>
        /// <para>Is Billed</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsBilled
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
            set { Entity.Attributes[Fields.IsBilled] = value; }
        }

        /// <summary>
        /// <para>For internal use only. Shows whether this email is followed. This is evaluated state which overrides user selection of follow email.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Followed</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsEmailFollowed
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailFollowed); }
        }

        /// <summary>
        /// <para>For internal use only. Shows whether this email Reminder is Set.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Reminder Set</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsEmailReminderSet
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailReminderSet); }
        }

        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Is Regular Activity</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsRegularActivity
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>IsUnsafe</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? IsUnsafe
        {
            get { return Entity.GetAttributeValue<int?>(Fields.IsUnsafe); }
        }

        /// <summary>
        /// <para>Indication if the email was created by a workflow rule.</para>
        /// <para>Boolean</para>
        /// <para>Is Workflow Created</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsWorkflowCreated
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
            set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
        }

        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Last On Hold Time</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? LastOnHoldTimeUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
            set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
        }

        /// <summary>
        /// <para>Shows the latest date and time when email was opened.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Last Opened Time</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? LastOpenedTimeUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOpenedTime); }
            set { Entity.Attributes[Fields.LastOpenedTime] = value; }
        }

        /// <summary>
        /// <para>Shows the number of times a link in an email has been clicked.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Links Clicked Count</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? LinksClickedCount
        {
            get { return Entity.GetAttributeValue<int?>(Fields.LinksClickedCount); }
            set { Entity.Attributes[Fields.LinksClickedCount] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the email message. Used only for email that is received.</para>
        /// <para>String - MaxLength: 320</para>
        /// <para>Message ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string MessageId
        {
            get { return Entity.GetAttributeValue<string>(Fields.MessageId); }
            set { Entity.Attributes[Fields.MessageId] = value; }
        }

        /// <summary>
        /// <para>MIME type of the email message data.</para>
        /// <para>String - MaxLength: 256</para>
        /// <para>Mime Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string MimeType
        {
            get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
            set { Entity.Attributes[Fields.MimeType] = value; }
        }

        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
        }

        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Modified On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ModifiedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
        }

        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Select the notification code to identify issues with the email recipients or attachments, such as blocked attachments.</para>
        /// <para>Picklist</para>
        /// <para>Notifications</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications? Notifications
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Notifications);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Notifications] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Notifications] = null;
            }
        }

        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>On Hold Time (Minutes)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? OnHoldTime
        {
            get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
        }

        /// <summary>
        /// <para>Shows the number of times an email has been opened.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Open Count</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? OpenCount
        {
            get { return Entity.GetAttributeValue<int?>(Fields.OpenCount); }
            set { Entity.Attributes[Fields.OpenCount] = value; }
        }

        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Record Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? OverriddenCreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
            set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
        }

        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Owner</para>
        /// <para>Owner</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwnerId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
            set { Entity.Attributes[Fields.OwnerId] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the business unit that owns the email activity.</para>
        /// <para>ReadOnly - Lookup to businessunit</para>
        /// <para>Owning Business Unit</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningBusinessUnit
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
        }

        /// <summary>
        /// <para>Unique identifier of the team who owns the email activity.</para>
        /// <para>ReadOnly - Lookup to team</para>
        /// <para>Owning Team</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningTeam
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
        }

        /// <summary>
        /// <para>Unique identifier of the user who owns the email activity.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Owning User</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningUser
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
        }

        /// <summary>
        /// <para>Select the activity that the email is associated with.</para>
        /// <para>Lookup to email</para>
        /// <para>Parent Activity Id</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ParentActivityId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentActivityId); }
            set { Entity.Attributes[Fields.ParentActivityId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Delay email processing until</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? PostponeEmailProcessingUntilUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeEmailProcessingUntil); }
        }

        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Picklist</para>
        /// <para>Priority</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode? PriorityCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PriorityCode] = null;
            }
        }

        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Process</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? ProcessId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
            set { Entity.Attributes[Fields.ProcessId] = value; }
        }

        /// <summary>
        /// <para>Indicates that a read receipt is requested.</para>
        /// <para>Boolean</para>
        /// <para>Read Receipt Requested</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? ReadReceiptRequested
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.ReadReceiptRequested); }
            set { Entity.Attributes[Fields.ReadReceiptRequested] = value; }
        }

        /// <summary>
        /// <para>The Mailbox that Received the Email.</para>
        /// <para>Lookup to mailbox</para>
        /// <para>Receiving Mailbox</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ReceivingMailboxId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ReceivingMailboxId); }
            set { Entity.Attributes[Fields.ReceivingMailboxId] = value; }
        }

        /// <summary>
        /// <para>Choose the record that the email relates to.</para>
        /// <para>Lookup to account;asyncoperation;contact;knowledgearticle;knowledgebaserecord</para>
        /// <para>Regarding</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference RegardingObjectId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
            set { Entity.Attributes[Fields.RegardingObjectId] = value; }
        }

        /// <summary>
        /// <para>Reminder Action Card Id.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Reminder Action Card Id.</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? ReminderActionCardId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.ReminderActionCardId); }
            set { Entity.Attributes[Fields.ReminderActionCardId] = value; }
        }

        /// <summary>
        /// <para>Shows the number of replies received for an email.</para>
        /// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Reply Count</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ReplyCount
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ReplyCount); }
        }

        /// <summary>
        /// <para>For internal use only</para>
        /// <para>Memo - MaxLength: 40000</para>
        /// <para>Reserved for internal use</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ReservedForInternalUse
        {
            get { return Entity.GetAttributeValue<string>(Fields.ReservedForInternalUse); }
            set { Entity.Attributes[Fields.ReservedForInternalUse] = value; }
        }

        /// <summary>
        /// <para>Scheduled duration of the email activity, specified in minutes.</para>
        /// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Scheduled Duration</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ScheduledDurationMinutes
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ScheduledDurationMinutes); }
        }

        /// <summary>
        /// <para>Enter the expected due date and time for the activity to be completed to provide details about when the email will be sent.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Due Date</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ScheduledEndUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
            set { Entity.Attributes[Fields.ScheduledEnd] = value; }
        }

        /// <summary>
        /// <para>Enter the expected start date and time for the activity to provide details about the tentative time when the email activity must be initiated.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Start Date</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ScheduledStartUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
            set { Entity.Attributes[Fields.ScheduledStart] = value; }
        }

        /// <summary>
        /// <para>Sender of the email.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>From</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Sender
        {
            get { return Entity.GetAttributeValue<string>(Fields.Sender); }
            set { Entity.Attributes[Fields.Sender] = value; }
        }

        /// <summary>
        /// <para>Select the mailbox associated with the sender of the email message.</para>
        /// <para>ReadOnly - Lookup to mailbox</para>
        /// <para>Sender's Mailbox</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SenderMailboxId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SenderMailboxId); }
        }

        /// <summary>
        /// <para>Shows the parent account of the sender of the email.</para>
        /// <para>ReadOnly - Lookup to account</para>
        /// <para>Senders Account</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SendersAccount
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SendersAccount); }
        }

        /// <summary>
        /// <para>Shows the date and time that the email was sent.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Date Sent</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? SentOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.SentOn); }
        }

        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the email record.</para>
        /// <para>Lookup to sla</para>
        /// <para>SLA</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SLAId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
            set { Entity.Attributes[Fields.SLAId] = value; }
        }

        /// <summary>
        /// <para>Last SLA that was applied to this email. This field is for internal use only.</para>
        /// <para>ReadOnly - Lookup to sla</para>
        /// <para>Last SLA applied</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SLAInvokedId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
        }

        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Sort Date</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? SortDateUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
            set { Entity.Attributes[Fields.SortDate] = value; }
        }

        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>(Deprecated) Process Stage</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? StageId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
            set { Entity.Attributes[Fields.StageId] = value; }
        }

        /// <summary>
        /// <para>Shows whether the email is open, completed, or canceled. Completed and canceled email is read-only and can't be edited.</para>
        /// <para>State</para>
        /// <para>Activity Status</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode? StateCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.StateCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the email's status.</para>
        /// <para>Status</para>
        /// <para>Status Reason</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.EmailOptionSets.StatusCode? StatusCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.EmailOptionSets.StatusCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.StatusCode] = null;
            }
        }

        /// <summary>
        /// <para>Type a subcategory to identify the email type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Sub-Category</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Subcategory
        {
            get { return Entity.GetAttributeValue<string>(Fields.Subcategory); }
            set { Entity.Attributes[Fields.Subcategory] = value; }
        }

        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the email.</para>
        /// <para>String - MaxLength: 800</para>
        /// <para>Subject</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Subject
        {
            get { return Entity.GetAttributeValue<string>(Fields.Subject); }
            set { Entity.Attributes[Fields.Subject] = value; }
        }

        /// <summary>
        /// <para>Shows the Microsoft Office Outlook account for the user who submitted the email to Microsoft Dynamics 365.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Submitted By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string SubmittedBy
        {
            get { return Entity.GetAttributeValue<string>(Fields.SubmittedBy); }
            set { Entity.Attributes[Fields.SubmittedBy] = value; }
        }

        /// <summary>
        /// <para>For internal use only. ID for template used in email.</para>
        /// <para>Lookup to template</para>
        /// <para>ID for template used.</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference TemplateId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.TemplateId); }
            set { Entity.Attributes[Fields.TemplateId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>Time Zone Rule Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? TimeZoneRuleVersionNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
            set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
        }

        /// <summary>
        /// <para>Enter the account, contact, lead, queue, or user recipients for the email.</para>
        /// <para>PartyList</para>
        /// <para>To</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public System.Collections.Generic.List<ActivityParty> to
        {
            get
            {
                var data = new System.Collections.Generic.List<ActivityParty>();
                foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.to).Entities)
                    data.Add(new ActivityParty(item));
                return data;
            }
            set
            {
                var data = new EntityCollection();
                foreach (var item in value)
                    data.Entities.Add(item.Entity);
                Entity.Attributes[Fields.to] = data;
            }
        }

        /// <summary>
        /// <para>Shows the email addresses corresponding to the recipients.</para>
        /// <para>String - MaxLength: 500</para>
        /// <para>To Recipients</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ToRecipients
        {
            get { return Entity.GetAttributeValue<string>(Fields.ToRecipients); }
            set { Entity.Attributes[Fields.ToRecipients] = value; }
        }

        /// <summary>
        /// <para>Shows the tracking token assigned to the email to make sure responses are automatically tracked in Microsoft Dynamics 365.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Tracking Token</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string TrackingToken
        {
            get { return Entity.GetAttributeValue<string>(Fields.TrackingToken); }
            set { Entity.Attributes[Fields.TrackingToken] = value; }
        }

        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Lookup to transactioncurrency</para>
        /// <para>Currency</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference TransactionCurrencyId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
            set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>String - MaxLength: 1250</para>
        /// <para>(Deprecated) Traversed Path</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string TraversedPath
        {
            get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
            set { Entity.Attributes[Fields.TraversedPath] = value; }
        }

        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>UTC Conversion Time Zone Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? UTCConversionTimeZoneCode
        {
            get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
            set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
        }

        /// <summary>
        /// <para>Version number of the email message.</para>
        /// <para>ReadOnly - BigInt</para>
        /// <para>Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public long? VersionNumber
        {
            get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
        }
    }
}

