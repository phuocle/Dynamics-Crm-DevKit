//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.AccountOptionSets
{
    public enum AccountCategoryCode
    {
        /// <summary>
        /// Preferred_Customer = 1
        /// </summary>
        Preferred_Customer = 1,
        /// <summary>
        /// Standard = 2
        /// </summary>
        Standard = 2
    }

    public enum AccountClassificationCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum AccountRatingCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum Address1_AddressTypeCode
    {
        /// <summary>
        /// Bill_To = 1
        /// </summary>
        Bill_To = 1,
        /// <summary>
        /// Other = 4
        /// </summary>
        Other = 4,
        /// <summary>
        /// Primary = 3
        /// </summary>
        Primary = 3,
        /// <summary>
        /// Ship_To = 2
        /// </summary>
        Ship_To = 2
    }

    public enum Address1_FreightTermsCode
    {
        /// <summary>
        /// FOB = 1
        /// </summary>
        FOB = 1,
        /// <summary>
        /// No_Charge = 2
        /// </summary>
        No_Charge = 2
    }

    public enum Address1_ShippingMethodCode
    {
        /// <summary>
        /// Airborne = 1
        /// </summary>
        Airborne = 1,
        /// <summary>
        /// DHL = 2
        /// </summary>
        DHL = 2,
        /// <summary>
        /// FedEx = 3
        /// </summary>
        FedEx = 3,
        /// <summary>
        /// Full_Load = 6
        /// </summary>
        Full_Load = 6,
        /// <summary>
        /// Postal_Mail = 5
        /// </summary>
        Postal_Mail = 5,
        /// <summary>
        /// UPS = 4
        /// </summary>
        UPS = 4,
        /// <summary>
        /// Will_Call = 7
        /// </summary>
        Will_Call = 7
    }

    public enum Address2_AddressTypeCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum Address2_FreightTermsCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum Address2_ShippingMethodCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum BusinessTypeCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum CustomerSizeCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum CustomerTypeCode
    {
        /// <summary>
        /// Competitor = 1
        /// </summary>
        Competitor = 1,
        /// <summary>
        /// Consultant = 2
        /// </summary>
        Consultant = 2,
        /// <summary>
        /// Customer = 3
        /// </summary>
        Customer = 3,
        /// <summary>
        /// Influencer = 6
        /// </summary>
        Influencer = 6,
        /// <summary>
        /// Investor = 4
        /// </summary>
        Investor = 4,
        /// <summary>
        /// Other = 12
        /// </summary>
        Other = 12,
        /// <summary>
        /// Partner = 5
        /// </summary>
        Partner = 5,
        /// <summary>
        /// Press = 7
        /// </summary>
        Press = 7,
        /// <summary>
        /// Prospect = 8
        /// </summary>
        Prospect = 8,
        /// <summary>
        /// Reseller = 9
        /// </summary>
        Reseller = 9,
        /// <summary>
        /// Supplier = 10
        /// </summary>
        Supplier = 10,
        /// <summary>
        /// Vendor = 11
        /// </summary>
        Vendor = 11
    }

    public enum devkit_CategoryCode
    {
        /// <summary>
        /// Business = 1
        /// </summary>
        Business = 1,
        /// <summary>
        /// Family = 2
        /// </summary>
        Family = 2,
        /// <summary>
        /// Other = 5
        /// </summary>
        Other = 5,
        /// <summary>
        /// Sales = 4
        /// </summary>
        Sales = 4,
        /// <summary>
        /// Sales_Team = 1001
        /// </summary>
        Sales_Team = 1001,
        /// <summary>
        /// Service = 1002
        /// </summary>
        Service = 1002,
        /// <summary>
        /// Social = 3
        /// </summary>
        Social = 3,
        /// <summary>
        /// Stakeholder = 1000
        /// </summary>
        Stakeholder = 1000
    }

    public enum IndustryCode
    {
        /// <summary>
        /// Accounting = 1
        /// </summary>
        Accounting = 1,
        /// <summary>
        /// Agriculture_and_Non_petrol_Natural_Resource_Extraction = 2
        /// </summary>
        Agriculture_and_Non_petrol_Natural_Resource_Extraction = 2,
        /// <summary>
        /// Broadcasting_Printing_and_Publishing = 3
        /// </summary>
        Broadcasting_Printing_and_Publishing = 3,
        /// <summary>
        /// Brokers = 4
        /// </summary>
        Brokers = 4,
        /// <summary>
        /// Building_Supply_Retail = 5
        /// </summary>
        Building_Supply_Retail = 5,
        /// <summary>
        /// Business_Services = 6
        /// </summary>
        Business_Services = 6,
        /// <summary>
        /// Consulting = 7
        /// </summary>
        Consulting = 7,
        /// <summary>
        /// Consumer_Services = 8
        /// </summary>
        Consumer_Services = 8,
        /// <summary>
        /// Design_Direction_and_Creative_Management = 9
        /// </summary>
        Design_Direction_and_Creative_Management = 9,
        /// <summary>
        /// Distributors_Dispatchers_and_Processors = 10
        /// </summary>
        Distributors_Dispatchers_and_Processors = 10,
        /// <summary>
        /// Doctors_Offices_and_Clinics = 11
        /// </summary>
        Doctors_Offices_and_Clinics = 11,
        /// <summary>
        /// Durable_Manufacturing = 12
        /// </summary>
        Durable_Manufacturing = 12,
        /// <summary>
        /// Eating_and_Drinking_Places = 13
        /// </summary>
        Eating_and_Drinking_Places = 13,
        /// <summary>
        /// Entertainment_Retail = 14
        /// </summary>
        Entertainment_Retail = 14,
        /// <summary>
        /// Equipment_Rental_and_Leasing = 15
        /// </summary>
        Equipment_Rental_and_Leasing = 15,
        /// <summary>
        /// Financial = 16
        /// </summary>
        Financial = 16,
        /// <summary>
        /// Food_and_Tobacco_Processing = 17
        /// </summary>
        Food_and_Tobacco_Processing = 17,
        /// <summary>
        /// Inbound_Capital_Intensive_Processing = 18
        /// </summary>
        Inbound_Capital_Intensive_Processing = 18,
        /// <summary>
        /// Inbound_Repair_and_Services = 19
        /// </summary>
        Inbound_Repair_and_Services = 19,
        /// <summary>
        /// Insurance = 20
        /// </summary>
        Insurance = 20,
        /// <summary>
        /// Legal_Services = 21
        /// </summary>
        Legal_Services = 21,
        /// <summary>
        /// Non_Durable_Merchandise_Retail = 22
        /// </summary>
        Non_Durable_Merchandise_Retail = 22,
        /// <summary>
        /// Outbound_Consumer_Service = 23
        /// </summary>
        Outbound_Consumer_Service = 23,
        /// <summary>
        /// Petrochemical_Extraction_and_Distribution = 24
        /// </summary>
        Petrochemical_Extraction_and_Distribution = 24,
        /// <summary>
        /// Service_Retail = 25
        /// </summary>
        Service_Retail = 25,
        /// <summary>
        /// SIG_Affiliations = 26
        /// </summary>
        SIG_Affiliations = 26,
        /// <summary>
        /// Social_Services = 27
        /// </summary>
        Social_Services = 27,
        /// <summary>
        /// Special_Outbound_Trade_Contractors = 28
        /// </summary>
        Special_Outbound_Trade_Contractors = 28,
        /// <summary>
        /// Specialty_Realty = 29
        /// </summary>
        Specialty_Realty = 29,
        /// <summary>
        /// Transportation = 30
        /// </summary>
        Transportation = 30,
        /// <summary>
        /// Utility_Creation_and_Distribution = 31
        /// </summary>
        Utility_Creation_and_Distribution = 31,
        /// <summary>
        /// Vehicle_Retail = 32
        /// </summary>
        Vehicle_Retail = 32,
        /// <summary>
        /// Wholesale = 33
        /// </summary>
        Wholesale = 33
    }

    public enum OwnershipCode
    {
        /// <summary>
        /// Other = 4
        /// </summary>
        Other = 4,
        /// <summary>
        /// Private = 2
        /// </summary>
        Private = 2,
        /// <summary>
        /// Public = 1
        /// </summary>
        Public = 1,
        /// <summary>
        /// Subsidiary = 3
        /// </summary>
        Subsidiary = 3
    }

    public enum PaymentTermsCode
    {
        /// <summary>
        /// _2_10_Net_30 = 2
        /// </summary>
        _2_10_Net_30 = 2,
        /// <summary>
        /// Net_30 = 1
        /// </summary>
        Net_30 = 1,
        /// <summary>
        /// Net_45 = 3
        /// </summary>
        Net_45 = 3,
        /// <summary>
        /// Net_60 = 4
        /// </summary>
        Net_60 = 4
    }

    public enum PreferredAppointmentDayCode
    {
        /// <summary>
        /// Friday = 5
        /// </summary>
        Friday = 5,
        /// <summary>
        /// Monday = 1
        /// </summary>
        Monday = 1,
        /// <summary>
        /// Saturday = 6
        /// </summary>
        Saturday = 6,
        /// <summary>
        /// Sunday = 0
        /// </summary>
        Sunday = 0,
        /// <summary>
        /// Thursday = 4
        /// </summary>
        Thursday = 4,
        /// <summary>
        /// Tuesday = 2
        /// </summary>
        Tuesday = 2,
        /// <summary>
        /// Wednesday = 3
        /// </summary>
        Wednesday = 3
    }

    public enum PreferredAppointmentTimeCode
    {
        /// <summary>
        /// Afternoon = 2
        /// </summary>
        Afternoon = 2,
        /// <summary>
        /// Evening = 3
        /// </summary>
        Evening = 3,
        /// <summary>
        /// Morning = 1
        /// </summary>
        Morning = 1
    }

    public enum PreferredContactMethodCode
    {
        /// <summary>
        /// Any = 1
        /// </summary>
        Any = 1,
        /// <summary>
        /// Email = 2
        /// </summary>
        Email = 2,
        /// <summary>
        /// Fax = 4
        /// </summary>
        Fax = 4,
        /// <summary>
        /// Mail = 5
        /// </summary>
        Mail = 5,
        /// <summary>
        /// Phone = 3
        /// </summary>
        Phone = 3
    }

    public enum ShippingMethodCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum StateCode
    {
        /// <summary>
        /// Active = 0
        /// </summary>
        Active = 0,
        /// <summary>
        /// Inactive = 1
        /// </summary>
        Inactive = 1
    }

    public enum StatusCode
    {
        /// <summary>
        /// Active = 1
        /// </summary>
        Active = 1,
        /// <summary>
        /// Inactive = 2
        /// </summary>
        Inactive = 2
    }

    public enum TerritoryCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }
}

namespace Dev.DevKit.Shared.Entities
{
    public partial class Account : EntityBase
    {
        public struct Fields
        {
            public const string AccountCategoryCode = "accountcategorycode";
            public const string AccountClassificationCode = "accountclassificationcode";
            public const string AccountId = "accountid";
            public const string AccountNumber = "accountnumber";
            public const string AccountRatingCode = "accountratingcode";
            public const string Address1_AddressId = "address1_addressid";
            public const string Address1_AddressTypeCode = "address1_addresstypecode";
            public const string Address1_City = "address1_city";
            public const string Address1_Composite = "address1_composite";
            public const string Address1_Country = "address1_country";
            public const string Address1_County = "address1_county";
            public const string Address1_Fax = "address1_fax";
            public const string Address1_FreightTermsCode = "address1_freighttermscode";
            public const string Address1_Latitude = "address1_latitude";
            public const string Address1_Line1 = "address1_line1";
            public const string Address1_Line2 = "address1_line2";
            public const string Address1_Line3 = "address1_line3";
            public const string Address1_Longitude = "address1_longitude";
            public const string Address1_Name = "address1_name";
            public const string Address1_PostalCode = "address1_postalcode";
            public const string Address1_PostOfficeBox = "address1_postofficebox";
            public const string Address1_PrimaryContactName = "address1_primarycontactname";
            public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
            public const string Address1_StateOrProvince = "address1_stateorprovince";
            public const string Address1_Telephone1 = "address1_telephone1";
            public const string Address1_Telephone2 = "address1_telephone2";
            public const string Address1_Telephone3 = "address1_telephone3";
            public const string Address1_UPSZone = "address1_upszone";
            public const string Address1_UTCOffset = "address1_utcoffset";
            public const string Address2_AddressId = "address2_addressid";
            public const string Address2_AddressTypeCode = "address2_addresstypecode";
            public const string Address2_City = "address2_city";
            public const string Address2_Composite = "address2_composite";
            public const string Address2_Country = "address2_country";
            public const string Address2_County = "address2_county";
            public const string Address2_Fax = "address2_fax";
            public const string Address2_FreightTermsCode = "address2_freighttermscode";
            public const string Address2_Latitude = "address2_latitude";
            public const string Address2_Line1 = "address2_line1";
            public const string Address2_Line2 = "address2_line2";
            public const string Address2_Line3 = "address2_line3";
            public const string Address2_Longitude = "address2_longitude";
            public const string Address2_Name = "address2_name";
            public const string Address2_PostalCode = "address2_postalcode";
            public const string Address2_PostOfficeBox = "address2_postofficebox";
            public const string Address2_PrimaryContactName = "address2_primarycontactname";
            public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
            public const string Address2_StateOrProvince = "address2_stateorprovince";
            public const string Address2_Telephone1 = "address2_telephone1";
            public const string Address2_Telephone2 = "address2_telephone2";
            public const string Address2_Telephone3 = "address2_telephone3";
            public const string Address2_UPSZone = "address2_upszone";
            public const string Address2_UTCOffset = "address2_utcoffset";
            public const string Aging30 = "aging30";
            public const string Aging30_Base = "aging30_base";
            public const string Aging60 = "aging60";
            public const string Aging60_Base = "aging60_base";
            public const string Aging90 = "aging90";
            public const string Aging90_Base = "aging90_base";
            public const string BusinessTypeCode = "businesstypecode";
            public const string CreatedBy = "createdby";
            public const string CreatedByExternalParty = "createdbyexternalparty";
            public const string CreatedOn = "createdon";
            public const string CreatedOnBehalfBy = "createdonbehalfby";
            public const string CreditLimit = "creditlimit";
            public const string CreditLimit_Base = "creditlimit_base";
            public const string CreditOnHold = "creditonhold";
            public const string CustomerSizeCode = "customersizecode";
            public const string CustomerTypeCode = "customertypecode";
            public const string Description = "description";
            public const string devkit_CategoryCode = "devkit_categorycode";
            public const string DoNotBulkEMail = "donotbulkemail";
            public const string DoNotBulkPostalMail = "donotbulkpostalmail";
            public const string DoNotEMail = "donotemail";
            public const string DoNotFax = "donotfax";
            public const string DoNotPhone = "donotphone";
            public const string DoNotPostalMail = "donotpostalmail";
            public const string DoNotSendMM = "donotsendmm";
            public const string EMailAddress1 = "emailaddress1";
            public const string EMailAddress2 = "emailaddress2";
            public const string EMailAddress3 = "emailaddress3";
            public const string EntityImageId = "entityimageid";
            public const string ExchangeRate = "exchangerate";
            public const string Fax = "fax";
            public const string FollowEmail = "followemail";
            public const string FtpSiteURL = "ftpsiteurl";
            public const string ImportSequenceNumber = "importsequencenumber";
            public const string IndustryCode = "industrycode";
            public const string IsPrivate = "isprivate";
            public const string LastOnHoldTime = "lastonholdtime";
            public const string LastUsedInCampaign = "lastusedincampaign";
            public const string MarketCap = "marketcap";
            public const string MarketCap_Base = "marketcap_base";
            public const string MarketingOnly = "marketingonly";
            public const string MasterId = "masterid";
            public const string Merged = "merged";
            public const string ModifiedBy = "modifiedby";
            public const string ModifiedByExternalParty = "modifiedbyexternalparty";
            public const string ModifiedOn = "modifiedon";
            public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
            public const string Name = "name";
            public const string NumberOfEmployees = "numberofemployees";
            public const string OnHoldTime = "onholdtime";
            public const string OverriddenCreatedOn = "overriddencreatedon";
            public const string OwnerId = "ownerid";
            public const string OwnershipCode = "ownershipcode";
            public const string OwningBusinessUnit = "owningbusinessunit";
            public const string OwningTeam = "owningteam";
            public const string OwningUser = "owninguser";
            public const string ParentAccountId = "parentaccountid";
            public const string ParticipatesInWorkflow = "participatesinworkflow";
            public const string PaymentTermsCode = "paymenttermscode";
            public const string PreferredAppointmentDayCode = "preferredappointmentdaycode";
            public const string PreferredAppointmentTimeCode = "preferredappointmenttimecode";
            public const string PreferredContactMethodCode = "preferredcontactmethodcode";
            public const string PreferredSystemUserId = "preferredsystemuserid";
            public const string PrimaryContactId = "primarycontactid";
            public const string PrimarySatoriId = "primarysatoriid";
            public const string PrimaryTwitterId = "primarytwitterid";
            public const string ProcessId = "processid";
            public const string Revenue = "revenue";
            public const string Revenue_Base = "revenue_base";
            public const string SharesOutstanding = "sharesoutstanding";
            public const string ShippingMethodCode = "shippingmethodcode";
            public const string SIC = "sic";
            public const string SLAId = "slaid";
            public const string SLAInvokedId = "slainvokedid";
            public const string StageId = "stageid";
            public const string StateCode = "statecode";
            public const string StatusCode = "statuscode";
            public const string StockExchange = "stockexchange";
            public const string Telephone1 = "telephone1";
            public const string Telephone2 = "telephone2";
            public const string Telephone3 = "telephone3";
            public const string TerritoryCode = "territorycode";
            public const string TickerSymbol = "tickersymbol";
            public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
            public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
            public const string TransactionCurrencyId = "transactioncurrencyid";
            public const string TraversedPath = "traversedpath";
            public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
            public const string VersionNumber = "versionnumber";
            public const string WebSiteURL = "websiteurl";
            public const string YomiName = "yominame";
        }

        public const string EntityLogicalName = "account";

        public const int EntityTypeCode = 1;

        [DebuggerNonUserCode()]
        public Account()
        {
            Entity = new Entity(EntityLogicalName);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Account(Guid AccountId)
        {
            Entity = new Entity(EntityLogicalName, AccountId);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Account(string keyName, object keyValue)
        {
            Entity = new Entity(EntityLogicalName, keyName, keyValue);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Account(Entity entity)
        {
            Entity = entity;
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Account(Entity entity, Entity merge)
        {
            Entity = entity;
            foreach (var property in merge?.Attributes)
            {
                var key = property.Key;
                var value = property.Value;
                Entity[key] = value;
            }
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Account(KeyAttributeCollection keys)
        {
            Entity = new Entity(EntityLogicalName, keys);
            PreEntity = CloneThisEntity(Entity);
        }

        /// <summary>
        /// <para>Select a category to indicate whether the customer account is standard or preferred.</para>
        /// <para>Picklist</para>
        /// <para>Category</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountCategoryCode? AccountCategoryCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountCategoryCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountCategoryCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.AccountCategoryCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.AccountCategoryCode] = null;
            }
        }

        /// <summary>
        /// <para>Select a classification code to indicate the potential value of the customer account based on the projected return on investment, cooperation level, sales cycle length or other criteria.</para>
        /// <para>Picklist</para>
        /// <para>Classification</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode? AccountClassificationCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountClassificationCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.AccountClassificationCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.AccountClassificationCode] = null;
            }
        }

        /// <summary>
        /// <para>Unique identifier of the account.</para>
        /// <para>Primary Key - Uniqueidentifier</para>
        /// <para>Account</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid AccountId
        {
            get { return Id; }
            set
            {
                Entity.Attributes[Fields.AccountId] = value;
                Entity.Id = value;
            }
        }

        /// <summary>
        /// <para>Type an ID number or code for the account to quickly search and identify the account in system views.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Account Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string AccountNumber
        {
            get { return Entity.GetAttributeValue<string>(Fields.AccountNumber); }
            set { Entity.Attributes[Fields.AccountNumber] = value; }
        }

        /// <summary>
        /// <para>Select a rating to indicate the value of the customer account.</para>
        /// <para>Picklist</para>
        /// <para>Account Rating</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode? AccountRatingCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountRatingCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.AccountRatingCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.AccountRatingCode] = null;
            }
        }

        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Address 1: ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? Address1_AddressId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
            set { Entity.Attributes[Fields.Address1_AddressId] = value; }
        }

        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Picklist</para>
        /// <para>Address 1: Address Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_AddressTypeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 1: City</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_City
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
            set { Entity.Attributes[Fields.Address1_City] = value; }
        }

        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>ReadOnly - Memo - MaxLength: 1000</para>
        /// <para>Address 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Composite
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
        }

        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 1: Country/Region</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Country
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
            set { Entity.Attributes[Fields.Address1_Country] = value; }
        }

        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: County</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_County
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
            set { Entity.Attributes[Fields.Address1_County] = value; }
        }

        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: Fax</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Fax
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
            set { Entity.Attributes[Fields.Address1_Fax] = value; }
        }

        /// <summary>
        /// <para>Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
        /// <para>Picklist</para>
        /// <para>Address 1: Freight Terms</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_FreightTermsCode? Address1_FreightTermsCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_FreightTermsCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_FreightTermsCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address1_FreightTermsCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address1_FreightTermsCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -90 - MaxValue: 90</para>
        /// <para>Address 1: Latitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address1_Latitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
            set { Entity.Attributes[Fields.Address1_Latitude] = value; }
        }

        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 1: Street 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Line1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
            set { Entity.Attributes[Fields.Address1_Line1] = value; }
        }

        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 1: Street 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Line2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
            set { Entity.Attributes[Fields.Address1_Line2] = value; }
        }

        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 1: Street 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Line3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
            set { Entity.Attributes[Fields.Address1_Line3] = value; }
        }

        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -180 - MaxValue: 180</para>
        /// <para>Address 1: Longitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address1_Longitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
            set { Entity.Attributes[Fields.Address1_Longitude] = value; }
        }

        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>Address 1: Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Name
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
            set { Entity.Attributes[Fields.Address1_Name] = value; }
        }

        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 1: ZIP/Postal Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_PostalCode
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
            set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
        }

        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 1: Post Office Box</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_PostOfficeBox
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
            set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
        }

        /// <summary>
        /// <para>Type the name of the main contact at the account's primary address.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Address 1: Primary Contact Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_PrimaryContactName
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_PrimaryContactName); }
            set { Entity.Attributes[Fields.Address1_PrimaryContactName] = value; }
        }

        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Picklist</para>
        /// <para>Address 1: Shipping Method</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_ShippingMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: State/Province</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_StateOrProvince
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
            set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
        }

        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Telephone1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
            set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
        }

        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: Telephone 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Telephone2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
            set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
        }

        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: Telephone 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Telephone3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
            set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
        }

        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>String - MaxLength: 4</para>
        /// <para>Address 1: UPS Zone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_UPSZone
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
            set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
        }

        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
        /// <para>Address 1: UTC Offset</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? Address1_UTCOffset
        {
            get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
            set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
        }

        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Address 2: ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? Address2_AddressId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
            set { Entity.Attributes[Fields.Address2_AddressId] = value; }
        }

        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Picklist</para>
        /// <para>Address 2: Address Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 2: City</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_City
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
            set { Entity.Attributes[Fields.Address2_City] = value; }
        }

        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>ReadOnly - Memo - MaxLength: 1000</para>
        /// <para>Address 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Composite
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
        }

        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 2: Country/Region</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Country
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
            set { Entity.Attributes[Fields.Address2_Country] = value; }
        }

        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: County</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_County
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
            set { Entity.Attributes[Fields.Address2_County] = value; }
        }

        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: Fax</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Fax
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
            set { Entity.Attributes[Fields.Address2_Fax] = value; }
        }

        /// <summary>
        /// <para>Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
        /// <para>Picklist</para>
        /// <para>Address 2: Freight Terms</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode? Address2_FreightTermsCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_FreightTermsCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address2_FreightTermsCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address2_FreightTermsCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -90 - MaxValue: 90</para>
        /// <para>Address 2: Latitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address2_Latitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
            set { Entity.Attributes[Fields.Address2_Latitude] = value; }
        }

        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 2: Street 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Line1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
            set { Entity.Attributes[Fields.Address2_Line1] = value; }
        }

        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 2: Street 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Line2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
            set { Entity.Attributes[Fields.Address2_Line2] = value; }
        }

        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 2: Street 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Line3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
            set { Entity.Attributes[Fields.Address2_Line3] = value; }
        }

        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -180 - MaxValue: 180</para>
        /// <para>Address 2: Longitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address2_Longitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
            set { Entity.Attributes[Fields.Address2_Longitude] = value; }
        }

        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>Address 2: Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Name
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
            set { Entity.Attributes[Fields.Address2_Name] = value; }
        }

        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 2: ZIP/Postal Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_PostalCode
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
            set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
        }

        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 2: Post Office Box</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_PostOfficeBox
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
            set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
        }

        /// <summary>
        /// <para>Type the name of the main contact at the account's secondary address.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Address 2: Primary Contact Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_PrimaryContactName
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_PrimaryContactName); }
            set { Entity.Attributes[Fields.Address2_PrimaryContactName] = value; }
        }

        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Picklist</para>
        /// <para>Address 2: Shipping Method</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: State/Province</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_StateOrProvince
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
            set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
        }

        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: Telephone 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Telephone1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
            set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
        }

        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: Telephone 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Telephone2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
            set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
        }

        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: Telephone 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Telephone3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
            set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
        }

        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>String - MaxLength: 4</para>
        /// <para>Address 2: UPS Zone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_UPSZone
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
            set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
        }

        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
        /// <para>Address 2: UTC Offset</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? Address2_UTCOffset
        {
            get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
            set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
        }

        /// <summary>
        /// <para>For system use only.</para>
        /// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Aging 30</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging30
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging30);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>The base currency equivalent of the aging 30 field.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Aging 30 (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging30_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging30_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>For system use only.</para>
        /// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Aging 60</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging60
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging60);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>The base currency equivalent of the aging 60 field.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Aging 60 (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging60_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging60_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>For system use only.</para>
        /// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Aging 90</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging90
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging90);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>The base currency equivalent of the aging 90 field.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Aging 90 (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging90_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging90_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Select the legal designation or other business type of the account for contracts or reporting purposes.</para>
        /// <para>Picklist</para>
        /// <para>Business Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode? BusinessTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BusinessTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.BusinessTypeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.BusinessTypeCode] = null;
            }
        }

        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
        }

        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>ReadOnly - Lookup to externalparty</para>
        /// <para>Created By (External Party)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedByExternalParty
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
        }

        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? CreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
        }

        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Type the credit limit of the account. This is a useful reference when you address invoice and accounting issues with the customer.</para>
        /// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Credit Limit</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? CreditLimit
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit);
                if (value == null) return null;
                return value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.CreditLimit] = new Money(value.Value);
                else
                    Entity.Attributes[Fields.CreditLimit] = null;
            }
        }

        /// <summary>
        /// <para>Shows the credit limit converted to the system's default base currency for reporting purposes.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Credit Limit (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? CreditLimit_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Select whether the credit for the account is on hold. This is a useful reference while addressing the invoice and accounting issues with the customer.</para>
        /// <para>Boolean</para>
        /// <para>Credit Hold</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? CreditOnHold
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.CreditOnHold); }
            set { Entity.Attributes[Fields.CreditOnHold] = value; }
        }

        /// <summary>
        /// <para>Select the size category or range of the account for segmentation and reporting purposes.</para>
        /// <para>Picklist</para>
        /// <para>Customer Size</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode? CustomerSizeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerSizeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.CustomerSizeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.CustomerSizeCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the category that best describes the relationship between the account and your organization.</para>
        /// <para>Picklist</para>
        /// <para>Relationship Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerTypeCode? CustomerTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerTypeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.CustomerTypeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.CustomerTypeCode] = null;
            }
        }

        /// <summary>
        /// <para>Type additional information to describe the account, such as an excerpt from the company's website.</para>
        /// <para>Memo - MaxLength: 2000</para>
        /// <para>Description</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Description
        {
            get { return Entity.GetAttributeValue<string>(Fields.Description); }
            set { Entity.Attributes[Fields.Description] = value; }
        }

        /// <summary>
        /// <para>MultiSelectPicklist</para>
        /// <para>Category</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.AccountOptionSets.devkit_CategoryCode> devkit_CategoryCode
        {
            get
            {
                var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.AccountOptionSets.devkit_CategoryCode>();
                var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.devkit_CategoryCode);
                if (items != null)
                {
                    foreach (OptionSetValue item in items)
                    {
                        data.Add((Dev.DevKit.Shared.Entities.AccountOptionSets.devkit_CategoryCode)item.Value);
                    }
                }
                return data;
            }
            set
            {
                var data = new OptionSetValueCollection();
                foreach (var item in value)
                {
                    data.Add(new OptionSetValue((int)item));
                }
                if (data.Count == 0)
                {
                    Entity.Attributes[Fields.devkit_CategoryCode] = null;
                }
                else
                {
                    Entity.Attributes[Fields.devkit_CategoryCode] = data;
                }
            }
        }

        /// <summary>
        /// <para>Select whether the account allows bulk email sent through campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but is excluded from email.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Bulk Emails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotBulkEMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkEMail); }
            set { Entity.Attributes[Fields.DoNotBulkEMail] = value; }
        }

        /// <summary>
        /// <para>Select whether the account allows bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but will be excluded from the postal mail.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Bulk Mails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotBulkPostalMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkPostalMail); }
            set { Entity.Attributes[Fields.DoNotBulkPostalMail] = value; }
        }

        /// <summary>
        /// <para>Select whether the account allows direct email sent from Microsoft Dynamics 365.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Emails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotEMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEMail); }
            set { Entity.Attributes[Fields.DoNotEMail] = value; }
        }

        /// <summary>
        /// <para>Select whether the account allows faxes. If Do Not Allow is selected, the account will be excluded from fax activities distributed in marketing campaigns.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Faxes</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotFax
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
            set { Entity.Attributes[Fields.DoNotFax] = value; }
        }

        /// <summary>
        /// <para>Select whether the account allows phone calls. If Do Not Allow is selected, the account will be excluded from phone call activities distributed in marketing campaigns.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Phone Calls</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotPhone
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
            set { Entity.Attributes[Fields.DoNotPhone] = value; }
        }

        /// <summary>
        /// <para>Select whether the account allows direct mail. If Do Not Allow is selected, the account will be excluded from letter activities distributed in marketing campaigns.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Mails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotPostalMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
            set { Entity.Attributes[Fields.DoNotPostalMail] = value; }
        }

        /// <summary>
        /// <para>Select whether the account accepts marketing materials, such as brochures or catalogs.</para>
        /// <para>Boolean</para>
        /// <para>Send Marketing Materials</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotSendMM
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendMM); }
            set { Entity.Attributes[Fields.DoNotSendMM] = value; }
        }

        /// <summary>
        /// <para>Type the primary email address for the account.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Email</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EMailAddress1
        {
            get { return Entity.GetAttributeValue<string>(Fields.EMailAddress1); }
            set { Entity.Attributes[Fields.EMailAddress1] = value; }
        }

        /// <summary>
        /// <para>Type the secondary email address for the account.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Email Address 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EMailAddress2
        {
            get { return Entity.GetAttributeValue<string>(Fields.EMailAddress2); }
            set { Entity.Attributes[Fields.EMailAddress2] = value; }
        }

        /// <summary>
        /// <para>Type an alternate email address for the account.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Email Address 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EMailAddress3
        {
            get { return Entity.GetAttributeValue<string>(Fields.EMailAddress3); }
            set { Entity.Attributes[Fields.EMailAddress3] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>ReadOnly - Uniqueidentifier</para>
        /// <para>Entity Image Id</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? EntityImageId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
        }

        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
        /// <para>Exchange Rate</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? ExchangeRate
        {
            get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
        }

        /// <summary>
        /// <para>Type the fax number for the account.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Fax</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Fax
        {
            get { return Entity.GetAttributeValue<string>(Fields.Fax); }
            set { Entity.Attributes[Fields.Fax] = value; }
        }

        /// <summary>
        /// <para>Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the account.</para>
        /// <para>Boolean</para>
        /// <para>Follow Email Activity</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? FollowEmail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmail); }
            set { Entity.Attributes[Fields.FollowEmail] = value; }
        }

        /// <summary>
        /// <para>Type the URL for the account's FTP site to enable users to access data and share documents.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>FTP Site</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string FtpSiteURL
        {
            get { return Entity.GetAttributeValue<string>(Fields.FtpSiteURL); }
            set { Entity.Attributes[Fields.FtpSiteURL] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Import Sequence Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ImportSequenceNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
            set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
        }

        /// <summary>
        /// <para>Select the account's primary industry for use in marketing segmentation and demographic analysis.</para>
        /// <para>Picklist</para>
        /// <para>Industry</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.IndustryCode? IndustryCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IndustryCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.IndustryCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.IndustryCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.IndustryCode] = null;
            }
        }

        /// <summary>
        /// <para>ReadOnly - Boolean</para>
        /// <para></para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsPrivate
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
        }

        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Last On Hold Time</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? LastOnHoldTimeUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
            set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
        }

        /// <summary>
        /// <para>Shows the date when the account was last included in a marketing campaign or quick campaign.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Last Date Included in Campaign</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? LastUsedInCampaignUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedInCampaign); }
            set { Entity.Attributes[Fields.LastUsedInCampaign] = value; }
        }

        /// <summary>
        /// <para>Type the market capitalization of the account to identify the company's equity, used as an indicator in financial performance analysis.</para>
        /// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Market Capitalization</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? MarketCap
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.MarketCap);
                if (value == null) return null;
                return value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.MarketCap] = new Money(value.Value);
                else
                    Entity.Attributes[Fields.MarketCap] = null;
            }
        }

        /// <summary>
        /// <para>Shows the market capitalization converted to the system's default base currency.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Market Capitalization (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? MarketCap_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.MarketCap_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Whether is only for marketing</para>
        /// <para>Boolean</para>
        /// <para>Marketing Only</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? MarketingOnly
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.MarketingOnly); }
            set { Entity.Attributes[Fields.MarketingOnly] = value; }
        }

        /// <summary>
        /// <para>Shows the master account that the account was merged with.</para>
        /// <para>ReadOnly - Lookup to account</para>
        /// <para>Master ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference MasterId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
        }

        /// <summary>
        /// <para>Shows whether the account has been merged with another account.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Merged</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? Merged
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
        }

        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
        }

        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>ReadOnly - Lookup to externalparty</para>
        /// <para>Modified By (External Party)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedByExternalParty
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
        }

        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Modified On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ModifiedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
        }

        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Type the company or business name.</para>
        /// <para>Required - String - MaxLength: 160</para>
        /// <para>Account Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Name
        {
            get { return Entity.GetAttributeValue<string>(Fields.Name); }
            set { Entity.Attributes[Fields.Name] = value; }
        }

        /// <summary>
        /// <para>Type the number of employees that work at the account for use in marketing segmentation and demographic analysis.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
        /// <para>Number of Employees</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? NumberOfEmployees
        {
            get { return Entity.GetAttributeValue<int?>(Fields.NumberOfEmployees); }
            set { Entity.Attributes[Fields.NumberOfEmployees] = value; }
        }

        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>On Hold Time (Minutes)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? OnHoldTime
        {
            get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
        }

        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Record Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? OverriddenCreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
            set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
        }

        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Owner</para>
        /// <para>Owner</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwnerId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
            set { Entity.Attributes[Fields.OwnerId] = value; }
        }

        /// <summary>
        /// <para>Select the account's ownership structure, such as public or private.</para>
        /// <para>Picklist</para>
        /// <para>Ownership</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.OwnershipCode? OwnershipCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OwnershipCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.OwnershipCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.OwnershipCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.OwnershipCode] = null;
            }
        }

        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>ReadOnly - Lookup to businessunit</para>
        /// <para>Owning Business Unit</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningBusinessUnit
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
        }

        /// <summary>
        /// <para>Unique identifier of the team who owns the account.</para>
        /// <para>ReadOnly - Lookup to team</para>
        /// <para>Owning Team</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningTeam
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
        }

        /// <summary>
        /// <para>Unique identifier of the user who owns the account.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Owning User</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningUser
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
        }

        /// <summary>
        /// <para>Choose the parent account associated with this account to show parent and child businesses in reporting and analytics.</para>
        /// <para>Lookup to account</para>
        /// <para>Parent Account</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ParentAccountId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAccountId); }
            set { Entity.Attributes[Fields.ParentAccountId] = value; }
        }

        /// <summary>
        /// <para>For system use only. Legacy Microsoft Dynamics CRM 3.0 workflow data.</para>
        /// <para>Boolean</para>
        /// <para>Participates in Workflow</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? ParticipatesInWorkflow
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
            set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
        }

        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Picklist</para>
        /// <para>Payment Terms</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.PaymentTermsCode? PaymentTermsCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentTermsCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.PaymentTermsCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PaymentTermsCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PaymentTermsCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the preferred day of the week for service appointments.</para>
        /// <para>Picklist</para>
        /// <para>Preferred Day</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentDayCode? PreferredAppointmentDayCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentDayCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentDayCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PreferredAppointmentDayCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PreferredAppointmentDayCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the preferred time of day for service appointments.</para>
        /// <para>Picklist</para>
        /// <para>Preferred Time</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentTimeCode? PreferredAppointmentTimeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentTimeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentTimeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PreferredAppointmentTimeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PreferredAppointmentTimeCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Picklist</para>
        /// <para>Preferred Method of Contact</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode? PreferredContactMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredContactMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PreferredContactMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PreferredContactMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>Choose the preferred service representative for reference when you schedule service activities for the account.</para>
        /// <para>Lookup to systemuser</para>
        /// <para>Preferred User</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference PreferredSystemUserId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.PreferredSystemUserId); }
            set { Entity.Attributes[Fields.PreferredSystemUserId] = value; }
        }

        /// <summary>
        /// <para>Choose the primary contact for the account to provide quick access to contact details.</para>
        /// <para>Lookup to contact</para>
        /// <para>Primary Contact</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference PrimaryContactId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.PrimaryContactId); }
            set { Entity.Attributes[Fields.PrimaryContactId] = value; }
        }

        /// <summary>
        /// <para>Primary Satori ID for Account</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>Primary Satori ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string PrimarySatoriId
        {
            get { return Entity.GetAttributeValue<string>(Fields.PrimarySatoriId); }
            set { Entity.Attributes[Fields.PrimarySatoriId] = value; }
        }

        /// <summary>
        /// <para>Primary Twitter ID for Account</para>
        /// <para>String - MaxLength: 128</para>
        /// <para>Primary Twitter ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string PrimaryTwitterId
        {
            get { return Entity.GetAttributeValue<string>(Fields.PrimaryTwitterId); }
            set { Entity.Attributes[Fields.PrimaryTwitterId] = value; }
        }

        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Process</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? ProcessId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
            set { Entity.Attributes[Fields.ProcessId] = value; }
        }

        /// <summary>
        /// <para>Type the annual revenue for the account, used as an indicator in financial performance analysis.</para>
        /// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Annual Revenue</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Revenue
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Revenue);
                if (value == null) return null;
                return value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Revenue] = new Money(value.Value);
                else
                    Entity.Attributes[Fields.Revenue] = null;
            }
        }

        /// <summary>
        /// <para>Shows the annual revenue converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Annual Revenue (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Revenue_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Revenue_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Type the number of shares available to the public for the account. This number is used as an indicator in financial performance analysis.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
        /// <para>Shares Outstanding</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? SharesOutstanding
        {
            get { return Entity.GetAttributeValue<int?>(Fields.SharesOutstanding); }
            set { Entity.Attributes[Fields.SharesOutstanding] = value; }
        }

        /// <summary>
        /// <para>Select a shipping method for deliveries sent to the account's address to designate the preferred carrier or other delivery option.</para>
        /// <para>Picklist</para>
        /// <para>Shipping Method</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode? ShippingMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.ShippingMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the Standard Industrial Classification (SIC) code that indicates the account's primary industry of business, for use in marketing segmentation and demographic analysis.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>SIC Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string SIC
        {
            get { return Entity.GetAttributeValue<string>(Fields.SIC); }
            set { Entity.Attributes[Fields.SIC] = value; }
        }

        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Account record.</para>
        /// <para>Lookup to sla</para>
        /// <para>SLA</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SLAId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
            set { Entity.Attributes[Fields.SLAId] = value; }
        }

        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>ReadOnly - Lookup to sla</para>
        /// <para>Last SLA applied</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SLAInvokedId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
        }

        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>(Deprecated) Process Stage</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? StageId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
            set { Entity.Attributes[Fields.StageId] = value; }
        }

        /// <summary>
        /// <para>Shows whether the account is active or inactive. Inactive accounts are read-only and can't be edited unless they are reactivated.</para>
        /// <para>State</para>
        /// <para>Status</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode? StateCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.StateCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the account's status.</para>
        /// <para>Status</para>
        /// <para>Status Reason</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.StatusCode? StatusCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.StatusCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.StatusCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the stock exchange at which the account is listed to track their stock and financial performance of the company.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Stock Exchange</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string StockExchange
        {
            get { return Entity.GetAttributeValue<string>(Fields.StockExchange); }
            set { Entity.Attributes[Fields.StockExchange] = value; }
        }

        /// <summary>
        /// <para>Type the main phone number for this account.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Main Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Telephone1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
            set { Entity.Attributes[Fields.Telephone1] = value; }
        }

        /// <summary>
        /// <para>Type a second phone number for this account.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Other Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Telephone2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
            set { Entity.Attributes[Fields.Telephone2] = value; }
        }

        /// <summary>
        /// <para>Type a third phone number for this account.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Telephone 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Telephone3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
            set { Entity.Attributes[Fields.Telephone3] = value; }
        }

        /// <summary>
        /// <para>Select a region or territory for the account for use in segmentation and analysis.</para>
        /// <para>Picklist</para>
        /// <para>Territory Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode? TerritoryCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TerritoryCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.TerritoryCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.TerritoryCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the stock exchange symbol for the account to track financial performance of the company. You can click the code entered in this field to access the latest trading information from MSN Money.</para>
        /// <para>String - MaxLength: 10</para>
        /// <para>Ticker Symbol</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string TickerSymbol
        {
            get { return Entity.GetAttributeValue<string>(Fields.TickerSymbol); }
            set { Entity.Attributes[Fields.TickerSymbol] = value; }
        }

        /// <summary>
        /// <para>Total time spent for emails (read and write) and meetings by me in relation to account record.</para>
        /// <para>ReadOnly - String - MaxLength: 1250</para>
        /// <para>Time Spent by me</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string TimeSpentByMeOnEmailAndMeetings
        {
            get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>Time Zone Rule Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? TimeZoneRuleVersionNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
            set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
        }

        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Lookup to transactioncurrency</para>
        /// <para>Currency</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference TransactionCurrencyId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
            set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>String - MaxLength: 1250</para>
        /// <para>(Deprecated) Traversed Path</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string TraversedPath
        {
            get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
            set { Entity.Attributes[Fields.TraversedPath] = value; }
        }

        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>UTC Conversion Time Zone Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? UTCConversionTimeZoneCode
        {
            get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
            set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
        }

        /// <summary>
        /// <para>Version number of the account.</para>
        /// <para>ReadOnly - BigInt</para>
        /// <para>Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public long? VersionNumber
        {
            get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
        }

        /// <summary>
        /// <para>Type the account's website URL to get quick details about the company profile.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>Website</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string WebSiteURL
        {
            get { return Entity.GetAttributeValue<string>(Fields.WebSiteURL); }
            set { Entity.Attributes[Fields.WebSiteURL] = value; }
        }

        /// <summary>
        /// <para>Type the phonetic spelling of the company name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
        /// <para>String - MaxLength: 160</para>
        /// <para>Yomi Account Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string YomiName
        {
            get { return Entity.GetAttributeValue<string>(Fields.YomiName); }
            set { Entity.Attributes[Fields.YomiName] = value; }
        }

        /// <summary>
        /// <para>byte[]</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public byte[] EntityImage
        {
            get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
            set { Entity.Attributes["entityimage"] = value; }
        }

        /// <summary>
        /// <para>ReadOnly - String</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EntityImageUrl
        {
            get { return Entity.GetAttributeValue<string>("entityimage_url"); }
        }
    }
}

