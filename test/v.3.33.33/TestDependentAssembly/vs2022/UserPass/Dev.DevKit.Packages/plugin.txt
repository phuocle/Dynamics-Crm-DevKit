using Microsoft.Xrm.Sdk;
using Niam.XRM.Framework.Interfaces.Plugin;
using Niam.XRM.Framework.Plugin;
using <#=Context.PluginSharedNameSpace#>;

namespace <#=Context.PluginNameSpace#>
{
    [CrmPluginRegistration("<#=Context.PluginMessage#>", "<#=Context.PluginLogicalName#>", StageEnum.<#=Context.PluginStage#>, ExecutionModeEnum.<#=Context.PluginExecution#>, "", "<#=Context.PluginNameSpace#>.<#=Context.Class#>", 1, IsolationModeEnum.Sandbox, PluginType = PluginType.Plugin<#if(Context.IsNeedDeleteAsyncOperation){#>, DeleteAsyncOperation = true<#}#><#if(Context.PluginMessage=="Create" && Context.PluginStage=="PostOperation"){#>, Image1Name = "PostImage", Image1Alias = "PostImage", Image1Type = ImageTypeEnum.PostImage, Image1Attributes = "*"<#}#><#if(Context.PluginMessage == "Update" || Context.PluginMessage == "Delete"){#>, Image1Alias = "PreImage", Image1Type = ImageTypeEnum.PreImage, Image1Attributes = "*"<#}#><#if(Context.PluginMessage=="Update" && Context.PluginStage=="PostOperation"){#>, Image2Alias = "PostImage", Image2Type = ImageTypeEnum.PostImage, Image2Attributes = "*"<#}#>)]
    public class <#=Context.Class#> : PluginBase<Entity>, IPlugin
    {
        /*
        <#=Context.PluginComment#>
        */
        public <#=Context.Class#>(string unsecure, string secure) : base(unsecure, secure)
        {
        }
        protected override void ExecuteCrmPlugin(IPluginContext<Entity> context)
        {
            //YOUR CODE GO HERE
        }

    }
}