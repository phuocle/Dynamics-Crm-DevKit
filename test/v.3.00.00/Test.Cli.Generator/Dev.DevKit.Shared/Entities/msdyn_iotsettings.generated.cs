//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_iotsettingsOptionSets
{
	public enum msdyn_defaultiotsource
	{
		/// <summary>
		/// Azure IoT Central = 192350002
		/// </summary>
		Azure_IoT_Central = 192350002,
		/// <summary>
		/// Azure IoT Suite = 192350001
		/// </summary>
		Azure_IoT_Suite = 192350001,
		/// <summary>
		/// Other = 192350000
		/// </summary>
		Other = 192350000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_iotsettings : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_CommandNameProperty = "msdyn_commandnameproperty";
			public const string msdyn_CommandParametersProperty = "msdyn_commandparametersproperty";
			public const string msdyn_DefaultIoTProviderInstance = "msdyn_defaultiotproviderinstance";
			public const string msdyn_defaultiotsource = "msdyn_defaultiotsource";
			public const string msdyn_DeploymentAppURL = "msdyn_deploymentappurl";
			public const string msdyn_devicedatapullfrequency = "msdyn_devicedatapullfrequency";
			public const string msdyn_EnableIoTSuggestions = "msdyn_enableiotsuggestions";
			public const string msdyn_EnhancedBackgroundProcessing = "msdyn_enhancedbackgroundprocessing";
			public const string msdyn_IoTAlertAggregationRule = "msdyn_iotalertaggregationrule";
			public const string msdyn_iotsettingsId = "msdyn_iotsettingsid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_NextDeviceDataPullTime = "msdyn_nextdevicedatapulltime";
			public const string msdyn_ScheduledDeviceDataPull = "msdyn_scheduleddevicedatapull";
			public const string msdyn_ShowWelcome = "msdyn_showwelcome";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_iotsettings";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10178;

		[DebuggerNonUserCode()]
		public msdyn_iotsettings()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_iotsettings(Guid msdyn_iotsettingsId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_iotsettingsId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_iotsettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_iotsettings(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_iotsettings(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_iotsettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>This value will be used to specify the command name when sending device commands. Default property value is &quot;CommandName&quot; when this field is unspecified.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Command Name Property</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CommandNameProperty
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CommandNameProperty); }
			set { Entity.Attributes[Fields.msdyn_CommandNameProperty] = value; }
		}

		/// <summary>
		/// <para>This value will be used to specify the command parameters when sending device commands. Default property value is &quot;Parameters&quot; when this field is unspecified.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Command Parameters Property</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CommandParametersProperty
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CommandParametersProperty); }
			set { Entity.Attributes[Fields.msdyn_CommandParametersProperty] = value; }
		}

		/// <summary>
		/// <para>The IoT Provider Instance to which IoT Devices should belong by default.</para>
		/// <para>Lookup to msdyn_iotproviderinstance</para>
		/// <para>Default IoT Provider Instance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultIoTProviderInstance
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultIoTProviderInstance); }
			set { Entity.Attributes[Fields.msdyn_DefaultIoTProviderInstance] = value; }
		}

		/// <summary>
		/// <para>This field is used to know the source of IoT for this organization. Example : IoT Suite or IoT Central or Others.</para>
		/// <para>Picklist</para>
		/// <para>Default IoT Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_iotsettingsOptionSets.msdyn_defaultiotsource? msdyn_defaultiotsource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_defaultiotsource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_iotsettingsOptionSets.msdyn_defaultiotsource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_defaultiotsource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_defaultiotsource] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Deployment App URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_DeploymentAppURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_DeploymentAppURL); }
			set { Entity.Attributes[Fields.msdyn_DeploymentAppURL] = value; }
		}

		/// <summary>
		/// <para>To specify the interval of scheduled device data pulls</para>
		/// <para>Integer - MinValue: 60 - MaxValue: 2,147,483,647</para>
		/// <para>Device Data Pull Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_devicedatapullfrequency
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_devicedatapullfrequency); }
			set { Entity.Attributes[Fields.msdyn_devicedatapullfrequency] = value; }
		}

		/// <summary>
		/// <para>IoT suggestions provide you insights on priority level and incident type associated with an alert.</para>
		/// <para>Boolean</para>
		/// <para>Enable IoT suggestions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableIoTSuggestions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableIoTSuggestions); }
			set { Entity.Attributes[Fields.msdyn_EnableIoTSuggestions] = value; }
		}

		/// <summary>
		/// <para>When this option is enabled, all Connected Field Service background processes will be processed through flows instead of the historic Connected Field Service workflows.</para>
		/// <para>Boolean</para>
		/// <para>Use Enhanced Background Processing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnhancedBackgroundProcessing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnhancedBackgroundProcessing); }
			set { Entity.Attributes[Fields.msdyn_EnhancedBackgroundProcessing] = value; }
		}

		/// <summary>
		/// <para>Select the columns that will be used to determine the aggregation of similar IoT alerts.</para>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>IoT Alert Aggregation Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_IoTAlertAggregationRule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_IoTAlertAggregationRule); }
			set { Entity.Attributes[Fields.msdyn_IoTAlertAggregationRule] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>IoTSettings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_iotsettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_iotsettingsId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>The next scheduled running time for device data pull</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Next Device Data Pull Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_NextDeviceDataPullTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_NextDeviceDataPullTime); }
			set { Entity.Attributes[Fields.msdyn_NextDeviceDataPullTime] = value; }
		}

		/// <summary>
		/// <para>To turn on/off scheduled device data pulls, default is off</para>
		/// <para>Required - Boolean</para>
		/// <para>Scheduled Data Pull</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ScheduledDeviceDataPull
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ScheduledDeviceDataPull); }
			set { Entity.Attributes[Fields.msdyn_ScheduledDeviceDataPull] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Show Welcome</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ShowWelcome
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ShowWelcome); }
			set { Entity.Attributes[Fields.msdyn_ShowWelcome] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the IoTSettings</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_iotsettingsOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_iotsettingsOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the IoTSettings</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_iotsettingsOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_iotsettingsOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
