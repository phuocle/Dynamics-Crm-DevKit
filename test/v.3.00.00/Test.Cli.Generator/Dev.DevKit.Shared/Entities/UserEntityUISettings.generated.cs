//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.UserEntityUISettingsOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class UserEntityUISettings : EntityBase
	{
		public struct Fields
		{
			public const string InsertIntoEmailMRUXml = "insertintoemailmruxml";
			public const string LastViewedFormXml = "lastviewedformxml";
			public const string LookupMRUXml = "lookupmruxml";
			public const string MRUXml = "mruxml";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ReadingPaneXml = "readingpanexml";
			public const string RecentlyViewedXml = "recentlyviewedxml";
			public const string ShowInAddressBook = "showinaddressbook";
			public const string TabOrderXml = "taborderxml";
			public const string UserEntityUISettingsId = "userentityuisettingsid";
			public const string VersionNumber = "versionnumber";
			public const string ViewPersonalizationSettings = "viewpersonalizationsettings";
		}

		public const string EntityLogicalName = "userentityuisettings";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2500;

		[DebuggerNonUserCode()]
		public UserEntityUISettings()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserEntityUISettings(Guid UserEntityUISettingsId)
		{
			Entity = new Entity(EntityLogicalName, UserEntityUISettingsId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserEntityUISettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserEntityUISettings(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserEntityUISettings(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserEntityUISettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Describes which entities are most recently inserted into email for this entity</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Most Recently Inserted Into Email Xml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InsertIntoEmailMRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.InsertIntoEmailMRUXml); }
			set { Entity.Attributes[Fields.InsertIntoEmailMRUXml] = value; }
		}

		/// <summary>
		/// <para>Describes which forms are most recently viewed for this entity.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Last Viewed Form Xml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastViewedFormXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastViewedFormXml); }
			set { Entity.Attributes[Fields.LastViewedFormXml] = value; }
		}

		/// <summary>
		/// <para>List of most recently used lookup references for this entity</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Most Recently Used Xml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LookupMRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.LookupMRUXml); }
			set { Entity.Attributes[Fields.LookupMRUXml] = value; }
		}

		/// <summary>
		/// <para>Describes which tabs are most recently used for this entity</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Most Recently Used Xml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.MRUXml); }
			set { Entity.Attributes[Fields.MRUXml] = value; }
		}

		/// <summary>
		/// <para>Object Type Code</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the settings.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns this.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns this saved view.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns this saved view.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Describes the reading pane formatting of this entity</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Conditional formatting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReadingPaneXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReadingPaneXml); }
			set { Entity.Attributes[Fields.ReadingPaneXml] = value; }
		}

		/// <summary>
		/// <para>Describes which objects are most recently viewed for this entity</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Most Recently Viewed Objects</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RecentlyViewedXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.RecentlyViewedXml); }
			set { Entity.Attributes[Fields.RecentlyViewedXml] = value; }
		}

		/// <summary>
		/// <para>Determines whether a record type is exposed in the Outlook Address Book</para>
		/// <para>Boolean</para>
		/// <para>Show In Address Book</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowInAddressBook
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowInAddressBook); }
			set { Entity.Attributes[Fields.ShowInAddressBook] = value; }
		}

		/// <summary>
		/// <para>Describes the tab ordering for this entity</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Tab Order Xml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TabOrderXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TabOrderXml); }
			set { Entity.Attributes[Fields.TabOrderXml] = value; }
		}

		/// <summary>
		/// <para>Unique identifier user entity</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid UserEntityUISettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.UserEntityUISettingsId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Data representing the view personalization settings</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>View personalization settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ViewPersonalizationSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.ViewPersonalizationSettings); }
			set { Entity.Attributes[Fields.ViewPersonalizationSettings] = value; }
		}
	}
}
