//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets
{
	public enum msdyn_ProcessingAction
	{
		/// <summary>
		/// Change Asset Ownership = 690970002
		/// </summary>
		Change_Asset_Ownership = 690970002,
		/// <summary>
		/// Create RTV = 690970000
		/// </summary>
		Create_RTV = 690970000,
		/// <summary>
		/// Return to Warehouse = 690970001
		/// </summary>
		Return_to_Warehouse = 690970001
	}

	public enum msdyn_SystemStatus
	{
		/// <summary>
		/// Canceled = 690970001
		/// </summary>
		Canceled = 690970001,
		/// <summary>
		/// Pending = 690970000
		/// </summary>
		Pending = 690970000,
		/// <summary>
		/// Products Received = 690970002
		/// </summary>
		Products_Received = 690970002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_rma : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ApprovedBy = "msdyn_approvedby";
			public const string msdyn_AutoNumbering = "msdyn_autonumbering";
			public const string msdyn_BillingAccount = "msdyn_billingaccount";
			public const string msdyn_DateRequested = "msdyn_daterequested";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_ETA = "msdyn_eta";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_PackagingTrackingNo = "msdyn_packagingtrackingno";
			public const string msdyn_PriceList = "msdyn_pricelist";
			public const string msdyn_ProcessingAction = "msdyn_processingaction";
			public const string msdyn_ReferenceNo = "msdyn_referenceno";
			public const string msdyn_RequestedByContact = "msdyn_requestedbycontact";
			public const string msdyn_rmaId = "msdyn_rmaid";
			public const string msdyn_ServiceAccount = "msdyn_serviceaccount";
			public const string msdyn_ShippingTrackingNo = "msdyn_shippingtrackingno";
			public const string msdyn_ShipVia = "msdyn_shipvia";
			public const string msdyn_SubStatus = "msdyn_substatus";
			public const string msdyn_SystemStatus = "msdyn_systemstatus";
			public const string msdyn_Taxable = "msdyn_taxable";
			public const string msdyn_TaxCode = "msdyn_taxcode";
			public const string msdyn_TotalAmount = "msdyn_totalamount";
			public const string msdyn_totalamount_Base = "msdyn_totalamount_base";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_rma";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10636;

		[DebuggerNonUserCode()]
		public msdyn_rma()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_rma(Guid msdyn_rmaId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_rmaId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_rma(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_rma(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_rma(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_rma(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>User who approved RMA</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Approved By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ApprovedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ApprovedBy); }
			set { Entity.Attributes[Fields.msdyn_ApprovedBy] = value; }
		}

		/// <summary>
		/// <para>Internal field used to generate the next name upon entity creation. It is optionally copied to the msdyn_name field.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Auto-Numbering</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AutoNumbering
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AutoNumbering); }
			set { Entity.Attributes[Fields.msdyn_AutoNumbering] = value; }
		}

		/// <summary>
		/// <para>Account to be billed. If a billing account has been set on service account it will be populated by default. Otherwise, the billing account will be the same as the service account.</para>
		/// <para>Lookup to account</para>
		/// <para>Billing Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BillingAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BillingAccount); }
			set { Entity.Attributes[Fields.msdyn_BillingAccount] = value; }
		}

		/// <summary>
		/// <para>Enter the date RMA was requested by the customer.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date Requested</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DateRequestedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DateRequested); }
			set { Entity.Attributes[Fields.msdyn_DateRequested] = value; }
		}

		/// <summary>
		/// <para>Enter a short description of the RMA.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}

		/// <summary>
		/// <para>ETA</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>ETA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ETAUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ETA); }
			set { Entity.Attributes[Fields.msdyn_ETA] = value; }
		}

		/// <summary>
		/// <para>Shows the unique number identifying this RMA record.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>RMA Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Shows the tracking number of package</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Packaging Tracking No</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PackagingTrackingNo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PackagingTrackingNo); }
			set { Entity.Attributes[Fields.msdyn_PackagingTrackingNo] = value; }
		}

		/// <summary>
		/// <para>Price List that determines the pricing for this product</para>
		/// <para>Required - Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PriceList
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PriceList); }
			set { Entity.Attributes[Fields.msdyn_PriceList] = value; }
		}

		/// <summary>
		/// <para>Shows the default action to be taken on all RMA Products.</para>
		/// <para>Picklist</para>
		/// <para>Processing Action</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets.msdyn_ProcessingAction? msdyn_ProcessingAction
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ProcessingAction);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets.msdyn_ProcessingAction)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ProcessingAction] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ProcessingAction] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Reference No</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ReferenceNo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ReferenceNo); }
			set { Entity.Attributes[Fields.msdyn_ReferenceNo] = value; }
		}

		/// <summary>
		/// <para>Contact who requested this return</para>
		/// <para>Lookup to contact</para>
		/// <para>Requested By Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RequestedByContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RequestedByContact); }
			set { Entity.Attributes[Fields.msdyn_RequestedByContact] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>RMA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_rmaId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_rmaId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Account to be serviced</para>
		/// <para>Required - Lookup to account</para>
		/// <para>Service Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceAccount); }
			set { Entity.Attributes[Fields.msdyn_ServiceAccount] = value; }
		}

		/// <summary>
		/// <para>Shows the tracking number of the shipment.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Shipping Tracking No</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ShippingTrackingNo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ShippingTrackingNo); }
			set { Entity.Attributes[Fields.msdyn_ShippingTrackingNo] = value; }
		}

		/// <summary>
		/// <para>Method of shipment by Customer</para>
		/// <para>Lookup to msdyn_shipvia</para>
		/// <para>Ship Via</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ShipVia
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ShipVia); }
			set { Entity.Attributes[Fields.msdyn_ShipVia] = value; }
		}

		/// <summary>
		/// <para>RMA Substatus</para>
		/// <para>Lookup to msdyn_rmasubstatus</para>
		/// <para>Substatus</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SubStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SubStatus); }
			set { Entity.Attributes[Fields.msdyn_SubStatus] = value; }
		}

		/// <summary>
		/// <para>Enter the current status of the RMA.</para>
		/// <para>Required - Picklist</para>
		/// <para>System Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets.msdyn_SystemStatus? msdyn_SystemStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_SystemStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets.msdyn_SystemStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SystemStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_SystemStatus] = null;
			}
		}

		/// <summary>
		/// <para>Specify if RMA is taxable</para>
		/// <para>Required - Boolean</para>
		/// <para>Taxable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Taxable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Taxable); }
			set { Entity.Attributes[Fields.msdyn_Taxable] = value; }
		}

		/// <summary>
		/// <para>Tax Code to be used to calculate tax when RMA is taxable. By default the system will use the tax code specified on the service account</para>
		/// <para>Lookup to msdyn_taxcode</para>
		/// <para>Tax Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TaxCode
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TaxCode); }
			set { Entity.Attributes[Fields.msdyn_TaxCode] = value; }
		}

		/// <summary>
		/// <para>Shows the total amount of all RMA Products including tax.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Total Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the total amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Work Order this RMA is linked to</para>
		/// <para>Lookup to msdyn_workorder</para>
		/// <para>Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the RMA</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the RMA</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_rmaOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
