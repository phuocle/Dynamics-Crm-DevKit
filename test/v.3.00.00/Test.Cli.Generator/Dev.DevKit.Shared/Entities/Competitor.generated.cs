//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.CompetitorOptionSets
{
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Competitor : EntityBase
	{
		public struct Fields
		{
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string CompetitorId = "competitorid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string KeyProduct = "keyproduct";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string Name = "name";
			public const string Opportunities = "opportunities";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string Overview = "overview";
			public const string ProcessId = "processid";
			public const string ReferenceInfoUrl = "referenceinfourl";
			public const string ReportedRevenue = "reportedrevenue";
			public const string ReportedRevenue_Base = "reportedrevenue_base";
			public const string ReportingQuarter = "reportingquarter";
			public const string ReportingYear = "reportingyear";
			public const string StageId = "stageid";
			public const string StockExchange = "stockexchange";
			public const string Strengths = "strengths";
			public const string Threats = "threats";
			public const string TickerSymbol = "tickersymbol";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string Weaknesses = "weaknesses";
			public const string WebSiteUrl = "websiteurl";
			public const string WinPercentage = "winpercentage";
			public const string YomiName = "yominame";
		}

		public const string EntityLogicalName = "competitor";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 123;

		[DebuggerNonUserCode()]
		public Competitor()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Competitor(Guid CompetitorId)
		{
			Entity = new Entity(EntityLogicalName, CompetitorId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Competitor(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Competitor(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Competitor(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Competitor(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier for address 1.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Address 1: ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}

		/// <summary>
		/// <para>Select the primary address type.</para>
		/// <para>Picklist</para>
		/// <para>Address 1: Address Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CompetitorOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CompetitorOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the city for the primary address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete primary address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Address 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}

		/// <summary>
		/// <para>Type the country or region for the primary address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}

		/// <summary>
		/// <para>Type the county for the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: County</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}

		/// <summary>
		/// <para>Type the fax number associated with the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}

		/// <summary>
		/// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Address 1: Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}

		/// <summary>
		/// <para>Type the first line of the primary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}

		/// <summary>
		/// <para>Type the second line of the primary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}

		/// <summary>
		/// <para>Type the third line of the primary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}

		/// <summary>
		/// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Address 1: Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}

		/// <summary>
		/// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Address 1: Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}

		/// <summary>
		/// <para>Type the ZIP Code or postal code for the primary address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Type the post office box number of the primary address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Address 1: Post Office Box</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}

		/// <summary>
		/// <para>Select a shipping method for deliveries sent to this address.</para>
		/// <para>Picklist</para>
		/// <para>Address 1: Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CompetitorOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CompetitorOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the state or province of the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Type the main phone number associated with the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: Telephone 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}

		/// <summary>
		/// <para>Type a second phone number associated with the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: Telephone 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}

		/// <summary>
		/// <para>Type a third phone number associated with the primary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 1: Telephone 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}

		/// <summary>
		/// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para>String - MaxLength: 4</para>
		/// <para>Address 1: UPS Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}

		/// <summary>
		/// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Address 1: UTC Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for address 2.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Address 2: ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}

		/// <summary>
		/// <para>Select the secondary address type.</para>
		/// <para>Picklist</para>
		/// <para>Address 2: Address Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CompetitorOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CompetitorOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the city for the secondary address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Address 2: City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete secondary address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Address 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}

		/// <summary>
		/// <para>Type the country or region for the secondary address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Address 2: Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}

		/// <summary>
		/// <para>Type the county for the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: County</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}

		/// <summary>
		/// <para>Type the fax number associated with the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}

		/// <summary>
		/// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Address 2: Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}

		/// <summary>
		/// <para>Type the first line of the secondary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Address 2: Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}

		/// <summary>
		/// <para>Type the second line of the secondary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Address 2: Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}

		/// <summary>
		/// <para>Type the third line of the secondary address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Address 2: Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}

		/// <summary>
		/// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Address 2: Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}

		/// <summary>
		/// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Address 2: Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}

		/// <summary>
		/// <para>Type the ZIP Code or postal code for the secondary address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Address 2: ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Type the post office box number of the secondary address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Address 2: Post Office Box</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}

		/// <summary>
		/// <para>Select a shipping method for deliveries sent to this address.</para>
		/// <para>Picklist</para>
		/// <para>Address 2: Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CompetitorOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CompetitorOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the state or province of the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Type the main phone number associated with the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}

		/// <summary>
		/// <para>Type a second phone number associated with the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}

		/// <summary>
		/// <para>Type a third phone number associated with the secondary address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}

		/// <summary>
		/// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly , if shipped by UPS.</para>
		/// <para>String - MaxLength: 4</para>
		/// <para>Address 2: UPS Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}

		/// <summary>
		/// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Address 2: UTC Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the competitor.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Competitor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CompetitorId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CompetitorId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Type the competitor&apos;s primary product, service, or specialty.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Key Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KeyProduct
		{
			get { return Entity.GetAttributeValue<string>(Fields.KeyProduct); }
			set { Entity.Attributes[Fields.KeyProduct] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Describes whether competitor is opted out or not</para>
		/// <para>Boolean</para>
		/// <para>GDPR Optout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}

		/// <summary>
		/// <para>Type the company or business name used to identify the competitor in data views and related records.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Type notes or other information about the competitive opportunities or selling points you can make.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Opportunity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Opportunities
		{
			get { return Entity.GetAttributeValue<string>(Fields.Opportunities); }
			set { Entity.Attributes[Fields.Opportunities] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Type notes or other information about the competitor&apos;s business, such as location, revenue, or distribution channel.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Overview</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Overview
		{
			get { return Entity.GetAttributeValue<string>(Fields.Overview); }
			set { Entity.Attributes[Fields.Overview] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Type the URL for the website used to obtain reference information about the competitor.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Reference Info URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReferenceInfoUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReferenceInfoUrl); }
			set { Entity.Attributes[Fields.ReferenceInfoUrl] = value; }
		}

		/// <summary>
		/// <para>Type the amount of revenue reported in the competitor&apos;s annual report or other source.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Reported Revenue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ReportedRevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ReportedRevenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReportedRevenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ReportedRevenue] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Reported Revenue in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Reported Revenue (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ReportedRevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ReportedRevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Type the quarter number during which the competitor&apos;s reported revenue was recorded or announced for use in reporting and analysis.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Reporting Quarter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ReportingQuarter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ReportingQuarter); }
			set { Entity.Attributes[Fields.ReportingQuarter] = value; }
		}

		/// <summary>
		/// <para>Type the fiscal year during which the competitor&apos;s reported revenue was announced for use in reporting and analysis.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Reporting Year</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ReportingYear
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ReportingYear); }
			set { Entity.Attributes[Fields.ReportingYear] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Type the stock exchange at which the competitor is listed to track their stock and financial performance of the company.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Stock Exchange</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StockExchange
		{
			get { return Entity.GetAttributeValue<string>(Fields.StockExchange); }
			set { Entity.Attributes[Fields.StockExchange] = value; }
		}

		/// <summary>
		/// <para>Type notes or other information about the competitor&apos;s strengths, such as top-selling products and targeted industries or markets.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Strength</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Strengths
		{
			get { return Entity.GetAttributeValue<string>(Fields.Strengths); }
			set { Entity.Attributes[Fields.Strengths] = value; }
		}

		/// <summary>
		/// <para>Type notes or other information about the competitor&apos;s threats to your organization when you sell to the same prospect or customer.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Threat</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Threats
		{
			get { return Entity.GetAttributeValue<string>(Fields.Threats); }
			set { Entity.Attributes[Fields.Threats] = value; }
		}

		/// <summary>
		/// <para>Type the stock exchange symbol for the competitor to track financial performance of the company. You can click the code entered in this field to access the latest trading information from MSN Money.</para>
		/// <para>String - MaxLength: 10</para>
		/// <para>Ticker Symbol</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TickerSymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.TickerSymbol); }
			set { Entity.Attributes[Fields.TickerSymbol] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Type notes or other information about the competitor&apos;s weaknesses or areas in which your organization outperforms the competitor.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Weakness</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Weaknesses
		{
			get { return Entity.GetAttributeValue<string>(Fields.Weaknesses); }
			set { Entity.Attributes[Fields.Weaknesses] = value; }
		}

		/// <summary>
		/// <para>Type the website URL for the competitor.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Website</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebSiteUrl); }
			set { Entity.Attributes[Fields.WebSiteUrl] = value; }
		}

		/// <summary>
		/// <para>Type the percentage of your organization&apos;s lost opportunities that are won by the competitor to identify your strongest competitors.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Win Percentage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? WinPercentage
		{
			get { return Entity.GetAttributeValue<double?>(Fields.WinPercentage); }
			set { Entity.Attributes[Fields.WinPercentage] = value; }
		}

		/// <summary>
		/// <para>Type the phonetic spelling of the competitor&apos;s name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Yomi Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiName); }
			set { Entity.Attributes[Fields.YomiName] = value; }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
