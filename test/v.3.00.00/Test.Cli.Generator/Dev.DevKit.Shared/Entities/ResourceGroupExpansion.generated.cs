//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ResourceGroupExpansionOptionSets
{
	public enum MethodCode
	{
		/// <summary>
		/// All Resources = 5
		/// </summary>
		All_Resources = 5,
		/// <summary>
		/// All Subgroups = 8
		/// </summary>
		All_Subgroups = 8,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Parent Groups = 7
		/// </summary>
		Parent_Groups = 7,
		/// <summary>
		/// Participating Resources = 1
		/// </summary>
		Participating_Resources = 1,
		/// <summary>
		/// Resources = 4
		/// </summary>
		Resources = 4,
		/// <summary>
		/// Schedulable Resources = 2
		/// </summary>
		Schedulable_Resources = 2,
		/// <summary>
		/// Subgroups = 6
		/// </summary>
		Subgroups = 6,
		/// <summary>
		/// Supported Services = 3
		/// </summary>
		Supported_Services = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ResourceGroupExpansion : EntityBase
	{
		public struct Fields
		{
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ItemId = "itemid";
			public const string MethodCode = "methodcode";
			public const string ModifiedOn = "modifiedon";
			public const string Name = "name";
			public const string ObjectId = "objectid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ResourceGroupExpansionId = "resourcegroupexpansionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "resourcegroupexpansion";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4010;

		[DebuggerNonUserCode()]
		public ResourceGroupExpansion()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceGroupExpansion(Guid ResourceGroupExpansionId)
		{
			Entity = new Entity(EntityLogicalName, ResourceGroupExpansionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceGroupExpansion(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceGroupExpansion(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceGroupExpansion(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceGroupExpansion(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Item that is part of expansion of resource identified by object ID. One object ID can have many item IDs.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ItemId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ItemId); }
			set { Entity.Attributes[Fields.ItemId] = value; }
		}

		/// <summary>
		/// <para>Code for retrieval method.</para>
		/// <para>Picklist</para>
		/// <para>Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ResourceGroupExpansionOptionSets.MethodCode? MethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ResourceGroupExpansionOptionSets.MethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Date and time when the record was last modified.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
			set { Entity.Attributes[Fields.ModifiedOn] = value; }
		}

		/// <summary>
		/// <para>name</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Object being expanded.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Object</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the resource expansion record.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Resource Expansion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ResourceGroupExpansionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ResourceGroupExpansionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
