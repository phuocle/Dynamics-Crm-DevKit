//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SubscriptionSyncInfoOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SubscriptionSyncInfo : EntityBase
	{
		public struct Fields
		{
			public const string ClientVersion = "clientversion";
			public const string DataSize = "datasize";
			public const string DeleteObjectCount = "deleteobjectcount";
			public const string EndTime = "endtime";
			public const string InsertObjectCount = "insertobjectcount";
			public const string StartTime = "starttime";
			public const string SubscriptionId = "subscriptionid";
			public const string SubscriptionSyncInfoId = "subscriptionsyncinfoid";
			public const string SyncResult = "syncresult";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}

		public const string EntityLogicalName = "subscriptionsyncinfo";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 33;

		[DebuggerNonUserCode()]
		public SubscriptionSyncInfo()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SubscriptionSyncInfo(Guid SubscriptionSyncInfoId)
		{
			Entity = new Entity(EntityLogicalName, SubscriptionSyncInfoId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SubscriptionSyncInfo(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SubscriptionSyncInfo(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SubscriptionSyncInfo(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SubscriptionSyncInfo(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Client (subscriber) version number.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientVersion); }
			set { Entity.Attributes[Fields.ClientVersion] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DataSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DataSize); }
			set { Entity.Attributes[Fields.DataSize] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DeleteObjectCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DeleteObjectCount); }
			set { Entity.Attributes[Fields.DeleteObjectCount] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InsertObjectCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InsertObjectCount); }
			set { Entity.Attributes[Fields.InsertObjectCount] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Lookup to subscription</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubscriptionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubscriptionId); }
			set { Entity.Attributes[Fields.SubscriptionId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SubscriptionSyncInfoId1
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SubscriptionSyncInfoId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SyncResult
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SyncResult); }
			set { Entity.Attributes[Fields.SyncResult] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}
