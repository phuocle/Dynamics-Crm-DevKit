//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ActivityMimeAttachmentOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum ObjectTypeCode
	{
		/// <summary>
		/// Email Activity = 4200
		/// </summary>
		Email_Activity = 4200,
		/// <summary>
		/// Email Template = 2010
		/// </summary>
		Email_Template = 2010
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ActivityMimeAttachment : EntityBase
	{
		public struct Fields
		{
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string ActivityId = "activityid";
			public const string ActivityMimeAttachmentId = "activitymimeattachmentid";
			public const string ActivityMimeAttachmentIdUnique = "activitymimeattachmentidunique";
			public const string ActivitySubject = "activitysubject";
			public const string AnonymousLink = "anonymouslink";
			public const string AttachmentContentId = "attachmentcontentid";
			public const string AttachmentId = "attachmentid";
			public const string AttachmentNumber = "attachmentnumber";
			public const string Body = "body";
			public const string ComponentState = "componentstate";
			public const string FileName = "filename";
			public const string FileSize = "filesize";
			public const string IsFollowed = "isfollowed";
			public const string IsManaged = "ismanaged";
			public const string MimeType = "mimetype";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string Subject = "subject";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "activitymimeattachment";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1001;

		[DebuggerNonUserCode()]
		public ActivityMimeAttachment()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ActivityMimeAttachment(Guid ActivityMimeAttachmentId)
		{
			Entity = new Entity(EntityLogicalName, ActivityMimeAttachmentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ActivityMimeAttachment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ActivityMimeAttachment(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ActivityMimeAttachment(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ActivityMimeAttachment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the activity with which the attachment is associated.</para>
		/// <para>Lookup to activitypointer</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public EntityReference ActivityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the attachment.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Activity Mime Attachment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ActivityMimeAttachmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ActivityMimeAttachmentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityMimeAttachmentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityMimeAttachmentIdUnique); }
			set { Entity.Attributes[Fields.ActivityMimeAttachmentIdUnique] = value; }
		}

		/// <summary>
		/// <para>Descriptive subject for the activity.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>ActivitySubject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivitySubject
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivitySubject); }
		}

		/// <summary>
		/// <para>anonymous link</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>For internal use only.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AnonymousLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.AnonymousLink); }
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Content Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttachmentContentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttachmentContentId); }
			set { Entity.Attributes[Fields.AttachmentContentId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the attachment with which this activitymimeattachment is associated.</para>
		/// <para>Required - Lookup to attachment</para>
		/// <para>Attachment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AttachmentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AttachmentId); }
			set { Entity.Attributes[Fields.AttachmentId] = value; }
		}

		/// <summary>
		/// <para>Number of the attachment.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Attachment Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AttachmentNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AttachmentNumber); }
			set { Entity.Attributes[Fields.AttachmentNumber] = value; }
		}

		/// <summary>
		/// <para>Contents of the attachment.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Body</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Body
		{
			get { return Entity.GetAttributeValue<string>(Fields.Body); }
			set { Entity.Attributes[Fields.Body] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ActivityMimeAttachmentOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ActivityMimeAttachmentOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>File name of the attachment.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}

		/// <summary>
		/// <para>File size of the attachment.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>File Size (Bytes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}

		/// <summary>
		/// <para>Indicates if this attachment is followed.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Followed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFollowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFollowed); }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>MIME type of the attachment.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Mime Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the record with which the attachment is associated</para>
		/// <para>Lookup to activitypointer, template</para>
		/// <para>Item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>Object Type Code of the entity that is associated with the attachment.</para>
		/// <para>EntityName</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the activity_mime_attachment.</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the activity mime attachment.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the activity mime attachment.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Descriptive subject for the attachment.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Subject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Version number of the activity mime attachment.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
