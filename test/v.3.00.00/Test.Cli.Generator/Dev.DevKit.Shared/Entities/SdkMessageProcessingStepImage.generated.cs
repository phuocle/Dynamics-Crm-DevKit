//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SdkMessageProcessingStepImageOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum ImageType
	{
		/// <summary>
		/// Both = 2
		/// </summary>
		Both = 2,
		/// <summary>
		/// PostImage = 1
		/// </summary>
		PostImage = 1,
		/// <summary>
		/// PreImage = 0
		/// </summary>
		PreImage = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SdkMessageProcessingStepImage : EntityBase
	{
		public struct Fields
		{
			public const string Attributes = "attributes";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomizationLevel = "customizationlevel";
			public const string Description = "description";
			public const string EntityAlias = "entityalias";
			public const string ImageType = "imagetype";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string MessagePropertyName = "messagepropertyname";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string RelatedAttributeName = "relatedattributename";
			public const string SdkMessageProcessingStepId = "sdkmessageprocessingstepid";
			public const string SdkMessageProcessingStepImageId = "sdkmessageprocessingstepimageid";
			public const string SdkMessageProcessingStepImageIdUnique = "sdkmessageprocessingstepimageidunique";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "sdkmessageprocessingstepimage";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4615;

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStepImage()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStepImage(Guid SdkMessageProcessingStepImageId)
		{
			Entity = new Entity(EntityLogicalName, SdkMessageProcessingStepImageId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStepImage(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStepImage(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStepImage(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStepImage(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Comma-separated list of attributes that are to be passed into the SDK message processing step image.</para>
		/// <para>String - MaxLength: 100000</para>
		/// <para>Attributes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Attributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.Attributes); }
			set { Entity.Attributes[Fields.Attributes] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SdkMessageProcessingStepImageOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SdkMessageProcessingStepImageOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the SDK message processing step image.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the SDK message processing step image was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the sdkmessageprocessingstepimage.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Customization level of the SDK message processing step image.</para>
		/// <para>ReadOnly - Integer - MinValue: -255 - MaxValue: 255</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CustomizationLevel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CustomizationLevel); }
		}

		/// <summary>
		/// <para>Description of the SDK message processing step image.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Key name used to access the pre-image or post-image property bags in a step.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Entity Alias</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityAlias
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityAlias); }
			set { Entity.Attributes[Fields.EntityAlias] = value; }
		}

		/// <summary>
		/// <para>Type of image requested.</para>
		/// <para>Picklist</para>
		/// <para>Image Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SdkMessageProcessingStepImageOptionSets.ImageType? ImageType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ImageType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SdkMessageProcessingStepImageOptionSets.ImageType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ImageType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ImageType] = null;
			}
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Name of the property on the Request message.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Message Property Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MessagePropertyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MessagePropertyName); }
			set { Entity.Attributes[Fields.MessagePropertyName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the SDK message processing step.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the SDK message processing step was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the sdkmessageprocessingstepimage.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of SdkMessage processing step image.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization with which the SDK message processing step is associated.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Name of the related entity.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Related Attribute Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedAttributeName); }
			set { Entity.Attributes[Fields.RelatedAttributeName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message processing step.</para>
		/// <para>Lookup to sdkmessageprocessingstep</para>
		/// <para>SDK Message Processing Step</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageProcessingStepId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageProcessingStepId); }
			set { Entity.Attributes[Fields.SdkMessageProcessingStepId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message processing step image entity.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SdkMessageProcessingStepImageId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SdkMessageProcessingStepImageId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message processing step image.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SdkMessageProcessingStepImageIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SdkMessageProcessingStepImageIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Number that identifies a specific revision of the step image.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
