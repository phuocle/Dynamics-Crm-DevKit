//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.EquipmentOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Equipment : EntityBase
	{
		public struct Fields
		{
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarId = "calendarid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string DisplayInServiceViews = "displayinserviceviews";
			public const string EMailAddress = "emailaddress";
			public const string EquipmentId = "equipmentid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDisabled = "isdisabled";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_OrganizationalUnitId = "msdyn_organizationalunitid";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string SiteId = "siteid";
			public const string Skills = "skills";
			public const string TimeZoneCode = "timezonecode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "equipment";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4000;

		[DebuggerNonUserCode()]
		public Equipment()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Equipment(Guid EquipmentId)
		{
			Entity = new Entity(EntityLogicalName, EquipmentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Equipment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Equipment(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Equipment(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Equipment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the business unit that the Equipment belongs to.</para>
		/// <para>Lookup to businessunit</para>
		/// <para>Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}

		/// <summary>
		/// <para>Fiscal calendar associated with the facility/equipment.</para>
		/// <para>Lookup to calendar</para>
		/// <para>Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the facility/equipment entry.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the equipment.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the facility/equipment.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Display in Service Views</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisplayInServiceViews
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisplayInServiceViews); }
			set { Entity.Attributes[Fields.DisplayInServiceViews] = value; }
		}

		/// <summary>
		/// <para>Email address of person to contact about the use of the facility/equipment.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Primary Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress); }
			set { Entity.Attributes[Fields.EMailAddress] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the facility/equipment.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Facility/Equipment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EquipmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EquipmentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the equipment with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Whether the facility/equipment is disabled or operational.</para>
		/// <para>Boolean</para>
		/// <para>Is Disabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabled); }
			set { Entity.Attributes[Fields.IsDisabled] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the facility/equipment.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the equipment.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier for OrganizationalUnit associated with Equipment</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Organizational Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OrganizationalUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OrganizationalUnitId); }
			set { Entity.Attributes[Fields.msdyn_OrganizationalUnitId] = value; }
		}

		/// <summary>
		/// <para>Name of the facility/equipment.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the parent business unit.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Site where the facility/equipment is located.</para>
		/// <para>Lookup to site</para>
		/// <para>Site</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SiteId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SiteId); }
			set { Entity.Attributes[Fields.SiteId] = value; }
		}

		/// <summary>
		/// <para>Skills needed to operate the facility/equipment.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Skills</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Skills
		{
			get { return Entity.GetAttributeValue<string>(Fields.Skills); }
			set { Entity.Attributes[Fields.Skills] = value; }
		}

		/// <summary>
		/// <para>Local time zone where the facility/equipment is located.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Time Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneCode); }
			set { Entity.Attributes[Fields.TimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the equipment.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
