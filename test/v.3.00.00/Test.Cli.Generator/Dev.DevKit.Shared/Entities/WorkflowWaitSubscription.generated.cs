//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.WorkflowWaitSubscriptionOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class WorkflowWaitSubscription : EntityBase
	{
		public struct Fields
		{
			public const string AsyncOperationId = "asyncoperationid";
			public const string Data = "data";
			public const string EntityId = "entityid";
			public const string EntityName = "entityname";
			public const string IsDeleted = "isdeleted";
			public const string IsModified = "ismodified";
			public const string ModifiedOn = "modifiedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string WaitOnAttributeList = "waitonattributelist";
			public const string WorkflowWaitSubscriptionId = "workflowwaitsubscriptionid";
		}

		public const string EntityLogicalName = "workflowwaitsubscription";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4702;

		[DebuggerNonUserCode()]
		public WorkflowWaitSubscription()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowWaitSubscription(Guid WorkflowWaitSubscriptionId)
		{
			Entity = new Entity(EntityLogicalName, WorkflowWaitSubscriptionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowWaitSubscription(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowWaitSubscription(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowWaitSubscription(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowWaitSubscription(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the asynchronous operation with which the subscription is associated.</para>
		/// <para>Lookup to asyncoperation</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AsyncOperationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AsyncOperationId); }
			set { Entity.Attributes[Fields.AsyncOperationId] = value; }
		}

		/// <summary>
		/// <para>Unstructured data associated with the subscription.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Data
		{
			get { return Entity.GetAttributeValue<string>(Fields.Data); }
			set { Entity.Attributes[Fields.Data] = value; }
		}

		/// <summary>
		/// <para>Id of entity to which workflow instance subscribes.</para>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityId); }
			set { Entity.Attributes[Fields.EntityId] = value; }
		}

		/// <summary>
		/// <para>Name of entity to which workflow instance subscribes.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
			set { Entity.Attributes[Fields.EntityName] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the entity to which workflow instance subscribes is deleted after the subscription is created.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDeleted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDeleted); }
		}

		/// <summary>
		/// <para>Indicates whether the entity to which workflow instance subscribes is modified after the subscription is created.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsModified
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsModified); }
		}

		/// <summary>
		/// <para>Date and time when the entity was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the parent workflow instance.</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the parent workflow instance.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the parent workflow instance.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningUser
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Attributes on which the subscription is waiting to change.</para>
		/// <para>String - MaxLength: 100000</para>
		/// <para>Wait On Attribute List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WaitOnAttributeList
		{
			get { return Entity.GetAttributeValue<string>(Fields.WaitOnAttributeList); }
			set { Entity.Attributes[Fields.WaitOnAttributeList] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the subscription.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WorkflowWaitSubscriptionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WorkflowWaitSubscriptionId] = value;
				Entity.Id = value;
			}
		}
	}
}
