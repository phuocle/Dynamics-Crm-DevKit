//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.organizationdatasyncstateOptionSets
{
	public enum currentfullsyncstate
	{
		/// <summary>
		/// AcceptMerge = 5
		/// </summary>
		AcceptMerge = 5,
		/// <summary>
		/// Completed = 3
		/// </summary>
		Completed = 3,
		/// <summary>
		/// Failed = 6
		/// </summary>
		Failed = 6,
		/// <summary>
		/// Initiating = 1
		/// </summary>
		Initiating = 1,
		/// <summary>
		/// InProgress = 2
		/// </summary>
		InProgress = 2,
		/// <summary>
		/// Invalid = 4
		/// </summary>
		Invalid = 4,
		/// <summary>
		/// NotInitialized = 0
		/// </summary>
		NotInitialized = 0
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class organizationdatasyncstate : EntityBase
	{
		public struct Fields
		{
			public const string continuefromlastdeltasync = "continuefromlastdeltasync";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string currentfullsyncfetchxml = "currentfullsyncfetchxml";
			public const string currentfullsyncstate = "currentfullsyncstate";
			public const string entityname = "entityname";
			public const string fullsynconly = "fullsynconly";
			public const string implicitlastdataversion = "implicitlastdataversion";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string lastdataversion = "lastdataversion";
			public const string lastmetadataversion = "lastmetadataversion";
			public const string lockexpiretimestamp = "lockexpiretimestamp";
			public const string lockowner = "lockowner";
			public const string minactiverowversion = "minactiverowversion";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string nullstatedate = "nullstatedate";
			public const string organizationdatasyncstateId = "organizationdatasyncstateid";
			public const string organizationdatasyncsubscriptionid = "organizationdatasyncsubscriptionid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string pagingcookie = "pagingcookie";
			public const string partitionid = "partitionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "organizationdatasyncstate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10114;

		[DebuggerNonUserCode()]
		public organizationdatasyncstate()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncstate(Guid organizationdatasyncstateId)
		{
			Entity = new Entity(EntityLogicalName, organizationdatasyncstateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncstate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncstate(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncstate(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public organizationdatasyncstate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Continue from last delta sync</para>
		/// <para>Boolean</para>
		/// <para>continuefromlastdeltasync</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? continuefromlastdeltasync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.continuefromlastdeltasync); }
			set { Entity.Attributes[Fields.continuefromlastdeltasync] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>currentfullsyncfetchxml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string currentfullsyncfetchxml
		{
			get { return Entity.GetAttributeValue<string>(Fields.currentfullsyncfetchxml); }
			set { Entity.Attributes[Fields.currentfullsyncfetchxml] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>currentfullsyncstate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncstateOptionSets.currentfullsyncstate? currentfullsyncstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.currentfullsyncstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncstateOptionSets.currentfullsyncstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.currentfullsyncstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.currentfullsyncstate] = null;
			}
		}

		/// <summary>
		/// <para>Lookup to organizationdatasyncsubscriptionentity</para>
		/// <para>entityname</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference entityname
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.entityname); }
			set { Entity.Attributes[Fields.entityname] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>fullsynconly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? fullsynconly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.fullsynconly); }
			set { Entity.Attributes[Fields.fullsynconly] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>implicitlastdataversion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string implicitlastdataversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.implicitlastdataversion); }
			set { Entity.Attributes[Fields.implicitlastdataversion] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>lastdataversion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string lastdataversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.lastdataversion); }
			set { Entity.Attributes[Fields.lastdataversion] = value; }
		}

		/// <summary>
		/// <para>Last Metadata Version</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>lastmetadataversion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string lastmetadataversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.lastmetadataversion); }
			set { Entity.Attributes[Fields.lastmetadataversion] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>LockExpireTimestamp</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? lockexpiretimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.lockexpiretimestamp); }
			set { Entity.Attributes[Fields.lockexpiretimestamp] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>LockOwner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string lockowner
		{
			get { return Entity.GetAttributeValue<string>(Fields.lockowner); }
			set { Entity.Attributes[Fields.lockowner] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>minactiverowversion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string minactiverowversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.minactiverowversion); }
			set { Entity.Attributes[Fields.minactiverowversion] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>nullstatedate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? nullstatedateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.nullstatedate); }
			set { Entity.Attributes[Fields.nullstatedate] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>OrganizationDataSyncState</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid organizationdatasyncstateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.organizationdatasyncstateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Organization Data Sync Subscription Id</para>
		/// <para>Lookup to organizationdatasyncsubscription</para>
		/// <para>organizationdatasyncsubscriptionid</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference organizationdatasyncsubscriptionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.organizationdatasyncsubscriptionid); }
			set { Entity.Attributes[Fields.organizationdatasyncsubscriptionid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 400</para>
		/// <para>pagingcookie</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string pagingcookie
		{
			get { return Entity.GetAttributeValue<string>(Fields.pagingcookie); }
			set { Entity.Attributes[Fields.pagingcookie] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>PartitionId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string partitionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.partitionid); }
			set { Entity.Attributes[Fields.partitionid] = value; }
		}

		/// <summary>
		/// <para>Status of the OrganizationDataSyncState</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncstateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncstateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the OrganizationDataSyncState</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncstateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncstateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
