//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ExchangeSyncIdMappingOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ExchangeSyncIdMapping : EntityBase
	{
		public struct Fields
		{
			public const string CreatedOn = "createdon";
			public const string ExchangeEntryId = "exchangeentryid";
			public const string ExchangeSyncIdmappingId = "exchangesyncidmappingid";
			public const string FromCrmChangeType = "fromcrmchangetype";
			public const string IsDeletedInExchange = "isdeletedinexchange";
			public const string IsUnlinkedInCRM = "isunlinkedincrm";
			public const string ItemSubject = "itemsubject";
			public const string LastSyncError = "lastsyncerror";
			public const string LastSyncErrorCode = "lastsyncerrorcode";
			public const string LastSyncErrorOccurredOn = "lastsyncerroroccurredon";
			public const string ModifiedOn = "modifiedon";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Retries = "retries";
			public const string ToCrmChangeType = "tocrmchangetype";
			public const string UserDecision = "userdecision";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "exchangesyncidmapping";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4120;

		[DebuggerNonUserCode()]
		public ExchangeSyncIdMapping()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ExchangeSyncIdMapping(Guid ExchangeSyncIdMappingId)
		{
			Entity = new Entity(EntityLogicalName, ExchangeSyncIdMappingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ExchangeSyncIdMapping(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ExchangeSyncIdMapping(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ExchangeSyncIdMapping(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ExchangeSyncIdMapping(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Exchange Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeEntryId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeEntryId); }
			set { Entity.Attributes[Fields.ExchangeEntryId] = value; }
		}

		/// <summary>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ExchangeSyncIdmappingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ExchangeSyncIdmappingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FromCrmChangeType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FromCrmChangeType); }
			set { Entity.Attributes[Fields.FromCrmChangeType] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDeletedInExchange
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDeletedInExchange); }
			set { Entity.Attributes[Fields.IsDeletedInExchange] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsUnlinkedInCRM
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsUnlinkedInCRM); }
			set { Entity.Attributes[Fields.IsUnlinkedInCRM] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 2048</para>
		/// <para>Item Subject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ItemSubject
		{
			get { return Entity.GetAttributeValue<string>(Fields.ItemSubject); }
			set { Entity.Attributes[Fields.ItemSubject] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 2048</para>
		/// <para>Sync Error</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncError
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncError); }
			set { Entity.Attributes[Fields.LastSyncError] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LastSyncErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LastSyncErrorCode); }
			set { Entity.Attributes[Fields.LastSyncErrorCode] = value; }
		}

		/// <summary>
		/// <para>Last Sync Error Time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Sync Error Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncErrorOccurredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncErrorOccurredOn); }
			set { Entity.Attributes[Fields.LastSyncErrorOccurredOn] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Uniqueidentifier</para>
		/// <para>Crm Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Object Type Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Lookup to systemuser, team</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Retries
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Retries); }
			set { Entity.Attributes[Fields.Retries] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ToCrmChangeType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ToCrmChangeType); }
			set { Entity.Attributes[Fields.ToCrmChangeType] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UserDecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UserDecision); }
			set { Entity.Attributes[Fields.UserDecision] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
