//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// Completed = 3
		/// </summary>
		Completed = 3,
		/// <summary>
		/// Locked = 2
		/// </summary>
		Locked = 2,
		/// <summary>
		/// Ready = 0
		/// </summary>
		Ready = 0,
		/// <summary>
		/// Suspended = 1
		/// </summary>
		Suspended = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Canceled = 32
		/// </summary>
		Canceled = 32,
		/// <summary>
		/// Canceling = 22
		/// </summary>
		Canceling = 22,
		/// <summary>
		/// Failed = 31
		/// </summary>
		Failed = 31,
		/// <summary>
		/// In Progress = 20
		/// </summary>
		In_Progress = 20,
		/// <summary>
		/// Paused = 12
		/// </summary>
		Paused = 12,
		/// <summary>
		/// Pausing = 21
		/// </summary>
		Pausing = 21,
		/// <summary>
		/// Retrying = 11
		/// </summary>
		Retrying = 11,
		/// <summary>
		/// Succeeded = 30
		/// </summary>
		Succeeded = 30,
		/// <summary>
		/// Waiting = 10
		/// </summary>
		Waiting = 10,
		/// <summary>
		/// Waiting For Resources = 0
		/// </summary>
		Waiting_For_Resources = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BulkDeleteOperation : EntityBase
	{
		public struct Fields
		{
			public const string AsyncOperationId = "asyncoperationid";
			public const string BulkDeleteOperationId = "bulkdeleteoperationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string FailureCount = "failurecount";
			public const string IsRecurring = "isrecurring";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NextRun = "nextrun";
			public const string OrderedQuerySetXml = "orderedquerysetxml";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string ProcessingQEIndex = "processingqeindex";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SuccessCount = "successcount";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}

		public const string EntityLogicalName = "bulkdeleteoperation";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4424;

		[DebuggerNonUserCode()]
		public BulkDeleteOperation()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkDeleteOperation(Guid BulkDeleteOperationId)
		{
			Entity = new Entity(EntityLogicalName, BulkDeleteOperationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkDeleteOperation(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkDeleteOperation(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkDeleteOperation(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkDeleteOperation(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the system job that created this record</para>
		/// <para>ReadOnly - Lookup to asyncoperation</para>
		/// <para>System Job</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AsyncOperationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AsyncOperationId); }
		}

		/// <summary>
		/// <para>Unique identifier of the bulk deletion job.</para>
		/// <para>ReadOnly - Primary Key - Uniqueidentifier</para>
		/// <para>Bulk Deletion Job</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BulkDeleteOperationId
		{
			get { return Id; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the bulk deletion job.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the bulk deletion job was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the bulkdeleteoperation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Number of records that could not be deleted by the bulk deletion job.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Failures</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailureCount); }
		}

		/// <summary>
		/// <para>Information about if recurrence is defined for the bulk deletion job.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Recurring</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRecurring
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRecurring); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the bulk deletion job.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the bulk deletion job record was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the bulkdeleteoperation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the bulk deletion job.</para>
		/// <para>ReadOnly - String - MaxLength: 256</para>
		/// <para>System Job Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
		}

		/// <summary>
		/// <para>Next scheduled time for the bulk deletion job to run.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Next Run</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? NextRunUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.NextRun); }
		}

		/// <summary>
		/// <para>Fetch XML of the ordered query set.</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OrderedQuerySetXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.OrderedQuerySetXml); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the bulk delete operation.</para>
		/// <para>ReadOnly - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Business unit that owns the bulk deletion job.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Business user what owns the bulk delete operation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Index of the ordered query expression that defines the deletion set.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Query Index</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessingQEIndex
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessingQEIndex); }
		}

		/// <summary>
		/// <para>Status of the bulk deletion job.</para>
		/// <para>ReadOnly - State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StateCode)value.Value;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the bulk deletion job.</para>
		/// <para>ReadOnly - Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StatusCode)value.Value;
			}
		}

		/// <summary>
		/// <para>Number of records deleted by the bulk deletion job.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Deleted</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SuccessCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SuccessCount); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}
