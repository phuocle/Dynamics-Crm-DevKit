//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SocialProfileOptionSets
{
	public enum Community
	{
		/// <summary>
		/// Apple Messages For Business = 16
		/// </summary>
		Apple_Messages_For_Business = 16,
		/// <summary>
		/// Cortana = 5
		/// </summary>
		Cortana = 5,
		/// <summary>
		/// Direct Line = 6
		/// </summary>
		Direct_Line = 6,
		/// <summary>
		/// Direct Line Speech = 8
		/// </summary>
		Direct_Line_Speech = 8,
		/// <summary>
		/// Email = 9
		/// </summary>
		Email = 9,
		/// <summary>
		/// Facebook = 1
		/// </summary>
		Facebook = 1,
		/// <summary>
		/// Google's Business Messages = 17
		/// </summary>
		Googles_Business_Messages = 17,
		/// <summary>
		/// GroupMe = 10
		/// </summary>
		GroupMe = 10,
		/// <summary>
		/// Kik = 11
		/// </summary>
		Kik = 11,
		/// <summary>
		/// Line = 3
		/// </summary>
		Line = 3,
		/// <summary>
		/// Microsoft Teams = 7
		/// </summary>
		Microsoft_Teams = 7,
		/// <summary>
		/// Other = 0
		/// </summary>
		Other = 0,
		/// <summary>
		/// Skype = 13
		/// </summary>
		Skype = 13,
		/// <summary>
		/// Slack = 14
		/// </summary>
		Slack = 14,
		/// <summary>
		/// Telegram = 12
		/// </summary>
		Telegram = 12,
		/// <summary>
		/// Twitter = 2
		/// </summary>
		Twitter = 2,
		/// <summary>
		/// Wechat = 4
		/// </summary>
		Wechat = 4,
		/// <summary>
		/// WhatsApp = 15
		/// </summary>
		WhatsApp = 15
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SocialProfile : EntityBase
	{
		public struct Fields
		{
			public const string Blocked = "blocked";
			public const string Community = "community";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InfluenceScore = "influencescore";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_customeroptout = "msdyn_customeroptout";
			public const string msdyn_ocfollowercount = "msdyn_ocfollowercount";
			public const string msdyn_ocfollowingcount = "msdyn_ocfollowingcount";
			public const string msdyn_ocfriendcount = "msdyn_ocfriendcount";
			public const string msdyn_octwitterhandleid = "msdyn_octwitterhandleid";
			public const string msdyn_phonenumber = "msdyn_phonenumber";
			public const string msdyn_profileimagelink = "msdyn_profileimagelink";
			public const string msdyn_sourceid = "msdyn_sourceid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProfileFullName = "profilefullname";
			public const string ProfileLink = "profilelink";
			public const string ProfileName = "profilename";
			public const string SocialProfileId = "socialprofileid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UniqueProfileID = "uniqueprofileid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "socialprofile";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 99;

		[DebuggerNonUserCode()]
		public SocialProfile()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SocialProfile(Guid SocialProfileId)
		{
			Entity = new Entity(EntityLogicalName, SocialProfileId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SocialProfile(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SocialProfile(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SocialProfile(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SocialProfile(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Identifies if the social profile has been blocked.</para>
		/// <para>Boolean</para>
		/// <para>Blocked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Blocked
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Blocked); }
			set { Entity.Attributes[Fields.Blocked] = value; }
		}

		/// <summary>
		/// <para>Identifies where the social profile originated from, such as Twitter, or Facebook.</para>
		/// <para>Picklist</para>
		/// <para>Social Channel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialProfileOptionSets.Community? Community
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Community);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialProfileOptionSets.Community)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Community] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Community] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the customer that this social profile belongs to.</para>
		/// <para>Lookup to account, contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the score that determines the online social influence of the social profile.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Influence Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? InfluenceScore
		{
			get { return Entity.GetAttributeValue<double?>(Fields.InfluenceScore); }
			set { Entity.Attributes[Fields.InfluenceScore] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Flag specifying whether Customer has opted out of getting messages using this SP.</para>
		/// <para>Boolean</para>
		/// <para>customeroptout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_customeroptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_customeroptout); }
			set { Entity.Attributes[Fields.msdyn_customeroptout] = value; }
		}

		/// <summary>
		/// <para>Customer&apos;s Followers on the Social channel.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Follower Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ocfollowercount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ocfollowercount); }
			set { Entity.Attributes[Fields.msdyn_ocfollowercount] = value; }
		}

		/// <summary>
		/// <para>Customer&apos;s followings on the Social channel</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Followings Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ocfollowingcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ocfollowingcount); }
			set { Entity.Attributes[Fields.msdyn_ocfollowingcount] = value; }
		}

		/// <summary>
		/// <para>Customer&apos;s Friend count on the Social Channel</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Friend Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ocfriendcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ocfriendcount); }
			set { Entity.Attributes[Fields.msdyn_ocfriendcount] = value; }
		}

		/// <summary>
		/// <para>Lookup for Twitter Handle entity.</para>
		/// <para>Lookup to msdyn_octwitterhandle</para>
		/// <para>Twitter Handle Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_octwitterhandleid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_octwitterhandleid); }
			set { Entity.Attributes[Fields.msdyn_octwitterhandleid] = value; }
		}

		/// <summary>
		/// <para>The phone number of the social profile.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Phone number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_phonenumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_phonenumber); }
			set { Entity.Attributes[Fields.msdyn_phonenumber] = value; }
		}

		/// <summary>
		/// <para>Link to the Customer&apos;s Social Channel Profile image.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Profile Image Link</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_profileimagelink
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_profileimagelink); }
			set { Entity.Attributes[Fields.msdyn_profileimagelink] = value; }
		}

		/// <summary>
		/// <para>Source Id field of social profile entity for Apple Business Messages channel.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Source Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sourceid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sourceid); }
			set { Entity.Attributes[Fields.msdyn_sourceid] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Shows the user or team that is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the contact.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the contact.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Shows the display name of the customer on this social profile.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Full Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProfileFullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProfileFullName); }
			set { Entity.Attributes[Fields.ProfileFullName] = value; }
		}

		/// <summary>
		/// <para>Shows the customer that this social profile belongs to.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Profile Link</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProfileLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProfileLink); }
			set { Entity.Attributes[Fields.ProfileLink] = value; }
		}

		/// <summary>
		/// <para>Shows the name of the social profile on the corresponding social channel.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Profile Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProfileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProfileName); }
			set { Entity.Attributes[Fields.ProfileName] = value; }
		}

		/// <summary>
		/// <para>Unique Identifier of the social profile name.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Social Profile ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SocialProfileId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SocialProfileId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Status of the Social Profile</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialProfileOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialProfileOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Social Profile</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialProfileOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialProfileOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Unique ID of the Profile ID</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Unique Profile ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueProfileID
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueProfileID); }
			set { Entity.Attributes[Fields.UniqueProfileID] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version number of the social profile.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
