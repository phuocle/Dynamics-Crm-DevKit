//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_contractperformanceOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_contractperformance : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_BilledAmount = "msdyn_billedamount";
			public const string msdyn_billedamount_Base = "msdyn_billedamount_base";
			public const string msdyn_BillingTypeCode = "msdyn_billingtypecode";
			public const string msdyn_BillingTypeName = "msdyn_billingtypename";
			public const string msdyn_ContractLineId = "msdyn_contractlineid";
			public const string msdyn_contractperformanceId = "msdyn_contractperformanceid";
			public const string msdyn_Contractvalue = "msdyn_contractvalue";
			public const string msdyn_contractvalue_Base = "msdyn_contractvalue_base";
			public const string msdyn_CostIncurred = "msdyn_costincurred";
			public const string msdyn_costincurred_Base = "msdyn_costincurred_base";
			public const string msdyn_EstimatedCost = "msdyn_estimatedcost";
			public const string msdyn_estimatedcost_Base = "msdyn_estimatedcost_base";
			public const string msdyn_ExpectedMargin = "msdyn_expectedmargin";
			public const string msdyn_GrossMargin = "msdyn_grossmargin";
			public const string msdyn_IsProduct = "msdyn_isproduct";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_salesorderid = "msdyn_salesorderid";
			public const string msdyn_TransactionClassification = "msdyn_transactionclassification";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_UnitPrice = "msdyn_unitprice";
			public const string msdyn_unitprice_Base = "msdyn_unitprice_base";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_contractperformance";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10572;

		[DebuggerNonUserCode()]
		public msdyn_contractperformance()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_contractperformance(Guid msdyn_contractperformanceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_contractperformanceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_contractperformance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_contractperformance(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_contractperformance(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_contractperformance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type the Billed amount for the order.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Billed Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_BilledAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_BilledAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BilledAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_BilledAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Billed Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Billed Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_billedamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_billedamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Code to identify billing type.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Biiling Type Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_BillingTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_BillingTypeCode); }
			set { Entity.Attributes[Fields.msdyn_BillingTypeCode] = value; }
		}

		/// <summary>
		/// <para>name of billing Type</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Billing Type Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BillingTypeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BillingTypeName); }
			set { Entity.Attributes[Fields.msdyn_BillingTypeName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of contractline id.</para>
		/// <para>Lookup to salesorderdetail</para>
		/// <para>ContractLine Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContractLineId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContractLineId); }
			set { Entity.Attributes[Fields.msdyn_ContractLineId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Contract Performance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_contractperformanceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_contractperformanceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Type the Contracted amount attached with the contract.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Contract Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Contractvalue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Contractvalue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Contractvalue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Contractvalue] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Contract value in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Contract value (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_contractvalue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_contractvalue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Type the Cost incurred amount for the order.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Cost Incurred</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CostIncurred
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CostIncurred);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CostIncurred] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_CostIncurred] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Cost Incurred in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost Incurred (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_costincurred_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_costincurred_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>1,000,000,000,000.0000</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Estimated Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedCost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Expected margin of contract and contractLine</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Expected Margin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_ExpectedMargin
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_ExpectedMargin); }
			set { Entity.Attributes[Fields.msdyn_ExpectedMargin] = value; }
		}

		/// <summary>
		/// <para>Gross Margin of contract and contract line</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Gross Margin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_GrossMargin
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_GrossMargin); }
			set { Entity.Attributes[Fields.msdyn_GrossMargin] = value; }
		}

		/// <summary>
		/// <para>Record is Product Type or not</para>
		/// <para>Boolean</para>
		/// <para>IsProduct</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsProduct
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsProduct); }
			set { Entity.Attributes[Fields.msdyn_IsProduct] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Choose the related order so that order data and contractPerformance data are linked for reporting and analytics.</para>
		/// <para>Lookup to salesorder</para>
		/// <para>Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_salesorderid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_salesorderid); }
			set { Entity.Attributes[Fields.msdyn_salesorderid] = value; }
		}

		/// <summary>
		/// <para>Array of transaction classification which converted into string</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Transaction Classification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TransactionClassification
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TransactionClassification); }
			set { Entity.Attributes[Fields.msdyn_TransactionClassification] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Unit
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Unit Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_UnitPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_UnitPrice);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UnitPrice] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_UnitPrice] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Unit Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Unit Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitprice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitprice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Contract Performance</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_contractperformanceOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_contractperformanceOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Contract Performance</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_contractperformanceOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_contractperformanceOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
