//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ResourceSpecOptionSets
{
	public enum ObjectTypeCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ResourceSpec : EntityBase
	{
		public struct Fields
		{
			public const string BusinessUnitId = "businessunitid";
			public const string Constraints = "constraints";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EffortRequired = "effortrequired";
			public const string GroupObjectId = "groupobjectid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string ObjectiveExpression = "objectiveexpression";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string RequiredCount = "requiredcount";
			public const string ResourceSpecId = "resourcespecid";
			public const string SameSite = "samesite";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "resourcespec";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4006;

		[DebuggerNonUserCode()]
		public ResourceSpec()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceSpec(Guid ResourceSpecId)
		{
			Entity = new Entity(EntityLogicalName, ResourceSpecId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceSpec(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceSpec(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceSpec(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ResourceSpec(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the business unit with which the resource specification is associated.</para>
		/// <para>Lookup to businessunit</para>
		/// <para>Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}

		/// <summary>
		/// <para>Additional constraints, specified as expressions, which are used to filter a set of valid resources.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Constraints</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Constraints
		{
			get { return Entity.GetAttributeValue<string>(Fields.Constraints); }
			set { Entity.Attributes[Fields.Constraints] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the resource specification.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the resource specification was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the resourcespec.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Selection rule that allows the scheduling engine to select a number of resources from a pool of resources. The rules can be associated with a service.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Number that specifies the minimal effort required from resources.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Effort Required</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? EffortRequired
		{
			get { return Entity.GetAttributeValue<double?>(Fields.EffortRequired); }
			set { Entity.Attributes[Fields.EffortRequired] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the scheduling group with which the resource specification is associated.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Group Object</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? GroupObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.GroupObjectId); }
			set { Entity.Attributes[Fields.GroupObjectId] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the resource specification.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the resource specification was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the resourcespec.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the resource specification.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Search strategy to use for the resource specification.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Objective Expression</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectiveExpression
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectiveExpression); }
			set { Entity.Attributes[Fields.ObjectiveExpression] = value; }
		}

		/// <summary>
		/// <para>Type of entity with which the resource specification is associated.</para>
		/// <para>EntityName</para>
		/// <para>Object Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization with which the resource specification is associated.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Required number of resources that must be available. Use -1 to indicate all resources.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 1,000,000,000</para>
		/// <para>Required Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RequiredCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RequiredCount); }
			set { Entity.Attributes[Fields.RequiredCount] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the resource specification.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Resource Spec</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ResourceSpecId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ResourceSpecId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Value that specifies that all valid and available resources must be in the same site.</para>
		/// <para>Boolean</para>
		/// <para>Same Site</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SameSite
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SameSite); }
			set { Entity.Attributes[Fields.SameSite] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
