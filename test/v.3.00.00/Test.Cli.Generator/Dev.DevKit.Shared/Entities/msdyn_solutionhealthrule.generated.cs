//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_solutionhealthruleOptionSets
{
	public enum msdyn_ResolutionType
	{
		/// <summary>
		/// Auto Heal = 192350000
		/// </summary>
		Auto_Heal = 192350000,
		/// <summary>
		/// Customer Action Required = 192350001
		/// </summary>
		Customer_Action_Required = 192350001,
		/// <summary>
		/// Documenation = 192350002
		/// </summary>
		Documenation = 192350002,
		/// <summary>
		/// None = 192350003
		/// </summary>
		None = 192350003
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_solutionhealthrule : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ComponentType = "msdyn_componenttype";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_OwningSolutionId = "msdyn_owningsolutionid";
			public const string msdyn_ResolutionAction = "msdyn_resolutionaction";
			public const string msdyn_resolutionmessage = "msdyn_resolutionmessage";
			public const string msdyn_ResolutionType = "msdyn_resolutiontype";
			public const string msdyn_solutionhealthruleId = "msdyn_solutionhealthruleid";
			public const string msdyn_solutionhealthrulesetId = "msdyn_solutionhealthrulesetid";
			public const string msdyn_uniquename = "msdyn_uniquename";
			public const string msdyn_Workflow = "msdyn_workflow";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_solutionhealthrule";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10133;

		[DebuggerNonUserCode()]
		public msdyn_solutionhealthrule()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhealthrule(Guid msdyn_solutionhealthruleId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_solutionhealthruleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhealthrule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhealthrule(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhealthrule(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_solutionhealthrule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type of the Component being diagnosed like appmodule, sitemap, systemform etc.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Component Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ComponentType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ComponentType); }
			set { Entity.Attributes[Fields.msdyn_ComponentType] = value; }
		}

		/// <summary>
		/// <para>Rule description.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>OwningSolutionId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_OwningSolutionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_OwningSolutionId); }
			set { Entity.Attributes[Fields.msdyn_OwningSolutionId] = value; }
		}

		/// <summary>
		/// <para>Lookup to workflow</para>
		/// <para>ResolutionAction</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResolutionAction
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResolutionAction); }
			set { Entity.Attributes[Fields.msdyn_ResolutionAction] = value; }
		}

		/// <summary>
		/// <para>This message will be visible to end use when he/she tried to resolve rule failure.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Resolution Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_resolutionmessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_resolutionmessage); }
			set { Entity.Attributes[Fields.msdyn_resolutionmessage] = value; }
		}

		/// <summary>
		/// <para>Type of Resolution action.</para>
		/// <para>Picklist</para>
		/// <para>Resolution Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_solutionhealthruleOptionSets.msdyn_ResolutionType? msdyn_ResolutionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ResolutionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_solutionhealthruleOptionSets.msdyn_ResolutionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ResolutionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ResolutionType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Solution Health Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_solutionhealthruleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_solutionhealthruleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Rule set to which the rule belongs to.</para>
		/// <para>Lookup to msdyn_solutionhealthruleset</para>
		/// <para>Solution Health Rule Set</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_solutionhealthrulesetId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_solutionhealthrulesetId); }
			set { Entity.Attributes[Fields.msdyn_solutionhealthrulesetId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Unique Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_uniquename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_uniquename); }
			set { Entity.Attributes[Fields.msdyn_uniquename] = value; }
		}

		/// <summary>
		/// <para>Required - Lookup to workflow</para>
		/// <para>Workflow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Workflow
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Workflow); }
			set { Entity.Attributes[Fields.msdyn_Workflow] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Solution Health Rule</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_solutionhealthruleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_solutionhealthruleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Solution Health Rule</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_solutionhealthruleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_solutionhealthruleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
