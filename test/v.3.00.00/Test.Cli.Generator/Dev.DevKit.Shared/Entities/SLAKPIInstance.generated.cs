//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SLAKPIInstanceOptionSets
{
	public enum msdyn_ActionExecutionStatus
	{
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Success = 2
		/// </summary>
		Success = 2,
		/// <summary>
		/// Warning = 1
		/// </summary>
		Warning = 1
	}

	public enum Status
	{
		/// <summary>
		/// Canceled = 5
		/// </summary>
		Canceled = 5,
		/// <summary>
		/// In Progress = 0
		/// </summary>
		In_Progress = 0,
		/// <summary>
		/// Nearing Noncompliance = 2
		/// </summary>
		Nearing_Noncompliance = 2,
		/// <summary>
		/// Noncompliant = 1
		/// </summary>
		Noncompliant = 1,
		/// <summary>
		/// Paused = 3
		/// </summary>
		Paused = 3,
		/// <summary>
		/// Succeeded = 4
		/// </summary>
		Succeeded = 4
	}

	public enum WarningTimeReached
	{
		/// <summary>
		/// No = 0
		/// </summary>
		No = 0,
		/// <summary>
		/// Yes = 1
		/// </summary>
		Yes = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SLAKPIInstance : EntityBase
	{
		public struct Fields
		{
			public const string ApplicableFromValue = "applicablefromvalue";
			public const string ComputedFailureTime = "computedfailuretime";
			public const string ComputedWarningTime = "computedwarningtime";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ElapsedTime = "elapsedtime";
			public const string ExchangeRate = "exchangerate";
			public const string FailureTime = "failuretime";
			public const string LastResumeTime = "lastresumetime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ActionExecutionStatus = "msdyn_actionexecutionstatus";
			public const string msdyn_calendarid = "msdyn_calendarid";
			public const string msdyn_prevslakpiinstanceid = "msdyn_prevslakpiinstanceid";
			public const string msdyn_slaitemid = "msdyn_slaitemid";
			public const string Name = "name";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PausedOn = "pausedon";
			public const string Regarding = "regarding";
			public const string RegardingEntityID = "regardingentityid";
			public const string SLAKPIInstanceId = "slakpiinstanceid";
			public const string Status = "status";
			public const string SucceededOn = "succeededon";
			public const string SuccessCheckedAt = "successcheckedat";
			public const string TerminalStateReached = "terminalstatereached";
			public const string TerminalStateTime = "terminalstatetime";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
			public const string WarningTime = "warningtime";
			public const string WarningTimeReached = "warningtimereached";
		}

		public const string EntityLogicalName = "slakpiinstance";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9752;

		[DebuggerNonUserCode()]
		public SLAKPIInstance()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAKPIInstance(Guid SLAKPIInstanceId)
		{
			Entity = new Entity(EntityLogicalName, SLAKPIInstanceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAKPIInstance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAKPIInstance(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAKPIInstance(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAKPIInstance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Applicable From Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ApplicableFromValueUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ApplicableFromValue); }
			set { Entity.Attributes[Fields.ApplicableFromValue] = value; }
		}

		/// <summary>
		/// <para>Computed Failure Date and time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Computed Failure Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ComputedFailureTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ComputedFailureTime); }
			set { Entity.Attributes[Fields.ComputedFailureTime] = value; }
		}

		/// <summary>
		/// <para>Computed Warning Date and time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Computed Warning Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ComputedWarningTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ComputedWarningTime); }
			set { Entity.Attributes[Fields.ComputedWarningTime] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Elapsed Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ElapsedTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ElapsedTime); }
			set { Entity.Attributes[Fields.ElapsedTime] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Enter the date and time when the service level agreement (SLA) key performance indicator (KPI) will expire.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Failure Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? FailureTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.FailureTime); }
			set { Entity.Attributes[Fields.FailureTime] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Resume Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastResumeTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastResumeTime); }
			set { Entity.Attributes[Fields.LastResumeTime] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Action Execution Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SLAKPIInstanceOptionSets.msdyn_ActionExecutionStatus? msdyn_ActionExecutionStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ActionExecutionStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SLAKPIInstanceOptionSets.msdyn_ActionExecutionStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ActionExecutionStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ActionExecutionStatus] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Applicable Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_calendarid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_calendarid); }
			set { Entity.Attributes[Fields.msdyn_calendarid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Previous SLAKPI Instance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_prevslakpiinstanceid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_prevslakpiinstanceid); }
			set { Entity.Attributes[Fields.msdyn_prevslakpiinstanceid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for SLA KPI Instance associated with SLA Item.</para>
		/// <para>Lookup to slaitem</para>
		/// <para>SLAItem</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_slaitemid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_slaitemid); }
			set { Entity.Attributes[Fields.msdyn_slaitemid] = value; }
		}

		/// <summary>
		/// <para>Type a descriptive name for the service level agreement (SLA) key performance indicator (KPI) instance.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user or team.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Owning Business Unit.</para>
		/// <para>Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
			set { Entity.Attributes[Fields.OwningBusinessUnit] = value; }
		}

		/// <summary>
		/// <para>OwningTeam.</para>
		/// <para>Lookup to </para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
			set { Entity.Attributes[Fields.OwningTeam] = value; }
		}

		/// <summary>
		/// <para>Owning User.</para>
		/// <para>Lookup to </para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
			set { Entity.Attributes[Fields.OwningUser] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Paused On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PausedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PausedOn); }
			set { Entity.Attributes[Fields.PausedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the record that this service level agreement (SLA) key performance indicator (KPI) instance is associated with.</para>
		/// <para>Lookup to incident</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Regarding
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Regarding); }
			set { Entity.Attributes[Fields.Regarding] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Regarding ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RegardingEntityID
		{
			get { return Entity.GetAttributeValue<string>(Fields.RegardingEntityID); }
			set { Entity.Attributes[Fields.RegardingEntityID] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the SLA KPI Instance.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>SLA KPI InstanceId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SLAKPIInstanceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SLAKPIInstanceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the service level agreement (SLA) key performance indicator (KPI) instance. For example, the SLA KPI could be Noncompliant or Succeeded.</para>
		/// <para>Picklist</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SLAKPIInstanceOptionSets.Status? Status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SLAKPIInstanceOptionSets.Status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Status] = null;
			}
		}

		/// <summary>
		/// <para>Shows the date and time when the service level agreement (SLA) key performance indicator (KPI) success criteria was met.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Succeeded On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SucceededOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SucceededOn); }
			set { Entity.Attributes[Fields.SucceededOn] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>SuccessCheckedAt</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SuccessCheckedAt
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SuccessCheckedAt); }
			set { Entity.Attributes[Fields.SuccessCheckedAt] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Terminal State Reached</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TerminalStateReached
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TerminalStateReached); }
			set { Entity.Attributes[Fields.TerminalStateReached] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Terminal State Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? TerminalStateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.TerminalStateTime); }
			set { Entity.Attributes[Fields.TerminalStateTime] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Enter the date and time when the service level agreement (SLA) key performance indicator (KPI)will go to a warning state.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Warning Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? WarningTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.WarningTime); }
			set { Entity.Attributes[Fields.WarningTime] = value; }
		}

		/// <summary>
		/// <para>Shows information about whether the case has reached its warning time.</para>
		/// <para>Picklist</para>
		/// <para>Warning Time Reached</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SLAKPIInstanceOptionSets.WarningTimeReached? WarningTimeReached
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.WarningTimeReached);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SLAKPIInstanceOptionSets.WarningTimeReached)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.WarningTimeReached] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.WarningTimeReached] = null;
			}
		}
	}
}
