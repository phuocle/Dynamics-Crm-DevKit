//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets
{
	public enum msdyn_entryStatus
	{
		/// <summary>
		/// Approved = 192350002
		/// </summary>
		Approved = 192350002,
		/// <summary>
		/// Cancelled = 192354320
		/// </summary>
		Cancelled = 192354320,
		/// <summary>
		/// Draft = 192350000
		/// </summary>
		Draft = 192350000,
		/// <summary>
		/// Recall Requested = 192350004
		/// </summary>
		Recall_Requested = 192350004,
		/// <summary>
		/// Returned = 192350001
		/// </summary>
		Returned = 192350001,
		/// <summary>
		/// Submitted = 192350003
		/// </summary>
		Submitted = 192350003
	}

	public enum msdyn_relatedItemType
	{
		/// <summary>
		/// Exchange Appointments = 192350100
		/// </summary>
		Exchange_Appointments = 192350100,
		/// <summary>
		/// None = 192350000
		/// </summary>
		None = 192350000,
		/// <summary>
		/// Resource Assignment = 192350002
		/// </summary>
		Resource_Assignment = 192350002,
		/// <summary>
		/// Resource Booking = 192350001
		/// </summary>
		Resource_Booking = 192350001
	}

	public enum msdyn_targetEntryStatus
	{
		/// <summary>
		/// Approved = 192350002
		/// </summary>
		Approved = 192350002,
		/// <summary>
		/// Cancelled = 192354320
		/// </summary>
		Cancelled = 192354320,
		/// <summary>
		/// Draft = 192350000
		/// </summary>
		Draft = 192350000,
		/// <summary>
		/// Recall Requested = 192350004
		/// </summary>
		Recall_Requested = 192350004,
		/// <summary>
		/// Returned = 192350001
		/// </summary>
		Returned = 192350001,
		/// <summary>
		/// Submitted = 192350003
		/// </summary>
		Submitted = 192350003
	}

	public enum msdyn_type
	{
		/// <summary>
		/// Absence = 192350001
		/// </summary>
		Absence = 192350001,
		/// <summary>
		/// On Break = 192355000
		/// </summary>
		On_Break = 192355000,
		/// <summary>
		/// Overtime = 192354320
		/// </summary>
		Overtime = 192354320,
		/// <summary>
		/// Travel = 192355001
		/// </summary>
		Travel = 192355001,
		/// <summary>
		/// Vacation = 192350002
		/// </summary>
		Vacation = 192350002,
		/// <summary>
		/// Work = 192350000
		/// </summary>
		Work = 192350000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_timeentry : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_bookableresource = "msdyn_bookableresource";
			public const string msdyn_BookableResourceBooking = "msdyn_bookableresourcebooking";
			public const string msdyn_BookingStatus = "msdyn_bookingstatus";
			public const string msdyn_date = "msdyn_date";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_duration = "msdyn_duration";
			public const string msdyn_end = "msdyn_end";
			public const string msdyn_entryStatus = "msdyn_entrystatus";
			public const string msdyn_externalDescription = "msdyn_externaldescription";
			public const string msdyn_internalflags = "msdyn_internalflags";
			public const string msdyn_manager = "msdyn_manager";
			public const string msdyn_project = "msdyn_project";
			public const string msdyn_projectTask = "msdyn_projecttask";
			public const string msdyn_relatedItemId = "msdyn_relateditemid";
			public const string msdyn_relatedItemType = "msdyn_relateditemtype";
			public const string msdyn_resourceCategory = "msdyn_resourcecategory";
			public const string msdyn_ResourceOrganizationalUnitId = "msdyn_resourceorganizationalunitid";
			public const string msdyn_start = "msdyn_start";
			public const string msdyn_targetEntryStatus = "msdyn_targetentrystatus";
			public const string msdyn_timeentryId = "msdyn_timeentryid";
			public const string msdyn_timeentrysettingId = "msdyn_timeentrysettingid";
			public const string msdyn_timeoffrequest = "msdyn_timeoffrequest";
			public const string msdyn_transactioncategory = "msdyn_transactioncategory";
			public const string msdyn_type = "msdyn_type";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_timeentry";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10554;

		[DebuggerNonUserCode()]
		public msdyn_timeentry()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_timeentry(Guid msdyn_timeentryId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_timeentryId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_timeentry(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_timeentry(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_timeentry(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_timeentry(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the bookable resource.</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Bookable Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookableresource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookableresource); }
			set { Entity.Attributes[Fields.msdyn_bookableresource] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Resource Booking associated with Time Entry.</para>
		/// <para>Lookup to bookableresourcebooking</para>
		/// <para>Bookable Resource Booking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BookableResourceBooking
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BookableResourceBooking); }
			set { Entity.Attributes[Fields.msdyn_BookableResourceBooking] = value; }
		}

		/// <summary>
		/// <para>Booking Status</para>
		/// <para>Lookup to bookingstatus</para>
		/// <para>Booking Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BookingStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BookingStatus); }
			set { Entity.Attributes[Fields.msdyn_BookingStatus] = value; }
		}

		/// <summary>
		/// <para>Enter the time entry date.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_dateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_date); }
			set { Entity.Attributes[Fields.msdyn_date] = value; }
		}

		/// <summary>
		/// <para>Type the description of the time entry.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>Shows the time spent.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_duration); }
			set { Entity.Attributes[Fields.msdyn_duration] = value; }
		}

		/// <summary>
		/// <para>The end time of the time entry.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_endUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_end); }
			set { Entity.Attributes[Fields.msdyn_end] = value; }
		}

		/// <summary>
		/// <para>Select the entry status.</para>
		/// <para>Picklist</para>
		/// <para>Entry Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.msdyn_entryStatus? msdyn_entryStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_entryStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.msdyn_entryStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_entryStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_entryStatus] = null;
			}
		}

		/// <summary>
		/// <para>Type the external description of the time entry.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>External Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_externalDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_externalDescription); }
			set { Entity.Attributes[Fields.msdyn_externalDescription] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_internalflags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_internalflags); }
			set { Entity.Attributes[Fields.msdyn_internalflags] = value; }
		}

		/// <summary>
		/// <para>Select the manager of the time entry user. This field is used for approval.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_manager
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_manager); }
			set { Entity.Attributes[Fields.msdyn_manager] = value; }
		}

		/// <summary>
		/// <para>Select the project that the time entry is related to.</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_project); }
			set { Entity.Attributes[Fields.msdyn_project] = value; }
		}

		/// <summary>
		/// <para>Select the project task that the time entry is related to.</para>
		/// <para>Lookup to msdyn_projecttask</para>
		/// <para>Project Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectTask
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectTask); }
			set { Entity.Attributes[Fields.msdyn_projectTask] = value; }
		}

		/// <summary>
		/// <para>The identifier of the related item.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Related item identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_relatedItemId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_relatedItemId); }
			set { Entity.Attributes[Fields.msdyn_relatedItemId] = value; }
		}

		/// <summary>
		/// <para>The related item type</para>
		/// <para>Picklist</para>
		/// <para>Related item type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.msdyn_relatedItemType? msdyn_relatedItemType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_relatedItemType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.msdyn_relatedItemType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_relatedItemType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_relatedItemType] = null;
			}
		}

		/// <summary>
		/// <para>Select the role that the user has in the project that the time entry is for.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_resourceCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_resourceCategory); }
			set { Entity.Attributes[Fields.msdyn_resourceCategory] = value; }
		}

		/// <summary>
		/// <para>Select the organizational unit at the time the entry was registered of the resource who performed the work.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Resourcing Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceOrganizationalUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceOrganizationalUnitId); }
			set { Entity.Attributes[Fields.msdyn_ResourceOrganizationalUnitId] = value; }
		}

		/// <summary>
		/// <para>The start time of the time entry.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_start); }
			set { Entity.Attributes[Fields.msdyn_start] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Target Entry Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.msdyn_targetEntryStatus? msdyn_targetEntryStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_targetEntryStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.msdyn_targetEntryStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_targetEntryStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_targetEntryStatus] = null;
			}
		}

		/// <summary>
		/// <para>The unique identifier for a time entry.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Time Entry</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_timeentryId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_timeentryId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Time Source associated with Time Entry.</para>
		/// <para>Lookup to msdyn_timeentrysetting</para>
		/// <para>Time Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_timeentrysettingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_timeentrysettingId); }
			set { Entity.Attributes[Fields.msdyn_timeentrysettingId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Time Off Request associated with Time Entry. This field is auto-populated when a Time Entry is auto-created from a Time Off Request.</para>
		/// <para>Lookup to msdyn_timeoffrequest</para>
		/// <para>Time Off Request</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_timeoffrequest
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_timeoffrequest); }
			set { Entity.Attributes[Fields.msdyn_timeoffrequest] = value; }
		}

		/// <summary>
		/// <para>Shows the transaction category.</para>
		/// <para>Lookup to msdyn_transactioncategory</para>
		/// <para>Transaction Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_transactioncategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_transactioncategory); }
			set { Entity.Attributes[Fields.msdyn_transactioncategory] = value; }
		}

		/// <summary>
		/// <para>Select the time entry type.</para>
		/// <para>Required - Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.msdyn_type? msdyn_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.msdyn_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_type] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Work Orders associated with Time Entry.</para>
		/// <para>Lookup to msdyn_workorder</para>
		/// <para>Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the Time Entry</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Time Entry</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_timeentryOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
