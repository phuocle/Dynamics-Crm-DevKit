//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.PostRegardingOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PostRegarding : EntityBase
	{
		public struct Fields
		{
			public const string LatestAutoPostModifiedOn = "latestautopostmodifiedon";
			public const string LatestManualPostModifiedOn = "latestmanualpostmodifiedon";
			public const string PostRegardingId = "postregardingid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RegardingObjectOwnerId = "regardingobjectownerid";
			public const string RegardingObjectOwningBusinessUnit = "regardingobjectowningbusinessunit";
		}

		public const string EntityLogicalName = "postregarding";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8002;

		[DebuggerNonUserCode()]
		public PostRegarding()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRegarding(Guid PostRegardingId)
		{
			Entity = new Entity(EntityLogicalName, PostRegardingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRegarding(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRegarding(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRegarding(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRegarding(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Date of Latest Auto Post on the Regarding entity</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Latest Auto Post</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LatestAutoPostModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LatestAutoPostModifiedOn); }
		}

		/// <summary>
		/// <para>Date of Latest Manual Post on the Regarding entity</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Latest Manual Post</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LatestManualPostModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LatestManualPostModifiedOn); }
		}

		/// <summary>
		/// <para>Shows the ID of the record that the post is referring to.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>PostRegardingId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PostRegardingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PostRegardingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Choose the record that the post relates to.</para>
		/// <para>Lookup to account, appointment, competitor, contact, externalparty, incident, knowledgearticle, lead, opportunity, phonecall, processsession, queue, recurringappointmentmaster, systemuser, task, team</para>
		/// <para>RegardingObjectId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the regarding object.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwnerId); }
			set { Entity.Attributes[Fields.RegardingObjectOwnerId] = value; }
		}

		/// <summary>
		/// <para>Select the business unit that owns the regarding object.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Regarding object owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwningBusinessUnit); }
		}
	}
}
