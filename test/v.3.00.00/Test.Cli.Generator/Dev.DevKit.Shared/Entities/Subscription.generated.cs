//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SubscriptionOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Subscription : EntityBase
	{
		public struct Fields
		{
			public const string ClientVersion = "clientversion";
			public const string CompletedSyncStartedOn = "completedsyncstartedon";
			public const string CompletedSyncVersionNumber = "completedsyncversionnumber";
			public const string LastSyncStartedOn = "lastsyncstartedon";
			public const string MachineName = "machinename";
			public const string ReInitialize = "reinitialize";
			public const string ResetForCreate = "resetforcreate";
			public const string SubscriptionId = "subscriptionid";
			public const string SubscriptionType = "subscriptiontype";
			public const string SyncEntryTableName = "syncentrytablename";
			public const string SystemUserId = "systemuserid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}

		public const string EntityLogicalName = "subscription";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 29;

		[DebuggerNonUserCode()]
		public Subscription()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Subscription(Guid SubscriptionId)
		{
			Entity = new Entity(EntityLogicalName, SubscriptionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Subscription(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Subscription(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Subscription(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Subscription(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Client Version.</para>
		/// <para>ReadOnly - String - MaxLength: 48</para>
		/// <para>Client Version.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientVersion); }
		}

		/// <summary>
		/// <para>UTC time when the last successfully completed synchronization was started. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedSyncStartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedSyncStartedOn); }
		}

		/// <summary>
		/// <para>Database time stamp at the start time of the last successfully completed synchronization.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? CompletedSyncVersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.CompletedSyncVersionNumber); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncStartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncStartedOn); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MachineName); }
			set { Entity.Attributes[Fields.MachineName] = value; }
		}

		/// <summary>
		/// <para>Database time stamp at the start time of the last successfully completed synchronization.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ReInitialize
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ReInitialize); }
			set { Entity.Attributes[Fields.ReInitialize] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ResetForCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ResetForCreate); }
			set { Entity.Attributes[Fields.ResetForCreate] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SubscriptionId
		{
			get { return Id; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SubscriptionType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SubscriptionType); }
			set { Entity.Attributes[Fields.SubscriptionType] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - String - MaxLength: 128</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SyncEntryTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SyncEntryTableName); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SystemUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SystemUserId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}
