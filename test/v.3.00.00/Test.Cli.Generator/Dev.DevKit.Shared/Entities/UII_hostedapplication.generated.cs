//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets
{
	public enum msdyusd_APIVersion
	{
		/// <summary>
		/// 1.0 = 100000000
		/// </summary>
		_10 = 100000000
	}

	public enum msdyusd_CRMWindowHostType
	{
		/// <summary>
		/// Agent Scripting = 803750006
		/// </summary>
		Agent_Scripting = 803750006,
		/// <summary>
		/// CCA Hosted Application = 803750002
		/// </summary>
		CCA_Hosted_Application = 803750002,
		/// <summary>
		/// Channel Integration Framework = 803750025
		/// </summary>
		Channel_Integration_Framework = 803750025,
		/// <summary>
		/// Connection Manager = 803750011
		/// </summary>
		Connection_Manager = 803750011,
		/// <summary>
		/// CRM Dialog = 803750000
		/// </summary>
		CRM_Dialog = 803750000,
		/// <summary>
		/// CRM Page = 803750003
		/// </summary>
		CRM_Page = 803750003,
		/// <summary>
		/// CTI Desktop Manager = 803750014
		/// </summary>
		CTI_Desktop_Manager = 803750014,
		/// <summary>
		/// Debugger = 803750016
		/// </summary>
		Debugger = 803750016,
		/// <summary>
		/// Global Manager = 803750001
		/// </summary>
		Global_Manager = 803750001,
		/// <summary>
		/// Interactive Service Hub Page = 803750021
		/// </summary>
		Interactive_Service_Hub_Page = 803750021,
		/// <summary>
		/// KM Control = 803750019
		/// </summary>
		KM_Control = 803750019,
		/// <summary>
		/// Listener Hosted Control = 803750020
		/// </summary>
		Listener_Hosted_Control = 803750020,
		/// <summary>
		/// Panel Layout = 803750015
		/// </summary>
		Panel_Layout = 803750015,
		/// <summary>
		/// Popup Notification = 803750022
		/// </summary>
		Popup_Notification = 803750022,
		/// <summary>
		/// Ribbon Hosted Control = 803750007
		/// </summary>
		Ribbon_Hosted_Control = 803750007,
		/// <summary>
		/// Session Lines = 803750012
		/// </summary>
		Session_Lines = 803750012,
		/// <summary>
		/// Session Tabs = 803750009
		/// </summary>
		Session_Tabs = 803750009,
		/// <summary>
		/// Standard Web Application = 803750004
		/// </summary>
		Standard_Web_Application = 803750004,
		/// <summary>
		/// Todo List = 803750017
		/// </summary>
		Todo_List = 803750017,
		/// <summary>
		/// Toolbar Container = 803750008
		/// </summary>
		Toolbar_Container = 803750008,
		/// <summary>
		/// Tree Bar = 803750013
		/// </summary>
		Tree_Bar = 803750013,
		/// <summary>
		/// Unified Interface KM Control = 803750024
		/// </summary>
		Unified_Interface_KM_Control = 803750024,
		/// <summary>
		/// Unified Interface Page = 803750023
		/// </summary>
		Unified_Interface_Page = 803750023,
		/// <summary>
		/// USD Hosted Control = 803750005
		/// </summary>
		USD_Hosted_Control = 803750005,
		/// <summary>
		/// User Notes = 803750010
		/// </summary>
		User_Notes = 803750010
	}

	public enum msdyusd_HostingType
	{
		/// <summary>
		/// Chrome Process = 803750003
		/// </summary>
		Chrome_Process = 803750003,
		/// <summary>
		/// Edge Process = 803750002
		/// </summary>
		Edge_Process = 803750002,
		/// <summary>
		/// IE Process = 803750001
		/// </summary>
		IE_Process = 803750001,
		/// <summary>
		/// Internal WPF = 803750000
		/// </summary>
		Internal_WPF = 803750000
	}

	public enum msdyusd_PanelType
	{
		/// <summary>
		/// Horizontal Split = 803750005
		/// </summary>
		Horizontal_Split = 803750005,
		/// <summary>
		/// Ribbon Main Panel = 803750003
		/// </summary>
		Ribbon_Main_Panel = 803750003,
		/// <summary>
		/// Standard Main Panel = 803750000
		/// </summary>
		Standard_Main_Panel = 803750000,
		/// <summary>
		/// User Defined = 803750001
		/// </summary>
		User_Defined = 803750001,
		/// <summary>
		/// Vertical Split = 803750004
		/// </summary>
		Vertical_Split = 803750004,
		/// <summary>
		/// XAML = 803750002
		/// </summary>
		XAML = 803750002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}

	public enum UII_AdapterMode
	{
		/// <summary>
		/// Use Adapter = 3
		/// </summary>
		Use_Adapter = 3,
		/// <summary>
		/// Use Automation Adapter (HAT) = 2
		/// </summary>
		Use_Automation_Adapter_HAT = 2,
		/// <summary>
		/// Use No Adapter = 1
		/// </summary>
		Use_No_Adapter = 1
	}

	public enum UII_ApplicationHostingMode
	{
		/// <summary>
		/// Host Outside = 1
		/// </summary>
		Host_Outside = 1,
		/// <summary>
		/// Use Dynamic Positioning = 3
		/// </summary>
		Use_Dynamic_Positioning = 3,
		/// <summary>
		/// Use SetParent = 2
		/// </summary>
		Use_SetParent = 2
	}

	public enum UII_HostedApplicationType
	{
		/// <summary>
		/// External Hosted Application = 3
		/// </summary>
		External_Hosted_Application = 3,
		/// <summary>
		/// Hosted Control = 1
		/// </summary>
		Hosted_Control = 1,
		/// <summary>
		/// Remote Hosted Application = 4
		/// </summary>
		Remote_Hosted_Application = 4,
		/// <summary>
		/// Web Hosted Application = 2
		/// </summary>
		Web_Hosted_Application = 2
	}

	public enum UII_TopLevelWindowMode
	{
		/// <summary>
		/// None = 1
		/// </summary>
		None = 1,
		/// <summary>
		/// Use FindWindow = 3
		/// </summary>
		Use_FindWindow = 3,
		/// <summary>
		/// Use VB Top Level = 2
		/// </summary>
		Use_VB_Top_Level = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class UII_hostedapplication : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyusd_allowmultiplepages = "msdyusd_allowmultiplepages";
			public const string msdyusd_APIVersion = "msdyusd_apiversion";
			public const string msdyusd_AutoLaunch = "msdyusd_autolaunch";
			public const string msdyusd_CifUrl = "msdyusd_cifurl";
			public const string msdyusd_CRMWindowHostType = "msdyusd_crmwindowhosttype";
			public const string msdyusd_CustomParameters = "msdyusd_customparameters";
			public const string msdyusd_DashboardName = "msdyusd_dashboardname";
			public const string msdyusd_DisplayName = "msdyusd_displayname";
			public const string msdyusd_HostingType = "msdyusd_hostingtype";
			public const string msdyusd_MaximumBrowsers = "msdyusd_maximumbrowsers";
			public const string msdyusd_PanelType = "msdyusd_paneltype";
			public const string msdyusd_prefetchdata = "msdyusd_prefetchdata";
			public const string msdyusd_SavedURL = "msdyusd_savedurl";
			public const string msdyusd_ScanforDataParameters = "msdyusd_scanfordataparameters";
			public const string msdyusd_SpecifyURL = "msdyusd_specifyurl";
			public const string msdyusd_TrustedDomain = "msdyusd_trusteddomain";
			public const string msdyusd_XAML = "msdyusd_xaml";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UII_AdapterMode = "uii_adaptermode";
			public const string UII_AdapterType = "uii_adaptertype";
			public const string UII_AdapterURI = "uii_adapteruri";
			public const string UII_ApplicationHostingMode = "uii_applicationhostingmode";
			public const string UII_AssemblyType = "uii_assemblytype";
			public const string UII_AssemblyURI = "uii_assemblyuri";
			public const string UII_AutomationXml = "uii_automationxml";
			public const string UII_DisplayGroup = "uii_displaygroup";
			public const string UII_ExtensionsXml = "uii_extensionsxml";
			public const string UII_ExternalAppArguments = "uii_externalapparguments";
			public const string UII_ExternalAppURI = "uii_externalappuri";
			public const string UII_ExternalAppWorkingDirectory = "uii_externalappworkingdirectory";
			public const string UII_FindWindowClass = "uii_findwindowclass";
			public const string UII_hostedapplicationId = "uii_hostedapplicationid";
			public const string UII_HostedApplicationType = "uii_hostedapplicationtype";
			public const string UII_ICAFileName = "uii_icafilename";
			public const string UII_isAppDynamic = "uii_isappdynamic";
			public const string UII_isAttachInputThread = "uii_isattachinputthread";
			public const string UII_isAutoSignOn = "uii_isautosignon";
			public const string UII_isDependentonWorkflow = "uii_isdependentonworkflow";
			public const string UII_isGlobalApplication = "uii_isglobalapplication";
			public const string UII_isLimittoProcess = "uii_islimittoprocess";
			public const string UII_isNoMessagePump = "uii_isnomessagepump";
			public const string UII_isRestoreifMinimized = "uii_isrestoreifminimized";
			public const string UII_isRetainFrameandCaption = "uii_isretainframeandcaption";
			public const string UII_isRetainonTaskbar = "uii_isretainontaskbar";
			public const string UII_isRetainSystemMenu = "uii_isretainsystemmenu";
			public const string UII_isShowinToolbarDropdown = "uii_isshowintoolbardropdown";
			public const string UII_isShowMenu = "uii_isshowmenu";
			public const string UII_isUsenewbrowserprocess = "uii_isusenewbrowserprocess";
			public const string UII_isWebAppUseToolbar = "uii_iswebappusetoolbar";
			public const string UII_MainWindowAcquisitionTimeout = "uii_mainwindowacquisitiontimeout";
			public const string uii_managedApplication = "uii_managedapplication";
			public const string uii_ManageHosting = "uii_managehosting";
			public const string uii_ManagePopups = "uii_managepopups";
			public const string UII_MinimumSizeX = "uii_minimumsizex";
			public const string UII_MinimumSizeY = "uii_minimumsizey";
			public const string UII_name = "uii_name";
			public const string UII_OptimalSizeX = "uii_optimalsizex";
			public const string UII_OptimalSizeY = "uii_optimalsizey";
			public const string UII_ProcessAcquisitionFilename = "uii_processacquisitionfilename";
			public const string UII_remote_ProcessAcquisitionAttempts = "uii_remote_processacquisitionattempts";
			public const string UII_remote_ProcessAcquisitionDelay = "uii_remote_processacquisitiondelay";
			public const string UII_RemoveSizingControls = "uii_removesizingcontrols";
			public const string UII_SortOrder = "uii_sortorder";
			public const string UII_TopLevelWindowCaption = "uii_toplevelwindowcaption";
			public const string UII_TopLevelWindowMode = "uii_toplevelwindowmode";
			public const string UII_UserCanClose = "uii_usercanclose";
			public const string UII_WebAppURL = "uii_webappurl";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "uii_hostedapplication";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10932;

		[DebuggerNonUserCode()]
		public UII_hostedapplication()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_hostedapplication(Guid UII_hostedapplicationId)
		{
			Entity = new Entity(EntityLogicalName, UII_hostedapplicationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_hostedapplication(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_hostedapplication(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_hostedapplication(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_hostedapplication(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Allow Multiple Pages</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyusd_allowmultiplepages
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyusd_allowmultiplepages); }
			set { Entity.Attributes[Fields.msdyusd_allowmultiplepages] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>API Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.msdyusd_APIVersion? msdyusd_APIVersion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyusd_APIVersion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.msdyusd_APIVersion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyusd_APIVersion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyusd_APIVersion] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Auto Launch</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyusd_AutoLaunch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyusd_AutoLaunch); }
			set { Entity.Attributes[Fields.msdyusd_AutoLaunch] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 300</para>
		/// <para>Channel URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_CifUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_CifUrl); }
			set { Entity.Attributes[Fields.msdyusd_CifUrl] = value; }
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>CRM Window Host Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.msdyusd_CRMWindowHostType? msdyusd_CRMWindowHostType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyusd_CRMWindowHostType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.msdyusd_CRMWindowHostType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyusd_CRMWindowHostType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyusd_CRMWindowHostType] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 500</para>
		/// <para>Custom Parameters</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_CustomParameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_CustomParameters); }
			set { Entity.Attributes[Fields.msdyusd_CustomParameters] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Dashboard Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_DashboardName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_DashboardName); }
			set { Entity.Attributes[Fields.msdyusd_DashboardName] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Display Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_DisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_DisplayName); }
			set { Entity.Attributes[Fields.msdyusd_DisplayName] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Hosting Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.msdyusd_HostingType? msdyusd_HostingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyusd_HostingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.msdyusd_HostingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyusd_HostingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyusd_HostingType] = null;
			}
		}

		/// <summary>
		/// <para>Number of browser instances available within this control before the user is prompted that they hit the limit. (2-20 are valid)</para>
		/// <para>Integer - MinValue: 2 - MaxValue: 20</para>
		/// <para>Maximum Browsers</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyusd_MaximumBrowsers
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyusd_MaximumBrowsers); }
			set { Entity.Attributes[Fields.msdyusd_MaximumBrowsers] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>PanelType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.msdyusd_PanelType? msdyusd_PanelType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyusd_PanelType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.msdyusd_PanelType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyusd_PanelType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyusd_PanelType] = null;
			}
		}

		/// <summary>
		/// <para>Enable or disable pre-fetching of entity data</para>
		/// <para>Boolean</para>
		/// <para>Pre-Fetch Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyusd_prefetchdata
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyusd_prefetchdata); }
			set { Entity.Attributes[Fields.msdyusd_prefetchdata] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Saved URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_SavedURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_SavedURL); }
			set { Entity.Attributes[Fields.msdyusd_SavedURL] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Scan for Data Parameters</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyusd_ScanforDataParameters
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyusd_ScanforDataParameters); }
			set { Entity.Attributes[Fields.msdyusd_ScanforDataParameters] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Specify URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyusd_SpecifyURL
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyusd_SpecifyURL); }
			set { Entity.Attributes[Fields.msdyusd_SpecifyURL] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 500</para>
		/// <para>Trusted Domain</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_TrustedDomain
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_TrustedDomain); }
			set { Entity.Attributes[Fields.msdyusd_TrustedDomain] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>XAML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyusd_XAML
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyusd_XAML); }
			set { Entity.Attributes[Fields.msdyusd_XAML] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the UII Hosted Application</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the UII Hosted Application</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Determines the Adapter Mode</para>
		/// <para>Required - Picklist</para>
		/// <para>Adapter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.UII_AdapterMode? UII_AdapterMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UII_AdapterMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.UII_AdapterMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UII_AdapterMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UII_AdapterMode] = null;
			}
		}

		/// <summary>
		/// <para>Determines the Adapter Type information</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_AdapterType
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_AdapterType); }
			set { Entity.Attributes[Fields.UII_AdapterType] = value; }
		}

		/// <summary>
		/// <para>URI of Adapter .</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>URI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_AdapterURI
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_AdapterURI); }
			set { Entity.Attributes[Fields.UII_AdapterURI] = value; }
		}

		/// <summary>
		/// <para>Determines the Hosting Mode for the Hosted Application</para>
		/// <para>Required - Picklist</para>
		/// <para>Application Hosting Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.UII_ApplicationHostingMode? UII_ApplicationHostingMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UII_ApplicationHostingMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.UII_ApplicationHostingMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UII_ApplicationHostingMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UII_ApplicationHostingMode] = null;
			}
		}

		/// <summary>
		/// <para>Holds Assembly Type information.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Assembly Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_AssemblyType
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_AssemblyType); }
			set { Entity.Attributes[Fields.UII_AssemblyType] = value; }
		}

		/// <summary>
		/// <para>Holds Assembly URI</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Assembly URI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_AssemblyURI
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_AssemblyURI); }
			set { Entity.Attributes[Fields.UII_AssemblyURI] = value; }
		}

		/// <summary>
		/// <para>Stores the Automation Bindings information</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Automation XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_AutomationXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_AutomationXml); }
			set { Entity.Attributes[Fields.UII_AutomationXml] = value; }
		}

		/// <summary>
		/// <para>Determines with Display Group Panel the application needs to be displayed.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Display Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_DisplayGroup
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_DisplayGroup); }
			set { Entity.Attributes[Fields.UII_DisplayGroup] = value; }
		}

		/// <summary>
		/// <para>Stores the Extension Xml file which capture any additional info with the Hosted Application Entity doent allow to enter.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Extensions XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ExtensionsXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ExtensionsXml); }
			set { Entity.Attributes[Fields.UII_ExtensionsXml] = value; }
		}

		/// <summary>
		/// <para>Holds the Arguments for External App Settings</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Arguments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ExternalAppArguments
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ExternalAppArguments); }
			set { Entity.Attributes[Fields.UII_ExternalAppArguments] = value; }
		}

		/// <summary>
		/// <para>Holds the External Application URI .</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>External App URI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ExternalAppURI
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ExternalAppURI); }
			set { Entity.Attributes[Fields.UII_ExternalAppURI] = value; }
		}

		/// <summary>
		/// <para>Working Directory of External Application</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Working Directory</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ExternalAppWorkingDirectory
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ExternalAppWorkingDirectory); }
			set { Entity.Attributes[Fields.UII_ExternalAppWorkingDirectory] = value; }
		}

		/// <summary>
		/// <para>FindWindow class to find the Top Level Window</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>FindWindow Class</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_FindWindowClass
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_FindWindowClass); }
			set { Entity.Attributes[Fields.UII_FindWindowClass] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>UII Hosted Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid UII_hostedapplicationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.UII_hostedapplicationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Determines the Type of Hosted Application</para>
		/// <para>Required - Picklist</para>
		/// <para>Hosted Application Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.UII_HostedApplicationType? UII_HostedApplicationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UII_HostedApplicationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.UII_HostedApplicationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UII_HostedApplicationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UII_HostedApplicationType] = null;
			}
		}

		/// <summary>
		/// <para>Holds the ICA File Path for the Citrix Application</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>ICA File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ICAFileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ICAFileName); }
			set { Entity.Attributes[Fields.UII_ICAFileName] = value; }
		}

		/// <summary>
		/// <para>Determines if the Hosted Application is a Dynamic Application</para>
		/// <para>Boolean</para>
		/// <para>Application is Dynamic</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isAppDynamic
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isAppDynamic); }
			set { Entity.Attributes[Fields.UII_isAppDynamic] = value; }
		}

		/// <summary>
		/// <para>Determines if Attach Input Thread for the Application Process.</para>
		/// <para>Boolean</para>
		/// <para>Attach Input Thread</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isAttachInputThread
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isAttachInputThread); }
			set { Entity.Attributes[Fields.UII_isAttachInputThread] = value; }
		}

		/// <summary>
		/// <para>Enable/Disable Auto Sign On feature for the Hosted Application</para>
		/// <para>Boolean</para>
		/// <para>Auto Sign On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isAutoSignOn
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isAutoSignOn); }
			set { Entity.Attributes[Fields.UII_isAutoSignOn] = value; }
		}

		/// <summary>
		/// <para>Determines the dependency with Workflow</para>
		/// <para>Boolean</para>
		/// <para>Dependent on Workflow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isDependentonWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isDependentonWorkflow); }
			set { Entity.Attributes[Fields.UII_isDependentonWorkflow] = value; }
		}

		/// <summary>
		/// <para>Determines if the application is  Global Application</para>
		/// <para>Boolean</para>
		/// <para>Application is Global</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isGlobalApplication
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isGlobalApplication); }
			set { Entity.Attributes[Fields.UII_isGlobalApplication] = value; }
		}

		/// <summary>
		/// <para>Top Level Window is limit to current Process.</para>
		/// <para>Boolean</para>
		/// <para>Limit to Process ?</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isLimittoProcess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isLimittoProcess); }
			set { Entity.Attributes[Fields.UII_isLimittoProcess] = value; }
		}

		/// <summary>
		/// <para>Determines if Message Pump is set for the Hosted Application</para>
		/// <para>Boolean</para>
		/// <para>No Message Pump</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isNoMessagePump
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isNoMessagePump); }
			set { Entity.Attributes[Fields.UII_isNoMessagePump] = value; }
		}

		/// <summary>
		/// <para>Restore is Minimized</para>
		/// <para>Boolean</para>
		/// <para>Restore if Minimized</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isRestoreifMinimized
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isRestoreifMinimized); }
			set { Entity.Attributes[Fields.UII_isRestoreifMinimized] = value; }
		}

		/// <summary>
		/// <para>For Dynamic Positioned App, this setting determines the Frame and caption retainment</para>
		/// <para>Boolean</para>
		/// <para>Retain Frame and Caption</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isRetainFrameandCaption
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isRetainFrameandCaption); }
			set { Entity.Attributes[Fields.UII_isRetainFrameandCaption] = value; }
		}

		/// <summary>
		/// <para>To Retain on Taskbar</para>
		/// <para>Boolean</para>
		/// <para>Retain on Taskbar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isRetainonTaskbar
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isRetainonTaskbar); }
			set { Entity.Attributes[Fields.UII_isRetainonTaskbar] = value; }
		}

		/// <summary>
		/// <para>For Dynamic Positioned Application , determines if System Menu needs to be retained.</para>
		/// <para>Boolean</para>
		/// <para>Retain System Menu</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isRetainSystemMenu
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isRetainSystemMenu); }
			set { Entity.Attributes[Fields.UII_isRetainSystemMenu] = value; }
		}

		/// <summary>
		/// <para>Determines if the Hosted Application need to be displayed in the Toolbar drop down list.</para>
		/// <para>Boolean</para>
		/// <para>Show in Toolbar Dropdown</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isShowinToolbarDropdown
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isShowinToolbarDropdown); }
			set { Entity.Attributes[Fields.UII_isShowinToolbarDropdown] = value; }
		}

		/// <summary>
		/// <para>Determines if Hosted Application can SHow Menu .</para>
		/// <para>Boolean</para>
		/// <para>Show Menu</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isShowMenu
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isShowMenu); }
			set { Entity.Attributes[Fields.UII_isShowMenu] = value; }
		}

		/// <summary>
		/// <para>Determines if new browser process for every instance.</para>
		/// <para>Boolean</para>
		/// <para>Use new browser process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isUsenewbrowserprocess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isUsenewbrowserprocess); }
			set { Entity.Attributes[Fields.UII_isUsenewbrowserprocess] = value; }
		}

		/// <summary>
		/// <para>Determines if the webapplication toolbar is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Use Toolbar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_isWebAppUseToolbar
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_isWebAppUseToolbar); }
			set { Entity.Attributes[Fields.UII_isWebAppUseToolbar] = value; }
		}

		/// <summary>
		/// <para>Determines the Main Window Acquisition time for the Hosted Application</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Main Window Acquisition Timeout (ms)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_MainWindowAcquisitionTimeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_MainWindowAcquisitionTimeout); }
			set { Entity.Attributes[Fields.UII_MainWindowAcquisitionTimeout] = value; }
		}

		/// <summary>
		/// <para>This application life cycle will be managed through automations.</para>
		/// <para>Boolean</para>
		/// <para>Managed Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? uii_managedApplication
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.uii_managedApplication); }
			set { Entity.Attributes[Fields.uii_managedApplication] = value; }
		}

		/// <summary>
		/// <para>Check this option to manage the hosting of application using automations.</para>
		/// <para>Boolean</para>
		/// <para>Manage Hosting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? uii_ManageHosting
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.uii_ManageHosting); }
			set { Entity.Attributes[Fields.uii_ManageHosting] = value; }
		}

		/// <summary>
		/// <para>Check this option to handle the pop ups using automations.</para>
		/// <para>Boolean</para>
		/// <para>Manage Popups</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? uii_ManagePopups
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.uii_ManagePopups); }
			set { Entity.Attributes[Fields.uii_ManagePopups] = value; }
		}

		/// <summary>
		/// <para>X co-ordinate of Minimum Size</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum Size X</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_MinimumSizeX
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_MinimumSizeX); }
			set { Entity.Attributes[Fields.UII_MinimumSizeX] = value; }
		}

		/// <summary>
		/// <para>Y co-ordinate of Minimum Size</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum Size Y</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_MinimumSizeY
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_MinimumSizeY); }
			set { Entity.Attributes[Fields.UII_MinimumSizeY] = value; }
		}

		/// <summary>
		/// <para>Hosted Application Name.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_name); }
			set { Entity.Attributes[Fields.UII_name] = value; }
		}

		/// <summary>
		/// <para>X co-ordinate of Optimal Size</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Optimal Size X</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_OptimalSizeX
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_OptimalSizeX); }
			set { Entity.Attributes[Fields.UII_OptimalSizeX] = value; }
		}

		/// <summary>
		/// <para>Y co-ordinate of Optimal Size</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Optimal Size Y</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_OptimalSizeY
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_OptimalSizeY); }
			set { Entity.Attributes[Fields.UII_OptimalSizeY] = value; }
		}

		/// <summary>
		/// <para>Process Acquisition FileName for Remote Application</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Process Acquisition Filename</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ProcessAcquisitionFilename
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ProcessAcquisitionFilename); }
			set { Entity.Attributes[Fields.UII_ProcessAcquisitionFilename] = value; }
		}

		/// <summary>
		/// <para>Remote Server Side Process Acquisition Attempts</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Process Acquisition Attempts</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_remote_ProcessAcquisitionAttempts
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_remote_ProcessAcquisitionAttempts); }
			set { Entity.Attributes[Fields.UII_remote_ProcessAcquisitionAttempts] = value; }
		}

		/// <summary>
		/// <para>Remote Server Side Process Acquisition Delay</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Process Acquisition Delay</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_remote_ProcessAcquisitionDelay
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_remote_ProcessAcquisitionDelay); }
			set { Entity.Attributes[Fields.UII_remote_ProcessAcquisitionDelay] = value; }
		}

		/// <summary>
		/// <para>For Dynamic Positioned Application , Determines the existance of Sizing controls</para>
		/// <para>Boolean</para>
		/// <para>Remove Sizing Controls</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_RemoveSizingControls
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_RemoveSizingControls); }
			set { Entity.Attributes[Fields.UII_RemoveSizingControls] = value; }
		}

		/// <summary>
		/// <para>Holds Sorting Order Value for the Hosted Application.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Sort Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_SortOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_SortOrder); }
			set { Entity.Attributes[Fields.UII_SortOrder] = value; }
		}

		/// <summary>
		/// <para>Caption to identify the Top Level Window</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Caption</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_TopLevelWindowCaption
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_TopLevelWindowCaption); }
			set { Entity.Attributes[Fields.UII_TopLevelWindowCaption] = value; }
		}

		/// <summary>
		/// <para>Determines the mode to find the Top Level Window</para>
		/// <para>Required - Picklist</para>
		/// <para>Top Level Window Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.UII_TopLevelWindowMode? UII_TopLevelWindowMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UII_TopLevelWindowMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_hostedapplicationOptionSets.UII_TopLevelWindowMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UII_TopLevelWindowMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UII_TopLevelWindowMode] = null;
			}
		}

		/// <summary>
		/// <para>Determines if the user can close the Hosted Application</para>
		/// <para>Boolean</para>
		/// <para>User Can Close</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UII_UserCanClose
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UII_UserCanClose); }
			set { Entity.Attributes[Fields.UII_UserCanClose] = value; }
		}

		/// <summary>
		/// <para>Holds the Web Application URL</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_WebAppURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_WebAppURL); }
			set { Entity.Attributes[Fields.UII_WebAppURL] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
