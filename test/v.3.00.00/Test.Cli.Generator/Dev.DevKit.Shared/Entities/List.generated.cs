//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ListOptionSets
{
	public enum CreatedFromCode
	{
		/// <summary>
		/// Account = 1
		/// </summary>
		Account = 1,
		/// <summary>
		/// Contact = 2
		/// </summary>
		Contact = 2,
		/// <summary>
		/// Lead = 4
		/// </summary>
		Lead = 4
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class List : EntityBase
	{
		public struct Fields
		{
			public const string Cost = "cost";
			public const string Cost_Base = "cost_base";
			public const string CreatedBy = "createdby";
			public const string CreatedFromCode = "createdfromcode";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string DoNotSendOnOptOut = "donotsendonoptout";
			public const string ExchangeRate = "exchangerate";
			public const string IgnoreInactiveListMembers = "ignoreinactivelistmembers";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string LastUsedOn = "lastusedon";
			public const string ListId = "listid";
			public const string ListName = "listname";
			public const string LockStatus = "lockstatus";
			public const string MemberCount = "membercount";
			public const string MemberType = "membertype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processedMemberCount = "processedmembercount";
			public const string processFetchXML = "processfetchxml";
			public const string ProcessId = "processid";
			public const string Purpose = "purpose";
			public const string Query = "query";
			public const string Source = "source";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string Type = "type";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "list";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4300;

		[DebuggerNonUserCode()]
		public List()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public List(Guid ListId)
		{
			Entity = new Entity(EntityLogicalName, ListId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public List(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public List(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public List(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public List(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Type the cost of obtaining the marketing list.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Cost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Cost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Cost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Cost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Cost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Cost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Select the type of members that this marketing list will contain: accounts, contacts, or leads. Each list can have only one member type and this value can&apos;t be changed after the marketing list is created.</para>
		/// <para>Picklist</para>
		/// <para>Marketing List Member Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ListOptionSets.CreatedFromCode? CreatedFromCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CreatedFromCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ListOptionSets.CreatedFromCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreatedFromCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CreatedFromCode] = null;
			}
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type additional information to describe the marketing list, such as the intended use or date of the last update.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Select whether to override the opt-out settings on leads, contacts, and accounts for the members of the target marketing lists of the campaign activity. If No is selected, those who have chosen to opt out won&apos;t be excluded from the list. This means they will receive marketing materials.</para>
		/// <para>Boolean</para>
		/// <para>Exclude Members Who Opt Out</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotSendOnOptOut
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendOnOptOut); }
			set { Entity.Attributes[Fields.DoNotSendOnOptOut] = value; }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Select whether inactive accounts, contacts, or leads should be excluded from the campaign activity distribution when the marketing list is included in a campaign.</para>
		/// <para>Boolean</para>
		/// <para>Ignore Inactive List Members</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IgnoreInactiveListMembers
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IgnoreInactiveListMembers); }
			set { Entity.Attributes[Fields.IgnoreInactiveListMembers] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the marketing list was last used in a campaign or in the creation of activities or opportunities.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Last Used On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastUsedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedOn); }
			set { Entity.Attributes[Fields.LastUsedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the marketing list.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Marketing List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ListId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ListId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Type a name for the marketing list so that it is identified correctly in lists.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ListName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ListName); }
			set { Entity.Attributes[Fields.ListName] = value; }
		}

		/// <summary>
		/// <para>Select whether the marketing list is locked. If Yes is selected, no additional members can be added to the marketing list.</para>
		/// <para>Boolean</para>
		/// <para>Locked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? LockStatus
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.LockStatus); }
			set { Entity.Attributes[Fields.LockStatus] = value; }
		}

		/// <summary>
		/// <para>Shows the sum of all members in the marketing list.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Members Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MemberCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MemberCount); }
			set { Entity.Attributes[Fields.MemberCount] = value; }
		}

		/// <summary>
		/// <para>Type of the members that can be stored in the marketing list. Please do not remove from form!</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Member Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MemberType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MemberType); }
			set { Entity.Attributes[Fields.MemberType] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>processedMemberCount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? processedMemberCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.processedMemberCount); }
			set { Entity.Attributes[Fields.processedMemberCount] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>processFetchXML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string processFetchXML
		{
			get { return Entity.GetAttributeValue<string>(Fields.processFetchXML); }
			set { Entity.Attributes[Fields.processFetchXML] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Type the intended use of the marketing list to identify its key segments, target offers, or business group.</para>
		/// <para>String - MaxLength: 512</para>
		/// <para>Purpose</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Purpose
		{
			get { return Entity.GetAttributeValue<string>(Fields.Purpose); }
			set { Entity.Attributes[Fields.Purpose] = value; }
		}

		/// <summary>
		/// <para>Query used for retrieving members of marketing list.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Query
		{
			get { return Entity.GetAttributeValue<string>(Fields.Query); }
			set { Entity.Attributes[Fields.Query] = value; }
		}

		/// <summary>
		/// <para>Type the source of the marketing list, such as a third-party supplier or internal database.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Source
		{
			get { return Entity.GetAttributeValue<string>(Fields.Source); }
			set { Entity.Attributes[Fields.Source] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Shows whether the marketing list is active or inactive. Inactive marketing lists are read-only and can&apos;t be edited unless they are reactivated.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ListOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ListOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the marketing list&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ListOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ListOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Select whether you want the marketing list to be static or dynamic. The members in a static marketing list are unchanging. A dynamic marketing list is based on a dynamic query that retrieves the updated list of members</para>
		/// <para>Boolean</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Type
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Type); }
			set { Entity.Attributes[Fields.Type] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
