//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.Entity1OptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Entity1 : EntityBase
	{
		public struct Fields
		{
			public const string AddressTableName = "addresstablename";
			public const string BaseTableName = "basetablename";
			public const string CollectionName = "collectionname";
			public const string ComponentState = "componentstate";
			public const string EntityId = "entityid";
			public const string EntitySetName = "entitysetname";
			public const string ExtensionTableName = "extensiontablename";
			public const string ExternalCollectionName = "externalcollectionname";
			public const string ExternalName = "externalname";
			public const string LogicalCollectionName = "logicalcollectionname";
			public const string LogicalName = "logicalname";
			public const string Name = "name";
			public const string OriginalLocalizedCollectionName = "originallocalizedcollectionname";
			public const string OriginalLocalizedName = "originallocalizedname";
			public const string OverwriteTime = "overwritetime";
			public const string ParentControllingAttributeName = "parentcontrollingattributename";
			public const string PhysicalName = "physicalname";
			public const string ReportViewName = "reportviewname";
			public const string SolutionId = "solutionid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "entity";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9800;

		[DebuggerNonUserCode()]
		public Entity1()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Entity1(Guid Entity1Id)
		{
			Entity = new Entity(EntityLogicalName, Entity1Id);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Entity1(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Entity1(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Entity1(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Entity1(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>The address table name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Address Table Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AddressTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AddressTableName); }
			set { Entity.Attributes[Fields.AddressTableName] = value; }
		}

		/// <summary>
		/// <para>The base table name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Base Table Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BaseTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.BaseTableName); }
			set { Entity.Attributes[Fields.BaseTableName] = value; }
		}

		/// <summary>
		/// <para>The collection name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Collection Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CollectionName); }
			set { Entity.Attributes[Fields.CollectionName] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.Entity1OptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.Entity1OptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the entity.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EntityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EntityId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The entity set name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Entity Set Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntitySetName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntitySetName); }
			set { Entity.Attributes[Fields.EntitySetName] = value; }
		}

		/// <summary>
		/// <para>The extension table name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Extension Table Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExtensionTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExtensionTableName); }
			set { Entity.Attributes[Fields.ExtensionTableName] = value; }
		}

		/// <summary>
		/// <para>The external collection name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>External Collection Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalCollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalCollectionName); }
			set { Entity.Attributes[Fields.ExternalCollectionName] = value; }
		}

		/// <summary>
		/// <para>The external name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>External Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalName); }
			set { Entity.Attributes[Fields.ExternalName] = value; }
		}

		/// <summary>
		/// <para>The logical collection name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Logical Collection Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LogicalCollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LogicalCollectionName); }
			set { Entity.Attributes[Fields.LogicalCollectionName] = value; }
		}

		/// <summary>
		/// <para>The logical name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LogicalName); }
			set { Entity.Attributes[Fields.LogicalName] = value; }
		}

		/// <summary>
		/// <para>The name of this Entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>The original localized collection name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Original Localized Collection Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OriginalLocalizedCollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OriginalLocalizedCollectionName); }
			set { Entity.Attributes[Fields.OriginalLocalizedCollectionName] = value; }
		}

		/// <summary>
		/// <para>The original localized name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Original Localized Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OriginalLocalizedName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OriginalLocalizedName); }
			set { Entity.Attributes[Fields.OriginalLocalizedName] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>The parent controlling attribute name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Parent Controlling Attribute Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParentControllingAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParentControllingAttributeName); }
			set { Entity.Attributes[Fields.ParentControllingAttributeName] = value; }
		}

		/// <summary>
		/// <para>The physical name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Physical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PhysicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PhysicalName); }
			set { Entity.Attributes[Fields.PhysicalName] = value; }
		}

		/// <summary>
		/// <para>The Report view name of this entity.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Report View Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReportViewName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReportViewName); }
			set { Entity.Attributes[Fields.ReportViewName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>The version number of this entity.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
