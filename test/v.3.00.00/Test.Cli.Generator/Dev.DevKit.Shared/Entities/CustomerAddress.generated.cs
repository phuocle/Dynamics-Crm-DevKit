//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.CustomerAddressOptionSets
{
	public enum AddressTypeCode
	{
		/// <summary>
		/// Bill To = 1
		/// </summary>
		Bill_To = 1,
		/// <summary>
		/// Other = 4
		/// </summary>
		Other = 4,
		/// <summary>
		/// Primary = 3
		/// </summary>
		Primary = 3,
		/// <summary>
		/// Ship To = 2
		/// </summary>
		Ship_To = 2
	}

	public enum FreightTermsCode
	{
		/// <summary>
		/// FOB = 1
		/// </summary>
		FOB = 1,
		/// <summary>
		/// No Charge = 2
		/// </summary>
		No_Charge = 2
	}

	public enum ObjectTypeCode
	{
		/// <summary>
		/// Account = 1
		/// </summary>
		Account = 1,
		/// <summary>
		/// Contact = 2
		/// </summary>
		Contact = 2
	}

	public enum ShippingMethodCode
	{
		/// <summary>
		/// Airborne = 1
		/// </summary>
		Airborne = 1,
		/// <summary>
		/// DHL = 2
		/// </summary>
		DHL = 2,
		/// <summary>
		/// FedEx = 3
		/// </summary>
		FedEx = 3,
		/// <summary>
		/// Full Load = 6
		/// </summary>
		Full_Load = 6,
		/// <summary>
		/// Postal Mail = 5
		/// </summary>
		Postal_Mail = 5,
		/// <summary>
		/// UPS = 4
		/// </summary>
		UPS = 4,
		/// <summary>
		/// Will Call = 7
		/// </summary>
		Will_Call = 7
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CustomerAddress : EntityBase
	{
		public struct Fields
		{
			public const string AddressNumber = "addressnumber";
			public const string AddressTypeCode = "addresstypecode";
			public const string City = "city";
			public const string Composite = "composite";
			public const string Country = "country";
			public const string County = "county";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerAddressId = "customeraddressid";
			public const string ExchangeRate = "exchangerate";
			public const string Fax = "fax";
			public const string FreightTermsCode = "freighttermscode";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Latitude = "latitude";
			public const string Line1 = "line1";
			public const string Line2 = "line2";
			public const string Line3 = "line3";
			public const string Longitude = "longitude";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string ParentId = "parentid";
			public const string PostalCode = "postalcode";
			public const string PostOfficeBox = "postofficebox";
			public const string PrimaryContactName = "primarycontactname";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string StateOrProvince = "stateorprovince";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UPSZone = "upszone";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string UTCOffset = "utcoffset";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "customeraddress";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1071;

		[DebuggerNonUserCode()]
		public CustomerAddress()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CustomerAddress(Guid CustomerAddressId)
		{
			Entity = new Entity(EntityLogicalName, CustomerAddressId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CustomerAddress(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CustomerAddress(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CustomerAddress(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CustomerAddress(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the number of the address, to indicate whether the address is the primary, secondary, or other address for the customer.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Address Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AddressNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AddressNumber); }
			set { Entity.Attributes[Fields.AddressNumber] = value; }
		}

		/// <summary>
		/// <para>Select the address type, such as primary or billing.</para>
		/// <para>Picklist</para>
		/// <para>Address Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.AddressTypeCode? AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AddressTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the city for the customer&apos;s address to help identify the location.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string City
		{
			get { return Entity.GetAttributeValue<string>(Fields.City); }
			set { Entity.Attributes[Fields.City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Composite); }
		}

		/// <summary>
		/// <para>Type the country or region for the customer&apos;s address.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Country); }
			set { Entity.Attributes[Fields.Country] = value; }
		}

		/// <summary>
		/// <para>Type the county for the customer&apos;s address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>County</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string County
		{
			get { return Entity.GetAttributeValue<string>(Fields.County); }
			set { Entity.Attributes[Fields.County] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the customer address.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CustomerAddressId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CustomerAddressId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Type the fax number associated with the customer&apos;s address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}

		/// <summary>
		/// <para>Select the freight terms to make sure shipping charges are processed correctly.</para>
		/// <para>Picklist</para>
		/// <para>Freight Terms</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.FreightTermsCode? FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FreightTermsCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Type the latitude value for the customer&apos;s address, for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Latitude); }
			set { Entity.Attributes[Fields.Latitude] = value; }
		}

		/// <summary>
		/// <para>Type the first line of the customer&apos;s address to help identify the location.</para>
		/// <para>Required - String - MaxLength: 250</para>
		/// <para>Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line1); }
			set { Entity.Attributes[Fields.Line1] = value; }
		}

		/// <summary>
		/// <para>Type the second line of the customer&apos;s address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line2); }
			set { Entity.Attributes[Fields.Line2] = value; }
		}

		/// <summary>
		/// <para>Type the third line of the customer&apos;s address.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line3); }
			set { Entity.Attributes[Fields.Line3] = value; }
		}

		/// <summary>
		/// <para>Type the longitude value for the customer&apos;s address, for use in mapping and other applications.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Longitude); }
			set { Entity.Attributes[Fields.Longitude] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a descriptive name for the customer&apos;s address, such as Corporate Headquarters.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Address Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Shows the type code of the customer record to indicate whether the address belongs to a customer account or contact.</para>
		/// <para>EntityName</para>
		/// <para>Object Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Shows the business unit that the record owner belongs to.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the customer address.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose the customer&apos;s address.</para>
		/// <para>Lookup to account, contact</para>
		/// <para>Parent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentId); }
			set { Entity.Attributes[Fields.ParentId] = value; }
		}

		/// <summary>
		/// <para>Type the ZIP Code or postal code for the address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostalCode); }
			set { Entity.Attributes[Fields.PostalCode] = value; }
		}

		/// <summary>
		/// <para>Type the post office box number of the customer&apos;s address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Post Office Box</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostOfficeBox); }
			set { Entity.Attributes[Fields.PostOfficeBox] = value; }
		}

		/// <summary>
		/// <para>Type the name of the primary contact person for the customer&apos;s address.</para>
		/// <para>String - MaxLength: 150</para>
		/// <para>Address Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryContactName); }
			set { Entity.Attributes[Fields.PrimaryContactName] = value; }
		}

		/// <summary>
		/// <para>Select a shipping method for deliveries sent to this address.</para>
		/// <para>Picklist</para>
		/// <para>Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>Type the state or province of the customer&apos;s address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.StateOrProvince); }
			set { Entity.Attributes[Fields.StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Type the primary phone number for the customer&apos;s address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Main Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}

		/// <summary>
		/// <para>Type a second phone number for the customer&apos;s address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Phone 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}

		/// <summary>
		/// <para>Type a third phone number for the customer&apos;s address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Telephone 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Type the UPS zone of the customer&apos;s address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para>String - MaxLength: 4</para>
		/// <para>UPS Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.UPSZone); }
			set { Entity.Attributes[Fields.UPSZone] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Select the time zone for the address.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>UTC Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCOffset); }
			set { Entity.Attributes[Fields.UTCOffset] = value; }
		}

		/// <summary>
		/// <para>Version number of the customer address.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
