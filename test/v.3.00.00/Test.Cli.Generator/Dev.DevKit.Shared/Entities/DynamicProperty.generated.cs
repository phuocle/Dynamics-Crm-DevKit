//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets
{
	public enum DataType
	{
		/// <summary>
		/// Decimal = 1
		/// </summary>
		Decimal = 1,
		/// <summary>
		/// Floating Point Number = 2
		/// </summary>
		Floating_Point_Number = 2,
		/// <summary>
		/// Option Set = 0
		/// </summary>
		Option_Set = 0,
		/// <summary>
		/// Single Line Of Text = 3
		/// </summary>
		Single_Line_Of_Text = 3,
		/// <summary>
		/// Whole Number = 4
		/// </summary>
		Whole_Number = 4
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Draft = 1
		/// </summary>
		Draft = 1,
		/// <summary>
		/// Retired = 2
		/// </summary>
		Retired = 2
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0,
		/// <summary>
		/// Retired = 2
		/// </summary>
		Retired = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class DynamicProperty : EntityBase
	{
		public struct Fields
		{
			public const string BaseDynamicPropertyId = "basedynamicpropertyid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DataType = "datatype";
			public const string DefaultAttributeValue = "defaultattributevalue";
			public const string DefaultValueDecimal = "defaultvaluedecimal";
			public const string DefaultValueDouble = "defaultvaluedouble";
			public const string DefaultValueInteger = "defaultvalueinteger";
			public const string DefaultValueOptionSet = "defaultvalueoptionset";
			public const string DefaultValueString = "defaultvaluestring";
			public const string Description = "description";
			public const string DMTImportState = "dmtimportstate";
			public const string DynamicPropertyId = "dynamicpropertyid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsHidden = "ishidden";
			public const string IsReadOnly = "isreadonly";
			public const string IsRequired = "isrequired";
			public const string MaxLengthString = "maxlengthstring";
			public const string MaxValueDecimal = "maxvaluedecimal";
			public const string MaxValueDouble = "maxvaluedouble";
			public const string MaxValueInteger = "maxvalueinteger";
			public const string MinValueDecimal = "minvaluedecimal";
			public const string MinValueDouble = "minvaluedouble";
			public const string MinValueInteger = "minvalueinteger";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwrittenDynamicPropertyId = "overwrittendynamicpropertyid";
			public const string Precision = "precision";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RootDynamicPropertyId = "rootdynamicpropertyid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "dynamicproperty";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1048;

		[DebuggerNonUserCode()]
		public DynamicProperty()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DynamicProperty(Guid DynamicPropertyId)
		{
			Entity = new Entity(EntityLogicalName, DynamicPropertyId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DynamicProperty(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DynamicProperty(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DynamicProperty(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DynamicProperty(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the property in the product family that this property is being inherited from.</para>
		/// <para>Lookup to dynamicproperty</para>
		/// <para>Base Property</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BaseDynamicPropertyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BaseDynamicPropertyId); }
			set { Entity.Attributes[Fields.BaseDynamicPropertyId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the data type of the property.</para>
		/// <para>Picklist</para>
		/// <para>Data Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.DataType? DataType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.DataType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataType] = null;
			}
		}

		/// <summary>
		/// <para>Default Value</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Default Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultAttributeValue
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultAttributeValue); }
			set { Entity.Attributes[Fields.DefaultAttributeValue] = value; }
		}

		/// <summary>
		/// <para>Shows the default value of the property for a decimal data type.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Default Decimal Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DefaultValueDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.DefaultValueDecimal); }
			set { Entity.Attributes[Fields.DefaultValueDecimal] = value; }
		}

		/// <summary>
		/// <para>Shows the default value of the property for a double data type.</para>
		/// <para>Double - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Default Double Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? DefaultValueDouble
		{
			get { return Entity.GetAttributeValue<double?>(Fields.DefaultValueDouble); }
			set { Entity.Attributes[Fields.DefaultValueDouble] = value; }
		}

		/// <summary>
		/// <para>Shows the default value of the property for a whole number data type.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Default Whole Number Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DefaultValueInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DefaultValueInteger); }
			set { Entity.Attributes[Fields.DefaultValueInteger] = value; }
		}

		/// <summary>
		/// <para>Shows the default value of the property.</para>
		/// <para>Lookup to dynamicpropertyoptionsetitem</para>
		/// <para>Default OptionSet Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultValueOptionSet
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultValueOptionSet); }
			set { Entity.Attributes[Fields.DefaultValueOptionSet] = value; }
		}

		/// <summary>
		/// <para>Shows the default value of the property for a string data type.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Default String Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultValueString
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultValueString); }
			set { Entity.Attributes[Fields.DefaultValueString] = value; }
		}

		/// <summary>
		/// <para>Type a description for the property.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Internal Use Only</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Internal Use Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DMTImportState
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DMTImportState); }
			set { Entity.Attributes[Fields.DMTImportState] = value; }
		}

		/// <summary>
		/// <para>Shows the unique identifier of the property.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Property ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid DynamicPropertyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.DynamicPropertyId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Defines whether the attribute is hidden or shown.</para>
		/// <para>Boolean</para>
		/// <para>Hidden</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsHidden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsHidden); }
			set { Entity.Attributes[Fields.IsHidden] = value; }
		}

		/// <summary>
		/// <para>Defines whether the attribute is read-only or if it can be edited.</para>
		/// <para>Boolean</para>
		/// <para>Read-Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsReadOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsReadOnly); }
			set { Entity.Attributes[Fields.IsReadOnly] = value; }
		}

		/// <summary>
		/// <para>Defines whether the attribute is mandatory.</para>
		/// <para>Boolean</para>
		/// <para>Required</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRequired); }
			set { Entity.Attributes[Fields.IsRequired] = value; }
		}

		/// <summary>
		/// <para>Shows the maximum allowed length of the property for a string data type.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,024</para>
		/// <para>Maximum String Length</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxLengthString
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxLengthString); }
			set { Entity.Attributes[Fields.MaxLengthString] = value; }
		}

		/// <summary>
		/// <para>Shows the maximum allowed value of the property for a decimal data type.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Maximum Decimal Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MaxValueDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MaxValueDecimal); }
			set { Entity.Attributes[Fields.MaxValueDecimal] = value; }
		}

		/// <summary>
		/// <para>Shows the maximum allowed value of the property for a double data type.</para>
		/// <para>Double - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Maximum Double Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? MaxValueDouble
		{
			get { return Entity.GetAttributeValue<double?>(Fields.MaxValueDouble); }
			set { Entity.Attributes[Fields.MaxValueDouble] = value; }
		}

		/// <summary>
		/// <para>Shows the maximum allowed value of the property for a whole number data type.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum Whole Number Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxValueInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxValueInteger); }
			set { Entity.Attributes[Fields.MaxValueInteger] = value; }
		}

		/// <summary>
		/// <para>Shows the minimum allowed value of the property for a decimal data type.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Minimum Decimal Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MinValueDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MinValueDecimal); }
			set { Entity.Attributes[Fields.MinValueDecimal] = value; }
		}

		/// <summary>
		/// <para>Shows the minimum allowed value of the property for a double data type.</para>
		/// <para>Double - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Minimum Double Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? MinValueDouble
		{
			get { return Entity.GetAttributeValue<double?>(Fields.MinValueDouble); }
			set { Entity.Attributes[Fields.MinValueDouble] = value; }
		}

		/// <summary>
		/// <para>Shows the minimum allowed value of the property for a whole number data type.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum Whole Number Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinValueInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinValueInteger); }
			set { Entity.Attributes[Fields.MinValueInteger] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type the name of the property.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Shows the related overwritten property.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Overwritten Property</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OverwrittenDynamicPropertyId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OverwrittenDynamicPropertyId); }
			set { Entity.Attributes[Fields.OverwrittenDynamicPropertyId] = value; }
		}

		/// <summary>
		/// <para>Shows the allowed precision of the property for a whole number data type.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 5</para>
		/// <para>Precision</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Precision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Precision); }
			set { Entity.Attributes[Fields.Precision] = value; }
		}

		/// <summary>
		/// <para>Choose the product that the property is associated with.</para>
		/// <para>Lookup to product</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Shows the root property that this property is derived from.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Root Property</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RootDynamicPropertyId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RootDynamicPropertyId); }
			set { Entity.Attributes[Fields.RootDynamicPropertyId] = value; }
		}

		/// <summary>
		/// <para>Shows the state of the property.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Shows whether the property is active or inactive.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
