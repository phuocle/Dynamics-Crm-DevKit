//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.AppModuleOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum NavigationType
	{
		/// <summary>
		/// Multi session = 1
		/// </summary>
		Multi_session = 1,
		/// <summary>
		/// Single session = 0
		/// </summary>
		Single_session = 0
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Deleted = 3
		/// </summary>
		Deleted = 3,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class AppModule : EntityBase
	{
		public struct Fields
		{
			public const string AppModuleId = "appmoduleid";
			public const string AppModuleIdUnique = "appmoduleidunique";
			public const string AppModuleVersion = "appmoduleversion";
			public const string AppModuleXmlManaged = "appmodulexmlmanaged";
			public const string ClientType = "clienttype";
			public const string ComponentState = "componentstate";
			public const string ConfigXML = "configxml";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string Descriptor = "descriptor";
			public const string EventHandlers = "eventhandlers";
			public const string FormFactor = "formfactor";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsDefault = "isdefault";
			public const string IsFeatured = "isfeatured";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NavigationType = "navigationtype";
			public const string OptimizedFor = "optimizedfor";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string PublishedOn = "publishedon";
			public const string PublisherId = "publisherid";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string UniqueName = "uniquename";
			public const string URL = "url";
			public const string VersionNumber = "versionnumber";
			public const string WebResourceId = "webresourceid";
			public const string WelcomePageId = "welcomepageid";
		}

		public const string EntityLogicalName = "appmodule";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9006;

		[DebuggerNonUserCode()]
		public AppModule()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModule(Guid AppModuleId)
		{
			Entity = new Entity(EntityLogicalName, AppModuleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModule(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModule(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>AppModuleId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AppModuleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AppModuleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the App Module used when synchronizing customizations for the Microsoft Dynamics 365 client for Outlook</para>
		/// <para>Uniqueidentifier</para>
		/// <para>App Module Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AppModuleIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AppModuleIdUnique); }
			set { Entity.Attributes[Fields.AppModuleIdUnique] = value; }
		}

		/// <summary>
		/// <para>App Module Version</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>App Module Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppModuleVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppModuleVersion); }
			set { Entity.Attributes[Fields.AppModuleVersion] = value; }
		}

		/// <summary>
		/// <para>App Module Xml Managed</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppModuleXmlManaged
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppModuleXmlManaged); }
			set { Entity.Attributes[Fields.AppModuleXmlManaged] = value; }
		}

		/// <summary>
		/// <para>Client Type such as Web or UCI</para>
		/// <para>Required - Integer - MinValue: 1 - MaxValue: 31</para>
		/// <para>Client Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ClientType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ClientType); }
			set { Entity.Attributes[Fields.ClientType] = value; }
		}

		/// <summary>
		/// <para>For internal use only</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppModuleOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppModuleOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Contains configuration XML</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConfigXML
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConfigXML); }
			set { Entity.Attributes[Fields.ConfigXML] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description for entity</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>App Module Descriptor</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para>Descriptor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Descriptor
		{
			get { return Entity.GetAttributeValue<string>(Fields.Descriptor); }
		}

		/// <summary>
		/// <para>App Module Event Handlers</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Event Handlers</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EventHandlers
		{
			get { return Entity.GetAttributeValue<string>(Fields.EventHandlers); }
			set { Entity.Attributes[Fields.EventHandlers] = value; }
		}

		/// <summary>
		/// <para>Form Factor</para>
		/// <para>Required - Integer - MinValue: 1 - MaxValue: 8</para>
		/// <para>Form Factor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FormFactor
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FormFactor); }
			set { Entity.Attributes[Fields.FormFactor] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Version in which the similarity rule is introduced.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Is Default</para>
		/// <para>Required - Boolean</para>
		/// <para>Is Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefault); }
			set { Entity.Attributes[Fields.IsDefault] = value; }
		}

		/// <summary>
		/// <para>Is Featured</para>
		/// <para>Boolean</para>
		/// <para>IsFeatured</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFeatured
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFeatured); }
			set { Entity.Attributes[Fields.IsFeatured] = value; }
		}

		/// <summary>
		/// <para>Is Managed</para>
		/// <para>ReadOnly - Required - Boolean</para>
		/// <para>IsManaged</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of App Module</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>App navigation type</para>
		/// <para>Picklist</para>
		/// <para>Navigation type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppModuleOptionSets.NavigationType? NavigationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.NavigationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppModuleOptionSets.NavigationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.NavigationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.NavigationType] = null;
			}
		}

		/// <summary>
		/// <para>The client that this app is optimized for</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Optimized Client</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OptimizedFor
		{
			get { return Entity.GetAttributeValue<string>(Fields.OptimizedFor); }
			set { Entity.Attributes[Fields.OptimizedFor] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the app.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Internal use only</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Date and time when the record was published.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Published On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PublishedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PublishedOn); }
			set { Entity.Attributes[Fields.PublishedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the publisher.</para>
		/// <para>Required - Lookup to publisher</para>
		/// <para>Publisher</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PublisherId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PublisherId); }
			set { Entity.Attributes[Fields.PublisherId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Status of the Model-driven App</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppModuleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppModuleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Model-driven App</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppModuleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppModuleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Unique Name of App Module</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Unique Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}

		/// <summary>
		/// <para>Contains URL</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string URL
		{
			get { return Entity.GetAttributeValue<string>(Fields.URL); }
			set { Entity.Attributes[Fields.URL] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Unique identifier of the Web Resource</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Web Resource Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? WebResourceId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.WebResourceId); }
			set { Entity.Attributes[Fields.WebResourceId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the Web Resource as Welcome Page Id</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Welcome Page Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? WelcomePageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.WelcomePageId); }
			set { Entity.Attributes[Fields.WelcomePageId] = value; }
		}
	}
}
