//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets
{
	public enum CreateAccess
	{
		/// <summary>
		/// Allowed = 4
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// Not Allowed = 0
		/// </summary>
		Not_Allowed = 0
	}

	public enum ReadAccess
	{
		/// <summary>
		/// Allowed = 4
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// Not Allowed = 0
		/// </summary>
		Not_Allowed = 0
	}

	public enum UpdateAccess
	{
		/// <summary>
		/// Allowed = 4
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// Not Allowed = 0
		/// </summary>
		Not_Allowed = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PrincipalAttributeAccessMap : EntityBase
	{
		public struct Fields
		{
			public const string AttributeId = "attributeid";
			public const string CreateAccess = "createaccess";
			public const string PrincipalAttributeAccessMapId = "principalattributeaccessmapid";
			public const string PrincipalId = "principalid";
			public const string ReadAccess = "readaccess";
			public const string UpdateAccess = "updateaccess";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "principalattributeaccessmap";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 43;

		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(Guid PrincipalAttributeAccessMapId)
		{
			Entity = new Entity(EntityLogicalName, PrincipalAttributeAccessMapId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AttributeId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AttributeId); }
			set { Entity.Attributes[Fields.AttributeId] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.CreateAccess? CreateAccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CreateAccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.CreateAccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreateAccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CreateAccess] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the principal attribute access.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PrincipalAttributeAccessMapId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PrincipalAttributeAccessMapId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrincipalId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrincipalId); }
			set { Entity.Attributes[Fields.PrincipalId] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadAccess? ReadAccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReadAccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadAccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReadAccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReadAccess] = null;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.UpdateAccess? UpdateAccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UpdateAccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.UpdateAccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UpdateAccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UpdateAccess] = null;
			}
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
