//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets
{
	public enum msdyn_ExpenseStatus
	{
		/// <summary>
		/// Approved = 192350002
		/// </summary>
		Approved = 192350002,
		/// <summary>
		/// Draft = 192350000
		/// </summary>
		Draft = 192350000,
		/// <summary>
		/// Paid = 192350005
		/// </summary>
		Paid = 192350005,
		/// <summary>
		/// Posted = 192350004
		/// </summary>
		Posted = 192350004,
		/// <summary>
		/// Recall Requested = 192350006
		/// </summary>
		Recall_Requested = 192350006,
		/// <summary>
		/// Rejected = 192350003
		/// </summary>
		Rejected = 192350003,
		/// <summary>
		/// Submitted = 192350001
		/// </summary>
		Submitted = 192350001
	}

	public enum msdyn_targetExpenseStatus
	{
		/// <summary>
		/// Approved = 192350002
		/// </summary>
		Approved = 192350002,
		/// <summary>
		/// Draft = 192350000
		/// </summary>
		Draft = 192350000,
		/// <summary>
		/// Paid = 192350005
		/// </summary>
		Paid = 192350005,
		/// <summary>
		/// Posted = 192350004
		/// </summary>
		Posted = 192350004,
		/// <summary>
		/// Recall Requested = 192350006
		/// </summary>
		Recall_Requested = 192350006,
		/// <summary>
		/// Rejected = 192350003
		/// </summary>
		Rejected = 192350003,
		/// <summary>
		/// Submitted = 192350001
		/// </summary>
		Submitted = 192350001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Approved = 867380003
		/// </summary>
		Approved = 867380003,
		/// <summary>
		/// Draft = 867380000
		/// </summary>
		Draft = 867380000,
		/// <summary>
		/// Paid = 867380005
		/// </summary>
		Paid = 867380005,
		/// <summary>
		/// Posted = 867380004
		/// </summary>
		Posted = 867380004,
		/// <summary>
		/// Rejected = 867380001
		/// </summary>
		Rejected = 867380001,
		/// <summary>
		/// Submitted = 867380002
		/// </summary>
		Submitted = 867380002
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_expense : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Amount = "msdyn_amount";
			public const string msdyn_amount_Base = "msdyn_amount_base";
			public const string msdyn_bookableresource = "msdyn_bookableresource";
			public const string msdyn_ExpenseCategory = "msdyn_expensecategory";
			public const string msdyn_expenseId = "msdyn_expenseid";
			public const string msdyn_ExpenseStatus = "msdyn_expensestatus";
			public const string msdyn_externaldescription = "msdyn_externaldescription";
			public const string msdyn_manager = "msdyn_manager";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_Price = "msdyn_price";
			public const string msdyn_price_Base = "msdyn_price_base";
			public const string msdyn_Project = "msdyn_project";
			public const string msdyn_Quantity = "msdyn_quantity";
			public const string msdyn_ResourceOrganizationalUnitId = "msdyn_resourceorganizationalunitid";
			public const string msdyn_Salestaxamount = "msdyn_salestaxamount";
			public const string msdyn_salestaxamount_Base = "msdyn_salestaxamount_base";
			public const string msdyn_targetExpenseStatus = "msdyn_targetexpensestatus";
			public const string msdyn_totalamount = "msdyn_totalamount";
			public const string msdyn_totalamount_Base = "msdyn_totalamount_base";
			public const string msdyn_TransactionDate = "msdyn_transactiondate";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_UnitGroup = "msdyn_unitgroup";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_expense";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10503;

		[DebuggerNonUserCode()]
		public msdyn_expense()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_expense(Guid msdyn_expenseId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_expenseId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_expense(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_expense(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_expense(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_expense(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enter the total amount for expense.</para>
		/// <para>Required - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Subtotal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Amount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Amount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Amount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Amount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the bookable resource..</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Bookable Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookableresource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookableresource); }
			set { Entity.Attributes[Fields.msdyn_bookableresource] = value; }
		}

		/// <summary>
		/// <para>Enter the expense category.</para>
		/// <para>Required - Lookup to msdyn_expensecategory</para>
		/// <para>Expense Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ExpenseCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ExpenseCategory); }
			set { Entity.Attributes[Fields.msdyn_ExpenseCategory] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Expense</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_expenseId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_expenseId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the status of the expense entry.</para>
		/// <para>Picklist</para>
		/// <para>Expense Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets.msdyn_ExpenseStatus? msdyn_ExpenseStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ExpenseStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets.msdyn_ExpenseStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ExpenseStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ExpenseStatus] = null;
			}
		}

		/// <summary>
		/// <para>The external comments of the expense entry.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>External Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_externaldescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_externaldescription); }
			set { Entity.Attributes[Fields.msdyn_externaldescription] = value; }
		}

		/// <summary>
		/// <para>Select the manager of the expense user. This field is used for approval.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_manager
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_manager); }
			set { Entity.Attributes[Fields.msdyn_manager] = value; }
		}

		/// <summary>
		/// <para>Enter the expense&apos;s purpose.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Expense Purpose</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Enter the Unit Price</para>
		/// <para>Required - Money - MinValue: -1,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Unit Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Price
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Price);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Price] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Price] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_price_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_price_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the project.</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Project); }
			set { Entity.Attributes[Fields.msdyn_Project] = value; }
		}

		/// <summary>
		/// <para>Enter the Quantity</para>
		/// <para>Required - Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Quantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_Quantity); }
			set { Entity.Attributes[Fields.msdyn_Quantity] = value; }
		}

		/// <summary>
		/// <para>Select the organizational unit at the time the entry was registered of the resource who had the expense.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Resourcing Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceOrganizationalUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceOrganizationalUnitId); }
			set { Entity.Attributes[Fields.msdyn_ResourceOrganizationalUnitId] = value; }
		}

		/// <summary>
		/// <para>Enter the sales tax amount.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales tax amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Salestaxamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Salestaxamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Salestaxamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Salestaxamount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Sales tax amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Sales tax amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_salestaxamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_salestaxamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the status that the record will be transitioned to asynchronously. Currently, this is only implemented from submission to approved.</para>
		/// <para>Picklist</para>
		/// <para>Target Expense Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets.msdyn_targetExpenseStatus? msdyn_targetExpenseStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_targetExpenseStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets.msdyn_targetExpenseStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_targetExpenseStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_targetExpenseStatus] = null;
			}
		}

		/// <summary>
		/// <para>Shows the total amount of the expense entry.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the value of the total amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the date of the expense transaction.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Transaction Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TransactionDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TransactionDate); }
			set { Entity.Attributes[Fields.msdyn_TransactionDate] = value; }
		}

		/// <summary>
		/// <para>Enter the Unit</para>
		/// <para>Required - Lookup to uom</para>
		/// <para>Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}

		/// <summary>
		/// <para>Enter the Unit Group</para>
		/// <para>Required - Lookup to uomschedule</para>
		/// <para>Unit Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_UnitGroup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_UnitGroup); }
			set { Entity.Attributes[Fields.msdyn_UnitGroup] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the Expense</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Expense</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_expenseOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the currency associated with the entity.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
