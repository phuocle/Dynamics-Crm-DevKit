//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets
{
	public enum AuthType
	{
		/// <summary>
		/// Access Key = 8
		/// </summary>
		Access_Key = 8,
		/// <summary>
		/// ACS = 1
		/// </summary>
		ACS = 1,
		/// <summary>
		/// Connection String = 7
		/// </summary>
		Connection_String = 7,
		/// <summary>
		/// Http Header = 5
		/// </summary>
		Http_Header = 5,
		/// <summary>
		/// Http Query String = 6
		/// </summary>
		Http_Query_String = 6,
		/// <summary>
		/// SAS Key = 2
		/// </summary>
		SAS_Key = 2,
		/// <summary>
		/// SAS Token = 3
		/// </summary>
		SAS_Token = 3,
		/// <summary>
		/// Webhook Key = 4
		/// </summary>
		Webhook_Key = 4
	}

	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum ConnectionMode
	{
		/// <summary>
		/// Federated = 2
		/// </summary>
		Federated = 2,
		/// <summary>
		/// Normal = 1
		/// </summary>
		Normal = 1
	}

	public enum Contract
	{
		/// <summary>
		/// Event Grid = 9
		/// </summary>
		Event_Grid = 9,
		/// <summary>
		/// Event Hub = 7
		/// </summary>
		Event_Hub = 7,
		/// <summary>
		/// OneWay = 1
		/// </summary>
		OneWay = 1,
		/// <summary>
		/// Queue = 2
		/// </summary>
		Queue = 2,
		/// <summary>
		/// Queue (Persistent) = 6
		/// </summary>
		Queue_Persistent = 6,
		/// <summary>
		/// Rest = 3
		/// </summary>
		Rest = 3,
		/// <summary>
		/// Topic = 5
		/// </summary>
		Topic = 5,
		/// <summary>
		/// TwoWay = 4
		/// </summary>
		TwoWay = 4,
		/// <summary>
		/// Webhook = 8
		/// </summary>
		Webhook = 8
	}

	public enum MessageCharset
	{
		/// <summary>
		/// Default = 0
		/// </summary>
		Default = 0,
		/// <summary>
		/// UTF8 = 1
		/// </summary>
		UTF8 = 1
	}

	public enum MessageFormat
	{
		/// <summary>
		/// Binary XML = 1
		/// </summary>
		Binary_XML = 1,
		/// <summary>
		/// Json = 2
		/// </summary>
		Json = 2,
		/// <summary>
		/// Text XML = 3
		/// </summary>
		Text_XML = 3
	}

	public enum NamespaceFormat
	{
		/// <summary>
		/// Namespace Address = 2
		/// </summary>
		Namespace_Address = 2,
		/// <summary>
		/// Namespace Name = 1
		/// </summary>
		Namespace_Name = 1
	}

	public enum SchemaType
	{
		/// <summary>
		/// Cloud Events = 2
		/// </summary>
		Cloud_Events = 2,
		/// <summary>
		/// Event Grid = 1
		/// </summary>
		Event_Grid = 1
	}

	public enum UserClaim
	{
		/// <summary>
		/// None = 1
		/// </summary>
		None = 1,
		/// <summary>
		/// UserId = 2
		/// </summary>
		UserId = 2,
		/// <summary>
		/// UserInfo = 3
		/// </summary>
		UserInfo = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ServiceEndpoint : EntityBase
	{
		public struct Fields
		{
			public const string AuthType = "authtype";
			public const string AuthValue = "authvalue";
			public const string ComponentState = "componentstate";
			public const string ConnectionMode = "connectionmode";
			public const string Contract = "contract";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string IntroducedVersion = "introducedversion";
			public const string IsAuthValueSet = "isauthvalueset";
			public const string IsManaged = "ismanaged";
			public const string IsSASKeySet = "issaskeyset";
			public const string IsSASTokenSet = "issastokenset";
			public const string KeyVaultReferenceId = "keyvaultreferenceid";
			public const string MessageCharset = "messagecharset";
			public const string MessageFormat = "messageformat";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NamespaceAddress = "namespaceaddress";
			public const string NamespaceFormat = "namespaceformat";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string Path = "path";
			public const string RuntimeIntegrationProperties = "runtimeintegrationproperties";
			public const string SASKey = "saskey";
			public const string SASKeyName = "saskeyname";
			public const string SASToken = "sastoken";
			public const string SchemaType = "schematype";
			public const string ServiceEndpointId = "serviceendpointid";
			public const string ServiceEndpointIdUnique = "serviceendpointidunique";
			public const string SolutionId = "solutionid";
			public const string SolutionNamespace = "solutionnamespace";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string Url = "url";
			public const string UseKeyVaultConfiguration = "usekeyvaultconfiguration";
			public const string UserClaim = "userclaim";
		}

		public const string EntityLogicalName = "serviceendpoint";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4618;

		[DebuggerNonUserCode()]
		public ServiceEndpoint()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ServiceEndpoint(Guid ServiceEndpointId)
		{
			Entity = new Entity(EntityLogicalName, ServiceEndpointId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ServiceEndpoint(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ServiceEndpoint(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ServiceEndpoint(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ServiceEndpoint(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Specifies mode of authentication with SB</para>
		/// <para>Picklist</para>
		/// <para>Specifies mode of authentication with SB</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.AuthType? AuthType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AuthType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.AuthType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AuthType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AuthType] = null;
			}
		}

		/// <summary>
		/// <para>Authentication Value</para>
		/// <para>String - MaxLength: 2048</para>
		/// <para>Authentication Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AuthValue
		{
			get { return Entity.GetAttributeValue<string>(Fields.AuthValue); }
			set { Entity.Attributes[Fields.AuthValue] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Connection mode to contact the service endpoint.</para>
		/// <para>Picklist</para>
		/// <para>Connection Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ConnectionMode? ConnectionMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ConnectionMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ConnectionMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ConnectionMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ConnectionMode] = null;
			}
		}

		/// <summary>
		/// <para>Type of the endpoint contract.</para>
		/// <para>Picklist</para>
		/// <para>Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.Contract? Contract
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Contract);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.Contract)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Contract] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Contract] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the service endpoint.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the service endpoint was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the service endpoint.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the service endpoint.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAuthValueSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAuthValueSet); }
		}

		/// <summary>
		/// <para>Information that specifies whether this component is managed.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSASKeySet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSASKeySet); }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSASTokenSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSASTokenSet); }
		}

		/// <summary>
		/// <para>Unique identifier for keyvaultreference associated with serviceendpoint.</para>
		/// <para>Lookup to keyvaultreference</para>
		/// <para>KeyVaultReferenceId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference KeyVaultReferenceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.KeyVaultReferenceId); }
			set { Entity.Attributes[Fields.KeyVaultReferenceId] = value; }
		}

		/// <summary>
		/// <para>Specifies the character encoding for message content</para>
		/// <para>Picklist</para>
		/// <para>Specifies the character encoding to be used for messages sent to a service endpoint</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageCharset? MessageCharset
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MessageCharset);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageCharset)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MessageCharset] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MessageCharset] = null;
			}
		}

		/// <summary>
		/// <para>Content type of the message</para>
		/// <para>Picklist</para>
		/// <para>Content type of the message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageFormat? MessageFormat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MessageFormat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageFormat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MessageFormat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MessageFormat] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the service endpoint.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the service endpoint was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the service endpoint.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of Service end point.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Full service endpoint address.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>Namespace Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NamespaceAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.NamespaceAddress); }
			set { Entity.Attributes[Fields.NamespaceAddress] = value; }
		}

		/// <summary>
		/// <para>Format of Service Bus Namespace</para>
		/// <para>Picklist</para>
		/// <para>Format of Service Bus Namespace</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.NamespaceFormat? NamespaceFormat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.NamespaceFormat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.NamespaceFormat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.NamespaceFormat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.NamespaceFormat] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the organization with which the service endpoint is associated.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Path to the service endpoint.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Path
		{
			get { return Entity.GetAttributeValue<string>(Fields.Path); }
			set { Entity.Attributes[Fields.Path] = value; }
		}

		/// <summary>
		/// <para>For internal use only. Holds miscellaneous properties related to runtime integration.</para>
		/// <para>String - MaxLength: 512</para>
		/// <para>Runtime Integration Properties</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RuntimeIntegrationProperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.RuntimeIntegrationProperties); }
			set { Entity.Attributes[Fields.RuntimeIntegrationProperties] = value; }
		}

		/// <summary>
		/// <para>Shared Access Key</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Shared Access Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SASKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.SASKey); }
			set { Entity.Attributes[Fields.SASKey] = value; }
		}

		/// <summary>
		/// <para>Shared Access Key Name</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Shared Access Key Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SASKeyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SASKeyName); }
			set { Entity.Attributes[Fields.SASKeyName] = value; }
		}

		/// <summary>
		/// <para>Shared Access Token</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Shared Access Token</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SASToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.SASToken); }
			set { Entity.Attributes[Fields.SASToken] = value; }
		}

		/// <summary>
		/// <para>Specifies schema type for event grid events</para>
		/// <para>Picklist</para>
		/// <para>Specifies schema type for event grid events</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.SchemaType? SchemaType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SchemaType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.SchemaType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SchemaType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SchemaType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the service endpoint.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ServiceEndpointId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ServiceEndpointId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the service endpoint.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ServiceEndpointIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ServiceEndpointIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Namespace of the App Fabric solution.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Service Namespace</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionNamespace
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionNamespace); }
			set { Entity.Attributes[Fields.SolutionNamespace] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Full service endpoint Url.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Url Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Url
		{
			get { return Entity.GetAttributeValue<string>(Fields.Url); }
			set { Entity.Attributes[Fields.Url] = value; }
		}

		/// <summary>
		/// <para>Use Auth Information in KeyVault</para>
		/// <para>Boolean</para>
		/// <para>Use Auth Information in KeyVault</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseKeyVaultConfiguration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseKeyVaultConfiguration); }
			set { Entity.Attributes[Fields.UseKeyVaultConfiguration] = value; }
		}

		/// <summary>
		/// <para>Additional user claim value type.</para>
		/// <para>Picklist</para>
		/// <para>User Claim</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.UserClaim? UserClaim
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UserClaim);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.UserClaim)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UserClaim] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UserClaim] = null;
			}
		}
	}
}
