//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.QueueItemOptionSets
{
	public enum ObjectTypeCode
	{
		/// <summary>
		/// Activity = 4200
		/// </summary>
		Activity = 4200,
		/// <summary>
		/// Agreement Booking Date = 10580
		/// </summary>
		Agreement_Booking_Date = 10580,
		/// <summary>
		/// Agreement Booking Setup = 10585
		/// </summary>
		Agreement_Booking_Setup = 10585,
		/// <summary>
		/// Agreement Invoice Date = 10586
		/// </summary>
		Agreement_Invoice_Date = 10586,
		/// <summary>
		/// Agreement Invoice Setup = 10588
		/// </summary>
		Agreement_Invoice_Setup = 10588,
		/// <summary>
		/// Appointment = 4201
		/// </summary>
		Appointment = 4201,
		/// <summary>
		/// Booking Alert = 10473
		/// </summary>
		Booking_Alert = 10473,
		/// <summary>
		/// Campaign Activity = 4402
		/// </summary>
		Campaign_Activity = 4402,
		/// <summary>
		/// Campaign Response = 4401
		/// </summary>
		Campaign_Response = 4401,
		/// <summary>
		/// Case = 112
		/// </summary>
		Case = 112,
		/// <summary>
		/// Conversation = 10743
		/// </summary>
		Conversation = 10743,
		/// <summary>
		/// Customer Voice alert = 10330
		/// </summary>
		Customer_Voice_alert = 10330,
		/// <summary>
		/// Customer Voice survey invite = 10340
		/// </summary>
		Customer_Voice_survey_invite = 10340,
		/// <summary>
		/// Customer Voice survey response = 10342
		/// </summary>
		Customer_Voice_survey_response = 10342,
		/// <summary>
		/// Email = 4202
		/// </summary>
		Email = 4202,
		/// <summary>
		/// Fax = 4204
		/// </summary>
		Fax = 4204,
		/// <summary>
		/// Fulfillment Preference = 10484
		/// </summary>
		Fulfillment_Preference = 10484,
		/// <summary>
		/// Inventory Adjustment = 10608
		/// </summary>
		Inventory_Adjustment = 10608,
		/// <summary>
		/// Inventory Transfer = 10611
		/// </summary>
		Inventory_Transfer = 10611,
		/// <summary>
		/// IoT Alert = 10165
		/// </summary>
		IoT_Alert = 10165,
		/// <summary>
		/// Knowledge Article = 9953
		/// </summary>
		Knowledge_Article = 9953,
		/// <summary>
		/// Knowledge Article Template = 10101
		/// </summary>
		Knowledge_Article_Template = 10101,
		/// <summary>
		/// Letter = 4207
		/// </summary>
		Letter = 4207,
		/// <summary>
		/// Ongoing conversation (Deprecated) = 10733
		/// </summary>
		Ongoing_conversation_Deprecated = 10733,
		/// <summary>
		/// Outbound message = 10857
		/// </summary>
		Outbound_message = 10857,
		/// <summary>
		/// Overflow Action Config = 10714
		/// </summary>
		Overflow_Action_Config = 10714,
		/// <summary>
		/// Phone Call = 4210
		/// </summary>
		Phone_Call = 4210,
		/// <summary>
		/// Project = 10528
		/// </summary>
		Project = 10528,
		/// <summary>
		/// Project Service Approval = 10489
		/// </summary>
		Project_Service_Approval = 10489,
		/// <summary>
		/// Project Task = 10533
		/// </summary>
		Project_Task = 10533,
		/// <summary>
		/// Quick Campaign = 4406
		/// </summary>
		Quick_Campaign = 4406,
		/// <summary>
		/// Recurring Appointment = 4251
		/// </summary>
		Recurring_Appointment = 4251,
		/// <summary>
		/// Resource Request = 10551
		/// </summary>
		Resource_Request = 10551,
		/// <summary>
		/// Service Activity = 4214
		/// </summary>
		Service_Activity = 4214,
		/// <summary>
		/// Session = 10760
		/// </summary>
		Session = 10760,
		/// <summary>
		/// Social Activity = 4216
		/// </summary>
		Social_Activity = 4216,
		/// <summary>
		/// Task = 4212
		/// </summary>
		Task = 4212,
		/// <summary>
		/// Teams chat = 10088
		/// </summary>
		Teams_chat = 10088,
		/// <summary>
		/// Time Group Detail = 10485
		/// </summary>
		Time_Group_Detail = 10485,
		/// <summary>
		/// Work Order = 10651
		/// </summary>
		Work_Order = 10651,
		/// <summary>
		/// Work Order Incident = 10654
		/// </summary>
		Work_Order_Incident = 10654,
		/// <summary>
		/// Work Order Service = 10657
		/// </summary>
		Work_Order_Service = 10657,
		/// <summary>
		/// Work Order Service Task = 10658
		/// </summary>
		Work_Order_Service_Task = 10658
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class QueueItem : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EnteredOn = "enteredon";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string Priority = "priority";
			public const string QueueId = "queueid";
			public const string QueueItemId = "queueitemid";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string Sender = "sender";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string State = "state";
			public const string StateCode = "statecode";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string Status = "status";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string ToRecipients = "torecipients";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WorkerId = "workerid";
			public const string WorkerIdModifiedOn = "workeridmodifiedon";
		}

		public const string EntityLogicalName = "queueitem";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2029;

		[DebuggerNonUserCode()]
		public QueueItem()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public QueueItem(Guid QueueItemId)
		{
			Entity = new Entity(EntityLogicalName, QueueItemId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public QueueItem(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public QueueItem(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public QueueItem(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public QueueItem(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the date the record was assigned to the queue.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Entered Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EnteredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EnteredOn); }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the queueitem.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Liveworkstream this queue item belongs to</para>
		/// <para>Lookup to msdyn_liveworkstream</para>
		/// <para>Live workstream</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}

		/// <summary>
		/// <para>Choose the activity, case, or article assigned to the queue.</para>
		/// <para>Required - Lookup to activitypointer, appointment, bulkoperation, campaignactivity, campaignresponse, chat, email, fax, incident, knowledgearticle, letter, msdyn_agreementbookingdate, msdyn_agreementbookingsetup, msdyn_agreementinvoicedate, msdyn_agreementinvoicesetup, msdyn_approval, msdyn_bookingalert, msdyn_inventoryadjustment, msdyn_inventorytransfer, msdyn_iotalert, msdyn_knowledgearticletemplate, msdyn_liveconversation, msdyn_ocliveworkitem, msdyn_ocoutboundmessage, msdyn_ocsession, msdyn_overflowactionconfig, msdyn_project, msdyn_projecttask, msdyn_resourcerequest, msdyn_timegroup, msdyn_timegroupdetail, msdyn_workorder, msdyn_workorderincident, msdyn_workorderservice, msdyn_workorderservicetask, msfp_alert, msfp_surveyinvite, msfp_surveyresponse, phonecall, recurringappointmentmaster, serviceappointment, socialactivity, task</para>
		/// <para>Object</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>Select the type of the queue item, such as activity, case, or appointment.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueItemOptionSets.ObjectTypeCode? ObjectTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ObjectTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueItemOptionSets.ObjectTypeCode)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the organization with which the queue item is associated.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the queue item.</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the queue item.</para>
		/// <para>ReadOnly - Required - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the queue item.</para>
		/// <para>ReadOnly - Required - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Priority of the queue item.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public int? Priority
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Priority); }
			set { Entity.Attributes[Fields.Priority] = value; }
		}

		/// <summary>
		/// <para>Choose the queue that the item is assigned to.</para>
		/// <para>Required - Lookup to queue</para>
		/// <para>Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QueueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QueueId); }
			set { Entity.Attributes[Fields.QueueId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the queue item.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Queue Item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid QueueItemId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.QueueItemId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Sender who created the queue item.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>From</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public string Sender
		{
			get { return Entity.GetAttributeValue<string>(Fields.Sender); }
			set { Entity.Attributes[Fields.Sender] = value; }
		}

		/// <summary>
		/// <para>Status of the queue item.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Status (deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public int? State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.State); }
			set { Entity.Attributes[Fields.State] = value; }
		}

		/// <summary>
		/// <para>Shows whether the queue record is active or inactive. Inactive queue records are read-only and can&apos;t be edited unless they are reactivated.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueItemOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueItemOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the queue item.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Status Reason (deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public int? Status
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Status); }
			set { Entity.Attributes[Fields.Status] = value; }
		}

		/// <summary>
		/// <para>Select the item&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueItemOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueItemOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the title or name that describes the queue record. This value is copied from the record that was assigned to the queue.</para>
		/// <para>ReadOnly - String - MaxLength: 300</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
		}

		/// <summary>
		/// <para>Recipients listed on the To line of the message for email queue items.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>To</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public string ToRecipients
		{
			get { return Entity.GetAttributeValue<string>(Fields.ToRecipients); }
			set { Entity.Attributes[Fields.ToRecipients] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version number of the queue item.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Shows who is working on the queue item.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Worked By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference WorkerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.WorkerId); }
			set { Entity.Attributes[Fields.WorkerId] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the queue item was last assigned to a user.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Worked On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? WorkerIdModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.WorkerIdModifiedOn); }
		}
	}
}
