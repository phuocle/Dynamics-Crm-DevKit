//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ImportLogOptionSets
{
	public enum LogPhaseCode
	{
		/// <summary>
		/// Import Create = 2
		/// </summary>
		Import_Create = 2,
		/// <summary>
		/// Import Update = 3
		/// </summary>
		Import_Update = 3,
		/// <summary>
		/// Parse = 0
		/// </summary>
		Parse = 0,
		/// <summary>
		/// Transform = 1
		/// </summary>
		Transform = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ImportLog : EntityBase
	{
		public struct Fields
		{
			public const string AdditionalInfo = "additionalinfo";
			public const string ColumnValue = "columnvalue";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ErrorDescription = "errordescription";
			public const string ErrorNumber = "errornumber";
			public const string HeaderColumn = "headercolumn";
			public const string ImportDataId = "importdataid";
			public const string ImportFileId = "importfileid";
			public const string ImportLogId = "importlogid";
			public const string LineNumber = "linenumber";
			public const string LogPhaseCode = "logphasecode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SequenceNumber = "sequencenumber";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
		}

		public const string EntityLogicalName = "importlog";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4423;

		[DebuggerNonUserCode()]
		public ImportLog()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportLog(Guid ImportLogId)
		{
			Entity = new Entity(EntityLogicalName, ImportLogId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportLog(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportLog(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImportLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Additional information related to the error.</para>
		/// <para>String - MaxLength: 5000</para>
		/// <para>More Information</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdditionalInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdditionalInfo); }
			set { Entity.Attributes[Fields.AdditionalInfo] = value; }
		}

		/// <summary>
		/// <para>Value in the column.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Column Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ColumnValue
		{
			get { return Entity.GetAttributeValue<string>(Fields.ColumnValue); }
			set { Entity.Attributes[Fields.ColumnValue] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the import log.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the import log was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the importlog.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of an error.</para>
		/// <para>String - MaxLength: 512</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDescription); }
			set { Entity.Attributes[Fields.ErrorDescription] = value; }
		}

		/// <summary>
		/// <para>Error code of an error.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 10,000,000</para>
		/// <para>Error Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorNumber); }
			set { Entity.Attributes[Fields.ErrorNumber] = value; }
		}

		/// <summary>
		/// <para>Name of the column heading.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Column Heading</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HeaderColumn
		{
			get { return Entity.GetAttributeValue<string>(Fields.HeaderColumn); }
			set { Entity.Attributes[Fields.HeaderColumn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the import data for this import log.</para>
		/// <para>Lookup to importdata</para>
		/// <para>Source Row</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImportDataId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImportDataId); }
			set { Entity.Attributes[Fields.ImportDataId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the import file for this import log.</para>
		/// <para>Lookup to importfile</para>
		/// <para>Import File Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImportFileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImportFileId); }
			set { Entity.Attributes[Fields.ImportFileId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the import log.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ImportLogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ImportLogId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Original line number of the data used in this log.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 10,000,000</para>
		/// <para>Original Row Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LineNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LineNumber); }
			set { Entity.Attributes[Fields.LineNumber] = value; }
		}

		/// <summary>
		/// <para>Phase for which the log is recorded.</para>
		/// <para>Picklist</para>
		/// <para>Log Phase</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportLogOptionSets.LogPhaseCode? LogPhaseCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LogPhaseCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportLogOptionSets.LogPhaseCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LogPhaseCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LogPhaseCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the import log.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the import log was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the importlog.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the import log.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Business unit that owns the import log.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the import log.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the import log.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Sequence number of the error in this log.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 10,000,000</para>
		/// <para>Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SequenceNumber); }
		}

		/// <summary>
		/// <para>Status of the import log.</para>
		/// <para>ReadOnly - State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportLogOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportLogOptionSets.StateCode)value.Value;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the import log.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportLogOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportLogOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
	}
}
