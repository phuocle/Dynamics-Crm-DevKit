//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.TraceLogOptionSets
{
	public enum Level
	{
		/// <summary>
		/// Error = 3
		/// </summary>
		Error = 3,
		/// <summary>
		/// Information = 1
		/// </summary>
		Information = 1,
		/// <summary>
		/// Warning = 2
		/// </summary>
		Warning = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TraceLog : EntityBase
	{
		public struct Fields
		{
			public const string CanBeDeleted = "canbedeleted";
			public const string CollationLevel = "collationlevel";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ErrorDetails = "errordetails";
			public const string ErrorTypeDisplay = "errortypedisplay";
			public const string IsUnique = "isunique";
			public const string Level = "level";
			public const string MachineName = "machinename";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string ParentTraceLogId = "parenttracelogid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RegardingObjectOwnerId = "regardingobjectownerid";
			public const string RegardingObjectOwningBusinessUnit = "regardingobjectowningbusinessunit";
			public const string Text = "text";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TraceActionXml = "traceactionxml";
			public const string TraceCode = "tracecode";
			public const string TraceDetailXml = "tracedetailxml";
			public const string TraceLogId = "tracelogid";
			public const string TraceParameterHash = "traceparameterhash";
			public const string TraceParameterXml = "traceparameterxml";
			public const string TraceRegardingId = "traceregardingid";
			public const string TraceStatus = "tracestatus";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}

		public const string EntityLogicalName = "tracelog";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8050;

		[DebuggerNonUserCode()]
		public TraceLog()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TraceLog(Guid TraceLogId)
		{
			Entity = new Entity(EntityLogicalName, TraceLogId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TraceLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TraceLog(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TraceLog(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TraceLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Indicates if this trace log can be deleted.</para>
		/// <para>Boolean</para>
		/// <para>Trace CanBeDeleted Flag</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeDeleted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeDeleted); }
			set { Entity.Attributes[Fields.CanBeDeleted] = value; }
		}

		/// <summary>
		/// <para>Indicates the collation level</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Collation Level</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CollationLevel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CollationLevel); }
			set { Entity.Attributes[Fields.CollationLevel] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the trace.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Time the error is created and logged.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the trace.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>String - MaxLength: 2048</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDetails); }
			set { Entity.Attributes[Fields.ErrorDetails] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 320</para>
		/// <para>Trace Error Details</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorTypeDisplay
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorTypeDisplay); }
			set { Entity.Attributes[Fields.ErrorTypeDisplay] = value; }
		}

		/// <summary>
		/// <para>Tells if this traceLog is created uniquely(only one) for the associated entity.</para>
		/// <para>Boolean</para>
		/// <para>Is Unique Trace</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsUnique
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsUnique); }
			set { Entity.Attributes[Fields.IsUnique] = value; }
		}

		/// <summary>
		/// <para>Information about the trace level.</para>
		/// <para>Required - Picklist</para>
		/// <para>Level</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level? Level
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Level);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Level] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Level] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 320</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MachineName); }
			set { Entity.Attributes[Fields.MachineName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the trace.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Time the error is updated and logged for the same regarding object.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Update On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the trace.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the trace.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Indicates the parent ID of the trace log.</para>
		/// <para>Lookup to tracelog</para>
		/// <para>Parent Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentTraceLogId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentTraceLogId); }
			set { Entity.Attributes[Fields.ParentTraceLogId] = value; }
		}

		/// <summary>
		/// <para>Regarding mailbox or email server profile.</para>
		/// <para>Lookup to emailserverprofile, mailbox</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the regarding object.</para>
		/// <para>ReadOnly - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the regarding object.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Text of the trace.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Text
		{
			get { return Entity.GetAttributeValue<string>(Fields.Text); }
			set { Entity.Attributes[Fields.Text] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>XML representation of the trace actions.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Trace Actions XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceActionXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceActionXml); }
			set { Entity.Attributes[Fields.TraceActionXml] = value; }
		}

		/// <summary>
		/// <para>Error code.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Error Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TraceCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TraceCode); }
			set { Entity.Attributes[Fields.TraceCode] = value; }
		}

		/// <summary>
		/// <para>XML representation of the trace details.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Trace Detail XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceDetailXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceDetailXml); }
			set { Entity.Attributes[Fields.TraceDetailXml] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the trace.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Trace</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TraceLogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TraceLogId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Stores the hash of the entity object associated with this tracelog. Hash is computed using the object type code and its id.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Trace Parameter Hash</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TraceParameterHash
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TraceParameterHash); }
		}

		/// <summary>
		/// <para>XML representation of the trace parameters.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Trace Parameter XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceParameterXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceParameterXml); }
			set { Entity.Attributes[Fields.TraceParameterXml] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Lookup to traceregarding</para>
		/// <para>Trace Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TraceRegardingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TraceRegardingId); }
		}

		/// <summary>
		/// <para>Status about the trace.</para>
		/// <para>Boolean</para>
		/// <para>Trace Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TraceStatus
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TraceStatus); }
			set { Entity.Attributes[Fields.TraceStatus] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the trace was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}
