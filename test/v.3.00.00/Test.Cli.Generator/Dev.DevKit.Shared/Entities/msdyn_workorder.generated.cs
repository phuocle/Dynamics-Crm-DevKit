//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets
{
	public enum msdyn_SystemStatus
	{
		/// <summary>
		/// Canceled = 690970005
		/// </summary>
		Canceled = 690970005,
		/// <summary>
		/// Completed = 690970003
		/// </summary>
		Completed = 690970003,
		/// <summary>
		/// In Progress = 690970002
		/// </summary>
		In_Progress = 690970002,
		/// <summary>
		/// Posted = 690970004
		/// </summary>
		Posted = 690970004,
		/// <summary>
		/// Scheduled = 690970001
		/// </summary>
		Scheduled = 690970001,
		/// <summary>
		/// Unscheduled = 690970000
		/// </summary>
		Unscheduled = 690970000
	}

	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// Facility = 690970001
		/// </summary>
		Facility = 690970001,
		/// <summary>
		/// Location Agnostic = 690970002
		/// </summary>
		Location_Agnostic = 690970002,
		/// <summary>
		/// Onsite = 690970000
		/// </summary>
		Onsite = 690970000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_workorder : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Address1 = "msdyn_address1";
			public const string msdyn_Address2 = "msdyn_address2";
			public const string msdyn_Address3 = "msdyn_address3";
			public const string msdyn_AddressName = "msdyn_addressname";
			public const string msdyn_Agreement = "msdyn_agreement";
			public const string msdyn_AutoNumbering = "msdyn_autonumbering";
			public const string msdyn_BillingAccount = "msdyn_billingaccount";
			public const string msdyn_BookingSummary = "msdyn_bookingsummary";
			public const string msdyn_ChildIndex = "msdyn_childindex";
			public const string msdyn_City = "msdyn_city";
			public const string msdyn_ClosedBy = "msdyn_closedby";
			public const string msdyn_completedon = "msdyn_completedon";
			public const string msdyn_Country = "msdyn_country";
			public const string msdyn_CustomerAsset = "msdyn_customerasset";
			public const string msdyn_DateWindowEnd = "msdyn_datewindowend";
			public const string msdyn_DateWindowStart = "msdyn_datewindowstart";
			public const string msdyn_EstimateSubtotalAmount = "msdyn_estimatesubtotalamount";
			public const string msdyn_estimatesubtotalamount_Base = "msdyn_estimatesubtotalamount_base";
			public const string msdyn_firstarrivedon = "msdyn_firstarrivedon";
			public const string msdyn_FollowUpNote = "msdyn_followupnote";
			public const string msdyn_FollowUpRequired = "msdyn_followuprequired";
			public const string msdyn_FunctionalLocation = "msdyn_functionallocation";
			public const string msdyn_Instructions = "msdyn_instructions";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_IoTAlert = "msdyn_iotalert";
			public const string msdyn_IsFollowUp = "msdyn_isfollowup";
			public const string msdyn_IsMobile = "msdyn_ismobile";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_mapcontrol = "msdyn_mapcontrol";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_OpportunityId = "msdyn_opportunityid";
			public const string msdyn_ParentWorkOrder = "msdyn_parentworkorder";
			public const string msdyn_phoneNumber = "msdyn_phoneNumber";
			public const string msdyn_PostalCode = "msdyn_postalcode";
			public const string msdyn_PreferredResource = "msdyn_preferredresource";
			public const string msdyn_PriceList = "msdyn_pricelist";
			public const string msdyn_PrimaryIncidentDescription = "msdyn_primaryincidentdescription";
			public const string msdyn_PrimaryIncidentEstimatedDuration = "msdyn_primaryincidentestimatedduration";
			public const string msdyn_PrimaryIncidentType = "msdyn_primaryincidenttype";
			public const string msdyn_PrimaryResolution = "msdyn_primaryresolution";
			public const string msdyn_Priority = "msdyn_priority";
			public const string msdyn_ReportedByContact = "msdyn_reportedbycontact";
			public const string msdyn_ServiceAccount = "msdyn_serviceaccount";
			public const string msdyn_ServiceRequest = "msdyn_servicerequest";
			public const string msdyn_ServiceTerritory = "msdyn_serviceterritory";
			public const string msdyn_StateOrProvince = "msdyn_stateorprovince";
			public const string msdyn_SubStatus = "msdyn_substatus";
			public const string msdyn_SubtotalAmount = "msdyn_subtotalamount";
			public const string msdyn_subtotalamount_Base = "msdyn_subtotalamount_base";
			public const string msdyn_SupportContact = "msdyn_supportcontact";
			public const string msdyn_SystemStatus = "msdyn_systemstatus";
			public const string msdyn_Taxable = "msdyn_taxable";
			public const string msdyn_TaxCode = "msdyn_taxcode";
			public const string msdyn_TimeClosed = "msdyn_timeclosed";
			public const string msdyn_TimeFromPromised = "msdyn_timefrompromised";
			public const string msdyn_TimeGroup = "msdyn_timegroup";
			public const string msdyn_TimeGroupDetailSelected = "msdyn_timegroupdetailselected";
			public const string msdyn_TimeToPromised = "msdyn_timetopromised";
			public const string msdyn_TimeWindowEnd = "msdyn_timewindowend";
			public const string msdyn_TimeWindowStart = "msdyn_timewindowstart";
			public const string msdyn_TotalAmount = "msdyn_totalamount";
			public const string msdyn_totalamount_Base = "msdyn_totalamount_base";
			public const string msdyn_totalestimatedduration = "msdyn_totalestimatedduration";
			public const string msdyn_TotalSalesTax = "msdyn_totalsalestax";
			public const string msdyn_totalsalestax_Base = "msdyn_totalsalestax_base";
			public const string msdyn_workhourtemplate = "msdyn_workhourtemplate";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_workorderarrivaltimekpiid = "msdyn_workorderarrivaltimekpiid";
			public const string msdyn_workorderId = "msdyn_workorderid";
			public const string msdyn_workorderresolutionkpiid = "msdyn_workorderresolutionkpiid";
			public const string msdyn_WorkOrderSummary = "msdyn_workordersummary";
			public const string msdyn_WorkOrderType = "msdyn_workordertype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_workorder";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10651;

		[DebuggerNonUserCode()]
		public msdyn_workorder()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorder(Guid msdyn_workorderId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_workorderId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorder(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorder(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorder(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workorder(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address1); }
			set { Entity.Attributes[Fields.msdyn_Address1] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address2); }
			set { Entity.Attributes[Fields.msdyn_Address2] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address3); }
			set { Entity.Attributes[Fields.msdyn_Address3] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 250</para>
		/// <para>Address Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AddressName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AddressName); }
			set { Entity.Attributes[Fields.msdyn_AddressName] = value; }
		}

		/// <summary>
		/// <para>Shows the agreement linked to this work order.</para>
		/// <para>Lookup to msdyn_agreement</para>
		/// <para>Agreement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Agreement
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Agreement); }
			set { Entity.Attributes[Fields.msdyn_Agreement] = value; }
		}

		/// <summary>
		/// <para>Internal field used to generate the next name upon entity creation. It is optionally copied to the msdyn_name field.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Auto-Numbering</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AutoNumbering
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AutoNumbering); }
			set { Entity.Attributes[Fields.msdyn_AutoNumbering] = value; }
		}

		/// <summary>
		/// <para>Account to be billed. If a billing account has been set on service account it will be populated by default. Otherwise, the billing account will be the same as the service account.</para>
		/// <para>Lookup to account</para>
		/// <para>Billing Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BillingAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BillingAccount); }
			set { Entity.Attributes[Fields.msdyn_BillingAccount] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Booking Summary</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BookingSummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BookingSummary); }
			set { Entity.Attributes[Fields.msdyn_BookingSummary] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Child Index</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ChildIndex
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ChildIndex); }
			set { Entity.Attributes[Fields.msdyn_ChildIndex] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 80</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_City); }
			set { Entity.Attributes[Fields.msdyn_City] = value; }
		}

		/// <summary>
		/// <para>The user that last closed this work order</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Closed By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ClosedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ClosedBy); }
			set { Entity.Attributes[Fields.msdyn_ClosedBy] = value; }
		}

		/// <summary>
		/// <para>When Bookings are used on a Work Order, this field is auto-populated based on the latest End Time from the related Bookings. Otherwise, this field is populated based on the change of System Status.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_completedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_completedon); }
			set { Entity.Attributes[Fields.msdyn_completedon] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 80</para>
		/// <para>Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Country); }
			set { Entity.Attributes[Fields.msdyn_Country] = value; }
		}

		/// <summary>
		/// <para>Customer Asset related to this incident reported</para>
		/// <para>Lookup to msdyn_customerasset</para>
		/// <para>Primary Incident Customer Asset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomerAsset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomerAsset); }
			set { Entity.Attributes[Fields.msdyn_CustomerAsset] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date Window End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DateWindowEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DateWindowEnd); }
			set { Entity.Attributes[Fields.msdyn_DateWindowEnd] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date Window Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DateWindowStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DateWindowStart); }
			set { Entity.Attributes[Fields.msdyn_DateWindowStart] = value; }
		}

		/// <summary>
		/// <para>Enter the summary of total estimated billing amount for this work order</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Estimate Subtotal Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateSubtotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateSubtotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateSubtotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateSubtotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the estimate subtotal amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimate Subtotal Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatesubtotalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatesubtotalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>When Bookings are used on a Work Order, this field is auto-populated based on the earliest Actual Arrival Time from the related Bookings.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>First Arrived On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_firstarrivedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_firstarrivedon); }
			set { Entity.Attributes[Fields.msdyn_firstarrivedon] = value; }
		}

		/// <summary>
		/// <para>Indicate the details of the follow up work</para>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>Follow Up Note (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_FollowUpNote
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_FollowUpNote); }
			set { Entity.Attributes[Fields.msdyn_FollowUpNote] = value; }
		}

		/// <summary>
		/// <para>Allows indication if follow up work is required for a work order.</para>
		/// <para>Boolean</para>
		/// <para>Follow Up Required (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_FollowUpRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_FollowUpRequired); }
			set { Entity.Attributes[Fields.msdyn_FollowUpRequired] = value; }
		}

		/// <summary>
		/// <para>Workorder&apos;s functional location</para>
		/// <para>Lookup to msdyn_functionallocation</para>
		/// <para>Functional Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_FunctionalLocation
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_FunctionalLocation); }
			set { Entity.Attributes[Fields.msdyn_FunctionalLocation] = value; }
		}

		/// <summary>
		/// <para>Shows instructions for booked resources. By default, this information is taken from the work order instructions field on the service account.</para>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>Instructions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Instructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Instructions); }
			set { Entity.Attributes[Fields.msdyn_Instructions] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>The iot alert which initiated this work order.</para>
		/// <para>Lookup to msdyn_iotalert</para>
		/// <para>IoT Alert</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_IoTAlert
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_IoTAlert); }
			set { Entity.Attributes[Fields.msdyn_IoTAlert] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is FollowUp (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsFollowUp
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsFollowUp); }
			set { Entity.Attributes[Fields.msdyn_IsFollowUp] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is Mobile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsMobile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsMobile); }
			set { Entity.Attributes[Fields.msdyn_IsMobile] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>This field should only be used to load the custom map control</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_mapcontrol
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_mapcontrol); }
		}

		/// <summary>
		/// <para>Enter the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Work Order Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Opportunity associated with Work Order.</para>
		/// <para>Lookup to opportunity</para>
		/// <para>Opportunity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OpportunityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OpportunityId); }
			set { Entity.Attributes[Fields.msdyn_OpportunityId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Work Order associated with Work Order.</para>
		/// <para>Lookup to msdyn_workorder</para>
		/// <para>Parent Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ParentWorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ParentWorkOrder); }
			set { Entity.Attributes[Fields.msdyn_ParentWorkOrder] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 250</para>
		/// <para>Customer Phone Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_phoneNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_phoneNumber); }
			set { Entity.Attributes[Fields.msdyn_phoneNumber] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 20</para>
		/// <para>Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PostalCode); }
			set { Entity.Attributes[Fields.msdyn_PostalCode] = value; }
		}

		/// <summary>
		/// <para>The customer Preferred Resource to work on this job. Should be taken into consideration while scheduling resources</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Preferred Resource (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PreferredResource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PreferredResource); }
			set { Entity.Attributes[Fields.msdyn_PreferredResource] = value; }
		}

		/// <summary>
		/// <para>Price List that controls pricing for products / services added to this work order. By default the system will use the Price List specified on the account</para>
		/// <para>Required - Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PriceList
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PriceList); }
			set { Entity.Attributes[Fields.msdyn_PriceList] = value; }
		}

		/// <summary>
		/// <para>Incident description</para>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>Primary Incident Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PrimaryIncidentDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PrimaryIncidentDescription); }
			set { Entity.Attributes[Fields.msdyn_PrimaryIncidentDescription] = value; }
		}

		/// <summary>
		/// <para>Shows the time estimated to resolve this incident.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Primary Incident Estimated Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PrimaryIncidentEstimatedDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PrimaryIncidentEstimatedDuration); }
			set { Entity.Attributes[Fields.msdyn_PrimaryIncidentEstimatedDuration] = value; }
		}

		/// <summary>
		/// <para>Primary incident type reported</para>
		/// <para>Lookup to msdyn_incidenttype</para>
		/// <para>Primary Incident Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PrimaryIncidentType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PrimaryIncidentType); }
			set { Entity.Attributes[Fields.msdyn_PrimaryIncidentType] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_resolution</para>
		/// <para>Primary Resolution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PrimaryResolution
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PrimaryResolution); }
			set { Entity.Attributes[Fields.msdyn_PrimaryResolution] = value; }
		}

		/// <summary>
		/// <para>Priority of the Work Order. To be taken into consideration while scheduling resources</para>
		/// <para>Lookup to msdyn_priority</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Priority
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Priority); }
			set { Entity.Attributes[Fields.msdyn_Priority] = value; }
		}

		/// <summary>
		/// <para>The contact that reported this Work Order</para>
		/// <para>Lookup to contact</para>
		/// <para>Reported By Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ReportedByContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ReportedByContact); }
			set { Entity.Attributes[Fields.msdyn_ReportedByContact] = value; }
		}

		/// <summary>
		/// <para>Account to be serviced</para>
		/// <para>Required - Lookup to account</para>
		/// <para>Service Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceAccount); }
			set { Entity.Attributes[Fields.msdyn_ServiceAccount] = value; }
		}

		/// <summary>
		/// <para>Case of which this work order originates from</para>
		/// <para>Lookup to incident</para>
		/// <para>Case</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceRequest
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceRequest); }
			set { Entity.Attributes[Fields.msdyn_ServiceRequest] = value; }
		}

		/// <summary>
		/// <para>The service territory this work order relates to. By default this will be set to the Service Territory defined on the service account</para>
		/// <para>Lookup to territory</para>
		/// <para>Service Territory</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceTerritory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceTerritory); }
			set { Entity.Attributes[Fields.msdyn_ServiceTerritory] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>State Or Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_StateOrProvince); }
			set { Entity.Attributes[Fields.msdyn_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Work Order subsstatus</para>
		/// <para>Lookup to msdyn_workordersubstatus</para>
		/// <para>Substatus</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SubStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SubStatus); }
			set { Entity.Attributes[Fields.msdyn_SubStatus] = value; }
		}

		/// <summary>
		/// <para>Enter the summary of subtotal billing amount excluding tax for this work order.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 900,000,000,000,000</para>
		/// <para>Subtotal Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SubtotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_SubtotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SubtotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_SubtotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the subtotal amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Subtotal Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_subtotalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_subtotalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>A support contact can be specified so that the individual working on the work order has someone to contact for assistance.</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Support Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SupportContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SupportContact); }
			set { Entity.Attributes[Fields.msdyn_SupportContact] = value; }
		}

		/// <summary>
		/// <para>Tracks the current system status.</para>
		/// <para>Required - Picklist</para>
		/// <para>System Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_SystemStatus? msdyn_SystemStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_SystemStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_SystemStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SystemStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_SystemStatus] = null;
			}
		}

		/// <summary>
		/// <para>Shows whether sales tax is to be charged for this work order.</para>
		/// <para>Required - Boolean</para>
		/// <para>Taxable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Taxable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Taxable); }
			set { Entity.Attributes[Fields.msdyn_Taxable] = value; }
		}

		/// <summary>
		/// <para>Tax Code to be used to calculate tax when Work Order is taxable. By default the system will use the tax code specified on the service account</para>
		/// <para>Lookup to msdyn_taxcode</para>
		/// <para>Sales Tax Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TaxCode
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TaxCode); }
			set { Entity.Attributes[Fields.msdyn_TaxCode] = value; }
		}

		/// <summary>
		/// <para>Enter the time this work order was last closed.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Closed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeClosedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeClosed); }
			set { Entity.Attributes[Fields.msdyn_TimeClosed] = value; }
		}

		/// <summary>
		/// <para>Enter the starting range of the time promised to the account that incidents will be resolved.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time From Promised</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeFromPromisedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeFromPromised); }
			set { Entity.Attributes[Fields.msdyn_TimeFromPromised] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_timegroup</para>
		/// <para>Fulfillment Preference</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeGroup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeGroup); }
			set { Entity.Attributes[Fields.msdyn_TimeGroup] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_timegroupdetail</para>
		/// <para>Time Group Detail Selected (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeGroupDetailSelected
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeGroupDetailSelected); }
			set { Entity.Attributes[Fields.msdyn_TimeGroupDetailSelected] = value; }
		}

		/// <summary>
		/// <para>Enter the ending range of the time promised to the account that incidents will be resolved.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time To Promised</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeToPromisedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeToPromised); }
			set { Entity.Attributes[Fields.msdyn_TimeToPromised] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time Window End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowEnd); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowEnd] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Time Window Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowStart); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowStart] = value; }
		}

		/// <summary>
		/// <para>Enter the summary of total billing amount for this work order.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 900,000,000,000,000</para>
		/// <para>Total Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the total amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Calculated from the estimated duration of Work Order Incidents and Work Order Service Tasks not related to a Work Order Incident on the Work Order. Intended to be read-only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Total Estimated Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totalestimatedduration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totalestimatedduration); }
			set { Entity.Attributes[Fields.msdyn_totalestimatedduration] = value; }
		}

		/// <summary>
		/// <para>Enter the summary of total sales tax charged for this work order.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Total Sales Tax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalSalesTax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalSalesTax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalSalesTax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalSalesTax] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the total sales tax in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Sales Tax (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalsalestax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalsalestax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>The working hours for a requirement.</para>
		/// <para>Lookup to msdyn_workhourtemplate</para>
		/// <para>Work Hour Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workhourtemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workhourtemplate); }
			set { Entity.Attributes[Fields.msdyn_workhourtemplate] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Work Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Lookup to slakpiinstance</para>
		/// <para>Work Order Arrival Time KPI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workorderarrivaltimekpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workorderarrivaltimekpiid); }
			set { Entity.Attributes[Fields.msdyn_workorderarrivaltimekpiid] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>WO Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_workorderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_workorderId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Lookup to slakpiinstance</para>
		/// <para>Work Order Resolution KPI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workorderresolutionkpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workorderresolutionkpiid); }
			set { Entity.Attributes[Fields.msdyn_workorderresolutionkpiid] = value; }
		}

		/// <summary>
		/// <para>Type a summary description of the job.</para>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>Work Order Summary</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WorkOrderSummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WorkOrderSummary); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderSummary] = value; }
		}

		/// <summary>
		/// <para>Work Order Type</para>
		/// <para>Required - Lookup to msdyn_workordertype</para>
		/// <para>Work Order Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderType); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderType] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Shows the ID of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Shows the ID of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the Work Order</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Work Order</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Shows a comma-separated list of string values representing the unique identifiers of stages in a business process flow instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
