//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.WebResourceOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum WebResourceType
	{
		/// <summary>
		/// Data (XML) = 4
		/// </summary>
		Data_XML = 4,
		/// <summary>
		/// GIF format = 7
		/// </summary>
		GIF_format = 7,
		/// <summary>
		/// ICO format = 10
		/// </summary>
		ICO_format = 10,
		/// <summary>
		/// JPG format = 6
		/// </summary>
		JPG_format = 6,
		/// <summary>
		/// PNG format = 5
		/// </summary>
		PNG_format = 5,
		/// <summary>
		/// Script (JScript) = 3
		/// </summary>
		Script_JScript = 3,
		/// <summary>
		/// Silverlight (XAP) = 8
		/// </summary>
		Silverlight_XAP = 8,
		/// <summary>
		/// String (RESX) = 12
		/// </summary>
		String_RESX = 12,
		/// <summary>
		/// Style Sheet (CSS) = 2
		/// </summary>
		Style_Sheet_CSS = 2,
		/// <summary>
		/// Style Sheet (XSL) = 9
		/// </summary>
		Style_Sheet_XSL = 9,
		/// <summary>
		/// Vector format (SVG) = 11
		/// </summary>
		Vector_format_SVG = 11,
		/// <summary>
		/// Webpage (HTML) = 1
		/// </summary>
		Webpage_HTML = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class WebResource : EntityBase
	{
		public struct Fields
		{
			public const string ComponentState = "componentstate";
			public const string Content = "content";
			public const string ContentFileRef = "contentfileref";
			public const string ContentJson = "contentjson";
			public const string ContentJsonFileRef = "contentjsonfileref";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DependencyXml = "dependencyxml";
			public const string Description = "description";
			public const string DisplayName = "displayname";
			public const string IntroducedVersion = "introducedversion";
			public const string IsAvailableForMobileOffline = "isavailableformobileoffline";
			public const string IsEnabledForMobileClient = "isenabledformobileclient";
			public const string IsManaged = "ismanaged";
			public const string LanguageCode = "languagecode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string SilverlightVersion = "silverlightversion";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string VersionNumber = "versionnumber";
			public const string WebResourceId = "webresourceid";
			public const string WebResourceIdUnique = "webresourceidunique";
			public const string WebResourceType = "webresourcetype";
		}

		public const string EntityLogicalName = "webresource";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9333;

		[DebuggerNonUserCode()]
		public WebResource()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WebResource(Guid WebResourceId)
		{
			Entity = new Entity(EntityLogicalName, WebResourceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WebResource(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WebResource(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WebResource(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WebResource(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WebResourceOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WebResourceOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Bytes of the web resource, in Base64 format.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}

		/// <summary>
		/// <para>Reference to the content file on Azure.</para>
		/// <para>ReadOnly - Virtual</para>
		/// <para>ContentFileRef</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentFileRef
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentFileRef); }
		}

		/// <summary>
		/// <para>Json representation of the content of the resource.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentJson
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentJson); }
			set { Entity.Attributes[Fields.ContentJson] = value; }
		}

		/// <summary>
		/// <para>Reference to the Json content file on Azure.</para>
		/// <para>ReadOnly - Virtual</para>
		/// <para>ContentJsonFileRef</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentJsonFileRef
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentJsonFileRef); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the web resource.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the web resource was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the web resource.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>DependencyXML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DependencyXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.DependencyXml); }
			set { Entity.Attributes[Fields.DependencyXml] = value; }
		}

		/// <summary>
		/// <para>Description of the web resource.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Display name of the web resource.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Display Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisplayName); }
			set { Entity.Attributes[Fields.DisplayName] = value; }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether this web resource is available for mobile client in offline mode.</para>
		/// <para>Boolean</para>
		/// <para>Is Available For Mobile Offline</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAvailableForMobileOffline
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAvailableForMobileOffline); }
			set { Entity.Attributes[Fields.IsAvailableForMobileOffline] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether this web resource is enabled for mobile client.</para>
		/// <para>Boolean</para>
		/// <para>Is Enabled For Mobile Client</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEnabledForMobileClient
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEnabledForMobileClient); }
			set { Entity.Attributes[Fields.IsEnabledForMobileClient] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Language of the web resource.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageCode); }
			set { Entity.Attributes[Fields.LanguageCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the web resource.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the web resource was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the web resource.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the web resource.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the web resource.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Silverlight runtime version number required by a silverlight web resource.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Silverlight Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SilverlightVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.SilverlightVersion); }
			set { Entity.Attributes[Fields.SilverlightVersion] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Unique identifier of the web resource.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Web Resource Identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WebResourceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WebResourceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? WebResourceIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.WebResourceIdUnique); }
		}

		/// <summary>
		/// <para>Drop-down list for selecting the type of the web resource.</para>
		/// <para>Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WebResourceOptionSets.WebResourceType? WebResourceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.WebResourceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WebResourceOptionSets.WebResourceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.WebResourceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.WebResourceType] = null;
			}
		}
	}
}
