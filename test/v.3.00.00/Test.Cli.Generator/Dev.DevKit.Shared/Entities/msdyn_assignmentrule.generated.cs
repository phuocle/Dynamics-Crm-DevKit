//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets
{
	public enum msdyn_DistributeTo
	{
		/// <summary>
		/// Sellers = 0
		/// </summary>
		Sellers = 0,
		/// <summary>
		/// Team = 1
		/// </summary>
		Team = 1
	}

	public enum msdyn_DistributionType
	{
		/// <summary>
		/// Load Balancing = 1
		/// </summary>
		Load_Balancing = 1,
		/// <summary>
		/// RoundRobin = 0
		/// </summary>
		RoundRobin = 0
	}

	public enum msdyn_matchtype
	{
		/// <summary>
		/// Any Sellers = 2
		/// </summary>
		Any_Sellers = 2,
		/// <summary>
		/// Filter using Attributes = 0
		/// </summary>
		Filter_using_Attributes = 0,
		/// <summary>
		/// Specific List = 1
		/// </summary>
		Specific_List = 1
	}

	public enum msdyn_objecttypecode
	{
		/// <summary>
		/// Lead = 4
		/// </summary>
		Lead = 4,
		/// <summary>
		/// Opportunity = 3
		/// </summary>
		Opportunity = 3
	}

	public enum msdyn_triggertype
	{
		/// <summary>
		/// Entity Create = 0
		/// </summary>
		Entity_Create = 0,
		/// <summary>
		/// FieldUpdate = 1
		/// </summary>
		FieldUpdate = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_assignmentrule : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_assignmentruleId = "msdyn_assignmentruleid";
			public const string msdyn_attributefilter = "msdyn_attributefilter";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_DistributeTo = "msdyn_distributeto";
			public const string msdyn_distributewithavailability = "msdyn_distributewithavailability";
			public const string msdyn_distributewithcapacity = "msdyn_distributewithcapacity";
			public const string msdyn_DistributionType = "msdyn_distributiontype";
			public const string msdyn_entityfilter = "msdyn_entityfilter";
			public const string msdyn_evaluationorder = "msdyn_evaluationorder";
			public const string msdyn_matchedrecords = "msdyn_matchedrecords";
			public const string msdyn_matchtype = "msdyn_matchtype";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_objecttypecode = "msdyn_objecttypecode";
			public const string msdyn_segmentid = "msdyn_segmentid";
			public const string msdyn_sellerfilter = "msdyn_sellerfilter";
			public const string msdyn_SpecificSellersOrTeams = "msdyn_SpecificSellersOrTeams";
			public const string msdyn_triggertype = "msdyn_triggertype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_assignmentrule";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10297;

		[DebuggerNonUserCode()]
		public msdyn_assignmentrule()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(Guid msdyn_assignmentruleId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_assignmentruleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Assignment Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_assignmentruleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_assignmentruleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>Attribute Filter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_attributefilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_attributefilter); }
			set { Entity.Attributes[Fields.msdyn_attributefilter] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}

		/// <summary>
		/// <para>Setting depecting if the assignment is done for a team or a seller.</para>
		/// <para>Picklist</para>
		/// <para>Assign to Sellers or Team.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributeTo? msdyn_DistributeTo
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DistributeTo);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributeTo)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DistributeTo] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DistributeTo] = null;
			}
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>DistributeWithAvailability</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_distributewithavailability
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_distributewithavailability); }
			set { Entity.Attributes[Fields.msdyn_distributewithavailability] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>DistributeWithCapacity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_distributewithcapacity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_distributewithcapacity); }
			set { Entity.Attributes[Fields.msdyn_distributewithcapacity] = value; }
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>DistributionType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributionType? msdyn_DistributionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DistributionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DistributionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DistributionType] = null;
			}
		}

		/// <summary>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>Entity Filter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entityfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entityfilter); }
			set { Entity.Attributes[Fields.msdyn_entityfilter] = value; }
		}

		/// <summary>
		/// <para>Evaluation order of the rule</para>
		/// <para>Required - Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>EvaluationOrder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_evaluationorder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_evaluationorder); }
			set { Entity.Attributes[Fields.msdyn_evaluationorder] = value; }
		}

		/// <summary>
		/// <para>Records routed by this rule</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Records Routed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_matchedrecords
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_matchedrecords); }
			set { Entity.Attributes[Fields.msdyn_matchedrecords] = value; }
		}

		/// <summary>
		/// <para>Setting depecting if the seller or team assignment needs to be done either by filtering attributes or by specifying sellers or teams</para>
		/// <para>Required - Picklist</para>
		/// <para>MatchType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_matchtype? msdyn_matchtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_matchtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_matchtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_matchtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_matchtype] = null;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_objecttypecode? msdyn_objecttypecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_objecttypecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_objecttypecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_objecttypecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_objecttypecode] = null;
			}
		}

		/// <summary>
		/// <para>Required - Lookup to msdyn_segment</para>
		/// <para>Segment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segmentid); }
			set { Entity.Attributes[Fields.msdyn_segmentid] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>Seller Filter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sellerfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sellerfilter); }
			set { Entity.Attributes[Fields.msdyn_sellerfilter] = value; }
		}

		/// <summary>
		/// <para>List of specific sellers or teams that needs to be assigned.</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Sellers or Team.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SpecificSellersOrTeams
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SpecificSellersOrTeams); }
			set { Entity.Attributes[Fields.msdyn_SpecificSellersOrTeams] = value; }
		}

		/// <summary>
		/// <para>Trigger when the rule needs to be evaluated</para>
		/// <para>Required - Picklist</para>
		/// <para>TriggerType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_triggertype? msdyn_triggertype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_triggertype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_triggertype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_triggertype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_triggertype] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Assignment Rule</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Assignment Rule</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
