//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_workqueuerecordOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_workqueuerecord : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_displayattributes = "msdyn_displayattributes";
			public const string msdyn_duetime = "msdyn_duetime";
			public const string msdyn_endtime = "msdyn_endtime";
			public const string msdyn_entitysetname = "msdyn_entitysetname";
			public const string msdyn_entitytypecode = "msdyn_entitytypecode";
			public const string msdyn_entitytypedisplayname = "msdyn_entitytypedisplayname";
			public const string msdyn_entitytypelogicalname = "msdyn_entitytypelogicalname";
			public const string msdyn_filterattributes = "msdyn_filterattributes";
			public const string msdyn_linkedactivityid = "msdyn_linkedactivityid";
			public const string msdyn_nextactionerrorstate = "msdyn_nextactionerrorstate";
			public const string msdyn_nextactionid = "msdyn_nextactionid";
			public const string msdyn_nextactionname = "msdyn_nextactionname";
			public const string msdyn_nextactionsource = "msdyn_nextactionsource";
			public const string msdyn_nextactionsubtype = "msdyn_nextactionsubtype";
			public const string msdyn_nextactiontype = "msdyn_nextactiontype";
			public const string msdyn_nextactiontypedisplayname = "msdyn_nextactiontypedisplayname";
			public const string msdyn_nextactionwaitstate = "msdyn_nextactionwaitstate";
			public const string msdyn_operationparameter = "msdyn_operationparameter";
			public const string msdyn_primaryentityid = "msdyn_primaryentityid";
			public const string msdyn_primaryname = "msdyn_primaryname";
			public const string msdyn_prioritygrade = "msdyn_prioritygrade";
			public const string msdyn_priorityscore = "msdyn_priorityscore";
			public const string msdyn_sequenceid = "msdyn_sequenceid";
			public const string msdyn_sequencename = "msdyn_sequencename";
			public const string msdyn_sequencestepid = "msdyn_sequencestepid";
			public const string msdyn_workqueuerecordId = "msdyn_workqueuerecordid";
		}

		public const string EntityLogicalName = "msdyn_workqueuerecord";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10310;

		[DebuggerNonUserCode()]
		public msdyn_workqueuerecord()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workqueuerecord(Guid msdyn_workqueuerecordId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_workqueuerecordId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workqueuerecord(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workqueuerecord(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workqueuerecord(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_workqueuerecord(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Display Attributes</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Display Attributes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_displayattributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_displayattributes); }
			set { Entity.Attributes[Fields.msdyn_displayattributes] = value; }
		}

		/// <summary>
		/// <para>Next activity or Sequence step due time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Next Action Due time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_duetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_duetime); }
			set { Entity.Attributes[Fields.msdyn_duetime] = value; }
		}

		/// <summary>
		/// <para>Activity End time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Activity End time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_endtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_endtime); }
			set { Entity.Attributes[Fields.msdyn_endtime] = value; }
		}

		/// <summary>
		/// <para>Set Name of Entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Entity Set Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entitysetname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entitysetname); }
			set { Entity.Attributes[Fields.msdyn_entitysetname] = value; }
		}

		/// <summary>
		/// <para>Entity Type code for this entity.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Entity Type Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_entitytypecode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_entitytypecode); }
			set { Entity.Attributes[Fields.msdyn_entitytypecode] = value; }
		}

		/// <summary>
		/// <para>Display Name of Entity Type.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>EntityType Display Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entitytypedisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entitytypedisplayname); }
			set { Entity.Attributes[Fields.msdyn_entitytypedisplayname] = value; }
		}

		/// <summary>
		/// <para>Logical Name of Entity Type.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>EntityType Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entitytypelogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entitytypelogicalname); }
			set { Entity.Attributes[Fields.msdyn_entitytypelogicalname] = value; }
		}

		/// <summary>
		/// <para>Fields added for performing client side custom filtering.</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Filter Attributes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_filterattributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_filterattributes); }
			set { Entity.Attributes[Fields.msdyn_filterattributes] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the activity linked to the sequence step</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Linked activity id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_linkedactivityid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_linkedactivityid); }
			set { Entity.Attributes[Fields.msdyn_linkedactivityid] = value; }
		}

		/// <summary>
		/// <para>Next action error state for this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Next action error state</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_nextactionerrorstate
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_nextactionerrorstate); }
			set { Entity.Attributes[Fields.msdyn_nextactionerrorstate] = value; }
		}

		/// <summary>
		/// <para>GUID for next action id.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Next Action Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_nextactionid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_nextactionid); }
			set { Entity.Attributes[Fields.msdyn_nextactionid] = value; }
		}

		/// <summary>
		/// <para>Next action name from Sequence/Activity.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Next Action Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_nextactionname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_nextactionname); }
			set { Entity.Attributes[Fields.msdyn_nextactionname] = value; }
		}

		/// <summary>
		/// <para>Source name for action from Sequence or Activity.</para>
		/// <para>String - MaxLength: 80</para>
		/// <para>Next Action Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_nextactionsource
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_nextactionsource); }
			set { Entity.Attributes[Fields.msdyn_nextactionsource] = value; }
		}

		/// <summary>
		/// <para>Display Name for Next Action Sub Type.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Next Action Sub Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_nextactionsubtype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_nextactionsubtype); }
			set { Entity.Attributes[Fields.msdyn_nextactionsubtype] = value; }
		}

		/// <summary>
		/// <para>Activity Name or Sequence step like Email, Phone Call, Task etc.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Next Action Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_nextactiontype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_nextactiontype); }
			set { Entity.Attributes[Fields.msdyn_nextactiontype] = value; }
		}

		/// <summary>
		/// <para>Display Name for Next Action Type.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Next Action Type Display Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_nextactiontypedisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_nextactiontypedisplayname); }
			set { Entity.Attributes[Fields.msdyn_nextactiontypedisplayname] = value; }
		}

		/// <summary>
		/// <para>Next action wait state for this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Next action wait state</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_nextactionwaitstate
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_nextactionwaitstate); }
			set { Entity.Attributes[Fields.msdyn_nextactionwaitstate] = value; }
		}

		/// <summary>
		/// <para>Sequence Operation Parameter.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Sequence Operation Parameter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_operationparameter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_operationparameter); }
			set { Entity.Attributes[Fields.msdyn_operationparameter] = value; }
		}

		/// <summary>
		/// <para>Unique ID for entity record.</para>
		/// <para>Required - Uniqueidentifier</para>
		/// <para>Primary Entity Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_primaryentityid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_primaryentityid); }
			set { Entity.Attributes[Fields.msdyn_primaryentityid] = value; }
		}

		/// <summary>
		/// <para>Name of the entity for the related workqueue record.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Primary Entity Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_primaryname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_primaryname); }
			set { Entity.Attributes[Fields.msdyn_primaryname] = value; }
		}

		/// <summary>
		/// <para>Priority grade for primary entity.</para>
		/// <para>String - MaxLength: 300</para>
		/// <para>Priority Grade</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_prioritygrade
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_prioritygrade); }
			set { Entity.Attributes[Fields.msdyn_prioritygrade] = value; }
		}

		/// <summary>
		/// <para>Priority score for primary entity.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Priority Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_priorityscore
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_priorityscore); }
			set { Entity.Attributes[Fields.msdyn_priorityscore] = value; }
		}

		/// <summary>
		/// <para>GUID of sequence id.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Sequence Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_sequenceid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_sequenceid); }
			set { Entity.Attributes[Fields.msdyn_sequenceid] = value; }
		}

		/// <summary>
		/// <para>Name of the Sequence</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Sequence Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sequencename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sequencename); }
			set { Entity.Attributes[Fields.msdyn_sequencename] = value; }
		}

		/// <summary>
		/// <para>GUID of sequence step id.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Sequence Step Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_sequencestepid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_sequencestepid); }
			set { Entity.Attributes[Fields.msdyn_sequencestepid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>WorkQueue Record Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_workqueuerecordId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_workqueuerecordId] = value;
				Entity.Id = value;
			}
		}
	}
}
