//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets
{
	public enum ExpiredReviewOptions
	{
		/// <summary>
		/// Archive = 2
		/// </summary>
		Archive = 2,
		/// <summary>
		/// Needs Updating = 0
		/// </summary>
		Needs_Updating = 0,
		/// <summary>
		/// Republish = 1
		/// </summary>
		Republish = 1
	}

	public enum Review
	{
		/// <summary>
		/// Approved = 0
		/// </summary>
		Approved = 0,
		/// <summary>
		/// Rejected = 1
		/// </summary>
		Rejected = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Approved = 1
		/// </summary>
		Approved = 1,
		/// <summary>
		/// Archived = 5
		/// </summary>
		Archived = 5,
		/// <summary>
		/// Discarded = 6
		/// </summary>
		Discarded = 6,
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0,
		/// <summary>
		/// Expired = 4
		/// </summary>
		Expired = 4,
		/// <summary>
		/// Published = 3
		/// </summary>
		Published = 3,
		/// <summary>
		/// Scheduled = 2
		/// </summary>
		Scheduled = 2
	}

	public enum StatusCode
	{
		/// <summary>
		/// Approved = 5
		/// </summary>
		Approved = 5,
		/// <summary>
		/// Archived = 12
		/// </summary>
		Archived = 12,
		/// <summary>
		/// Discarded = 13
		/// </summary>
		Discarded = 13,
		/// <summary>
		/// Draft = 2
		/// </summary>
		Draft = 2,
		/// <summary>
		/// Expired = 10
		/// </summary>
		Expired = 10,
		/// <summary>
		/// In review = 4
		/// </summary>
		In_review = 4,
		/// <summary>
		/// Needs review = 3
		/// </summary>
		Needs_review_3 = 3,
		/// <summary>
		/// Needs review = 8
		/// </summary>
		Needs_review_8 = 8,
		/// <summary>
		/// Proposed = 1
		/// </summary>
		Proposed = 1,
		/// <summary>
		/// Published = 7
		/// </summary>
		Published = 7,
		/// <summary>
		/// Rejected = 11
		/// </summary>
		Rejected_11 = 11,
		/// <summary>
		/// Rejected = 14
		/// </summary>
		Rejected_14 = 14,
		/// <summary>
		/// Scheduled = 6
		/// </summary>
		Scheduled = 6,
		/// <summary>
		/// Updating = 9
		/// </summary>
		Updating = 9
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class KnowledgeArticle : EntityBase
	{
		public struct Fields
		{
			public const string ArticlePublicNumber = "articlepublicnumber";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string ExpirationDate = "expirationdate";
			public const string ExpirationStateId = "expirationstateid";
			public const string ExpirationStatusId = "expirationstatusid";
			public const string ExpiredReviewOptions = "expiredreviewoptions";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsInternal = "isinternal";
			public const string IsLatestVersion = "islatestversion";
			public const string IsPrimary = "isprimary";
			public const string IsRootArticle = "isrootarticle";
			public const string Keywords = "keywords";
			public const string knowledgearticleId = "knowledgearticleid";
			public const string KnowledgeArticleViews = "knowledgearticleviews";
			public const string KnowledgeArticleViews_Date = "knowledgearticleviews_date";
			public const string KnowledgeArticleViews_State = "knowledgearticleviews_state";
			public const string LanguageLocaleId = "languagelocaleid";
			public const string MajorVersionNumber = "majorversionnumber";
			public const string MinorVersionNumber = "minorversionnumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_contentstore = "msdyn_contentstore";
			public const string msdyn_ingestedarticleurl = "msdyn_ingestedarticleurl";
			public const string msdyn_iscontentsyncedtostore = "msdyn_iscontentsyncedtostore";
			public const string msdyn_isingestedarticle = "msdyn_isingestedarticle";
			public const string msdyn_keywordsdescsuggestioncontrol = "msdyn_keywordsdescsuggestioncontrol";
			public const string msdyn_retrycountformigrationtocontentstore = "msdyn_retrycountformigrationtocontentstore";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentArticleContentId = "parentarticlecontentid";
			public const string PreviousArticleContentId = "previousarticlecontentid";
			public const string primaryauthorid = "primaryauthorid";
			public const string processid = "processid";
			public const string PublishOn = "publishon";
			public const string PublishStatusId = "publishstatusid";
			public const string Rating = "rating";
			public const string Rating_Count = "rating_count";
			public const string Rating_Date = "rating_date";
			public const string Rating_State = "rating_state";
			public const string Rating_Sum = "rating_sum";
			public const string ReadyForReview = "readyforreview";
			public const string Review = "review";
			public const string RootArticleId = "rootarticleid";
			public const string ScheduledStatusId = "scheduledstatusid";
			public const string SetCategoryAssociations = "setcategoryassociations";
			public const string SetProductAssociations = "setproductassociations";
			public const string stageid = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubjectId = "subjectid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UpdateContent = "updatecontent";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "knowledgearticle";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9953;

		[DebuggerNonUserCode()]
		public KnowledgeArticle()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeArticle(Guid KnowledgeArticleId)
		{
			Entity = new Entity(EntityLogicalName, KnowledgeArticleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeArticle(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeArticle(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeArticle(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public KnowledgeArticle(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the automatically generated ID exposed to customers, partners, and other external users to reference and look up articles.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Article Public Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ArticlePublicNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ArticlePublicNumber); }
			set { Entity.Attributes[Fields.ArticlePublicNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the body of the article stored in HTML format.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Content</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>A short overview of the article, primarily used in search results and for search engine optimization.</para>
		/// <para>String - MaxLength: 155</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the KnowledgeArticle with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>ExchangeRate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Enter an expiration date for the article. Leave this field blank for no expiration date.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Expiration Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExpirationDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExpirationDate); }
			set { Entity.Attributes[Fields.ExpirationDate] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the expiration state of the entity.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Expiration State Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpirationStateId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpirationStateId); }
			set { Entity.Attributes[Fields.ExpirationStateId] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the expiration status of the entity.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Expired Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpirationStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpirationStatusId); }
			set { Entity.Attributes[Fields.ExpirationStatusId] = value; }
		}

		/// <summary>
		/// <para>Expired Review Options</para>
		/// <para>Picklist</para>
		/// <para>Expired Review Options</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.ExpiredReviewOptions? ExpiredReviewOptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExpiredReviewOptions);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.ExpiredReviewOptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExpiredReviewOptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ExpiredReviewOptions] = null;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Shows whether this article is only visible internally.</para>
		/// <para>Boolean</para>
		/// <para>Internal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsInternal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsInternal); }
			set { Entity.Attributes[Fields.IsInternal] = value; }
		}

		/// <summary>
		/// <para>Shows which version of the knowledge article is the latest version.</para>
		/// <para>Boolean</para>
		/// <para>Is Latest Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLatestVersion
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLatestVersion); }
			set { Entity.Attributes[Fields.IsLatestVersion] = value; }
		}

		/// <summary>
		/// <para>Select whether the article is the primary article.</para>
		/// <para>Boolean</para>
		/// <para>Primary Article</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrimary
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrimary); }
			set { Entity.Attributes[Fields.IsPrimary] = value; }
		}

		/// <summary>
		/// <para>Select whether the article is the root article.</para>
		/// <para>Boolean</para>
		/// <para>Root Article</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRootArticle
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRootArticle); }
			set { Entity.Attributes[Fields.IsRootArticle] = value; }
		}

		/// <summary>
		/// <para>Type keywords to be used for searches in knowledge base articles. Separate keywords by using commas.</para>
		/// <para>Memo - MaxLength: 4000</para>
		/// <para>Keywords</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Keywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.Keywords); }
			set { Entity.Attributes[Fields.Keywords] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Knowledge Article</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid knowledgearticleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.knowledgearticleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the total number of article views.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Knowledge Article Views</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? KnowledgeArticleViews
		{
			get { return Entity.GetAttributeValue<int?>(Fields.KnowledgeArticleViews); }
		}

		/// <summary>
		/// <para>The date time for Knowledge Article View.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Knowledge Article View(Last Updated Time)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? KnowledgeArticleViews_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.KnowledgeArticleViews_Date); }
		}

		/// <summary>
		/// <para>State of Knowledge Article View.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Knowledge Article View(State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? KnowledgeArticleViews_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.KnowledgeArticleViews_State); }
		}

		/// <summary>
		/// <para>Select the language that the article&apos;s content is in.</para>
		/// <para>Lookup to languagelocale</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference LanguageLocaleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.LanguageLocaleId); }
			set { Entity.Attributes[Fields.LanguageLocaleId] = value; }
		}

		/// <summary>
		/// <para>Shows the major version number of this article&apos;s content.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Major Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MajorVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MajorVersionNumber); }
			set { Entity.Attributes[Fields.MajorVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the minor version number of this article&apos;s content.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Minor Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinorVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinorVersionNumber); }
			set { Entity.Attributes[Fields.MinorVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Stores the reference to content field in the knowledge article</para>
		/// <para>ReadOnly - Virtual</para>
		/// <para>File storage content reference</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_contentstore
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_contentstore); }
		}

		/// <summary>
		/// <para>Ingested article URL</para>
		/// <para>String - MaxLength: 2048</para>
		/// <para>Ingested Article URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ingestedarticleurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ingestedarticleurl); }
			set { Entity.Attributes[Fields.msdyn_ingestedarticleurl] = value; }
		}

		/// <summary>
		/// <para>Sets whether the article content is synced to file storage</para>
		/// <para>Boolean</para>
		/// <para>Is content synced to file storage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_iscontentsyncedtostore
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_iscontentsyncedtostore); }
			set { Entity.Attributes[Fields.msdyn_iscontentsyncedtostore] = value; }
		}

		/// <summary>
		/// <para>Value is true for all Ingested articles</para>
		/// <para>Boolean</para>
		/// <para>Is Ingested Article</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isingestedarticle
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isingestedarticle); }
			set { Entity.Attributes[Fields.msdyn_isingestedarticle] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Keywords and Description Suggestion control</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_keywordsdescsuggestioncontrol
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_keywordsdescsuggestioncontrol); }
			set { Entity.Attributes[Fields.msdyn_keywordsdescsuggestioncontrol] = value; }
		}

		/// <summary>
		/// <para>Displays the number of times migration to file storage retry is attempted for an article</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>File storage migration retry count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_retrycountformigrationtocontentstore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_retrycountformigrationtocontentstore); }
			set { Entity.Attributes[Fields.msdyn_retrycountformigrationtocontentstore] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the record.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the parent article content associated with the entity.</para>
		/// <para>Lookup to knowledgearticle</para>
		/// <para>Parent Article Content Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentArticleContentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentArticleContentId); }
			set { Entity.Attributes[Fields.ParentArticleContentId] = value; }
		}

		/// <summary>
		/// <para>Shows the version that the current article was restored from.</para>
		/// <para>Lookup to knowledgearticle</para>
		/// <para>Previous Article Content ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreviousArticleContentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreviousArticleContentId); }
			set { Entity.Attributes[Fields.PreviousArticleContentId] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the primary author associated with the article.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Primary Author Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference primaryauthorid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.primaryauthorid); }
			set { Entity.Attributes[Fields.primaryauthorid] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Date and time when the record was published.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Publish On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PublishOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PublishOn); }
			set { Entity.Attributes[Fields.PublishOn] = value; }
		}

		/// <summary>
		/// <para>Publish Status of the Article.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Published Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PublishStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PublishStatusId); }
			set { Entity.Attributes[Fields.PublishStatusId] = value; }
		}

		/// <summary>
		/// <para>Information which specifies how helpful the related record was.</para>
		/// <para>ReadOnly - Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Rating</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Rating
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Rating); }
		}

		/// <summary>
		/// <para>Rating Count</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Rating(Count)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rating_Count
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rating_Count); }
		}

		/// <summary>
		/// <para>The date time for Rating.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Rating(Last Updated Time)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? Rating_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.Rating_Date); }
		}

		/// <summary>
		/// <para>State of Rating</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Rating(State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rating_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rating_State); }
		}

		/// <summary>
		/// <para>Total sum of Rating</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Rating(sum)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Rating_Sum
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Rating_Sum); }
		}

		/// <summary>
		/// <para>Ready For Review</para>
		/// <para>Boolean</para>
		/// <para>Ready For Review</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ReadyForReview
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ReadyForReview); }
			set { Entity.Attributes[Fields.ReadyForReview] = value; }
		}

		/// <summary>
		/// <para>Review</para>
		/// <para>Picklist</para>
		/// <para>Review</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.Review? Review
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Review);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.Review)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Review] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Review] = null;
			}
		}

		/// <summary>
		/// <para>Contains the id of the root article.</para>
		/// <para>Lookup to knowledgearticle</para>
		/// <para>Root Article Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RootArticleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RootArticleId); }
			set { Entity.Attributes[Fields.RootArticleId] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the scheduled status of the entity.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Scheduled Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledStatusId); }
			set { Entity.Attributes[Fields.ScheduledStatusId] = value; }
		}

		/// <summary>
		/// <para>Shows whether category associations have been set</para>
		/// <para>Boolean</para>
		/// <para>Set Category Associations</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SetCategoryAssociations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SetCategoryAssociations); }
			set { Entity.Attributes[Fields.SetCategoryAssociations] = value; }
		}

		/// <summary>
		/// <para>Set Product Associations</para>
		/// <para>Boolean</para>
		/// <para>Set Product Associations</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SetProductAssociations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SetProductAssociations); }
			set { Entity.Attributes[Fields.SetProductAssociations] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Shows whether the article is a draft or is published, archived, or discarded. Draft articles aren&apos;t available externally and can be edited. Published articles are available externally, based on applicable permissions, but can&apos;t be edited. All metadata changes are reflected in the published version. Archived and discarded articles aren&apos;t available externally and can&apos;t be edited.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the article&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Choose the subject of the article to assist with article searches. You can configure subjects under Business Management in the Settings area.</para>
		/// <para>Lookup to subject</para>
		/// <para>Subject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubjectId); }
			set { Entity.Attributes[Fields.SubjectId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Type a title for the article.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the KnowledgeArticle with respect to the base currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Update Content</para>
		/// <para>Boolean</para>
		/// <para>Update Content</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UpdateContent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UpdateContent); }
			set { Entity.Attributes[Fields.UpdateContent] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
