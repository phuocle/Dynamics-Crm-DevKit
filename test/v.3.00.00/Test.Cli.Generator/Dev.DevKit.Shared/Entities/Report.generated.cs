//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ReportOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum ReportTypeCode
	{
		/// <summary>
		/// Linked Report = 3
		/// </summary>
		Linked_Report = 3,
		/// <summary>
		/// Other Report = 2
		/// </summary>
		Other_Report = 2,
		/// <summary>
		/// Reporting Services Report = 1
		/// </summary>
		Reporting_Services_Report = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Report : EntityBase
	{
		public struct Fields
		{
			public const string BodyBinary = "bodybinary";
			public const string BodyText = "bodytext";
			public const string BodyUrl = "bodyurl";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedInMajorVersion = "createdinmajorversion";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomReportXml = "customreportxml";
			public const string DefaultFilter = "defaultfilter";
			public const string Description = "description";
			public const string FileName = "filename";
			public const string FileSize = "filesize";
			public const string IntroducedVersion = "introducedversion";
			public const string IsCustomReport = "iscustomreport";
			public const string IsManaged = "ismanaged";
			public const string IsPersonal = "ispersonal";
			public const string IsScheduledReport = "isscheduledreport";
			public const string LanguageCode = "languagecode";
			public const string MimeType = "mimetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OriginalBodyText = "originalbodytext";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentReportId = "parentreportid";
			public const string QueryInfo = "queryinfo";
			public const string RdlHash = "rdlhash";
			public const string ReportId = "reportid";
			public const string ReportIdUnique = "reportidunique";
			public const string ReportNameOnSRS = "reportnameonsrs";
			public const string ReportTypeCode = "reporttypecode";
			public const string ScheduleXml = "schedulexml";
			public const string SignatureDate = "signaturedate";
			public const string SignatureId = "signatureid";
			public const string SignatureLcid = "signaturelcid";
			public const string SignatureMajorVersion = "signaturemajorversion";
			public const string SignatureMinorVersion = "signatureminorversion";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "report";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9100;

		[DebuggerNonUserCode()]
		public Report()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Report(Guid ReportId)
		{
			Entity = new Entity(EntityLogicalName, ReportId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Report(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Report(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Report(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Report(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Binary report contents (base-64 encoded).</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Body Binary</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BodyBinary
		{
			get { return Entity.GetAttributeValue<string>(Fields.BodyBinary); }
			set { Entity.Attributes[Fields.BodyBinary] = value; }
		}

		/// <summary>
		/// <para>Text contents of the RDL file for a Reporting Services report.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Body Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BodyText
		{
			get { return Entity.GetAttributeValue<string>(Fields.BodyText); }
			set { Entity.Attributes[Fields.BodyText] = value; }
		}

		/// <summary>
		/// <para>URL for a linked report.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Linked Report URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BodyUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.BodyUrl); }
			set { Entity.Attributes[Fields.BodyUrl] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ReportOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ReportOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the report.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Major version number of Crm, used to identify the version of Crm in which report is created.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Crm Version in which the Report is created</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CreatedInMajorVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CreatedInMajorVersion); }
			set { Entity.Attributes[Fields.CreatedInMajorVersion] = value; }
		}

		/// <summary>
		/// <para>Date and time when the report was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the report.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>XML used to define a custom report.</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para>Custom Report XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomReportXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomReportXml); }
		}

		/// <summary>
		/// <para>Default filter for the report.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Default filter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultFilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultFilter); }
			set { Entity.Attributes[Fields.DefaultFilter] = value; }
		}

		/// <summary>
		/// <para>Description of the report.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>File name of the report.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}

		/// <summary>
		/// <para>File size of the report.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>File Size (Bytes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}

		/// <summary>
		/// <para>Version in which the report is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Information about whether the report is a custom report.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Custom Report</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCustomReport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCustomReport); }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Information about whether the report is personal or is available to all users.</para>
		/// <para>Boolean</para>
		/// <para>Viewable By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPersonal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPersonal); }
			set { Entity.Attributes[Fields.IsPersonal] = value; }
		}

		/// <summary>
		/// <para>Information about whether the report is a scheduled report.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Scheduled Report</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsScheduledReport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsScheduledReport); }
		}

		/// <summary>
		/// <para>Language in which the report will be displayed.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageCode); }
			set { Entity.Attributes[Fields.LanguageCode] = value; }
		}

		/// <summary>
		/// <para>MIME type of the report.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Mime Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the report.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the report was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the report.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the report.</para>
		/// <para>String - MaxLength: 425</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Original Text contents of the RDL file for a Reporting Services report.</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para>Body Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OriginalBodyText
		{
			get { return Entity.GetAttributeValue<string>(Fields.OriginalBodyText); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the report.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the report.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the report.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the report.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the parent report.</para>
		/// <para>Lookup to report</para>
		/// <para>Parent Report</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentReportId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentReportId); }
			set { Entity.Attributes[Fields.ParentReportId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para>Query Info Structure</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QueryInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.QueryInfo); }
		}

		/// <summary>
		/// <para>Hash value of the body text of the report.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Body Text Hash</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RdlHash
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RdlHash); }
		}

		/// <summary>
		/// <para>Unique identifier of the report.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Report</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ReportId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ReportId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Report</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ReportIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ReportIdUnique); }
		}

		/// <summary>
		/// <para>Name of the report on SRS.</para>
		/// <para>ReadOnly - String - MaxLength: 425</para>
		/// <para>Name on SRS</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReportNameOnSRS
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReportNameOnSRS); }
		}

		/// <summary>
		/// <para>Type of the report.</para>
		/// <para>Required - Picklist</para>
		/// <para>Report Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ReportOptionSets.ReportTypeCode? ReportTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReportTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ReportOptionSets.ReportTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReportTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReportTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>XML used for defining the report schedule.</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para>Schedule Definition XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ScheduleXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ScheduleXml); }
		}

		/// <summary>
		/// <para>Report signature date, used to identify a report for upgrades and hotfixes.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Report Signature Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SignatureDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SignatureDate); }
			set { Entity.Attributes[Fields.SignatureDate] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the report signature used to identify a report for upgrades and hotfixes.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Signature</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SignatureId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SignatureId); }
			set { Entity.Attributes[Fields.SignatureId] = value; }
		}

		/// <summary>
		/// <para>Report signature language code used to identify a report for upgrades and hotfixes.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Signature Language Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SignatureLcid
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SignatureLcid); }
			set { Entity.Attributes[Fields.SignatureLcid] = value; }
		}

		/// <summary>
		/// <para>Report signature major version, used to identify a report for upgrades and hotfixes.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Report Signature Major Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SignatureMajorVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SignatureMajorVersion); }
			set { Entity.Attributes[Fields.SignatureMajorVersion] = value; }
		}

		/// <summary>
		/// <para>Report signature minor version, used to identify a report for upgrades and hotfixes.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Report Signature Minor Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SignatureMinorVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SignatureMinorVersion); }
			set { Entity.Attributes[Fields.SignatureMinorVersion] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version number of the report.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
