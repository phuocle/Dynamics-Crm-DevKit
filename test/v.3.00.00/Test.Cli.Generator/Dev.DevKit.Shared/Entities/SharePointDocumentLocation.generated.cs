//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets
{
	public enum LocationType
	{
		/// <summary>
		/// Dedicated for OneNote Integration = 1
		/// </summary>
		Dedicated_for_OneNote_Integration = 1,
		/// <summary>
		/// General = 0
		/// </summary>
		General = 0
	}

	public enum ServiceType
	{
		/// <summary>
		/// MS Teams = 3
		/// </summary>
		MS_Teams = 3,
		/// <summary>
		/// OneDrive = 1
		/// </summary>
		OneDrive = 1,
		/// <summary>
		/// Shared with me = 2
		/// </summary>
		Shared_with_me = 2,
		/// <summary>
		/// SharePoint = 0
		/// </summary>
		SharePoint = 0
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SharePointDocumentLocation : EntityBase
	{
		public struct Fields
		{
			public const string AbsoluteURL = "absoluteurl";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string LocationType = "locationtype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentSiteOrLocation = "parentsiteorlocation";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RelativeUrl = "relativeurl";
			public const string ServiceType = "servicetype";
			public const string SharePointDocumentLocationId = "sharepointdocumentlocationid";
			public const string SiteCollectionId = "sitecollectionid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UserId = "userid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "sharepointdocumentlocation";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9508;

		[DebuggerNonUserCode()]
		public SharePointDocumentLocation()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocumentLocation(Guid SharePointDocumentLocationId)
		{
			Entity = new Entity(EntityLogicalName, SharePointDocumentLocationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocumentLocation(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocumentLocation(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocumentLocation(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocumentLocation(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Absolute URL of the SharePoint document location.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Absolute URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AbsoluteURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.AbsoluteURL); }
			set { Entity.Attributes[Fields.AbsoluteURL] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the SharePoint document location record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the SharePoint document location record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the SharePoint document location record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the SharePoint document location record.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Exchange rate between the currency associated with the SharePoint document location record and the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created the SharePoint document location record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Location type of the SharePoint document location.</para>
		/// <para>Picklist</para>
		/// <para>Location Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets.LocationType? LocationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LocationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets.LocationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LocationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LocationType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the SharePoint document location record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the SharePoint document location record was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the SharePoint document location record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the SharePoint document location record.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the SharePoint document location record.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the SharePoint document location record.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the SharePoint document location record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the SharePoint document location record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the parent site or location.</para>
		/// <para>Lookup to sharepointdocumentlocation, sharepointsite</para>
		/// <para>Parent Site or Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentSiteOrLocation
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentSiteOrLocation); }
			set { Entity.Attributes[Fields.ParentSiteOrLocation] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the object with which the SharePoint document location record is associated.</para>
		/// <para>Lookup to account, kbarticle, knowledgearticle, lead, msdyn_agreement, msdyn_agreementbookingdate, msdyn_agreementbookingsetup, msdyn_agreementinvoicedate, msdyn_agreementinvoicesetup, msdyn_bookingtimestamp, msdyn_expense, msdyn_incidenttypeproduct, msdyn_inventoryadjustment, msdyn_inventoryadjustmentproduct, msdyn_inventorytransfer, msdyn_knowledgearticletemplate, msdyn_playbookactivity, msdyn_project, msdyn_purchaseorder, msdyn_purchaseorderproduct, msdyn_purchaseorderreceipt, msdyn_resourceterritory, msdyn_rma, msdyn_rmareceipt, msdyn_rtv, msdyn_timegroup, msdyn_timegroupdetail, msdyn_warehouse, msdyn_workorder, msdyn_workorderincident, msdyn_workorderproduct, msdyn_workorderservice, msdyn_workorderservicetask, opportunity, product, quote, salesliterature</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Relative URL of the SharePoint document location.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>Relative URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelativeUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelativeUrl); }
			set { Entity.Attributes[Fields.RelativeUrl] = value; }
		}

		/// <summary>
		/// <para>Shows the service type of the SharePoint site.</para>
		/// <para>Picklist</para>
		/// <para>Service Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets.ServiceType? ServiceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServiceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets.ServiceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServiceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServiceType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the SharePoint document location record.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>SharePoint Document Location ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SharePointDocumentLocationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SharePointDocumentLocationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SiteCollectionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SiteCollectionId); }
		}

		/// <summary>
		/// <para>Status of the SharePoint document location record.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the SharePoint document location record.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointDocumentLocationOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the SharePoint document location record.</para>
		/// <para>ReadOnly - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}

		/// <summary>
		/// <para>Choose the user who owns the SharePoint document location.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>SharePoint Document Location Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UserId); }
			set { Entity.Attributes[Fields.UserId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
