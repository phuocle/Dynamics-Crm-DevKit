//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.AppModuleMetadataOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class AppModuleMetadata : EntityBase
	{
		public struct Fields
		{
			public const string AppModuleId = "appmoduleid";
			public const string AppModuleMetadataId = "appmodulemetadataid";
			public const string ComponentId = "componentid";
			public const string ComponentIsDefault = "componentisdefault";
			public const string ComponentIsQuickFindQuery = "componentisquickfindquery";
			public const string ComponentIsTabletEnabled = "componentistabletenabled";
			public const string ComponentIsUserChart = "componentisuserchart";
			public const string ComponentIsUserForm = "componentisuserform";
			public const string ComponentIsUserView = "componentisuserview";
			public const string ComponentStateCode = "componentstatecode";
			public const string ComponentSubType = "componentsubtype";
			public const string ComponentType = "componenttype";
			public const string ComponentVersion = "componentversion";
			public const string CreatedOn = "createdon";
			public const string ModifiedOn = "modifiedon";
			public const string ParentComponentId = "parentcomponentid";
			public const string State = "state";
		}

		public const string EntityLogicalName = "appmodulemetadata";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8700;

		[DebuggerNonUserCode()]
		public AppModuleMetadata()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModuleMetadata(Guid AppModuleMetadataId)
		{
			Entity = new Entity(EntityLogicalName, AppModuleMetadataId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModuleMetadata(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModuleMetadata(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModuleMetadata(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AppModuleMetadata(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>AppModule Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AppModuleId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AppModuleId); }
			set { Entity.Attributes[Fields.AppModuleId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>AppModule Metadata Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AppModuleMetadataId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AppModuleMetadataId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Component Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentId); }
			set { Entity.Attributes[Fields.ComponentId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Default for Component</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsDefault); }
			set { Entity.Attributes[Fields.ComponentIsDefault] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Saved Query Is Quick Find Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsQuickFindQuery
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsQuickFindQuery); }
			set { Entity.Attributes[Fields.ComponentIsQuickFindQuery] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>System Form Is Tablet Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsTabletEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsTabletEnabled); }
			set { Entity.Attributes[Fields.ComponentIsTabletEnabled] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Saved Query Visualization Or User Query Visualization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsUserChart
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsUserChart); }
			set { Entity.Attributes[Fields.ComponentIsUserChart] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>System Form Or User Form</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsUserForm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsUserForm); }
			set { Entity.Attributes[Fields.ComponentIsUserForm] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Saved Query Or User Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsUserView
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsUserView); }
			set { Entity.Attributes[Fields.ComponentIsUserView] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Workflow State Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComponentStateCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComponentStateCode); }
			set { Entity.Attributes[Fields.ComponentStateCode] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Component Sub-Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComponentSubType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComponentSubType); }
			set { Entity.Attributes[Fields.ComponentSubType] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Component Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComponentType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComponentType); }
			set { Entity.Attributes[Fields.ComponentType] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>BigInt</para>
		/// <para>Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? ComponentVersion
		{
			get { return Entity.GetAttributeValue<long?>(Fields.ComponentVersion); }
			set { Entity.Attributes[Fields.ComponentVersion] = value; }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Parent Component Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ParentComponentId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ParentComponentId); }
			set { Entity.Attributes[Fields.ParentComponentId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>State of the record</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.State); }
			set { Entity.Attributes[Fields.State] = value; }
		}
	}
}
