//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_AITemplateOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_AITemplate : EntityBase
	{
		public struct Fields
		{
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AITemplateId = "msdyn_aitemplateid";
			public const string msdyn_AITemplateIdUnique = "msdyn_aitemplateidunique";
			public const string msdyn_DataBinding = "msdyn_databinding";
			public const string msdyn_defaultrunschedulingoptions = "msdyn_defaultrunschedulingoptions";
			public const string msdyn_IsTrainable = "msdyn_istrainable";
			public const string msdyn_ModelAction = "msdyn_modelaction";
			public const string msdyn_ResourceInfo = "msdyn_resourceinfo";
			public const string msdyn_RunConfigSchema = "msdyn_runconfigschema";
			public const string msdyn_RunDataSpecification = "msdyn_rundataspecification";
			public const string msdyn_TemplateVersion = "msdyn_templateversion";
			public const string msdyn_TrainingConfigSchema = "msdyn_trainingconfigschema";
			public const string msdyn_TrainingDataSpecification = "msdyn_trainingdataspecification";
			public const string msdyn_UniqueName = "msdyn_uniquename";
			public const string msdyn_UXConfiguration = "msdyn_uxconfiguration";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_aitemplate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 400;

		[DebuggerNonUserCode()]
		public msdyn_AITemplate()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_AITemplate(Guid msdyn_AITemplateId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_AITemplateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_AITemplate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_AITemplate(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_AITemplate(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_AITemplate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_AITemplateOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_AITemplateOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>AITemplate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_AITemplateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_AITemplateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_AITemplateIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_AITemplateIdUnique); }
		}

		/// <summary>
		/// <para>Data binding</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>DataBinding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_DataBinding
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_DataBinding); }
			set { Entity.Attributes[Fields.msdyn_DataBinding] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>DefaultRunSchedulingOptions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_defaultrunschedulingoptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_defaultrunschedulingoptions); }
			set { Entity.Attributes[Fields.msdyn_defaultrunschedulingoptions] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>IsTrainable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsTrainable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsTrainable); }
			set { Entity.Attributes[Fields.msdyn_IsTrainable] = value; }
		}

		/// <summary>
		/// <para>Model Action</para>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>ModelAction</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModelAction
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModelAction); }
			set { Entity.Attributes[Fields.msdyn_ModelAction] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>ResourceInfo</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ResourceInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ResourceInfo); }
			set { Entity.Attributes[Fields.msdyn_ResourceInfo] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>RunConfigSchema</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RunConfigSchema
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RunConfigSchema); }
			set { Entity.Attributes[Fields.msdyn_RunConfigSchema] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>RunDataSpecification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RunDataSpecification
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RunDataSpecification); }
			set { Entity.Attributes[Fields.msdyn_RunDataSpecification] = value; }
		}

		/// <summary>
		/// <para>Template Version</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>TemplateVersion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TemplateVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TemplateVersion); }
			set { Entity.Attributes[Fields.msdyn_TemplateVersion] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>TrainingConfigSchema</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TrainingConfigSchema
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TrainingConfigSchema); }
			set { Entity.Attributes[Fields.msdyn_TrainingConfigSchema] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>TrainingDataSpecification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TrainingDataSpecification
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TrainingDataSpecification); }
			set { Entity.Attributes[Fields.msdyn_TrainingDataSpecification] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>UniqueName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UniqueName); }
			set { Entity.Attributes[Fields.msdyn_UniqueName] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>UXConfiguration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UXConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UXConfiguration); }
			set { Entity.Attributes[Fields.msdyn_UXConfiguration] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Status of the AITemplate</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_AITemplateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_AITemplateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the AITemplate</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_AITemplateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_AITemplateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
