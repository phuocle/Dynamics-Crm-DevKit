//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.IncidentOptionSets
{
	public enum CaseOriginCode
	{
		/// <summary>
		/// Email = 2
		/// </summary>
		Email = 2,
		/// <summary>
		/// Facebook = 2483
		/// </summary>
		Facebook = 2483,
		/// <summary>
		/// IoT = 700610000
		/// </summary>
		IoT = 700610000,
		/// <summary>
		/// Phone = 1
		/// </summary>
		Phone = 1,
		/// <summary>
		/// Twitter = 3986
		/// </summary>
		Twitter = 3986,
		/// <summary>
		/// Web = 3
		/// </summary>
		Web = 3
	}

	public enum CaseTypeCode
	{
		/// <summary>
		/// Problem = 2
		/// </summary>
		Problem = 2,
		/// <summary>
		/// Question = 1
		/// </summary>
		Question = 1,
		/// <summary>
		/// Request = 3
		/// </summary>
		Request = 3
	}

	public enum ContractServiceLevelCode
	{
		/// <summary>
		/// Bronze = 3
		/// </summary>
		Bronze = 3,
		/// <summary>
		/// Gold = 1
		/// </summary>
		Gold = 1,
		/// <summary>
		/// Silver = 2
		/// </summary>
		Silver = 2
	}

	public enum CustomerSatisfactionCode
	{
		/// <summary>
		/// Dissatisfied = 2
		/// </summary>
		Dissatisfied = 2,
		/// <summary>
		/// Neutral = 3
		/// </summary>
		Neutral = 3,
		/// <summary>
		/// Satisfied = 4
		/// </summary>
		Satisfied = 4,
		/// <summary>
		/// Very Dissatisfied = 1
		/// </summary>
		Very_Dissatisfied = 1,
		/// <summary>
		/// Very Satisfied = 5
		/// </summary>
		Very_Satisfied = 5
	}

	public enum FirstResponseSLAStatus
	{
		/// <summary>
		/// In Progress = 1
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// Nearing Noncompliance = 2
		/// </summary>
		Nearing_Noncompliance = 2,
		/// <summary>
		/// Noncompliant = 4
		/// </summary>
		Noncompliant = 4,
		/// <summary>
		/// Succeeded = 3
		/// </summary>
		Succeeded = 3
	}

	public enum IncidentStageCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum int_CustomerEffort
	{
		/// <summary>
		/// High = 121590002
		/// </summary>
		High = 121590002,
		/// <summary>
		/// Low = 121590000
		/// </summary>
		Low = 121590000,
		/// <summary>
		/// Medium = 121590001
		/// </summary>
		Medium = 121590001
	}

	public enum MessageTypeCode
	{
		/// <summary>
		/// Private Message = 1
		/// </summary>
		Private_Message = 1,
		/// <summary>
		/// Public Message = 0
		/// </summary>
		Public_Message = 0
	}

	public enum PriorityCode
	{
		/// <summary>
		/// High = 1
		/// </summary>
		High = 1,
		/// <summary>
		/// Low = 3
		/// </summary>
		Low = 3,
		/// <summary>
		/// Normal = 2
		/// </summary>
		Normal = 2
	}

	public enum ResolveBySLAStatus
	{
		/// <summary>
		/// In Progress = 1
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// Nearing Noncompliance = 2
		/// </summary>
		Nearing_Noncompliance = 2,
		/// <summary>
		/// Noncompliant = 4
		/// </summary>
		Noncompliant = 4,
		/// <summary>
		/// Succeeded = 3
		/// </summary>
		Succeeded = 3
	}

	public enum ServiceStage
	{
		/// <summary>
		/// Identify = 0
		/// </summary>
		Identify = 0,
		/// <summary>
		/// Research = 1
		/// </summary>
		Research = 1,
		/// <summary>
		/// Resolve = 2
		/// </summary>
		Resolve = 2
	}

	public enum SeverityCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Cancelled = 2
		/// </summary>
		Cancelled = 2,
		/// <summary>
		/// Resolved = 1
		/// </summary>
		Resolved = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Cancelled = 6
		/// </summary>
		Cancelled = 6,
		/// <summary>
		/// In Progress = 1
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// Information Provided = 1000
		/// </summary>
		Information_Provided = 1000,
		/// <summary>
		/// Merged = 2000
		/// </summary>
		Merged = 2000,
		/// <summary>
		/// On Hold = 2
		/// </summary>
		On_Hold = 2,
		/// <summary>
		/// Problem Solved = 5
		/// </summary>
		Problem_Solved = 5,
		/// <summary>
		/// Researching = 4
		/// </summary>
		Researching = 4,
		/// <summary>
		/// Waiting for Details = 3
		/// </summary>
		Waiting_for_Details = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Incident : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string ActivitiesComplete = "activitiescomplete";
			public const string ActualServiceUnits = "actualserviceunits";
			public const string BilledServiceUnits = "billedserviceunits";
			public const string BlockedProfile = "blockedprofile";
			public const string CaseOriginCode = "caseorigincode";
			public const string CaseTypeCode = "casetypecode";
			public const string CheckEmail = "checkemail";
			public const string ContactId = "contactid";
			public const string ContractDetailId = "contractdetailid";
			public const string ContractId = "contractid";
			public const string ContractServiceLevelCode = "contractservicelevelcode";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerContacted = "customercontacted";
			public const string CustomerId = "customerid";
			public const string CustomerSatisfactionCode = "customersatisfactioncode";
			public const string DecrementEntitlementTerm = "decremententitlementterm";
			public const string Description = "description";
			public const string EmailAddress = "emailaddress";
			public const string EntitlementId = "entitlementid";
			public const string EntityImageId = "entityimageid";
			public const string EscalatedOn = "escalatedon";
			public const string ExchangeRate = "exchangerate";
			public const string ExistingCase = "existingcase";
			public const string FirstResponseByKPIId = "firstresponsebykpiid";
			public const string FirstResponseSent = "firstresponsesent";
			public const string FirstResponseSLAStatus = "firstresponseslastatus";
			public const string FollowupBy = "followupby";
			public const string FollowUpTaskCreated = "followuptaskcreated";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncidentId = "incidentid";
			public const string IncidentStageCode = "incidentstagecode";
			public const string InfluenceScore = "influencescore";
			public const string int_CustomerEffort = "int_customereffort";
			public const string int_UpSellReferral = "int_upsellreferral";
			public const string IsDecrementing = "isdecrementing";
			public const string IsEscalated = "isescalated";
			public const string KbArticleId = "kbarticleid";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string MessageTypeCode = "messagetypecode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_FunctionalLocation = "msdyn_functionallocation";
			public const string msdyn_IncidentType = "msdyn_incidenttype";
			public const string msdyn_iotalert = "msdyn_iotalert";
			public const string NumberOfChildIncidents = "numberofchildincidents";
			public const string OnHoldTime = "onholdtime";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentCaseId = "parentcaseid";
			public const string PrimaryContactId = "primarycontactid";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string ProductId = "productid";
			public const string ProductSerialNumber = "productserialnumber";
			public const string ResolveBy = "resolveby";
			public const string ResolveByKPIId = "resolvebykpiid";
			public const string ResolveBySLAStatus = "resolvebyslastatus";
			public const string ResponseBy = "responseby";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string ResponsibleContactId = "responsiblecontactid";
			public const string RouteCase = "routecase";
			public const string SentimentValue = "sentimentvalue";
			public const string ServiceStage = "servicestage";
			public const string SeverityCode = "severitycode";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SocialProfileId = "socialprofileid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubjectId = "subjectid";
			public const string TicketNumber = "ticketnumber";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "incident";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 112;

		[DebuggerNonUserCode()]
		public Incident()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Incident(Guid IncidentId)
		{
			Entity = new Entity(EntityLogicalName, IncidentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Incident(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Incident(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Incident(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Incident(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the account with which the case is associated.</para>
		/// <para>ReadOnly - Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}

		/// <summary>
		/// <para>This attribute is used for Sample Service Business Processes.</para>
		/// <para>Boolean</para>
		/// <para>Activities Complete</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ActivitiesComplete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ActivitiesComplete); }
			set { Entity.Attributes[Fields.ActivitiesComplete] = value; }
		}

		/// <summary>
		/// <para>Type the number of service units that were actually required to resolve the case.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Actual Service Units</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualServiceUnits
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualServiceUnits); }
			set { Entity.Attributes[Fields.ActualServiceUnits] = value; }
		}

		/// <summary>
		/// <para>Type the number of service units that were billed to the customer for the case.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Billed Service Units</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BilledServiceUnits
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BilledServiceUnits); }
			set { Entity.Attributes[Fields.BilledServiceUnits] = value; }
		}

		/// <summary>
		/// <para>Details whether the profile is blocked or not.</para>
		/// <para>Boolean</para>
		/// <para>Blocked Profile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? BlockedProfile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.BlockedProfile); }
			set { Entity.Attributes[Fields.BlockedProfile] = value; }
		}

		/// <summary>
		/// <para>Select how contact about the case was originated, such as email, phone, or web, for use in reporting and analysis.</para>
		/// <para>Picklist</para>
		/// <para>Origin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseOriginCode? CaseOriginCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CaseOriginCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseOriginCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CaseOriginCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CaseOriginCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the type of case to identify the incident for use in case routing and analysis.</para>
		/// <para>Picklist</para>
		/// <para>Case Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseTypeCode? CaseTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CaseTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CaseTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CaseTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>This attribute is used for Sample Service Business Processes.</para>
		/// <para>Boolean</para>
		/// <para>Check Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckEmail); }
			set { Entity.Attributes[Fields.CheckEmail] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the contact associated with the case.</para>
		/// <para>ReadOnly - Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}

		/// <summary>
		/// <para>Choose the contract line that the case should be logged under to make sure the customer is charged correctly.</para>
		/// <para>Lookup to contractdetail</para>
		/// <para>Contract Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContractDetailId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContractDetailId); }
			set { Entity.Attributes[Fields.ContractDetailId] = value; }
		}

		/// <summary>
		/// <para>Choose the service contract that the case should be logged under to make sure the customer is eligible for support services.</para>
		/// <para>Lookup to contract</para>
		/// <para>Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContractId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContractId); }
			set { Entity.Attributes[Fields.ContractId] = value; }
		}

		/// <summary>
		/// <para>Select the service level for the case to make sure the case is handled correctly.</para>
		/// <para>Picklist</para>
		/// <para>Service Level</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.ContractServiceLevelCode? ContractServiceLevelCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ContractServiceLevelCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.ContractServiceLevelCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ContractServiceLevelCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ContractServiceLevelCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the external party who created the record.</para>
		/// <para>ReadOnly - Lookup to externalparty</para>
		/// <para>Created By (External Party)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Tells whether customer service representative has contacted the customer or not.</para>
		/// <para>Boolean</para>
		/// <para>Customer Contacted</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CustomerContacted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CustomerContacted); }
			set { Entity.Attributes[Fields.CustomerContacted] = value; }
		}

		/// <summary>
		/// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
		/// <para>Lookup to account, contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}

		/// <summary>
		/// <para>Select the customer&apos;s level of satisfaction with the handling and resolution of the case.</para>
		/// <para>Picklist</para>
		/// <para>Satisfaction</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.CustomerSatisfactionCode? CustomerSatisfactionCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerSatisfactionCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.CustomerSatisfactionCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerSatisfactionCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerSatisfactionCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows whether terms of the associated entitlement should be decremented or not.</para>
		/// <para>Boolean</para>
		/// <para>Decrement Entitlement Terms</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DecrementEntitlementTerm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DecrementEntitlementTerm); }
			set { Entity.Attributes[Fields.DecrementEntitlementTerm] = value; }
		}

		/// <summary>
		/// <para>Type additional information to describe the case to assist the service team in reaching a resolution.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>The primary email address for the entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}

		/// <summary>
		/// <para>Choose the entitlement that is applicable for the case.</para>
		/// <para>Lookup to entitlement</para>
		/// <para>Entitlement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EntitlementId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EntitlementId); }
			set { Entity.Attributes[Fields.EntitlementId] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Indicates the date and time when the case was escalated.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Escalated On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EscalatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EscalatedOn); }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Select an existing case for the customer that has been populated. For internal use only.</para>
		/// <para>Lookup to incident</para>
		/// <para>Existing Case</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ExistingCase
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ExistingCase); }
			set { Entity.Attributes[Fields.ExistingCase] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Lookup to slakpiinstance</para>
		/// <para>First Response By KPI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference FirstResponseByKPIId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.FirstResponseByKPIId); }
			set { Entity.Attributes[Fields.FirstResponseByKPIId] = value; }
		}

		/// <summary>
		/// <para>Indicates if the first response has been sent.</para>
		/// <para>Boolean</para>
		/// <para>First Response Sent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FirstResponseSent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FirstResponseSent); }
			set { Entity.Attributes[Fields.FirstResponseSent] = value; }
		}

		/// <summary>
		/// <para>Shows the status of the initial response time for the case according to the terms of the SLA.</para>
		/// <para>Picklist</para>
		/// <para>First Response SLA Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.FirstResponseSLAStatus? FirstResponseSLAStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FirstResponseSLAStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.FirstResponseSLAStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FirstResponseSLAStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FirstResponseSLAStatus] = null;
			}
		}

		/// <summary>
		/// <para>Enter the date by which a customer service representative has to follow up with the customer on this case.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Follow Up By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? FollowupByUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.FollowupBy); }
			set { Entity.Attributes[Fields.FollowupBy] = value; }
		}

		/// <summary>
		/// <para>This attribute is used for Sample Service Business Processes.</para>
		/// <para>Boolean</para>
		/// <para>Follow up Task Created</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowUpTaskCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowUpTaskCreated); }
			set { Entity.Attributes[Fields.FollowUpTaskCreated] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the case.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Case</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid IncidentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.IncidentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select the current stage of the service process for the case to assist service team members when they review or transfer a case.</para>
		/// <para>Picklist</para>
		/// <para>Case Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.IncidentStageCode? IncidentStageCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncidentStageCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.IncidentStageCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncidentStageCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncidentStageCode] = null;
			}
		}

		/// <summary>
		/// <para>Will contain the Influencer score coming from NetBreeze.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Influence Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? InfluenceScore
		{
			get { return Entity.GetAttributeValue<double?>(Fields.InfluenceScore); }
			set { Entity.Attributes[Fields.InfluenceScore] = value; }
		}

		/// <summary>
		/// <para>Shows customer satisfaction by tracking effort required by the customer. Low scores typically mean higher customer satisfaction as the customer had to travel through less channels to find a resolution</para>
		/// <para>Picklist</para>
		/// <para>Customer Effort</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.int_CustomerEffort? int_CustomerEffort
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.int_CustomerEffort);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.int_CustomerEffort)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.int_CustomerEffort] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.int_CustomerEffort] = null;
			}
		}

		/// <summary>
		/// <para>Mark Yes if an opportunity exists to sell additional products or services to the customer.</para>
		/// <para>Boolean</para>
		/// <para>UpSell Referral</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? int_UpSellReferral
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.int_UpSellReferral); }
			set { Entity.Attributes[Fields.int_UpSellReferral] = value; }
		}

		/// <summary>
		/// <para>For system use only.</para>
		/// <para>Boolean</para>
		/// <para>Decrementing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDecrementing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDecrementing); }
			set { Entity.Attributes[Fields.IsDecrementing] = value; }
		}

		/// <summary>
		/// <para>Indicates if the case has been escalated.</para>
		/// <para>Boolean</para>
		/// <para>Is Escalated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEscalated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEscalated); }
			set { Entity.Attributes[Fields.IsEscalated] = value; }
		}

		/// <summary>
		/// <para>Choose the article that contains additional information or a resolution for the case, for reference during research or follow up with the customer.</para>
		/// <para>Lookup to kbarticle</para>
		/// <para>Knowledge Base Article</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference KbArticleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.KbArticleId); }
			set { Entity.Attributes[Fields.KbArticleId] = value; }
		}

		/// <summary>
		/// <para>Contains the date time stamp of the last on hold time.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last On Hold Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}

		/// <summary>
		/// <para>Choose the primary case the current case was merged into.</para>
		/// <para>Lookup to incident</para>
		/// <para>Master Case</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
			set { Entity.Attributes[Fields.MasterId] = value; }
		}

		/// <summary>
		/// <para>Tells whether the incident has been merged with another incident.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Internal Use Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Merged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
		}

		/// <summary>
		/// <para>Shows whether the post originated as a public or private message.</para>
		/// <para>Picklist</para>
		/// <para>Received As</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.MessageTypeCode? MessageTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MessageTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.MessageTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MessageTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MessageTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the external party who modified the record.</para>
		/// <para>ReadOnly - Lookup to externalparty</para>
		/// <para>Modified By (External Party)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Case&apos;s functional location</para>
		/// <para>Lookup to msdyn_functionallocation</para>
		/// <para>Functional Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_FunctionalLocation
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_FunctionalLocation); }
			set { Entity.Attributes[Fields.msdyn_FunctionalLocation] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Incident Type associated with Case.</para>
		/// <para>Lookup to msdyn_incidenttype</para>
		/// <para>Incident Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_IncidentType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_IncidentType); }
			set { Entity.Attributes[Fields.msdyn_IncidentType] = value; }
		}

		/// <summary>
		/// <para>The iot alert that initiated this case</para>
		/// <para>Lookup to msdyn_iotalert</para>
		/// <para>IoT Alert</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_iotalert
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_iotalert); }
			set { Entity.Attributes[Fields.msdyn_iotalert] = value; }
		}

		/// <summary>
		/// <para>Number of child incidents associated with the incident.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Child Cases</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfChildIncidents
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfChildIncidents); }
		}

		/// <summary>
		/// <para>Shows the duration in minutes for which the case was on hold.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>On Hold Time (Minutes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose the parent case for a case.</para>
		/// <para>Lookup to incident</para>
		/// <para>Parent Case</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentCaseId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentCaseId); }
			set { Entity.Attributes[Fields.ParentCaseId] = value; }
		}

		/// <summary>
		/// <para>Select a primary contact for this case.</para>
		/// <para>Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PrimaryContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PrimaryContactId); }
			set { Entity.Attributes[Fields.PrimaryContactId] = value; }
		}

		/// <summary>
		/// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para>Picklist</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Choose the product associated with the case to identify warranty, service, or other product issues and be able to report the number of incidents for each product.</para>
		/// <para>Lookup to product</para>
		/// <para>Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProductId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProductId); }
			set { Entity.Attributes[Fields.ProductId] = value; }
		}

		/// <summary>
		/// <para>Type the serial number of the product that is associated with this case, so that the number of cases per product can be reported.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Serial Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductSerialNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductSerialNumber); }
			set { Entity.Attributes[Fields.ProductSerialNumber] = value; }
		}

		/// <summary>
		/// <para>Enter the date by when the case must be resolved.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Resolve By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ResolveByUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ResolveBy); }
			set { Entity.Attributes[Fields.ResolveBy] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Lookup to slakpiinstance</para>
		/// <para>Resolve By KPI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ResolveByKPIId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ResolveByKPIId); }
			set { Entity.Attributes[Fields.ResolveByKPIId] = value; }
		}

		/// <summary>
		/// <para>Shows the status of the resolution time for the case according to the terms of the SLA.</para>
		/// <para>Picklist</para>
		/// <para>Resolve By SLA Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.ResolveBySLAStatus? ResolveBySLAStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ResolveBySLAStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.ResolveBySLAStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ResolveBySLAStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ResolveBySLAStatus] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>First Response By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ResponseByUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ResponseBy); }
			set { Entity.Attributes[Fields.ResponseBy] = value; }
		}

		/// <summary>
		/// <para>Choose an additional customer contact who can also help resolve the case.</para>
		/// <para>Lookup to contact</para>
		/// <para>Responsible Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public EntityReference ResponsibleContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ResponsibleContactId); }
			set { Entity.Attributes[Fields.ResponsibleContactId] = value; }
		}

		/// <summary>
		/// <para>Tells whether the incident has been routed to queue or not.</para>
		/// <para>Boolean</para>
		/// <para>Route Case</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RouteCase
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RouteCase); }
			set { Entity.Attributes[Fields.RouteCase] = value; }
		}

		/// <summary>
		/// <para>Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.</para>
		/// <para>Double - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Sentiment Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? SentimentValue
		{
			get { return Entity.GetAttributeValue<double?>(Fields.SentimentValue); }
			set { Entity.Attributes[Fields.SentimentValue] = value; }
		}

		/// <summary>
		/// <para>Select the stage, in the case resolution process, that the case is in.</para>
		/// <para>Picklist</para>
		/// <para>Service Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.ServiceStage? ServiceStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServiceStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.ServiceStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServiceStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServiceStage] = null;
			}
		}

		/// <summary>
		/// <para>Select the severity of this case to indicate the incident&apos;s impact on the customer&apos;s business.</para>
		/// <para>Picklist</para>
		/// <para>Severity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.SeverityCode? SeverityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SeverityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.SeverityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SeverityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SeverityCode] = null;
			}
		}

		/// <summary>
		/// <para>Choose the service level agreement (SLA) that you want to apply to the case record.</para>
		/// <para>Lookup to sla</para>
		/// <para>SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}

		/// <summary>
		/// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
		/// <para>ReadOnly - Lookup to sla</para>
		/// <para>Last SLA applied</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}

		/// <summary>
		/// <para>Unique identifier of the social profile with which the case is associated.</para>
		/// <para>Lookup to socialprofile</para>
		/// <para>Social Profile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SocialProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SocialProfileId); }
			set { Entity.Attributes[Fields.SocialProfileId] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Shows whether the case is active, resolved, or canceled. Resolved and canceled cases are read-only and can&apos;t be edited unless they are reactivated.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the case&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Choose the subject for the case, such as catalog request or product complaint, so customer service managers can identify frequent requests or problem areas. Administrators can configure subjects under Business Management in the Settings area.</para>
		/// <para>Lookup to subject</para>
		/// <para>Subject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubjectId); }
			set { Entity.Attributes[Fields.SubjectId] = value; }
		}

		/// <summary>
		/// <para>Shows the case number for customer reference and searching capabilities. This cannot be modified.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Case Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TicketNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.TicketNumber); }
			set { Entity.Attributes[Fields.TicketNumber] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Type a subject or descriptive name, such as the request, issue, or company name, to identify the case in Microsoft Dynamics 365 views.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Case Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
