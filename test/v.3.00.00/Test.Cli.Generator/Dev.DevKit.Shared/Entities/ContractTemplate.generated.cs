//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ContractTemplateOptionSets
{
	public enum AllotmentTypeCode
	{
		/// <summary>
		/// Coverage Dates = 3
		/// </summary>
		Coverage_Dates = 3,
		/// <summary>
		/// Number of Cases = 1
		/// </summary>
		Number_of_Cases = 1,
		/// <summary>
		/// Time = 2
		/// </summary>
		Time = 2
	}

	public enum BillingFrequencyCode
	{
		/// <summary>
		/// Annually = 5
		/// </summary>
		Annually = 5,
		/// <summary>
		/// Bimonthly = 2
		/// </summary>
		Bimonthly = 2,
		/// <summary>
		/// Monthly = 1
		/// </summary>
		Monthly = 1,
		/// <summary>
		/// Quarterly = 3
		/// </summary>
		Quarterly = 3,
		/// <summary>
		/// Semiannually = 4
		/// </summary>
		Semiannually = 4
	}

	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum ContractServiceLevelCode
	{
		/// <summary>
		/// Bronze = 3
		/// </summary>
		Bronze = 3,
		/// <summary>
		/// Gold = 1
		/// </summary>
		Gold = 1,
		/// <summary>
		/// Silver = 2
		/// </summary>
		Silver = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ContractTemplate : EntityBase
	{
		public struct Fields
		{
			public const string Abbreviation = "abbreviation";
			public const string AllotmentTypeCode = "allotmenttypecode";
			public const string BillingFrequencyCode = "billingfrequencycode";
			public const string ComponentState = "componentstate";
			public const string ContractServiceLevelCode = "contractservicelevelcode";
			public const string ContractTemplateId = "contracttemplateid";
			public const string ContractTemplateIdUnique = "contracttemplateidunique";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EffectivityCalendar = "effectivitycalendar";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UseDiscountAsPercentage = "usediscountaspercentage";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "contracttemplate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2011;

		[DebuggerNonUserCode()]
		public ContractTemplate()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractTemplate(Guid ContractTemplateId)
		{
			Entity = new Entity(EntityLogicalName, ContractTemplateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractTemplate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractTemplate(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractTemplate(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractTemplate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Abbreviation of the contract template name.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Abbreviation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Abbreviation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Abbreviation); }
			set { Entity.Attributes[Fields.Abbreviation] = value; }
		}

		/// <summary>
		/// <para>Criteria for the contracts based on the template, such as number of cases, time, or coverage dates.</para>
		/// <para>Picklist</para>
		/// <para>Allotment Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractTemplateOptionSets.AllotmentTypeCode? AllotmentTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AllotmentTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractTemplateOptionSets.AllotmentTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AllotmentTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AllotmentTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>How often the customer or account is to be billed in contracts that are based on the template.</para>
		/// <para>Picklist</para>
		/// <para>Billing Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractTemplateOptionSets.BillingFrequencyCode? BillingFrequencyCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BillingFrequencyCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractTemplateOptionSets.BillingFrequencyCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BillingFrequencyCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BillingFrequencyCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractTemplateOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractTemplateOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the level of service specified in contracts that are based on the template.</para>
		/// <para>Picklist</para>
		/// <para>Contract Service Level</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractTemplateOptionSets.ContractServiceLevelCode? ContractServiceLevelCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ContractServiceLevelCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractTemplateOptionSets.ContractServiceLevelCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ContractServiceLevelCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ContractServiceLevelCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the contract template.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Contract Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ContractTemplateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ContractTemplateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ContractTemplateIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ContractTemplateIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the contract template.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the contract template was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the contracttemplate.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the contract template.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Days of the week and times for which contracts based on the template are effective.</para>
		/// <para>String - MaxLength: 168</para>
		/// <para>Support Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EffectivityCalendar
		{
			get { return Entity.GetAttributeValue<string>(Fields.EffectivityCalendar); }
			set { Entity.Attributes[Fields.EffectivityCalendar] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the contract template.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the contract template was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the contracttemplate.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the contract template.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Specifies whether the discount is a percentage or a monetary amount in contracts based on the template.</para>
		/// <para>Boolean</para>
		/// <para>Use Discount as Percentage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseDiscountAsPercentage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseDiscountAsPercentage); }
			set { Entity.Attributes[Fields.UseDiscountAsPercentage] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
