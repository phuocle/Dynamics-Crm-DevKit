//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets
{
	public enum msdyn_currentstepsubtype
	{
		/// <summary>
		/// Default = 0
		/// </summary>
		Default = 0,
		/// <summary>
		/// LinkedInConnect = 3
		/// </summary>
		LinkedInConnect = 3,
		/// <summary>
		/// LinkedInGetIntroduced = 2
		/// </summary>
		LinkedInGetIntroduced = 2,
		/// <summary>
		/// LinkedInMail = 4
		/// </summary>
		LinkedInMail = 4,
		/// <summary>
		/// LinkedInResearch = 1
		/// </summary>
		LinkedInResearch = 1
	}

	public enum msdyn_currentsteptype
	{
		/// <summary>
		/// Auto action = 4
		/// </summary>
		Auto_action = 4,
		/// <summary>
		/// Automated Email = 3
		/// </summary>
		Automated_Email = 3,
		/// <summary>
		/// Email = 4202
		/// </summary>
		Email = 4202,
		/// <summary>
		/// LinkedIn action = 5
		/// </summary>
		LinkedIn_action = 5,
		/// <summary>
		/// Phone call = 4210
		/// </summary>
		Phone_call = 4210,
		/// <summary>
		/// Simple Condition = 1
		/// </summary>
		Simple_Condition = 1,
		/// <summary>
		/// Task = 4212
		/// </summary>
		Task = 4212,
		/// <summary>
		/// Wait = 0
		/// </summary>
		Wait = 0
	}

	public enum msdyn_deactivatereason
	{
		/// <summary>
		/// Exit Criterion Met = 3
		/// </summary>
		Exit_Criterion_Met = 3,
		/// <summary>
		/// Parent Sequence Deactivated = 1
		/// </summary>
		Parent_Sequence_Deactivated = 1,
		/// <summary>
		/// Regarding Entity Deactivated = 2
		/// </summary>
		Regarding_Entity_Deactivated = 2,
		/// <summary>
		/// User Disconnected = 0
		/// </summary>
		User_Disconnected = 0
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Completed = 3
		/// </summary>
		Completed = 3,
		/// <summary>
		/// Connected = 2
		/// </summary>
		Connected = 2,
		/// <summary>
		/// Connecting… = 1
		/// </summary>
		Connecting = 1,
		/// <summary>
		/// Disconnected = 5
		/// </summary>
		Disconnected = 5,
		/// <summary>
		/// Error = 4
		/// </summary>
		Error = 4
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sequencetarget : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_appliedsequenceinstance = "msdyn_appliedsequenceinstance";
			public const string msdyn_currentstepcount = "msdyn_currentstepcount";
			public const string msdyn_currentstepname = "msdyn_currentstepname";
			public const string msdyn_currentstepsubtype = "msdyn_currentstepsubtype";
			public const string msdyn_currentsteptype = "msdyn_currentsteptype";
			public const string msdyn_deactivatereason = "msdyn_deactivatereason";
			public const string msdyn_msflowrunid = "msdyn_msflowrunid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_parentsequence = "msdyn_parentsequence";
			public const string msdyn_ParentSequenceVersion = "msdyn_parentsequenceversion";
			public const string msdyn_regarding = "msdyn_regarding";
			public const string msdyn_segment = "msdyn_segment";
			public const string msdyn_sequencetargetId = "msdyn_sequencetargetid";
			public const string msdyn_sequencetargetuniquekey = "msdyn_sequencetargetuniquekey";
			public const string msdyn_target = "msdyn_target";
			public const string msdyn_totalstepcount = "msdyn_totalstepcount";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_sequencetarget";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10291;

		[DebuggerNonUserCode()]
		public msdyn_sequencetarget()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(Guid msdyn_sequencetargetId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sequencetargetId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was connected to the sequence.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Connected On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Lookup to msdyn_sequence</para>
		/// <para>Applied sequence instance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_appliedsequenceinstance
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_appliedsequenceinstance); }
			set { Entity.Attributes[Fields.msdyn_appliedsequenceinstance] = value; }
		}

		/// <summary>
		/// <para>The current step count for the connected sequence.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 400</para>
		/// <para>Current Step Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_currentstepcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_currentstepcount); }
			set { Entity.Attributes[Fields.msdyn_currentstepcount] = value; }
		}

		/// <summary>
		/// <para>The current step name of the Sequence Target Step entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Current Step</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_currentstepname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_currentstepname); }
			set { Entity.Attributes[Fields.msdyn_currentstepname] = value; }
		}

		/// <summary>
		/// <para>Shows the sub type of sequence target step</para>
		/// <para>Picklist</para>
		/// <para>Sequence Target Step Sub Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentstepsubtype? msdyn_currentstepsubtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_currentstepsubtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentstepsubtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_currentstepsubtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_currentstepsubtype] = null;
			}
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentsteptype? msdyn_currentsteptype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_currentsteptype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentsteptype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_currentsteptype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_currentsteptype] = null;
			}
		}

		/// <summary>
		/// <para>Reason for deactivation of sequence target</para>
		/// <para>Picklist</para>
		/// <para>Deactivate reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_deactivatereason? msdyn_deactivatereason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_deactivatereason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_deactivatereason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_deactivatereason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_deactivatereason] = null;
			}
		}

		/// <summary>
		/// <para>MS Flow Run Identifier</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>MS Flow Run Identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_msflowrunid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_msflowrunid); }
			set { Entity.Attributes[Fields.msdyn_msflowrunid] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Required - Lookup to msdyn_sequence</para>
		/// <para>Parent Sequence</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_parentsequence
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_parentsequence); }
			set { Entity.Attributes[Fields.msdyn_parentsequence] = value; }
		}

		/// <summary>
		/// <para>Version of the sequence</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 500</para>
		/// <para>Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ParentSequenceVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ParentSequenceVersion); }
			set { Entity.Attributes[Fields.msdyn_ParentSequenceVersion] = value; }
		}

		/// <summary>
		/// <para>The information about record to which this sequence instance is related</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regarding
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regarding); }
			set { Entity.Attributes[Fields.msdyn_regarding] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Segment associated with Sequence Target.</para>
		/// <para>Lookup to msdyn_segment</para>
		/// <para>Segment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segment
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segment); }
			set { Entity.Attributes[Fields.msdyn_segment] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Sales Cadence Target</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sequencetargetId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sequencetargetId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>It stores unique key for each record.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Sequence Target Unique key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sequencetargetuniquekey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sequencetargetuniquekey); }
			set { Entity.Attributes[Fields.msdyn_sequencetargetuniquekey] = value; }
		}

		/// <summary>
		/// <para>Target Record</para>
		/// <para>Required - Lookup to account, contact, lead, opportunity</para>
		/// <para>Target Record</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_target
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_target); }
			set { Entity.Attributes[Fields.msdyn_target] = value; }
		}

		/// <summary>
		/// <para>The total step count for the connected sequence.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 400</para>
		/// <para>Total Step Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totalstepcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totalstepcount); }
			set { Entity.Attributes[Fields.msdyn_totalstepcount] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Sequence Target</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Sequence Target</para>
		/// <para>Status</para>
		/// <para>Progress</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
