//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets
{
	public enum msdyn_AutoUpdateBookingTravel
	{
		/// <summary>
		/// Disabled = 192350000
		/// </summary>
		Disabled = 192350000,
		/// <summary>
		/// Enabled = 192350001
		/// </summary>
		Enabled = 192350001
	}

	public enum msdyn_DefaultRadiusUnit
	{
		/// <summary>
		/// KM = 192350001
		/// </summary>
		KM = 192350001,
		/// <summary>
		/// Miles = 192350000
		/// </summary>
		Miles = 192350000
	}

	public enum msdyn_EnableAppointments
	{
		/// <summary>
		/// No = 192350000
		/// </summary>
		No = 192350000,
		/// <summary>
		/// Yes = 192350001
		/// </summary>
		Yes = 192350001
	}

	public enum msdyn_EnableOutlookSchedules
	{
		/// <summary>
		/// No = 192350000
		/// </summary>
		No = 192350000,
		/// <summary>
		/// Yes = 192350001
		/// </summary>
		Yes = 192350001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_schedulingparameter : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AdvancedSettings = "msdyn_advancedsettings";
			public const string msdyn_AutoUpdateBookingTravel = "msdyn_autoupdatebookingtravel";
			public const string msdyn_BackgroundJobsConfiguration = "msdyn_backgroundjobsconfiguration";
			public const string msdyn_ConnectToMaps = "msdyn_connecttomaps";
			public const string msdyn_CustomGeoLatitudeField = "msdyn_customgeolatitudefield";
			public const string msdyn_CustomGeoLocationEntity = "msdyn_customgeolocationentity";
			public const string msdyn_CustomGeoLongitudeField = "msdyn_customgeolongitudefield";
			public const string msdyn_CustomGeoResourceField = "msdyn_customgeoresourcefield";
			public const string msdyn_CustomGeoTimestampField = "msdyn_customgeotimestampfield";
			public const string msdyn_DefaultRadiusUnit = "msdyn_defaultradiusunit";
			public const string msdyn_DefaultRadiusValue = "msdyn_defaultradiusvalue";
			public const string msdyn_DisableSanitizingHTMLTemplates = "msdyn_disablesanitizinghtmltemplates";
			public const string msdyn_EnableAppointments = "msdyn_enableappointments";
			public const string msdyn_EnableCustomGeoLocation = "msdyn_enablecustomgeolocation";
			public const string msdyn_enableOptimizer = "msdyn_enableoptimizer";
			public const string msdyn_EnableOutlookSchedules = "msdyn_enableoutlookschedules";
			public const string msdyn_GeoLocationExpiresAfterXMinutes = "msdyn_geolocationexpiresafterxminutes";
			public const string msdyn_GeoLocationRefreshIntervalSeconds = "msdyn_geolocationrefreshintervalseconds";
			public const string msdyn_internalflag = "msdyn_internalflag";
			public const string msdyn_MapApiKey = "msdyn_mapapikey";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_SAAutoFilterServiceTerritory = "msdyn_saautofilterserviceterritory";
			public const string msdyn_ScheduleBoardRefreshIntervalSeconds = "msdyn_scheduleboardrefreshintervalseconds";
			public const string msdyn_schedulingparameterId = "msdyn_schedulingparameterid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_schedulingparameter";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10482;

		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(Guid msdyn_schedulingparameterId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_schedulingparameterId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>For internal use</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Advanced Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AdvancedSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AdvancedSettings); }
			set { Entity.Attributes[Fields.msdyn_AdvancedSettings] = value; }
		}

		/// <summary>
		/// <para>When changing bookings on hourly Schedule Board, automatically update travel time and distance for affected bookings.</para>
		/// <para>Picklist</para>
		/// <para>Auto Update Booking Travel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_AutoUpdateBookingTravel? msdyn_AutoUpdateBookingTravel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AutoUpdateBookingTravel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_AutoUpdateBookingTravel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AutoUpdateBookingTravel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AutoUpdateBookingTravel] = null;
			}
		}

		/// <summary>
		/// <para>Configuration that defines operations, which will be executed in background periodically (internal use only)</para>
		/// <para>Memo - MaxLength: 3000</para>
		/// <para>Background Jobs Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BackgroundJobsConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BackgroundJobsConfiguration); }
			set { Entity.Attributes[Fields.msdyn_BackgroundJobsConfiguration] = value; }
		}

		/// <summary>
		/// <para>Determines if the mapping provider will be used for map location and distance calculations.</para>
		/// <para>Boolean</para>
		/// <para>Connect to Maps</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ConnectToMaps
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ConnectToMaps); }
			set { Entity.Attributes[Fields.msdyn_ConnectToMaps] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of the latitude field to be used by geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom Geo Latitude Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoLatitudeField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoLatitudeField); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoLatitudeField] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of custom entity to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom Geo Location Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoLocationEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoLocationEntity); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoLocationEntity] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of the longitude field to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom Geo Longitude Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoLongitudeField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoLongitudeField); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoLongitudeField] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of the resource field to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom Geo Resource Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoResourceField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoResourceField); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoResourceField] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of the timestamp field to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom Geo Timestamp Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoTimestampField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoTimestampField); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoTimestampField] = value; }
		}

		/// <summary>
		/// <para>Choose the unit to display the distance on the Schedule Assistant experience</para>
		/// <para>Picklist</para>
		/// <para>Default Radius Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_DefaultRadiusUnit? msdyn_DefaultRadiusUnit
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DefaultRadiusUnit);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_DefaultRadiusUnit)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DefaultRadiusUnit] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DefaultRadiusUnit] = null;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Default Radius Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DefaultRadiusValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DefaultRadiusValue); }
			set { Entity.Attributes[Fields.msdyn_DefaultRadiusValue] = value; }
		}

		/// <summary>
		/// <para>Disable Sanitizing HTML Templates on the Schedule Board</para>
		/// <para>Boolean</para>
		/// <para>Disable Sanitizing HTML Templates</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisableSanitizingHTMLTemplates
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisableSanitizingHTMLTemplates); }
			set { Entity.Attributes[Fields.msdyn_DisableSanitizingHTMLTemplates] = value; }
		}

		/// <summary>
		/// <para>Enable appointments to display on the new schedule board and be considered in availability search for resources.</para>
		/// <para>Picklist</para>
		/// <para>Include Appointments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableAppointments? msdyn_EnableAppointments
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EnableAppointments);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableAppointments)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EnableAppointments] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EnableAppointments] = null;
			}
		}

		/// <summary>
		/// <para>Determines if a custom entity will be used as a source of geo locations for resources to be displayed in the map view.</para>
		/// <para>Boolean</para>
		/// <para>Enable Custom Geo Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableCustomGeoLocation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableCustomGeoLocation); }
			set { Entity.Attributes[Fields.msdyn_EnableCustomGeoLocation] = value; }
		}

		/// <summary>
		/// <para>Determines if scheduling optimization is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Enable Optimizer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableOptimizer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableOptimizer); }
			set { Entity.Attributes[Fields.msdyn_enableOptimizer] = value; }
		}

		/// <summary>
		/// <para>This only applies when directly calling the API. It does not apply when the Book button is clicked on the Schedule Board or on any schedulable entity.</para>
		/// <para>Picklist</para>
		/// <para>Include Outlook Free/Busy in Search Resource Availability API</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableOutlookSchedules? msdyn_EnableOutlookSchedules
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EnableOutlookSchedules);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableOutlookSchedules)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EnableOutlookSchedules] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EnableOutlookSchedules] = null;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Geo Location Expires After X Minutes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GeoLocationExpiresAfterXMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GeoLocationExpiresAfterXMinutes); }
			set { Entity.Attributes[Fields.msdyn_GeoLocationExpiresAfterXMinutes] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Geo Location Refresh Interval Seconds</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GeoLocationRefreshIntervalSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GeoLocationRefreshIntervalSeconds); }
			set { Entity.Attributes[Fields.msdyn_GeoLocationRefreshIntervalSeconds] = value; }
		}

		/// <summary>
		/// <para>For internal use</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>For internal use</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_internalflag
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_internalflag); }
			set { Entity.Attributes[Fields.msdyn_internalflag] = value; }
		}

		/// <summary>
		/// <para>Api key for map</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Map Api Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MapApiKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MapApiKey); }
			set { Entity.Attributes[Fields.msdyn_MapApiKey] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Determines if the schedule assistant should automatically filter results based on the requirement territory.</para>
		/// <para>Boolean</para>
		/// <para>Auto Filter Service Territory (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_SAAutoFilterServiceTerritory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_SAAutoFilterServiceTerritory); }
			set { Entity.Attributes[Fields.msdyn_SAAutoFilterServiceTerritory] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>The refresh rate of the schedule board.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ScheduleBoardRefreshIntervalSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ScheduleBoardRefreshIntervalSeconds); }
			set { Entity.Attributes[Fields.msdyn_ScheduleBoardRefreshIntervalSeconds] = value; }
		}

		/// <summary>
		/// <para>A unique identifier for an entity instance.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Scheduling Parameter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_schedulingparameterId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_schedulingparameterId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the Scheduling Parameter</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Scheduling Parameter</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
