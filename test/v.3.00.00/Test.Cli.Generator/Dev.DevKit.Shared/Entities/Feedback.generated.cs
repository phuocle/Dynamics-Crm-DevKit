//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.FeedbackOptionSets
{
	public enum Source
	{
		/// <summary>
		/// Internal = 0
		/// </summary>
		Internal = 0,
		/// <summary>
		/// Portal = 1
		/// </summary>
		Portal = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Closed = 1
		/// </summary>
		Closed = 1,
		/// <summary>
		/// Open = 0
		/// </summary>
		Open = 0
	}

	public enum StatusCode
	{
		/// <summary>
		/// Accepted = 2
		/// </summary>
		Accepted = 2,
		/// <summary>
		/// Closed = 3
		/// </summary>
		Closed = 3,
		/// <summary>
		/// Proposed = 1
		/// </summary>
		Proposed = 1,
		/// <summary>
		/// Rejected = 4
		/// </summary>
		Rejected = 4
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Feedback : EntityBase
	{
		public struct Fields
		{
			public const string ClosedBy = "closedby";
			public const string ClosedOn = "closedon";
			public const string Comments = "comments";
			public const string CreatedBy = "createdby";
			public const string CreatedByContact = "createdbycontact";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByContact = "createdonbehalfbycontact";
			public const string ExchangeRate = "exchangerate";
			public const string FeedbackId = "feedbackid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string MaxRating = "maxrating";
			public const string MinRating = "minrating";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ContextObjectId = "msdyn_contextobjectid";
			public const string NormalizedRating = "normalizedrating";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Rating = "rating";
			public const string RegardingObjectId = "regardingobjectid";
			public const string Source = "source";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "feedback";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9958;

		[DebuggerNonUserCode()]
		public Feedback()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Feedback(Guid FeedbackId)
		{
			Entity = new Entity(EntityLogicalName, FeedbackId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Feedback(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Feedback(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Feedback(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Feedback(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows who closed the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Closed By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ClosedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ClosedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was closed. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Closed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ClosedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ClosedOn); }
		}

		/// <summary>
		/// <para>Type the feedback comments.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Comments
		{
			get { return Entity.GetAttributeValue<string>(Fields.Comments); }
			set { Entity.Attributes[Fields.Comments] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the contact who created the record.</para>
		/// <para>Lookup to contact</para>
		/// <para>Created By (Contact)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByContact); }
			set { Entity.Attributes[Fields.CreatedByContact] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the contact who created the record on behalf of another user.</para>
		/// <para>Lookup to contact</para>
		/// <para>Created OnBelhalfBy (Contact)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfByContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfByContact); }
			set { Entity.Attributes[Fields.CreatedOnBehalfByContact] = value; }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>FeedbackId</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Feedback</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid FeedbackId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.FeedbackId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Enter the maximum rating value.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum Rating</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRating
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRating); }
			set { Entity.Attributes[Fields.MaxRating] = value; }
		}

		/// <summary>
		/// <para>Enter the minimum rating value.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum Rating</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinRating
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinRating); }
			set { Entity.Attributes[Fields.MinRating] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the record in context of which feedback rating is being provided.</para>
		/// <para>Lookup to incident, knowledgearticle</para>
		/// <para>Context</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContextObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContextObjectId); }
			set { Entity.Attributes[Fields.msdyn_ContextObjectId] = value; }
		}

		/// <summary>
		/// <para>Shows the rating scaled to a value between 0 and 1 based on minimum and maximum ratings.</para>
		/// <para>ReadOnly - Decimal - MinValue: -100,000,000,000 - MaxValue: 1,000,000,000</para>
		/// <para>Normalized Rating</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? NormalizedRating
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.NormalizedRating); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the knowledge article views.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the knowledge article views.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team that owns the feedback.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns this feedback.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Specifies how helpful the related record was.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Rating</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rating
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rating); }
			set { Entity.Attributes[Fields.Rating] = value; }
		}

		/// <summary>
		/// <para>Shows the record that the feedback is associated with.</para>
		/// <para>Lookup to contact, feedback, knowledgearticle, msdyn_liveconversation, msdyn_ocliveworkitem, msdyn_ocoutboundmessage, msdyn_ocsession, msfp_alert, msfp_surveyinvite, msfp_surveyresponse</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Shows where the feedback was submitted from.</para>
		/// <para>Picklist</para>
		/// <para>Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FeedbackOptionSets.Source? Source
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Source);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FeedbackOptionSets.Source)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Source] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Source] = null;
			}
		}

		/// <summary>
		/// <para>Shows whether the feedback is open, rejected or closed.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FeedbackOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FeedbackOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the feedback&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FeedbackOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FeedbackOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Type a title for the feedback.</para>
		/// <para>String - MaxLength: 155</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Version number of the feedback.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
