//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.MailboxStatisticsOptionSets
{
	public enum OperationTypeId
	{
		/// <summary>
		/// ACT = 2
		/// </summary>
		ACT = 2,
		/// <summary>
		/// Incoming Email = 0
		/// </summary>
		Incoming_Email = 0,
		/// <summary>
		/// Outgoing Email = 1
		/// </summary>
		Outgoing_Email = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class MailboxStatistics : EntityBase
	{
		public struct Fields
		{
			public const string AsyncEventId = "asynceventid";
			public const string CrmItemsBacklog = "crmitemsbacklog";
			public const string IndividualStepDurations = "individualstepdurations";
			public const string ItemsFailed = "itemsfailed";
			public const string ItemsProcessed = "itemsprocessed";
			public const string MachineName = "machinename";
			public const string MailboxId = "mailboxid";
			public const string MailboxProcessCompletedOn = "mailboxprocesscompletedon";
			public const string MailboxProcessScheduledOn = "mailboxprocessscheduledon";
			public const string MailboxProcessStartedOn = "mailboxprocessstartedon";
			public const string MailboxStatisticsId = "mailboxstatisticsid";
			public const string OperationTypeId = "operationtypeid";
			public const string OrganizationId = "organizationid";
			public const string ProcessResult = "processresult";
			public const string ProcessTimeIntervalInMinutes = "processtimeintervalinminutes";
			public const string ScheduledTimeIntervalInMinutes = "scheduledtimeintervalinminutes";
		}

		public const string EntityLogicalName = "mailboxstatistics";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9607;

		[DebuggerNonUserCode()]
		public MailboxStatistics()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MailboxStatistics(Guid MailboxStatisticsId)
		{
			Entity = new Entity(EntityLogicalName, MailboxStatisticsId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MailboxStatistics(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MailboxStatistics(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MailboxStatistics(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public MailboxStatistics(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Async Event Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AsyncEventId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AsyncEventId); }
		}

		/// <summary>
		/// <para>Items remaining in CRM to process after this synchronization cycle.</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Items in CRM Left to Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CrmItemsBacklog
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CrmItemsBacklog); }
		}

		/// <summary>
		/// <para>Time each exchange sync step is taking</para>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para>Individual Step Durations</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IndividualStepDurations
		{
			get { return Entity.GetAttributeValue<string>(Fields.IndividualStepDurations); }
		}

		/// <summary>
		/// <para>Number of items processed unsuccessfully.</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Items Failed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ItemsFailed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ItemsFailed); }
		}

		/// <summary>
		/// <para>Number of items processed.</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Items Processed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ItemsProcessed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ItemsProcessed); }
		}

		/// <summary>
		/// <para>Name of Machine on which mailbox was processed</para>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para>Machine Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MachineName); }
		}

		/// <summary>
		/// <para>Regarding Mailbox.</para>
		/// <para>ReadOnly - Lookup to mailbox</para>
		/// <para>Regarding Mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MailboxId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MailboxId); }
		}

		/// <summary>
		/// <para>Completion time of the synchronization cycle.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>End Time for Processing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MailboxProcessCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MailboxProcessCompletedOn); }
		}

		/// <summary>
		/// <para>Scheduled time of the synchronization cycle.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Scheduled Time for Processing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MailboxProcessScheduledOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MailboxProcessScheduledOn); }
		}

		/// <summary>
		/// <para>Start time of the synchronization cycle.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start Time for Processing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MailboxProcessStartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MailboxProcessStartedOn); }
		}

		/// <summary>
		/// <para>ReadOnly - Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid MailboxStatisticsId
		{
			get { return Id; }
		}

		/// <summary>
		/// <para>Type of the mailbox operation</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Mailbox Operation Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxStatisticsOptionSets.OperationTypeId? OperationTypeId
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationTypeId);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxStatisticsOptionSets.OperationTypeId)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the record.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Result of Mailbox processing cycle</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Process Result</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ProcessResult
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ProcessResult); }
		}

		/// <summary>
		/// <para>Time it took to process the mailbox.</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Process Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessTimeIntervalInMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessTimeIntervalInMinutes); }
		}

		/// <summary>
		/// <para>Time it took from the scheduled time to the actual start time to process the mailbox.</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Queue Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledTimeIntervalInMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledTimeIntervalInMinutes); }
		}
	}
}
