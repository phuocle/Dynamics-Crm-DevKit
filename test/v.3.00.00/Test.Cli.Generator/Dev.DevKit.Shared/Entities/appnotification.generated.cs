//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.appnotificationOptionSets
{
	public enum IconType
	{
		/// <summary>
		/// Custom = 100000005
		/// </summary>
		Custom = 100000005,
		/// <summary>
		/// Failure = 100000002
		/// </summary>
		Failure = 100000002,
		/// <summary>
		/// Info = 100000000
		/// </summary>
		Info = 100000000,
		/// <summary>
		/// Mention = 100000004
		/// </summary>
		Mention = 100000004,
		/// <summary>
		/// Success = 100000001
		/// </summary>
		Success = 100000001,
		/// <summary>
		/// Warning = 100000003
		/// </summary>
		Warning = 100000003
	}

	public enum Priority
	{
		/// <summary>
		/// High = 200000001
		/// </summary>
		High = 200000001,
		/// <summary>
		/// Normal = 200000000
		/// </summary>
		Normal = 200000000
	}

	public enum ToastType
	{
		/// <summary>
		/// Hidden = 200000001
		/// </summary>
		Hidden = 200000001,
		/// <summary>
		/// Timed = 200000000
		/// </summary>
		Timed = 200000000
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class appnotification : EntityBase
	{
		public struct Fields
		{
			public const string AppModuleId = "appmoduleid";
			public const string appnotificationId = "appnotificationid";
			public const string Body = "body";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Data = "data";
			public const string IconType = "icontype";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PartitionId = "partitionid";
			public const string Priority = "priority";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string ToastType = "toasttype";
			public const string TTLInSeconds = "ttlinseconds";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "appnotification";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10116;

		[DebuggerNonUserCode()]
		public appnotification()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appnotification(Guid appnotificationId)
		{
			Entity = new Entity(EntityLogicalName, appnotificationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appnotification(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appnotification(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appnotification(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appnotification(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Model-driven app in which the notification needs to be shown. If not specified, the notification will show in all apps.</para>
		/// <para>Lookup to appmodule</para>
		/// <para>Model-driven app</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AppModuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AppModuleId); }
			set { Entity.Attributes[Fields.AppModuleId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Notification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid appnotificationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.appnotificationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Body of the notification</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Body</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Body
		{
			get { return Entity.GetAttributeValue<string>(Fields.Body); }
			set { Entity.Attributes[Fields.Body] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Custom data for the notification that can be used by the notification card</para>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Data
		{
			get { return Entity.GetAttributeValue<string>(Fields.Data); }
			set { Entity.Attributes[Fields.Data] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>IconType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appnotificationOptionSets.IconType? IconType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IconType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appnotificationOptionSets.IconType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IconType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IconType] = null;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Partitioning will be based on owner and it is recommended to specify this field for all operations for performance reason</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Partition Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}

		/// <summary>
		/// <para>Priority of the notification</para>
		/// <para>Picklist</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appnotificationOptionSets.Priority? Priority
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Priority);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appnotificationOptionSets.Priority)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Priority] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Priority] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Title for the notification</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Type of toast behavior for the notification</para>
		/// <para>Picklist</para>
		/// <para>Toast Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appnotificationOptionSets.ToastType? ToastType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ToastType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appnotificationOptionSets.ToastType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ToastType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ToastType] = null;
			}
		}

		/// <summary>
		/// <para>After the specified number of seconds the notification will be deleted</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Expiry (seconds)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
