//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.TopicModelConfigurationOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum SourceEntity
	{
		/// <summary>
		/// Incident = 112
		/// </summary>
		Incident = 112
	}

	public enum TimeFilter
	{
		/// <summary>
		/// Last N Days = 1
		/// </summary>
		Last_N_Days = 1,
		/// <summary>
		/// Last N Weeks = 2
		/// </summary>
		Last_N_Weeks = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TopicModelConfiguration : EntityBase
	{
		public struct Fields
		{
			public const string ComponentState = "componentstate";
			public const string DataFilter = "datafilter";
			public const string Description = "description";
			public const string FetchXmlList = "fetchxmllist";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string MinRelevanceScore = "minrelevancescore";
			public const string Name = "name";
			public const string NgramSize = "ngramsize";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string SourceEntity = "sourceentity";
			public const string StopWords = "stopwords";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeFilter = "timefilter";
			public const string TimeFilterDuration = "timefilterduration";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TopicModelConfigurationId = "topicmodelconfigurationid";
			public const string TopicModelConfigurationIdUnique = "topicmodelconfigurationidunique";
			public const string TopicModelId = "topicmodelid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "topicmodelconfiguration";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9942;

		[DebuggerNonUserCode()]
		public TopicModelConfiguration()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelConfiguration(Guid TopicModelConfigurationId)
		{
			Entity = new Entity(EntityLogicalName, TopicModelConfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelConfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelConfiguration(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelConfiguration(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public TopicModelConfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TopicModelConfigurationOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TopicModelConfigurationOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Specify the data filter configured to filter records.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Data Filter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DataFilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.DataFilter); }
			set { Entity.Attributes[Fields.DataFilter] = value; }
		}

		/// <summary>
		/// <para>Enter a description for the model</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Fetch Xml</para>
		/// <para>Memo - MaxLength: 500000</para>
		/// <para>Fetch Xml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FetchXmlList
		{
			get { return Entity.GetAttributeValue<string>(Fields.FetchXmlList); }
			set { Entity.Attributes[Fields.FetchXmlList] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Is Manageed</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Enter the minimum relevance score of a topic.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 1</para>
		/// <para>Minimum Relevance Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MinRelevanceScore
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MinRelevanceScore); }
			set { Entity.Attributes[Fields.MinRelevanceScore] = value; }
		}

		/// <summary>
		/// <para>Type a logical name for the model.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Enter the maximum number of key phrase words to use in a topic.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 3</para>
		/// <para>Maximum Key Phrase Words</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NgramSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NgramSize); }
			set { Entity.Attributes[Fields.NgramSize] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Type of entity with which the topic model configuration is associated.</para>
		/// <para>Required - EntityName</para>
		/// <para>Source Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceEntity); }
			set { Entity.Attributes[Fields.SourceEntity] = value; }
		}

		/// <summary>
		/// <para>Stop words.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Stop Words</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StopWords
		{
			get { return Entity.GetAttributeValue<string>(Fields.StopWords); }
			set { Entity.Attributes[Fields.StopWords] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Select the time window to filter on for the last number of days or weeks.</para>
		/// <para>Required - Picklist</para>
		/// <para>Time Window Filter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TopicModelConfigurationOptionSets.TimeFilter? TimeFilter
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TimeFilter);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TopicModelConfigurationOptionSets.TimeFilter)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TimeFilter] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TimeFilter] = null;
			}
		}

		/// <summary>
		/// <para>Time Filter Duration</para>
		/// <para>Required - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Filter Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeFilterDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeFilterDuration); }
			set { Entity.Attributes[Fields.TimeFilterDuration] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>TopicModelConfiguration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TopicModelConfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TopicModelConfigurationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the Topic Model Configuration used when synchronizing customizations for the Microsoft Dynamics 365 client for Outlook</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Topic Model Configuration Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? TopicModelConfigurationIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.TopicModelConfigurationIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier for Model associated with Topic Model Configuration.</para>
		/// <para>Lookup to topicmodel</para>
		/// <para>TopicModelId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TopicModelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TopicModelId); }
			set { Entity.Attributes[Fields.TopicModelId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
