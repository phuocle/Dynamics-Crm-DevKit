//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.BookableResourceOptionSets
{
	public enum msdyn_CrewStrategy
	{
		/// <summary>
		/// Cascade and Accept Cascade Completely (Not Recommended) = 192350000
		/// </summary>
		Cascade_and_Accept_Cascade_Completely_Not_Recommended = 192350000,
		/// <summary>
		/// Crew Leader Management = 192350001
		/// </summary>
		Crew_Leader_Management = 192350001,
		/// <summary>
		/// Crew Member Self-Management = 192350002
		/// </summary>
		Crew_Member_Self_Management = 192350002
	}

	public enum msdyn_EnableAppointments
	{
		/// <summary>
		/// No = 192350000
		/// </summary>
		No = 192350000,
		/// <summary>
		/// Yes = 192350001
		/// </summary>
		Yes = 192350001
	}

	public enum msdyn_EnableOutlookSchedules
	{
		/// <summary>
		/// No = 192350000
		/// </summary>
		No = 192350000,
		/// <summary>
		/// Yes = 192350001
		/// </summary>
		Yes = 192350001
	}

	public enum msdyn_EndLocation
	{
		/// <summary>
		/// Location Agnostic = 690970002
		/// </summary>
		Location_Agnostic = 690970002,
		/// <summary>
		/// Organizational Unit Address = 690970001
		/// </summary>
		Organizational_Unit_Address = 690970001,
		/// <summary>
		/// Resource Address = 690970000
		/// </summary>
		Resource_Address = 690970000
	}

	public enum msdyn_GenericType
	{
		/// <summary>
		/// Service Center = 690970000
		/// </summary>
		Service_Center = 690970000
	}

	public enum msdyn_PoolType
	{
		/// <summary>
		/// Account = 192350000
		/// </summary>
		Account = 192350000,
		/// <summary>
		/// Contact = 192350001
		/// </summary>
		Contact = 192350001,
		/// <summary>
		/// Equipment = 192350003
		/// </summary>
		Equipment = 192350003,
		/// <summary>
		/// Facility = 192350004
		/// </summary>
		Facility = 192350004,
		/// <summary>
		/// User = 192350002
		/// </summary>
		User = 192350002
	}

	public enum msdyn_StartLocation
	{
		/// <summary>
		/// Location Agnostic = 690970002
		/// </summary>
		Location_Agnostic = 690970002,
		/// <summary>
		/// Organizational Unit Address = 690970001
		/// </summary>
		Organizational_Unit_Address = 690970001,
		/// <summary>
		/// Resource Address = 690970000
		/// </summary>
		Resource_Address = 690970000
	}

	public enum ResourceType
	{
		/// <summary>
		/// Account = 5
		/// </summary>
		Account = 5,
		/// <summary>
		/// Contact = 2
		/// </summary>
		Contact = 2,
		/// <summary>
		/// Crew = 6
		/// </summary>
		Crew = 6,
		/// <summary>
		/// Equipment = 4
		/// </summary>
		Equipment = 4,
		/// <summary>
		/// Facility = 7
		/// </summary>
		Facility = 7,
		/// <summary>
		/// Generic = 1
		/// </summary>
		Generic = 1,
		/// <summary>
		/// Pool = 8
		/// </summary>
		Pool = 8,
		/// <summary>
		/// User = 3
		/// </summary>
		User = 3
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BookableResource : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string BookableResourceId = "bookableresourceid";
			public const string CalendarId = "calendarid";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_BookingsToDrip = "msdyn_bookingstodrip";
			public const string msdyn_CrewStrategy = "msdyn_crewstrategy";
			public const string msdyn_DeriveCapacity = "msdyn_derivecapacity";
			public const string msdyn_DisplayOnScheduleAssistant = "msdyn_displayonscheduleassistant";
			public const string msdyn_DisplayOnScheduleBoard = "msdyn_displayonscheduleboard";
			public const string msdyn_EnableAppointments = "msdyn_enableappointments";
			public const string msdyn_EnabledForFieldServiceMobile = "msdyn_enabledforfieldservicemobile";
			public const string msdyn_EnableDripScheduling = "msdyn_enabledripscheduling";
			public const string msdyn_EnableOutlookSchedules = "msdyn_enableoutlookschedules";
			public const string msdyn_EndLocation = "msdyn_endlocation";
			public const string msdyn_facilityequipmentid = "msdyn_facilityequipmentid";
			public const string msdyn_GenericType = "msdyn_generictype";
			public const string msdyn_HourlyRate = "msdyn_hourlyrate";
			public const string msdyn_hourlyrate_Base = "msdyn_hourlyrate_base";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_isgenericresourceprojectscoped = "msdyn_isgenericresourceprojectscoped";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_locationtimestamp = "msdyn_locationtimestamp";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_organizationalunit = "msdyn_organizationalunit";
			public const string msdyn_PoolType = "msdyn_pooltype";
			public const string msdyn_PrimaryEMail = "msdyn_primaryemail";
			public const string msdyn_StartLocation = "msdyn_startlocation";
			public const string msdyn_targetutilization = "msdyn_targetutilization";
			public const string msdyn_TimeOffApprovalRequired = "msdyn_timeoffapprovalrequired";
			public const string msdyn_Warehouse = "msdyn_warehouse";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProcessId = "processid";
			public const string ResourceType = "resourcetype";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZone = "timezone";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UserId = "userid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "bookableresource";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1150;

		[DebuggerNonUserCode()]
		public BookableResource()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResource(Guid BookableResourceId)
		{
			Entity = new Entity(EntityLogicalName, BookableResourceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResource(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResource(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResource(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BookableResource(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Select the account that represents this resource.</para>
		/// <para>Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
			set { Entity.Attributes[Fields.AccountId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the resource.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Bookable Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BookableResourceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BookableResourceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Specifies the working days and hours of the resource.</para>
		/// <para>Lookup to calendar</para>
		/// <para>Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}

		/// <summary>
		/// <para>Select the contact that represents this resource.</para>
		/// <para>Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
			set { Entity.Attributes[Fields.ContactId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the bookableresource with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>ExchangeRate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The number of bookings to drip on the Mobile . This field is disabled/enabled based on Enable Drip Scheduling field</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 50</para>
		/// <para>Bookings To Drip</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_BookingsToDrip
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_BookingsToDrip); }
			set { Entity.Attributes[Fields.msdyn_BookingsToDrip] = value; }
		}

		/// <summary>
		/// <para>Crew Strategy</para>
		/// <para>Picklist</para>
		/// <para>Crew Strategy</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_CrewStrategy? msdyn_CrewStrategy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CrewStrategy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_CrewStrategy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CrewStrategy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CrewStrategy] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Derive Capacity From Group Members</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeriveCapacity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeriveCapacity); }
			set { Entity.Attributes[Fields.msdyn_DeriveCapacity] = value; }
		}

		/// <summary>
		/// <para>Specify if this resource should be enabled for availablity search.</para>
		/// <para>Boolean</para>
		/// <para>Enable for Availability Search</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisplayOnScheduleAssistant
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisplayOnScheduleAssistant); }
			set { Entity.Attributes[Fields.msdyn_DisplayOnScheduleAssistant] = value; }
		}

		/// <summary>
		/// <para>Specify if this resource should be displayed on the schedule board.</para>
		/// <para>Required - Boolean</para>
		/// <para>Display On Schedule Board</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisplayOnScheduleBoard
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisplayOnScheduleBoard); }
			set { Entity.Attributes[Fields.msdyn_DisplayOnScheduleBoard] = value; }
		}

		/// <summary>
		/// <para>Enable appointments to display on the new schedule board and be considered in availability search for resources.</para>
		/// <para>Picklist</para>
		/// <para>Include Appointments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableAppointments? msdyn_EnableAppointments
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EnableAppointments);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableAppointments)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EnableAppointments] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EnableAppointments] = null;
			}
		}

		/// <summary>
		/// <para>Set this field to Yes if this resource requires access to the legacy Field Service Mobile application.</para>
		/// <para>Boolean</para>
		/// <para>Enable for Field Service Mobile (legacy Xamarin app)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnabledForFieldServiceMobile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnabledForFieldServiceMobile); }
			set { Entity.Attributes[Fields.msdyn_EnabledForFieldServiceMobile] = value; }
		}

		/// <summary>
		/// <para>Enables drip scheduling on the mobile app.</para>
		/// <para>Boolean</para>
		/// <para>Enable Drip Scheduling</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableDripScheduling
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableDripScheduling); }
			set { Entity.Attributes[Fields.msdyn_EnableDripScheduling] = value; }
		}

		/// <summary>
		/// <para>This only applies when directly calling the API. It does not apply when the Book button is clicked on the Schedule Board or on any schedulable entity.</para>
		/// <para>Picklist</para>
		/// <para>Include Outlook Free/Busy in Search Resource Availability API</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableOutlookSchedules? msdyn_EnableOutlookSchedules
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EnableOutlookSchedules);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableOutlookSchedules)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EnableOutlookSchedules] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EnableOutlookSchedules] = null;
			}
		}

		/// <summary>
		/// <para>Shows the default ending location type when booking daily schedules for this resource.</para>
		/// <para>Picklist</para>
		/// <para>End Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EndLocation? msdyn_EndLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EndLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EndLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EndLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EndLocation] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Facility Equipment</para>
		/// <para>Lookup to equipment</para>
		/// <para>Facility Equipment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_facilityequipmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_facilityequipmentid); }
			set { Entity.Attributes[Fields.msdyn_facilityequipmentid] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Generic Type (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_GenericType? msdyn_GenericType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_GenericType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_GenericType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_GenericType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_GenericType] = null;
			}
		}

		/// <summary>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Hourly Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_HourlyRate
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_HourlyRate);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_HourlyRate] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_HourlyRate] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Hourly Rate in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Hourly Rate (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_hourlyrate_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_hourlyrate_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>Is Default</para>
		/// <para>Boolean</para>
		/// <para>Is Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isgenericresourceprojectscoped
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isgenericresourceprojectscoped); }
			set { Entity.Attributes[Fields.msdyn_isgenericresourceprojectscoped] = value; }
		}

		/// <summary>
		/// <para>The location latitude.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}

		/// <summary>
		/// <para>The location timestamp.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Location Timestamp</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_locationtimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_locationtimestamp); }
			set { Entity.Attributes[Fields.msdyn_locationtimestamp] = value; }
		}

		/// <summary>
		/// <para>The location longitude.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}

		/// <summary>
		/// <para>Organizational Unit that resource belong to</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Organizational Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_organizationalunit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_organizationalunit); }
			set { Entity.Attributes[Fields.msdyn_organizationalunit] = value; }
		}

		/// <summary>
		/// <para>Select whether the pool is an account, contact, user, equipment or a facility of resources.</para>
		/// <para>MultiSelectPicklist</para>
		/// <para>Pool Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_PoolType> msdyn_PoolType
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_PoolType>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_PoolType);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_PoolType)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_PoolType] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_PoolType] = data;
				}
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Primary Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PrimaryEMail
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PrimaryEMail); }
			set { Entity.Attributes[Fields.msdyn_PrimaryEMail] = value; }
		}

		/// <summary>
		/// <para>Shows the default starting location type when booking daily schedules for this resource.</para>
		/// <para>Picklist</para>
		/// <para>Start Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_StartLocation? msdyn_StartLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_StartLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_StartLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_StartLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_StartLocation] = null;
			}
		}

		/// <summary>
		/// <para>Shows the target utilization for the resource.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 100</para>
		/// <para>Target Utilization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_targetutilization
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_targetutilization); }
			set { Entity.Attributes[Fields.msdyn_targetutilization] = value; }
		}

		/// <summary>
		/// <para>Specifies if approval required for Time Off Requests.</para>
		/// <para>Boolean</para>
		/// <para>Time Off Approval Required</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_TimeOffApprovalRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_TimeOffApprovalRequired); }
			set { Entity.Attributes[Fields.msdyn_TimeOffApprovalRequired] = value; }
		}

		/// <summary>
		/// <para>Default Warehouse for this resource.</para>
		/// <para>Lookup to msdyn_warehouse</para>
		/// <para>Warehouse</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Warehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Warehouse); }
			set { Entity.Attributes[Fields.msdyn_Warehouse] = value; }
		}

		/// <summary>
		/// <para>Type the name of the resource.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Select whether the resource is a user, equipment, contact, account, generic resource or a group of resources.</para>
		/// <para>Picklist</para>
		/// <para>Resource Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.ResourceType? ResourceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ResourceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.ResourceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ResourceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ResourceType] = null;
			}
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Status of the Bookable Resource</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Bookable Resource</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Specifies the timezone for the resource&apos;s working hours.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Time Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZone); }
			set { Entity.Attributes[Fields.TimeZone] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the BookableResource with respect to the base currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Select the user who represents this resource.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference UserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.UserId); }
			set { Entity.Attributes[Fields.UserId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
