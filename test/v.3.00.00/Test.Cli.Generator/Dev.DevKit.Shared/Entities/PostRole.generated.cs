//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.PostRoleOptionSets
{
	public enum Type
	{
		/// <summary>
		/// Mentioning = 2
		/// </summary>
		Mentioning = 2,
		/// <summary>
		/// Mentioning And Regarding = 3
		/// </summary>
		Mentioning_And_Regarding = 3,
		/// <summary>
		/// Regarding = 1
		/// </summary>
		Regarding = 1,
		/// <summary>
		/// Topic = 4
		/// </summary>
		Topic = 4
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PostRole : EntityBase
	{
		public struct Fields
		{
			public const string OrganizationId = "organizationid";
			public const string PostId = "postid";
			public const string PostRoleId = "postroleid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string Type = "type";
		}

		public const string EntityLogicalName = "postrole";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8001;

		[DebuggerNonUserCode()]
		public PostRole()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRole(Guid PostRoleId)
		{
			Entity = new Entity(EntityLogicalName, PostRoleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRole(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRole(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRole(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PostRole(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the solution.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Unique identifier of the post with which the post role is associated.</para>
		/// <para>Lookup to post</para>
		/// <para>Post</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PostId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PostId); }
			set { Entity.Attributes[Fields.PostId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the post role.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>PostRoleId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PostRoleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PostRoleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Choose the record that the post role relates to.</para>
		/// <para>Lookup to account, appointment, competitor, contact, incident, knowledgearticle, lead, opportunity, phonecall, processsession, queue, recurringappointmentmaster, systemuser, task, team</para>
		/// <para>RegardingObjectId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Select the role type for the post.</para>
		/// <para>Required - Picklist</para>
		/// <para>Post Role, Regarding, Mention, Topic, etc</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PostRoleOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PostRoleOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
	}
}
