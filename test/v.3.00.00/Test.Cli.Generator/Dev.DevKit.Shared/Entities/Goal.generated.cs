//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.GoalOptionSets
{
	public enum AmountDataType
	{
		/// <summary>
		/// Decimal = 1
		/// </summary>
		Decimal = 1,
		/// <summary>
		/// Integer = 2
		/// </summary>
		Integer = 2,
		/// <summary>
		/// Money = 0
		/// </summary>
		Money = 0
	}

	public enum FiscalPeriod
	{
		/// <summary>
		/// Annual = 301
		/// </summary>
		Annual = 301,
		/// <summary>
		/// April = 104
		/// </summary>
		April = 104,
		/// <summary>
		/// August = 108
		/// </summary>
		August = 108,
		/// <summary>
		/// December = 112
		/// </summary>
		December = 112,
		/// <summary>
		/// February = 102
		/// </summary>
		February = 102,
		/// <summary>
		/// January = 101
		/// </summary>
		January = 101,
		/// <summary>
		/// July = 107
		/// </summary>
		July = 107,
		/// <summary>
		/// June = 106
		/// </summary>
		June = 106,
		/// <summary>
		/// March = 103
		/// </summary>
		March = 103,
		/// <summary>
		/// May = 105
		/// </summary>
		May = 105,
		/// <summary>
		/// November = 111
		/// </summary>
		November = 111,
		/// <summary>
		/// October = 110
		/// </summary>
		October = 110,
		/// <summary>
		/// P1 = 401
		/// </summary>
		P1 = 401,
		/// <summary>
		/// P10 = 410
		/// </summary>
		P10 = 410,
		/// <summary>
		/// P11 = 411
		/// </summary>
		P11 = 411,
		/// <summary>
		/// P12 = 412
		/// </summary>
		P12 = 412,
		/// <summary>
		/// P13 = 413
		/// </summary>
		P13 = 413,
		/// <summary>
		/// P2 = 402
		/// </summary>
		P2 = 402,
		/// <summary>
		/// P3 = 403
		/// </summary>
		P3 = 403,
		/// <summary>
		/// P4 = 404
		/// </summary>
		P4 = 404,
		/// <summary>
		/// P5 = 405
		/// </summary>
		P5 = 405,
		/// <summary>
		/// P6 = 406
		/// </summary>
		P6 = 406,
		/// <summary>
		/// P7 = 407
		/// </summary>
		P7 = 407,
		/// <summary>
		/// P8 = 408
		/// </summary>
		P8 = 408,
		/// <summary>
		/// P9 = 409
		/// </summary>
		P9 = 409,
		/// <summary>
		/// Quarter 1 = 1
		/// </summary>
		Quarter_1 = 1,
		/// <summary>
		/// Quarter 2 = 2
		/// </summary>
		Quarter_2 = 2,
		/// <summary>
		/// Quarter 3 = 3
		/// </summary>
		Quarter_3 = 3,
		/// <summary>
		/// Quarter 4 = 4
		/// </summary>
		Quarter_4 = 4,
		/// <summary>
		/// Semester 1 = 201
		/// </summary>
		Semester_1 = 201,
		/// <summary>
		/// Semester 2 = 202
		/// </summary>
		Semester_2 = 202,
		/// <summary>
		/// September = 109
		/// </summary>
		September = 109
	}

	public enum FiscalYear
	{
		/// <summary>
		/// FY1970 = 1970
		/// </summary>
		FY1970 = 1970,
		/// <summary>
		/// FY1971 = 1971
		/// </summary>
		FY1971 = 1971,
		/// <summary>
		/// FY1972 = 1972
		/// </summary>
		FY1972 = 1972,
		/// <summary>
		/// FY1973 = 1973
		/// </summary>
		FY1973 = 1973,
		/// <summary>
		/// FY1974 = 1974
		/// </summary>
		FY1974 = 1974,
		/// <summary>
		/// FY1975 = 1975
		/// </summary>
		FY1975 = 1975,
		/// <summary>
		/// FY1976 = 1976
		/// </summary>
		FY1976 = 1976,
		/// <summary>
		/// FY1977 = 1977
		/// </summary>
		FY1977 = 1977,
		/// <summary>
		/// FY1978 = 1978
		/// </summary>
		FY1978 = 1978,
		/// <summary>
		/// FY1979 = 1979
		/// </summary>
		FY1979 = 1979,
		/// <summary>
		/// FY1980 = 1980
		/// </summary>
		FY1980 = 1980,
		/// <summary>
		/// FY1981 = 1981
		/// </summary>
		FY1981 = 1981,
		/// <summary>
		/// FY1982 = 1982
		/// </summary>
		FY1982 = 1982,
		/// <summary>
		/// FY1983 = 1983
		/// </summary>
		FY1983 = 1983,
		/// <summary>
		/// FY1984 = 1984
		/// </summary>
		FY1984 = 1984,
		/// <summary>
		/// FY1985 = 1985
		/// </summary>
		FY1985 = 1985,
		/// <summary>
		/// FY1986 = 1986
		/// </summary>
		FY1986 = 1986,
		/// <summary>
		/// FY1987 = 1987
		/// </summary>
		FY1987 = 1987,
		/// <summary>
		/// FY1988 = 1988
		/// </summary>
		FY1988 = 1988,
		/// <summary>
		/// FY1989 = 1989
		/// </summary>
		FY1989 = 1989,
		/// <summary>
		/// FY1990 = 1990
		/// </summary>
		FY1990 = 1990,
		/// <summary>
		/// FY1991 = 1991
		/// </summary>
		FY1991 = 1991,
		/// <summary>
		/// FY1992 = 1992
		/// </summary>
		FY1992 = 1992,
		/// <summary>
		/// FY1993 = 1993
		/// </summary>
		FY1993 = 1993,
		/// <summary>
		/// FY1994 = 1994
		/// </summary>
		FY1994 = 1994,
		/// <summary>
		/// FY1995 = 1995
		/// </summary>
		FY1995 = 1995,
		/// <summary>
		/// FY1996 = 1996
		/// </summary>
		FY1996 = 1996,
		/// <summary>
		/// FY1997 = 1997
		/// </summary>
		FY1997 = 1997,
		/// <summary>
		/// FY1998 = 1998
		/// </summary>
		FY1998 = 1998,
		/// <summary>
		/// FY1999 = 1999
		/// </summary>
		FY1999 = 1999,
		/// <summary>
		/// FY2000 = 2000
		/// </summary>
		FY2000 = 2000,
		/// <summary>
		/// FY2001 = 2001
		/// </summary>
		FY2001 = 2001,
		/// <summary>
		/// FY2002 = 2002
		/// </summary>
		FY2002 = 2002,
		/// <summary>
		/// FY2003 = 2003
		/// </summary>
		FY2003 = 2003,
		/// <summary>
		/// FY2004 = 2004
		/// </summary>
		FY2004 = 2004,
		/// <summary>
		/// FY2005 = 2005
		/// </summary>
		FY2005 = 2005,
		/// <summary>
		/// FY2006 = 2006
		/// </summary>
		FY2006 = 2006,
		/// <summary>
		/// FY2007 = 2007
		/// </summary>
		FY2007 = 2007,
		/// <summary>
		/// FY2008 = 2008
		/// </summary>
		FY2008 = 2008,
		/// <summary>
		/// FY2009 = 2009
		/// </summary>
		FY2009 = 2009,
		/// <summary>
		/// FY2010 = 2010
		/// </summary>
		FY2010 = 2010,
		/// <summary>
		/// FY2011 = 2011
		/// </summary>
		FY2011 = 2011,
		/// <summary>
		/// FY2012 = 2012
		/// </summary>
		FY2012 = 2012,
		/// <summary>
		/// FY2013 = 2013
		/// </summary>
		FY2013 = 2013,
		/// <summary>
		/// FY2014 = 2014
		/// </summary>
		FY2014 = 2014,
		/// <summary>
		/// FY2015 = 2015
		/// </summary>
		FY2015 = 2015,
		/// <summary>
		/// FY2016 = 2016
		/// </summary>
		FY2016 = 2016,
		/// <summary>
		/// FY2017 = 2017
		/// </summary>
		FY2017 = 2017,
		/// <summary>
		/// FY2018 = 2018
		/// </summary>
		FY2018 = 2018,
		/// <summary>
		/// FY2019 = 2019
		/// </summary>
		FY2019 = 2019,
		/// <summary>
		/// FY2020 = 2020
		/// </summary>
		FY2020 = 2020,
		/// <summary>
		/// FY2021 = 2021
		/// </summary>
		FY2021 = 2021,
		/// <summary>
		/// FY2022 = 2022
		/// </summary>
		FY2022 = 2022,
		/// <summary>
		/// FY2023 = 2023
		/// </summary>
		FY2023 = 2023,
		/// <summary>
		/// FY2024 = 2024
		/// </summary>
		FY2024 = 2024,
		/// <summary>
		/// FY2025 = 2025
		/// </summary>
		FY2025 = 2025,
		/// <summary>
		/// FY2026 = 2026
		/// </summary>
		FY2026 = 2026,
		/// <summary>
		/// FY2027 = 2027
		/// </summary>
		FY2027 = 2027,
		/// <summary>
		/// FY2028 = 2028
		/// </summary>
		FY2028 = 2028,
		/// <summary>
		/// FY2029 = 2029
		/// </summary>
		FY2029 = 2029,
		/// <summary>
		/// FY2030 = 2030
		/// </summary>
		FY2030 = 2030,
		/// <summary>
		/// FY2031 = 2031
		/// </summary>
		FY2031 = 2031,
		/// <summary>
		/// FY2032 = 2032
		/// </summary>
		FY2032 = 2032,
		/// <summary>
		/// FY2033 = 2033
		/// </summary>
		FY2033 = 2033,
		/// <summary>
		/// FY2034 = 2034
		/// </summary>
		FY2034 = 2034,
		/// <summary>
		/// FY2035 = 2035
		/// </summary>
		FY2035 = 2035,
		/// <summary>
		/// FY2036 = 2036
		/// </summary>
		FY2036 = 2036,
		/// <summary>
		/// FY2037 = 2037
		/// </summary>
		FY2037 = 2037,
		/// <summary>
		/// FY2038 = 2038
		/// </summary>
		FY2038 = 2038
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Closed = 1
		/// </summary>
		Closed = 1,
		/// <summary>
		/// Discarded = 2
		/// </summary>
		Discarded = 2,
		/// <summary>
		/// Open = 0
		/// </summary>
		Open = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Goal : EntityBase
	{
		public struct Fields
		{
			public const string ActualDecimal = "actualdecimal";
			public const string ActualInteger = "actualinteger";
			public const string ActualMoney = "actualmoney";
			public const string ActualMoney_Base = "actualmoney_base";
			public const string ActualString = "actualstring";
			public const string AmountDataType = "amountdatatype";
			public const string ComputedTargetAsOfTodayDecimal = "computedtargetasoftodaydecimal";
			public const string ComputedTargetAsOfTodayInteger = "computedtargetasoftodayinteger";
			public const string ComputedTargetAsOfTodayMoney = "computedtargetasoftodaymoney";
			public const string ComputedTargetAsOfTodayMoney_Base = "computedtargetasoftodaymoney_base";
			public const string ComputedTargetAsOfTodayPercentageAchieved = "computedtargetasoftodaypercentageachieved";
			public const string ConsiderOnlyGoalOwnersRecords = "consideronlygoalownersrecords";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomRollupFieldDecimal = "customrollupfielddecimal";
			public const string CustomRollupFieldInteger = "customrollupfieldinteger";
			public const string CustomRollupFieldMoney = "customrollupfieldmoney";
			public const string CustomRollupFieldMoney_Base = "customrollupfieldmoney_base";
			public const string CustomRollupFieldString = "customrollupfieldstring";
			public const string Depth = "depth";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FiscalPeriod = "fiscalperiod";
			public const string FiscalYear = "fiscalyear";
			public const string GoalEndDate = "goalenddate";
			public const string GoalId = "goalid";
			public const string GoalOwnerId = "goalownerid";
			public const string GoalStartDate = "goalstartdate";
			public const string GoalWithErrorId = "goalwitherrorid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InProgressDecimal = "inprogressdecimal";
			public const string InProgressInteger = "inprogressinteger";
			public const string InProgressMoney = "inprogressmoney";
			public const string InProgressMoney_Base = "inprogressmoney_base";
			public const string InProgressString = "inprogressstring";
			public const string IsAmount = "isamount";
			public const string IsFiscalPeriodGoal = "isfiscalperiodgoal";
			public const string IsOverridden = "isoverridden";
			public const string IsOverride = "isoverride";
			public const string LastRolledupDate = "lastrolledupdate";
			public const string MetricId = "metricid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentGoalId = "parentgoalid";
			public const string Percentage = "percentage";
			public const string RollupErrorCode = "rolluperrorcode";
			public const string RollupOnlyFromChildGoals = "rolluponlyfromchildgoals";
			public const string RollUpQueryActualDecimalId = "rollupqueryactualdecimalid";
			public const string RollupQueryActualIntegerId = "rollupqueryactualintegerid";
			public const string RollUpQueryActualMoneyId = "rollupqueryactualmoneyid";
			public const string RollUpQueryCustomDecimalId = "rollupquerycustomdecimalid";
			public const string RollUpQueryCustomIntegerId = "rollupquerycustomintegerid";
			public const string RollUpQueryCustomMoneyId = "rollupquerycustommoneyid";
			public const string RollUpQueryInprogressDecimalId = "rollupqueryinprogressdecimalid";
			public const string RollUpQueryInprogressIntegerId = "rollupqueryinprogressintegerid";
			public const string RollUpQueryInprogressMoneyId = "rollupqueryinprogressmoneyid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StretchTargetDecimal = "stretchtargetdecimal";
			public const string StretchTargetInteger = "stretchtargetinteger";
			public const string StretchTargetMoney = "stretchtargetmoney";
			public const string StretchTargetMoney_Base = "stretchtargetmoney_base";
			public const string StretchTargetString = "stretchtargetstring";
			public const string TargetDecimal = "targetdecimal";
			public const string TargetInteger = "targetinteger";
			public const string TargetMoney = "targetmoney";
			public const string TargetMoney_Base = "targetmoney_base";
			public const string TargetString = "targetstring";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TreeId = "treeid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "goal";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9600;

		[DebuggerNonUserCode()]
		public Goal()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Goal(Guid GoalId)
		{
			Entity = new Entity(EntityLogicalName, GoalId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Goal(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Goal(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Goal(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Goal(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the actual value (Decimal type) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount and the amount data type is Decimal.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Actual (Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ActualDecimal); }
			set { Entity.Attributes[Fields.ActualDecimal] = value; }
		}

		/// <summary>
		/// <para>Shows the actual value (integer) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount or Count and the amount data type is Integer.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Actual (Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualInteger); }
			set { Entity.Attributes[Fields.ActualInteger] = value; }
		}

		/// <summary>
		/// <para>Shows the actual value (Money type) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount and the amount data type is Money.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual (Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ActualMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ActualMoney] = null;
			}
		}

		/// <summary>
		/// <para>Shows the actual value (money type) in base currency to track goal results against the target.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual (Money) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Actual Value of the goal.</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Actual</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActualString
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActualString); }
		}

		/// <summary>
		/// <para>Data type of the amount.</para>
		/// <para>Picklist</para>
		/// <para>Amount Data Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType? AmountDataType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AmountDataType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AmountDataType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AmountDataType] = null;
			}
		}

		/// <summary>
		/// <para>Shows the expected amount for actual value (decimal type) against the target goal.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Today's Target (Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ComputedTargetAsOfTodayDecimal); }
		}

		/// <summary>
		/// <para>Shows the expected amount for actual value (integer type) against the target goal as of the current date.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Today's Target (Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComputedTargetAsOfTodayInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComputedTargetAsOfTodayInteger); }
		}

		/// <summary>
		/// <para>Shows the expected amount for actual value (money type) against the target goal as of the current date.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Today's Target (Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ComputedTargetAsOfTodayMoney);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the expected amount in base currency for actual value (money type) against the target goal as of the current date.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Today's Target (Money) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ComputedTargetAsOfTodayMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the expected value for percentage achieved against the target goal as of the current date.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Today's Target (Percentage Achieved)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayPercentageAchieved
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ComputedTargetAsOfTodayPercentageAchieved); }
		}

		/// <summary>
		/// <para>Select whether only the goal owner&apos;s records, or all records, should be rolled up for goal results.</para>
		/// <para>Boolean</para>
		/// <para>Record Set for Rollup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ConsiderOnlyGoalOwnersRecords
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ConsiderOnlyGoalOwnersRecords); }
			set { Entity.Attributes[Fields.ConsiderOnlyGoalOwnersRecords] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Indicates a placeholder rollup field for a decimal value to track a third category of results other than actuals and in-progress results.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Custom Rollup Field (Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.CustomRollupFieldDecimal); }
			set { Entity.Attributes[Fields.CustomRollupFieldDecimal] = value; }
		}

		/// <summary>
		/// <para>Indicates a placeholder rollup field for an integer value to track a third category of results other than actuals and in-progress results.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Custom Rollup Field (Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CustomRollupFieldInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CustomRollupFieldInteger); }
			set { Entity.Attributes[Fields.CustomRollupFieldInteger] = value; }
		}

		/// <summary>
		/// <para>Indicates a placeholder rollup field for a money value to track a third category of results other than actuals and in-progress results.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Custom Rollup Field (Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CustomRollupFieldMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomRollupFieldMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CustomRollupFieldMoney] = null;
			}
		}

		/// <summary>
		/// <para>Indicates a placeholder rollup field for a money value in base currency to track a third category of results other than actuals and in-progress results.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Custom Rollup Field (Money) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CustomRollupFieldMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Placeholder rollup field for the goal.</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Custom Rollup Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomRollupFieldString
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomRollupFieldString); }
		}

		/// <summary>
		/// <para>Depth of the goal in the tree.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Depth</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Depth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Depth); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Entity Image Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Select the fiscal period for the goal.</para>
		/// <para>Picklist</para>
		/// <para>Fiscal Period</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalPeriod? FiscalPeriod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalPeriod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalPeriod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalPeriod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalPeriod] = null;
			}
		}

		/// <summary>
		/// <para>Select the fiscal year for the goal that&apos;s being tracked.</para>
		/// <para>Picklist</para>
		/// <para>Fiscal Year</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalYear? FiscalYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYear] = null;
			}
		}

		/// <summary>
		/// <para>Enter the date when the goal ends.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>To</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? GoalEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.GoalEndDate); }
			set { Entity.Attributes[Fields.GoalEndDate] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the goal.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Goal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid GoalId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.GoalId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Choose the user or team responsible for meeting the goal.</para>
		/// <para>Required - Lookup to systemuser, team</para>
		/// <para>Goal Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference GoalOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.GoalOwnerId); }
			set { Entity.Attributes[Fields.GoalOwnerId] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time when the period for tracking the goal begins.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>From</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? GoalStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.GoalStartDate); }
			set { Entity.Attributes[Fields.GoalStartDate] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the goal that caused an error in the rollup of the goal hierarchy.</para>
		/// <para>Lookup to goal</para>
		/// <para>Goal With Error</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference GoalWithErrorId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.GoalWithErrorId); }
			set { Entity.Attributes[Fields.GoalWithErrorId] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the in-progress value (decimal) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>In-progress (Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.InProgressDecimal); }
			set { Entity.Attributes[Fields.InProgressDecimal] = value; }
		}

		/// <summary>
		/// <para>Shows the in-progress value (integer) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>In-progress (Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InProgressInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InProgressInteger); }
			set { Entity.Attributes[Fields.InProgressInteger] = value; }
		}

		/// <summary>
		/// <para>Shows the in-progress value (money) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>In-progress (Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.InProgressMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InProgressMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.InProgressMoney] = null;
			}
		}

		/// <summary>
		/// <para>Shows the in-progress value (money) in base currency to track goal results against the target.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>In-progress (Money) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.InProgressMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>In-progress value of the goal.</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>In-Progress</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InProgressString
		{
			get { return Entity.GetAttributeValue<string>(Fields.InProgressString); }
		}

		/// <summary>
		/// <para>Indicates whether the metric type is Count or Amount.</para>
		/// <para>Required - Boolean</para>
		/// <para>Metric Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAmount
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAmount); }
			set { Entity.Attributes[Fields.IsAmount] = value; }
		}

		/// <summary>
		/// <para>Select whether the goal period is a fiscal period or custom period.</para>
		/// <para>Boolean</para>
		/// <para>Goal Period Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFiscalPeriodGoal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFiscalPeriodGoal); }
			set { Entity.Attributes[Fields.IsFiscalPeriodGoal] = value; }
		}

		/// <summary>
		/// <para>Select whether the system rollup fields are updated. If set to Yes, the next system rollup will not update the values of the rollup fields with the system calculated values.</para>
		/// <para>Boolean</para>
		/// <para>Overridden</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOverridden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOverridden); }
			set { Entity.Attributes[Fields.IsOverridden] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the values of system rollup fields can be updated.</para>
		/// <para>Boolean</para>
		/// <para>Override</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOverride
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOverride); }
			set { Entity.Attributes[Fields.IsOverride] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the goal was last rolled up. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Rolled Up Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastRolledupDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastRolledupDate); }
			set { Entity.Attributes[Fields.LastRolledupDate] = value; }
		}

		/// <summary>
		/// <para>Choose the metric for the goal. This metric determines how the goal is tracked.</para>
		/// <para>Required - Lookup to metric</para>
		/// <para>Goal Metric</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MetricId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MetricId); }
			set { Entity.Attributes[Fields.MetricId] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the goal.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user who owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose a parent goal if the current goal is a child goal. This sets up a parent-child relationship for reporting and analytics.</para>
		/// <para>Lookup to goal</para>
		/// <para>Parent Goal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentGoalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentGoalId); }
			set { Entity.Attributes[Fields.ParentGoalId] = value; }
		}

		/// <summary>
		/// <para>Shows the percentage achieved against the target goal.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Percentage Achieved</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Percentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Percentage); }
			set { Entity.Attributes[Fields.Percentage] = value; }
		}

		/// <summary>
		/// <para>Error code associated with rollup.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Rollup Error Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RollupErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RollupErrorCode); }
			set { Entity.Attributes[Fields.RollupErrorCode] = value; }
		}

		/// <summary>
		/// <para>Select whether the data should be rolled up only from the child goals.</para>
		/// <para>Boolean</para>
		/// <para>Roll Up Only from Child Goals</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RollupOnlyFromChildGoals
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RollupOnlyFromChildGoals); }
			set { Entity.Attributes[Fields.RollupOnlyFromChildGoals] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate the actual data for the goal (decimal).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - Actual(Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryActualDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryActualDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryActualDecimalId] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate the actual data for the goal (integer).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - Actual(Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollupQueryActualIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollupQueryActualIntegerId); }
			set { Entity.Attributes[Fields.RollupQueryActualIntegerId] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate the actual data for the goal (money).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - Actual(Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryActualMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryActualMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryActualMoneyId] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate data for the custom rollup field (decimal).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - Custom Rollup Field (Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomDecimalId] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate data for the custom rollup field (integer).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - Custom Rollup Field (Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomIntegerId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomIntegerId] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate data for the custom rollup field (money).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - Custom Rollup Field (Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomMoneyId] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate data for the in-progress rollup field (decimal).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - In-progress(Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressDecimalId] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate data for the in-progress rollup field (integer).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - In-progress(Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressIntegerId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressIntegerId] = value; }
		}

		/// <summary>
		/// <para>Choose the query that will be used to calculate data for the in-progress rollup field (money).</para>
		/// <para>Lookup to goalrollupquery</para>
		/// <para>Rollup Query - In-progress(Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressMoneyId] = value; }
		}

		/// <summary>
		/// <para>Shows whether the goal is open, completed, or canceled. Completed and canceled goals are read-only and can&apos;t be edited.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the goal&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Select a stretch target (decimal) of the goal to define a higher or difficult level of goal than the usual ones.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Stretch Target (Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.StretchTargetDecimal); }
			set { Entity.Attributes[Fields.StretchTargetDecimal] = value; }
		}

		/// <summary>
		/// <para>Select the stretch target (integer) of the goal to define a higher or difficult level of goal than the usual ones.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Stretch Target (Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StretchTargetInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StretchTargetInteger); }
			set { Entity.Attributes[Fields.StretchTargetInteger] = value; }
		}

		/// <summary>
		/// <para>Select stretch target (money) of the goal to define a higher or difficult level of goal than the usual ones.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Stretch Target (Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StretchTargetMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StretchTargetMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.StretchTargetMoney] = null;
			}
		}

		/// <summary>
		/// <para>Shows the stretch target (money) in base currency to indicate a higher or difficult level of goal than the usual ones.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Stretch Target (Money) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StretchTargetMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Stretch target value for all data types.</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Stretched Target</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StretchTargetString
		{
			get { return Entity.GetAttributeValue<string>(Fields.StretchTargetString); }
		}

		/// <summary>
		/// <para>Select a goal target of the decimal type to use for tracking data that include partial numbers, such as pounds sold of a product sold by weight.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Target (Decimal)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.TargetDecimal); }
			set { Entity.Attributes[Fields.TargetDecimal] = value; }
		}

		/// <summary>
		/// <para>Select a goal target of the integer type to use for tracking anything countable in whole numbers, such as units sold.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Target (Integer)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TargetInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TargetInteger); }
			set { Entity.Attributes[Fields.TargetInteger] = value; }
		}

		/// <summary>
		/// <para>Select a goal target (money) to track a monetary amount such as revenue from a product.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Target (Money)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TargetMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TargetMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TargetMoney] = null;
			}
		}

		/// <summary>
		/// <para>Shows the goal target of the money type in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Target (Money) (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TargetMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Target value of the goal.</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Target</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TargetString
		{
			get { return Entity.GetAttributeValue<string>(Fields.TargetString); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Type a title or name that describes the goal.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>ReadOnly - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}

		/// <summary>
		/// <para>Unique identifier of the goal tree.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Tree ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? TreeId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.TreeId); }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version number of the goal.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
