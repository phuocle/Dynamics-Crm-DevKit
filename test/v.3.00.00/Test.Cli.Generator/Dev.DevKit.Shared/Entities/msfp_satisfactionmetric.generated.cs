//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets
{
	public enum msfp_status
	{
		/// <summary>
		/// Active = 647390000
		/// </summary>
		Active = 647390000,
		/// <summary>
		/// InActive = 647390001
		/// </summary>
		InActive = 647390001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msfp_satisfactionmetric : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msfp_description = "msfp_description";
			public const string msfp_historicalcomputedvalue = "msfp_historicalcomputedvalue";
			public const string msfp_issystemkpi = "msfp_issystemkpi";
			public const string msfp_lastcomputedon = "msfp_lastcomputedon";
			public const string msfp_lastcomputedvalue = "msfp_lastcomputedvalue";
			public const string msfp_maximumvalue = "msfp_maximumvalue";
			public const string msfp_minimumvalue = "msfp_minimumvalue";
			public const string msfp_name = "msfp_name";
			public const string msfp_project = "msfp_project";
			public const string msfp_questions = "msfp_questions";
			public const string msfp_satisfactionmetricId = "msfp_satisfactionmetricid";
			public const string msfp_status = "msfp_status";
			public const string msfp_threshold = "msfp_threshold";
			public const string msfp_type = "msfp_type";
			public const string msfp_versionnumber = "msfp_versionnumber";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msfp_satisfactionmetric";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10338;

		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(Guid msfp_satisfactionmetricId)
		{
			Entity = new Entity(EntityLogicalName, msfp_satisfactionmetricId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the satisfaction metric.</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_description); }
			set { Entity.Attributes[Fields.msfp_description] = value; }
		}

		/// <summary>
		/// <para>Historical computed value of the satisfaction metric.</para>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Historical computed value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_historicalcomputedvalue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_historicalcomputedvalue); }
			set { Entity.Attributes[Fields.msfp_historicalcomputedvalue] = value; }
		}

		/// <summary>
		/// <para>Indicates if the satisfaction metric is system defined or user defined.</para>
		/// <para>Boolean</para>
		/// <para>Is system KPI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msfp_issystemkpi
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msfp_issystemkpi); }
			set { Entity.Attributes[Fields.msfp_issystemkpi] = value; }
		}

		/// <summary>
		/// <para>Date and time when the satisfaction metric was last computed.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last computed on</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msfp_lastcomputedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msfp_lastcomputedon); }
			set { Entity.Attributes[Fields.msfp_lastcomputedon] = value; }
		}

		/// <summary>
		/// <para>Last computed value of the satisfaction metric.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Last Computed Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_lastcomputedvalue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_lastcomputedvalue); }
			set { Entity.Attributes[Fields.msfp_lastcomputedvalue] = value; }
		}

		/// <summary>
		/// <para>Maximum value of the satisfaction metric.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_maximumvalue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_maximumvalue); }
			set { Entity.Attributes[Fields.msfp_maximumvalue] = value; }
		}

		/// <summary>
		/// <para>Minimum value of the satisfaction metric.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_minimumvalue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_minimumvalue); }
			set { Entity.Attributes[Fields.msfp_minimumvalue] = value; }
		}

		/// <summary>
		/// <para>Name of the satisfaction metric.</para>
		/// <para>Required - String - MaxLength: 550</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_name); }
			set { Entity.Attributes[Fields.msfp_name] = value; }
		}

		/// <summary>
		/// <para>Project to which the satisfaction metric belongs.</para>
		/// <para>Required - Lookup to msfp_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msfp_project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msfp_project); }
			set { Entity.Attributes[Fields.msfp_project] = value; }
		}

		/// <summary>
		/// <para>Questions on which the satisfaction metric is calculated.</para>
		/// <para>Memo - MaxLength: 50000</para>
		/// <para>Questions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_questions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_questions); }
			set { Entity.Attributes[Fields.msfp_questions] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Customer Voice satisfaction metric</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msfp_satisfactionmetricId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msfp_satisfactionmetricId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Status of the satisfaction metric.</para>
		/// <para>Picklist</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.msfp_status? msfp_status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msfp_status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.msfp_status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msfp_status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msfp_status] = null;
			}
		}

		/// <summary>
		/// <para>Threshold value of the satisfaction metric.</para>
		/// <para>Required - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Threshold</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_threshold
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_threshold); }
			set { Entity.Attributes[Fields.msfp_threshold] = value; }
		}

		/// <summary>
		/// <para>Type of the satisfaction metric.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_type
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_type); }
			set { Entity.Attributes[Fields.msfp_type] = value; }
		}

		/// <summary>
		/// <para>Version number of the satisfaction metric.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Version number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_versionnumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_versionnumber); }
			set { Entity.Attributes[Fields.msfp_versionnumber] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>User who owns the satisfaction metric.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Satisfaction metric</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Satisfaction metric</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
