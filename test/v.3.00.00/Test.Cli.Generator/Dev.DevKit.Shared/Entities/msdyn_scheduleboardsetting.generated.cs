//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_scheduleboardsettingOptionSets
{
	public enum msdyn_ShareType
	{
		/// <summary>
		/// Everyone = 192350000
		/// </summary>
		Everyone = 192350000,
		/// <summary>
		/// Just me = 192350001
		/// </summary>
		Just_me = 192350001,
		/// <summary>
		/// Specific people = 192350002
		/// </summary>
		Specific_people = 192350002,
		/// <summary>
		/// System = 192350003
		/// </summary>
		System = 192350003
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_scheduleboardsetting : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_BookBasedOn = "msdyn_bookbasedon";
			public const string msdyn_CustomTabName = "msdyn_customtabname";
			public const string msdyn_CustomTabWebResource = "msdyn_customtabwebresource";
			public const string msdyn_FilterLayout = "msdyn_filterlayout";
			public const string msdyn_FilterValues = "msdyn_filtervalues";
			public const string msdyn_FullyBookedColor = "msdyn_fullybookedcolor";
			public const string msdyn_HideCancelled = "msdyn_hidecancelled";
			public const string msdyn_IsPublic = "msdyn_ispublic";
			public const string msdyn_IsSynchronizeResources = "msdyn_issynchronizeresources";
			public const string msdyn_MapViewTabPlacement = "msdyn_mapviewtabplacement";
			public const string msdyn_NotBookedColor = "msdyn_notbookedcolor";
			public const string msdyn_OrderNumber = "msdyn_ordernumber";
			public const string msdyn_OrganizationalUnitTooltipsViewId = "msdyn_organizationalunittooltipsviewid";
			public const string msdyn_OrganizationalUnitViewId = "msdyn_organizationalunitviewid";
			public const string msdyn_OverbookedColor = "msdyn_overbookedcolor";
			public const string msdyn_PartiallyBookedColor = "msdyn_partiallybookedcolor";
			public const string msdyn_ResourceCellTemplate = "msdyn_resourcecelltemplate";
			public const string msdyn_RetrieveResourcesQuery = "msdyn_retrieveresourcesquery";
			public const string msdyn_SAAvailableColor = "msdyn_saavailablecolor";
			public const string msdyn_SAAvailableIcon = "msdyn_saavailableicon";
			public const string msdyn_SAAvailableIconDefault = "msdyn_saavailableicondefault";
			public const string msdyn_SAPartiallyAvailableColor = "msdyn_sapartiallyavailablecolor";
			public const string msdyn_SAPartiallyAvailableIcon = "msdyn_sapartiallyavailableicon";
			public const string msdyn_SAPartiallyAvailableIconDefault = "msdyn_sapartiallyavailableicondefault";
			public const string msdyn_SAUnavailableColor = "msdyn_saunavailablecolor";
			public const string msdyn_SAUnavailableIcon = "msdyn_saunavailableicon";
			public const string msdyn_SAUnavailableIconDefault = "msdyn_saunavailableicondefault";
			public const string msdyn_scheduleboardsettingId = "msdyn_scheduleboardsettingid";
			public const string msdyn_SchedulerAlertsView = "msdyn_scheduleralertsview";
			public const string msdyn_SchedulerBusinessUnitDetailsView = "msdyn_schedulerbusinessunitdetailsview";
			public const string msdyn_SchedulerBusinessUnitTooltipView = "msdyn_schedulerbusinessunittooltipview";
			public const string msdyn_SchedulerCoreDetailsView = "msdyn_schedulercoredetailsview";
			public const string msdyn_SchedulerCoreSlotTextTemplate = "msdyn_schedulercoreslottexttemplate";
			public const string msdyn_SchedulerCoreTooltipView = "msdyn_schedulercoretooltipview";
			public const string msdyn_SchedulerFieldServiceDetailsView = "msdyn_schedulerfieldservicedetailsview";
			public const string msdyn_SchedulerFieldServiceSlotTextTemplate = "msdyn_schedulerfieldserviceslottexttemplate";
			public const string msdyn_SchedulerFieldServiceTooltipView = "msdyn_schedulerfieldservicetooltipview";
			public const string msdyn_SchedulerResourceDetailsView = "msdyn_schedulerresourcedetailsview";
			public const string msdyn_SchedulerResourceTooltipView = "msdyn_schedulerresourcetooltipview";
			public const string msdyn_Settings = "msdyn_settings";
			public const string msdyn_ShareType = "msdyn_sharetype";
			public const string msdyn_TabName = "msdyn_tabname";
			public const string msdyn_UnscheduledRequirementsViewId = "msdyn_unscheduledrequirementsviewid";
			public const string msdyn_UnscheduledViewId = "msdyn_unscheduledviewid";
			public const string msdyn_UnscheduledWOPageRecCount = "msdyn_unscheduledwopagereccount";
			public const string msdyn_UnscheduledWOTooltipsViewId = "msdyn_unscheduledwotooltipsviewid";
			public const string msdyn_WorkingHoursColor = "msdyn_workinghourscolor";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_scheduleboardsetting";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10481;

		[DebuggerNonUserCode()]
		public msdyn_scheduleboardsetting()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_scheduleboardsetting(Guid msdyn_scheduleboardsettingId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_scheduleboardsettingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_scheduleboardsetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_scheduleboardsetting(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_scheduleboardsetting(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_scheduleboardsetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>Book Based On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_BookBasedOn
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_BookBasedOn); }
			set { Entity.Attributes[Fields.msdyn_BookBasedOn] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom Tab Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomTabName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomTabName); }
			set { Entity.Attributes[Fields.msdyn_CustomTabName] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 255</para>
		/// <para>Custom Tab Web Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomTabWebResource
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomTabWebResource); }
			set { Entity.Attributes[Fields.msdyn_CustomTabWebResource] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_configuration</para>
		/// <para>Filter Layout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_FilterLayout
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_FilterLayout); }
			set { Entity.Attributes[Fields.msdyn_FilterLayout] = value; }
		}

		/// <summary>
		/// <para>Storing filter values as Json string.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Filter Values</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_FilterValues
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_FilterValues); }
			set { Entity.Attributes[Fields.msdyn_FilterValues] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Fully Booked Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_FullyBookedColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_FullyBookedColor); }
			set { Entity.Attributes[Fields.msdyn_FullyBookedColor] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>Hide Canceled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_HideCancelled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_HideCancelled); }
			set { Entity.Attributes[Fields.msdyn_HideCancelled] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>Is Public (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsPublic
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsPublic); }
			set { Entity.Attributes[Fields.msdyn_IsPublic] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>Is Synchronize Resources</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsSynchronizeResources
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsSynchronizeResources); }
			set { Entity.Attributes[Fields.msdyn_IsSynchronizeResources] = value; }
		}

		/// <summary>
		/// <para>Required - Boolean</para>
		/// <para>Map View Tab Placement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_MapViewTabPlacement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_MapViewTabPlacement); }
			set { Entity.Attributes[Fields.msdyn_MapViewTabPlacement] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Not Booked Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_NotBookedColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_NotBookedColor); }
			set { Entity.Attributes[Fields.msdyn_NotBookedColor] = value; }
		}

		/// <summary>
		/// <para>Tab index.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 10,000</para>
		/// <para>Order Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_OrderNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_OrderNumber); }
			set { Entity.Attributes[Fields.msdyn_OrderNumber] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Organizational Unit Tooltips View Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_OrganizationalUnitTooltipsViewId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_OrganizationalUnitTooltipsViewId); }
			set { Entity.Attributes[Fields.msdyn_OrganizationalUnitTooltipsViewId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Organizational Unit View Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_OrganizationalUnitViewId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_OrganizationalUnitViewId); }
			set { Entity.Attributes[Fields.msdyn_OrganizationalUnitViewId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Overbooked Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_OverbookedColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_OverbookedColor); }
			set { Entity.Attributes[Fields.msdyn_OverbookedColor] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Partially Booked Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PartiallyBookedColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PartiallyBookedColor); }
			set { Entity.Attributes[Fields.msdyn_PartiallyBookedColor] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_configuration</para>
		/// <para>Resource Cell Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceCellTemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceCellTemplate); }
			set { Entity.Attributes[Fields.msdyn_ResourceCellTemplate] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_configuration</para>
		/// <para>Retrieve Resources Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RetrieveResourcesQuery
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RetrieveResourcesQuery); }
			set { Entity.Attributes[Fields.msdyn_RetrieveResourcesQuery] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>SA Available Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SAAvailableColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SAAvailableColor); }
			set { Entity.Attributes[Fields.msdyn_SAAvailableColor] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>SA Available Icon</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SAAvailableIcon
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SAAvailableIcon); }
			set { Entity.Attributes[Fields.msdyn_SAAvailableIcon] = value; }
		}

		/// <summary>
		/// <para>Is available icon inheriting from default setting.</para>
		/// <para>Boolean</para>
		/// <para>SA Available Icon Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_SAAvailableIconDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_SAAvailableIconDefault); }
			set { Entity.Attributes[Fields.msdyn_SAAvailableIconDefault] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>SA Partially Available Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SAPartiallyAvailableColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SAPartiallyAvailableColor); }
			set { Entity.Attributes[Fields.msdyn_SAPartiallyAvailableColor] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>SA Partially Available Icon</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SAPartiallyAvailableIcon
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SAPartiallyAvailableIcon); }
			set { Entity.Attributes[Fields.msdyn_SAPartiallyAvailableIcon] = value; }
		}

		/// <summary>
		/// <para>Is partially available icon inheriting from default setting.</para>
		/// <para>Boolean</para>
		/// <para>SA Partially Available Icon Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_SAPartiallyAvailableIconDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_SAPartiallyAvailableIconDefault); }
			set { Entity.Attributes[Fields.msdyn_SAPartiallyAvailableIconDefault] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>SA Unavailable Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SAUnavailableColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SAUnavailableColor); }
			set { Entity.Attributes[Fields.msdyn_SAUnavailableColor] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>SA Unavailable Icon</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SAUnavailableIcon
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SAUnavailableIcon); }
			set { Entity.Attributes[Fields.msdyn_SAUnavailableIcon] = value; }
		}

		/// <summary>
		/// <para>Is unavailable icon inheriting from default setting.</para>
		/// <para>Boolean</para>
		/// <para>SA Unavailable Icon Default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_SAUnavailableIconDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_SAUnavailableIconDefault); }
			set { Entity.Attributes[Fields.msdyn_SAUnavailableIconDefault] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Schedule Board Setting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_scheduleboardsettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_scheduleboardsettingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Scheduler Alerts View</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerAlertsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerAlertsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerAlertsView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 40</para>
		/// <para>Unit Details View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerBusinessUnitDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerBusinessUnitDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerBusinessUnitDetailsView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 40</para>
		/// <para>Business Unit Tooltips View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerBusinessUnitTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerBusinessUnitTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerBusinessUnitTooltipView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Core Details View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreDetailsView] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>Core Slot Text Template (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreSlotTextTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreSlotTextTemplate); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreSlotTextTemplate] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Core Tooltip View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreTooltipView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 40</para>
		/// <para>Field Service Details View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceDetailsView] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 8000</para>
		/// <para>Field Service Slot Text Template (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceSlotTextTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceSlotTextTemplate); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceSlotTextTemplate] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 40</para>
		/// <para>Field Service Tooltip View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceTooltipView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 40</para>
		/// <para>Resource Details View</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerResourceDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerResourceDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerResourceDetailsView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 40</para>
		/// <para>Resource Tooltips View</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerResourceTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerResourceTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerResourceTooltipView] = value; }
		}

		/// <summary>
		/// <para>Shows the settings as a JSON string.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Settings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Settings); }
			set { Entity.Attributes[Fields.msdyn_Settings] = value; }
		}

		/// <summary>
		/// <para>Field is used to determine if Schedule Board Tab are Private, Public or Shareable</para>
		/// <para>Required - Picklist</para>
		/// <para>Share Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_scheduleboardsettingOptionSets.msdyn_ShareType? msdyn_ShareType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ShareType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_scheduleboardsettingOptionSets.msdyn_ShareType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ShareType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ShareType] = null;
			}
		}

		/// <summary>
		/// <para>Enter the tab name.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Tab name.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TabName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TabName); }
			set { Entity.Attributes[Fields.msdyn_TabName] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Requirements View Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UnscheduledRequirementsViewId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UnscheduledRequirementsViewId); }
			set { Entity.Attributes[Fields.msdyn_UnscheduledRequirementsViewId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 40</para>
		/// <para>Unscheduled View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UnscheduledViewId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UnscheduledViewId); }
			set { Entity.Attributes[Fields.msdyn_UnscheduledViewId] = value; }
		}

		/// <summary>
		/// <para>Shows the number of records to be displayed per page in &apos;Resource Requirement&apos; section.</para>
		/// <para>Required - Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Resource Requirement View Page Record Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_UnscheduledWOPageRecCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_UnscheduledWOPageRecCount); }
			set { Entity.Attributes[Fields.msdyn_UnscheduledWOPageRecCount] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 40</para>
		/// <para>Unscheduled WO Tooltips View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UnscheduledWOTooltipsViewId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UnscheduledWOTooltipsViewId); }
			set { Entity.Attributes[Fields.msdyn_UnscheduledWOTooltipsViewId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 10</para>
		/// <para>Non-Working Hours Color</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WorkingHoursColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WorkingHoursColor); }
			set { Entity.Attributes[Fields.msdyn_WorkingHoursColor] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Schedule Board Setting</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_scheduleboardsettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_scheduleboardsettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Schedule Board Setting</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_scheduleboardsettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_scheduleboardsettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
