//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.CampaignOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Canceled = 4
		/// </summary>
		Canceled = 4,
		/// <summary>
		/// Completed = 3
		/// </summary>
		Completed = 3,
		/// <summary>
		/// Inactive = 6
		/// </summary>
		Inactive = 6,
		/// <summary>
		/// Launched = 2
		/// </summary>
		Launched = 2,
		/// <summary>
		/// Proposed = 0
		/// </summary>
		Proposed = 0,
		/// <summary>
		/// Ready To Launch = 1
		/// </summary>
		Ready_To_Launch = 1,
		/// <summary>
		/// Suspended = 5
		/// </summary>
		Suspended = 5
	}

	public enum TypeCode
	{
		/// <summary>
		/// Advertisement = 1
		/// </summary>
		Advertisement = 1,
		/// <summary>
		/// Co-branding = 4
		/// </summary>
		Co_branding = 4,
		/// <summary>
		/// Direct Marketing = 2
		/// </summary>
		Direct_Marketing = 2,
		/// <summary>
		/// Event = 3
		/// </summary>
		Event = 3,
		/// <summary>
		/// Other = 5
		/// </summary>
		Other = 5
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Campaign : EntityBase
	{
		public struct Fields
		{
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string BudgetedCost = "budgetedcost";
			public const string BudgetedCost_Base = "budgetedcost_base";
			public const string CampaignId = "campaignid";
			public const string CodeName = "codename";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EmailAddress = "emailaddress";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ExpectedResponse = "expectedresponse";
			public const string ExpectedRevenue = "expectedrevenue";
			public const string ExpectedRevenue_Base = "expectedrevenue_base";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsTemplate = "istemplate";
			public const string Message = "message";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string Name = "name";
			public const string Objective = "objective";
			public const string OtherCost = "othercost";
			public const string OtherCost_Base = "othercost_base";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PriceListId = "pricelistid";
			public const string ProcessId = "processid";
			public const string PromotionCodeName = "promotioncodename";
			public const string ProposedEnd = "proposedend";
			public const string ProposedStart = "proposedstart";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TmpRegardingObjectId = "tmpregardingobjectid";
			public const string TotalActualCost = "totalactualcost";
			public const string TotalActualCost_Base = "totalactualcost_base";
			public const string TotalCampaignActivityActualCost = "totalcampaignactivityactualcost";
			public const string TotalCampaignActivityActualCost_Base = "totalcampaignactivityactualcost_base";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string TypeCode = "typecode";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "campaign";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4400;

		[DebuggerNonUserCode()]
		public Campaign()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Campaign(Guid CampaignId)
		{
			Entity = new Entity(EntityLogicalName, CampaignId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Campaign(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Campaign(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Campaign(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Campaign(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Enter the date when the campaign was closed or completed.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Actual End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
			set { Entity.Attributes[Fields.ActualEnd] = value; }
		}

		/// <summary>
		/// <para>Enter the actual start date and time for the campaign.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Actual Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
			set { Entity.Attributes[Fields.ActualStart] = value; }
		}

		/// <summary>
		/// <para>Type the amount budgeted for the campaign to define a limit for how much you can spend.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Budget Allocated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetedCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetedCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetedCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.BudgetedCost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Budget Allocated in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Budget Allocated (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetedCost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetedCost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the campaign.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Campaign</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CampaignId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CampaignId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Type a number or other tracking code to identify the campaign. If no value is entered, a code will be generated automatically.</para>
		/// <para>String - MaxLength: 32</para>
		/// <para>Campaign Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CodeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CodeName); }
			set { Entity.Attributes[Fields.CodeName] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type additional information to describe the campaign, such as the products or services offered or the targeted audience.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>The primary email address for the entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Type the expected response rate for the campaign as a full number between 0 and 100.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 100</para>
		/// <para>Expected Response Percentage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpectedResponse
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpectedResponse); }
			set { Entity.Attributes[Fields.ExpectedResponse] = value; }
		}

		/// <summary>
		/// <para>Type the expected revenue for the campaign for return on investment projections and post-campaign reporting.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Estimated Revenue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExpectedRevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ExpectedRevenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExpectedRevenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ExpectedRevenue] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Estimated Revenue in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Estimated Revenue (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExpectedRevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ExpectedRevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Select whether the campaign is a template that can be copied when you create future campaigns.</para>
		/// <para>Boolean</para>
		/// <para>Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTemplate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTemplate); }
			set { Entity.Attributes[Fields.IsTemplate] = value; }
		}

		/// <summary>
		/// <para>Type the promotional message or marketing copy for the campaign.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Message
		{
			get { return Entity.GetAttributeValue<string>(Fields.Message); }
			set { Entity.Attributes[Fields.Message] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Describes whether campaign is opted out or not</para>
		/// <para>Boolean</para>
		/// <para>GDPR Optout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}

		/// <summary>
		/// <para>Type a name for the campaign so that it is identified correctly in lists.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Type the objective of the campaign, including products, services, discounts, and pricing.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Offer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Objective
		{
			get { return Entity.GetAttributeValue<string>(Fields.Objective); }
			set { Entity.Attributes[Fields.Objective] = value; }
		}

		/// <summary>
		/// <para>Type the sum of any miscellaneous campaign costs not included in the campaign activities to make sure the actual cost of the campaign is calculated correctly.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Miscellaneous Costs</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? OtherCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.OtherCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OtherCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.OtherCost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Miscellaneous Costs in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Miscellaneous Costs (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? OtherCost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.OtherCost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose the price list associated with this item to make sure the products associated with the campaign are offered at the correct prices.</para>
		/// <para>Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PriceListId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PriceListId); }
			set { Entity.Attributes[Fields.PriceListId] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Type a promotional code to track sales related to the campaign or allow customers to redeem a discount offer.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Promotion Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PromotionCodeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PromotionCodeName); }
			set { Entity.Attributes[Fields.PromotionCodeName] = value; }
		}

		/// <summary>
		/// <para>Enter the date when the campaign is scheduled to end.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Proposed End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProposedEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProposedEnd); }
			set { Entity.Attributes[Fields.ProposedEnd] = value; }
		}

		/// <summary>
		/// <para>Enter the date when the campaign is scheduled to start.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Proposed Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProposedStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProposedStart); }
			set { Entity.Attributes[Fields.ProposedStart] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Shows the status of the campaign. By default, campaigns are active and can&apos;t be deactivated.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CampaignOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CampaignOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the campaign&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CampaignOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CampaignOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>TmpRegardingObjectId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TmpRegardingObjectId
		{
			get { return Entity.GetAttributeValue<string>(Fields.TmpRegardingObjectId); }
			set { Entity.Attributes[Fields.TmpRegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Shows the sum of the amounts entered in the Total Cost of Campaign Activities and Miscellaneous Costs fields.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Total Cost of Campaign</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalActualCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalActualCost);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Total Cost of Campaign in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Cost of Campaign (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalActualCost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalActualCost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the sum of the values entered in the Actual Cost field on all campaign activities related to the campaign.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Total Cost of Campaign Activities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalCampaignActivityActualCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalCampaignActivityActualCost);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Total Cost of Campaign Activities in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Cost of Campaign Activities (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalCampaignActivityActualCost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalCampaignActivityActualCost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Select the type of the campaign.</para>
		/// <para>Picklist</para>
		/// <para>Campaign Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CampaignOptionSets.TypeCode? TypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CampaignOptionSets.TypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
