//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_quotelinescheduleofvalueOptionSets
{
	public enum msdyn_invoicestatus
	{
		/// <summary>
		/// Customer invoice created = 192350002
		/// </summary>
		Customer_invoice_created = 192350002,
		/// <summary>
		/// Customer invoice posted = 192350003
		/// </summary>
		Customer_invoice_posted = 192350003,
		/// <summary>
		/// Not Ready for invoicing = 192350000
		/// </summary>
		Not_Ready_for_invoicing = 192350000,
		/// <summary>
		/// Ready for invoicing = 192350001
		/// </summary>
		Ready_for_invoicing = 192350001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_quotelinescheduleofvalue : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_amount = "msdyn_amount";
			public const string msdyn_amount_after_tax = "msdyn_amount_after_tax";
			public const string msdyn_amount_after_tax_Base = "msdyn_amount_after_tax_base";
			public const string msdyn_amount_Base = "msdyn_amount_base";
			public const string msdyn_invoicedate = "msdyn_invoicedate";
			public const string msdyn_invoicestatus = "msdyn_invoicestatus";
			public const string msdyn_isdataimport = "msdyn_isdataimport";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_projecttask = "msdyn_projecttask";
			public const string msdyn_quoteline = "msdyn_quoteline";
			public const string msdyn_quotelineid = "msdyn_quotelineid";
			public const string msdyn_quotelinescheduleofvalueId = "msdyn_quotelinescheduleofvalueid";
			public const string msdyn_tax = "msdyn_tax";
			public const string msdyn_tax_Base = "msdyn_tax_base";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_quotelinescheduleofvalue";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10542;

		[DebuggerNonUserCode()]
		public msdyn_quotelinescheduleofvalue()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelinescheduleofvalue(Guid msdyn_quotelinescheduleofvalueId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_quotelinescheduleofvalueId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelinescheduleofvalue(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelinescheduleofvalue(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelinescheduleofvalue(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelinescheduleofvalue(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enter the value of the amount on the billing milestone.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Line Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_amount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_amount] = null;
			}
		}

		/// <summary>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Milestone Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amount_after_tax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amount_after_tax);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the amount_after_tax in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>amount_after_tax (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amount_after_tax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amount_after_tax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the date on which the milestone is to be invoiced. This, in conjunction with the Invoice status, will be used by the invoice creation job.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Milestone Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_invoicedateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_invoicedate); }
			set { Entity.Attributes[Fields.msdyn_invoicedate] = value; }
		}

		/// <summary>
		/// <para>Select whether this milestone was invoiced. Valid values are Not ready for invoicing, Ready for Invoicing, On an invoice, and Invoiced.</para>
		/// <para>Picklist</para>
		/// <para>Invoice Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotelinescheduleofvalueOptionSets.msdyn_invoicestatus? msdyn_invoicestatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_invoicestatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotelinescheduleofvalueOptionSets.msdyn_invoicestatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_invoicestatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_invoicestatus] = null;
			}
		}

		/// <summary>
		/// <para>Indicates if this record was created via import. It&apos;s purpose is to support data import.</para>
		/// <para>Boolean</para>
		/// <para>isdataimport</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isdataimport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isdataimport); }
			set { Entity.Attributes[Fields.msdyn_isdataimport] = value; }
		}

		/// <summary>
		/// <para>Type the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Select the project task that is tracking the work for this billing milestone.</para>
		/// <para>Lookup to msdyn_projecttask</para>
		/// <para>Project Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projecttask
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projecttask); }
			set { Entity.Attributes[Fields.msdyn_projecttask] = value; }
		}

		/// <summary>
		/// <para>(Deprecated) Shows a reference to the quote line that this milestone schedule belongs to.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>(Deprecated) Quote Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_quoteline
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_quoteline); }
			set { Entity.Attributes[Fields.msdyn_quoteline] = value; }
		}

		/// <summary>
		/// <para>Shows a reference to the quote line that this milestone schedule belongs to.</para>
		/// <para>Lookup to quotedetail</para>
		/// <para>Quote Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_quotelineid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_quotelineid); }
			set { Entity.Attributes[Fields.msdyn_quotelineid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Quote Line Schedule Of Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_quotelinescheduleofvalueId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_quotelinescheduleofvalueId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>tax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_tax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_tax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_tax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_tax] = null;
			}
		}

		/// <summary>
		/// <para>Value of the tax in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>tax (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_tax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_tax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Quote Line Schedule Of Value</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotelinescheduleofvalueOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotelinescheduleofvalueOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Quote Line Schedule Of Value</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotelinescheduleofvalueOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotelinescheduleofvalueOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
