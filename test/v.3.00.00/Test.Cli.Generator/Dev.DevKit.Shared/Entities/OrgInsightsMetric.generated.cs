//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.OrgInsightsMetricOptionSets
{
	public enum MetricType
	{
		/// <summary>
		/// Category = 2
		/// </summary>
		Category = 2,
		/// <summary>
		/// Time Series = 1
		/// </summary>
		Time_Series = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class OrgInsightsMetric : EntityBase
	{
		public struct Fields
		{
			public const string CreatedOn = "createdon";
			public const string InternalName = "internalname";
			public const string MetricType = "metrictype";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OrgInsightsMetricId = "orginsightsmetricid";
		}

		public const string EntityLogicalName = "orginsightsmetric";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9699;

		[DebuggerNonUserCode()]
		public OrgInsightsMetric()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrgInsightsMetric(Guid OrgInsightsMetricId)
		{
			Entity = new Entity(EntityLogicalName, OrgInsightsMetricId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrgInsightsMetric(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrgInsightsMetric(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrgInsightsMetric(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OrgInsightsMetric(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Date and time when the organization insights metric was created</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Name of the metric which is used for retrieving the data</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Name of the metric that is used for retrieving the data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InternalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.InternalName); }
			set { Entity.Attributes[Fields.InternalName] = value; }
		}

		/// <summary>
		/// <para>Type of the metric</para>
		/// <para>Picklist</para>
		/// <para>Metric Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrgInsightsMetricOptionSets.MetricType? MetricType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MetricType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrgInsightsMetricOptionSets.MetricType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MetricType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MetricType] = null;
			}
		}

		/// <summary>
		/// <para>Legend Name used while displaying the metric</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Legend Name used wile displaying the metric</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the record</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OrgInsightsMetricId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.OrgInsightsMetricId] = value;
				Entity.Id = value;
			}
		}
	}
}
