//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.OrganizationOptionSets
{
	public enum CurrencyDisplayOption
	{
		/// <summary>
		/// Currency code = 1
		/// </summary>
		Currency_code = 1,
		/// <summary>
		/// Currency symbol = 0
		/// </summary>
		Currency_symbol = 0
	}

	public enum CurrencyFormatCode
	{
		/// <summary>
		/// 123 $ = 3
		/// </summary>
		_123_ = 3,
		/// <summary>
		/// $123 = 0
		/// </summary>
		_123_0 = 0,
		/// <summary>
		/// 123$ = 1
		/// </summary>
		_123_1 = 1,
		/// <summary>
		/// $ 123 = 2
		/// </summary>
		_123_2 = 2
	}

	public enum DefaultRecurrenceEndRangeType
	{
		/// <summary>
		/// End By Date = 3
		/// </summary>
		End_By_Date = 3,
		/// <summary>
		/// No End Date = 1
		/// </summary>
		No_End_Date = 1,
		/// <summary>
		/// Number of Occurrences = 2
		/// </summary>
		Number_of_Occurrences = 2
	}

	public enum DiscountCalculationMethod
	{
		/// <summary>
		/// Line item = 0
		/// </summary>
		Line_item = 0,
		/// <summary>
		/// Per unit = 1
		/// </summary>
		Per_unit = 1
	}

	public enum EmailConnectionChannel
	{
		/// <summary>
		/// Microsoft Dynamics 365 Email Router = 1
		/// </summary>
		Microsoft_Dynamics_365_Email_Router = 1,
		/// <summary>
		/// Server-Side Synchronization = 0
		/// </summary>
		Server_Side_Synchronization = 0
	}

	public enum EmailTemplateDefaultView
	{
		/// <summary>
		/// Grid View = 2
		/// </summary>
		Grid_View = 2,
		/// <summary>
		/// List View = 3
		/// </summary>
		List_View = 3,
		/// <summary>
		/// Tiles View = 1
		/// </summary>
		Tiles_View = 1
	}

	public enum FiscalPeriodFormatPeriod
	{
		/// <summary>
		/// M{0} = 5
		/// </summary>
		M0 = 5,
		/// <summary>
		/// Month {0} = 4
		/// </summary>
		Month_0 = 4,
		/// <summary>
		/// Month Name = 7
		/// </summary>
		Month_Name = 7,
		/// <summary>
		/// P{0} = 3
		/// </summary>
		P0 = 3,
		/// <summary>
		/// Q{0} = 2
		/// </summary>
		Q0 = 2,
		/// <summary>
		/// Quarter {0} = 1
		/// </summary>
		Quarter_0 = 1,
		/// <summary>
		/// Semester {0} = 6
		/// </summary>
		Semester_0 = 6
	}

	public enum FiscalYearFormatPrefix
	{
		/// <summary>
		/// FY = 1
		/// </summary>
		FY = 1
	}

	public enum FiscalYearFormatSuffix
	{
		/// <summary>
		///  Fiscal Year = 2
		/// </summary>
		Fiscal_Year = 2,
		/// <summary>
		/// FY = 1
		/// </summary>
		FY = 1
	}

	public enum FiscalYearFormatYear
	{
		/// <summary>
		/// GGYY = 3
		/// </summary>
		GGYY = 3,
		/// <summary>
		/// YY = 2
		/// </summary>
		YY = 2,
		/// <summary>
		/// YYYY = 1
		/// </summary>
		YYYY = 1
	}

	public enum FullNameConventionCode
	{
		/// <summary>
		/// First Name = 1
		/// </summary>
		First_Name = 1,
		/// <summary>
		/// First Name, Middle Initial, Last Name = 3
		/// </summary>
		First_Name_Middle_Initial_Last_Name = 3,
		/// <summary>
		/// First Name, Middle Name, Last Name = 5
		/// </summary>
		First_Name_Middle_Name_Last_Name = 5,
		/// <summary>
		/// Last Name, First Name = 0
		/// </summary>
		Last_Name_First_Name = 0,
		/// <summary>
		/// Last Name, First Name, Middle Initial = 2
		/// </summary>
		Last_Name_First_Name_Middle_Initial = 2,
		/// <summary>
		/// Last Name, First Name, Middle Name = 4
		/// </summary>
		Last_Name_First_Name_Middle_Name = 4,
		/// <summary>
		/// Last Name, no space, First Name = 7
		/// </summary>
		Last_Name_no_space_First_Name = 7,
		/// <summary>
		/// Last Name, space, First Name = 6
		/// </summary>
		Last_Name_space_First_Name = 6
	}

	public enum ISVIntegrationCode
	{
		/// <summary>
		/// All = 7
		/// </summary>
		All = 7,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Outlook = 6
		/// </summary>
		Outlook = 6,
		/// <summary>
		/// Outlook Laptop Client = 4
		/// </summary>
		Outlook_Laptop_Client = 4,
		/// <summary>
		/// Outlook Workstation Client = 2
		/// </summary>
		Outlook_Workstation_Client = 2,
		/// <summary>
		/// Web = 1
		/// </summary>
		Web = 1,
		/// <summary>
		/// Web; Outlook Laptop Client = 5
		/// </summary>
		Web_Outlook_Laptop_Client = 5,
		/// <summary>
		/// Web; Outlook Workstation Client = 3
		/// </summary>
		Web_Outlook_Workstation_Client = 3
	}

	public enum NegativeFormatCode
	{
		/// <summary>
		/// Brackets = 0
		/// </summary>
		Brackets = 0,
		/// <summary>
		/// Dash = 1
		/// </summary>
		Dash = 1,
		/// <summary>
		/// Dash plus Space = 2
		/// </summary>
		Dash_plus_Space = 2,
		/// <summary>
		/// Space plus Trailing Dash = 4
		/// </summary>
		Space_plus_Trailing_Dash = 4,
		/// <summary>
		/// Trailing Dash = 3
		/// </summary>
		Trailing_Dash = 3
	}

	public enum OrganizationState
	{
		/// <summary>
		/// Active = 3
		/// </summary>
		Active = 3,
		/// <summary>
		/// Creating = 0
		/// </summary>
		Creating = 0,
		/// <summary>
		/// Updating = 2
		/// </summary>
		Updating = 2,
		/// <summary>
		/// Upgrading = 1
		/// </summary>
		Upgrading = 1
	}

	public enum PluginTraceLogSetting
	{
		/// <summary>
		/// All = 2
		/// </summary>
		All = 2,
		/// <summary>
		/// Exception = 1
		/// </summary>
		Exception = 1,
		/// <summary>
		/// Off = 0
		/// </summary>
		Off = 0
	}

	public enum ReportScriptErrors
	{
		/// <summary>
		/// Ask me for permission to send an error report to Microsoft = 1
		/// </summary>
		Ask_me_for_permission_to_send_an_error_report_to_Microsoft = 1,
		/// <summary>
		/// Automatically send an error report to Microsoft without asking me for permission = 2
		/// </summary>
		Automatically_send_an_error_report_to_Microsoft_without_asking_me_for_permission = 2,
		/// <summary>
		/// Never send an error report to Microsoft about Microsoft Dynamics 365 = 3
		/// </summary>
		Never_send_an_error_report_to_Microsoft_about_Microsoft_Dynamics_365 = 3,
		/// <summary>
		/// No preference for sending an error report to Microsoft about Microsoft Dynamics 365 = 0
		/// </summary>
		No_preference_for_sending_an_error_report_to_Microsoft_about_Microsoft_Dynamics_365 = 0
	}

	public enum SchedulingEngine
	{
		/// <summary>
		/// (Default) Scheduling Engine = 0
		/// </summary>
		_Default_Scheduling_Engine = 0,
		/// <summary>
		/// (Deprecated) Universal Resource Scheduling = 192350000
		/// </summary>
		_Deprecated_Universal_Resource_Scheduling = 192350000
	}

	public enum SharePointDeploymentType
	{
		/// <summary>
		/// On-Premises = 1
		/// </summary>
		On_Premises = 1,
		/// <summary>
		/// Online = 0
		/// </summary>
		Online = 0
	}

	public enum SyncOptInSelectionStatus
	{
		/// <summary>
		/// Failed = 3
		/// </summary>
		Failed = 3,
		/// <summary>
		/// Passed = 2
		/// </summary>
		Passed = 2,
		/// <summary>
		/// Processing = 1
		/// </summary>
		Processing = 1
	}

	public enum YammerPostMethod
	{
		/// <summary>
		/// Private = 1
		/// </summary>
		Private = 1,
		/// <summary>
		/// Public = 0
		/// </summary>
		Public = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Organization : EntityBase
	{
		public struct Fields
		{
			public const string ACIWebEndpointUrl = "aciwebendpointurl";
			public const string AcknowledgementTemplateId = "acknowledgementtemplateid";
			public const string ActivityTypeFilter = "activitytypefilter";
			public const string AdvancedColumnEditorEnabled = "advancedcolumneditorenabled";
			public const string AdvancedColumnFilteringEnabled = "advancedcolumnfilteringenabled";
			public const string AdvancedFilteringEnabled = "advancedfilteringenabled";
			public const string AdvancedLookupEnabled = "advancedlookupenabled";
			public const string AllowAddressBookSyncs = "allowaddressbooksyncs";
			public const string AllowAutoResponseCreation = "allowautoresponsecreation";
			public const string AllowAutoUnsubscribe = "allowautounsubscribe";
			public const string AllowAutoUnsubscribeAcknowledgement = "allowautounsubscribeacknowledgement";
			public const string AllowClientMessageBarAd = "allowclientmessagebarad";
			public const string AllowEntityOnlyAudit = "allowentityonlyaudit";
			public const string AllowLegacyClientExperience = "allowlegacyclientexperience";
			public const string AllowLegacyDialogsEmbedding = "allowlegacydialogsembedding";
			public const string AllowMarketingEmailExecution = "allowmarketingemailexecution";
			public const string AllowOfflineScheduledSyncs = "allowofflinescheduledsyncs";
			public const string AllowOutlookScheduledSyncs = "allowoutlookscheduledsyncs";
			public const string AllowRedirectAdminSettingsToModernUI = "allowredirectadminsettingstomodernui";
			public const string AllowUnresolvedPartiesOnEmailSend = "allowunresolvedpartiesonemailsend";
			public const string AllowUserFormModePreference = "allowuserformmodepreference";
			public const string AllowUsersHidingSystemViews = "allowusershidingsystemviews";
			public const string AllowUsersSeeAppdownloadMessage = "allowusersseeappdownloadmessage";
			public const string AllowWebExcelExport = "allowwebexcelexport";
			public const string AMDesignator = "amdesignator";
			public const string AppDesignerExperienceEnabled = "appdesignerexperienceenabled";
			public const string AppointmentRichEditorExperience = "appointmentricheditorexperience";
			public const string AppointmentWithTeamsMeeting = "appointmentwithteamsmeeting";
			public const string AuditRetentionPeriod = "auditretentionperiod";
			public const string AuditRetentionPeriodV2 = "auditretentionperiodv2";
			public const string AutoApplyDefaultonCaseCreate = "autoapplydefaultoncasecreate";
			public const string AutoApplyDefaultonCaseUpdate = "autoapplydefaultoncaseupdate";
			public const string AutoApplySLA = "autoapplysla";
			public const string AzureSchedulerJobCollectionName = "azureschedulerjobcollectionname";
			public const string BaseCurrencyId = "basecurrencyid";
			public const string BaseCurrencyPrecision = "basecurrencyprecision";
			public const string BaseCurrencySymbol = "basecurrencysymbol";
			public const string BaseISOCurrencyCode = "baseisocurrencycode";
			public const string BingMapsApiKey = "bingmapsapikey";
			public const string BlockedAttachments = "blockedattachments";
			public const string BoundDashboardDefaultCardExpanded = "bounddashboarddefaultcardexpanded";
			public const string BulkOperationPrefix = "bulkoperationprefix";
			public const string BusinessCardOptions = "businesscardoptions";
			public const string BusinessClosureCalendarId = "businessclosurecalendarid";
			public const string CalendarType = "calendartype";
			public const string CampaignPrefix = "campaignprefix";
			public const string CanOptOutNewSearchExperience = "canoptoutnewsearchexperience";
			public const string CascadeStatusUpdate = "cascadestatusupdate";
			public const string CasePrefix = "caseprefix";
			public const string CategoryPrefix = "categoryprefix";
			public const string ClientFeatureSet = "clientfeatureset";
			public const string ContentSecurityPolicyConfiguration = "contentsecuritypolicyconfiguration";
			public const string ContentSecurityPolicyConfigurationForCanvas = "contentsecuritypolicyconfigurationforcanvas";
			public const string ContentSecurityPolicyReportUri = "contentsecuritypolicyreporturi";
			public const string ContractPrefix = "contractprefix";
			public const string CopresenceRefreshRate = "copresencerefreshrate";
			public const string CortanaProactiveExperienceEnabled = "cortanaproactiveexperienceenabled";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreateProductsWithoutParentInActiveState = "createproductswithoutparentinactivestate";
			public const string CurrencyDecimalPrecision = "currencydecimalprecision";
			public const string CurrencyDisplayOption = "currencydisplayoption";
			public const string CurrencyFormatCode = "currencyformatcode";
			public const string CurrencySymbol = "currencysymbol";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentBulkOperationNumber = "currentbulkoperationnumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentCampaignNumber = "currentcampaignnumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentCaseNumber = "currentcasenumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentCategoryNumber = "currentcategorynumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentContractNumber = "currentcontractnumber";
			public const string CurrentImportSequenceNumber = "currentimportsequencenumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentInvoiceNumber = "currentinvoicenumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentKaNumber = "currentkanumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentKbNumber = "currentkbnumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentOrderNumber = "currentordernumber";
			public const string CurrentParsedTableNumber = "currentparsedtablenumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentQuoteNumber = "currentquotenumber";
			public const string DateFormatString = "dateformatstring";
			public const string DateSeparator = "dateseparator";
			public const string DaysSinceRecordLastModifiedMaxValue = "dayssincerecordlastmodifiedmaxvalue";
			public const string DecimalSymbol = "decimalsymbol";
			public const string DefaultCountryCode = "defaultcountrycode";
			public const string DefaultCrmCustomName = "defaultcrmcustomname";
			public const string DefaultEmailServerProfileId = "defaultemailserverprofileid";
			public const string DefaultEmailSettings = "defaultemailsettings";
			public const string DefaultMobileOfflineProfileId = "defaultmobileofflineprofileid";
			public const string DefaultRecurrenceEndRangeType = "defaultrecurrenceendrangetype";
			public const string DefaultTeamsChatTitleRecordName = "defaultteamschattitlerecordname";
			public const string DefaultThemeData = "defaultthemedata";
			public const string DelegatedAdminUserId = "delegatedadminuserid";
			public const string DisabledReason = "disabledreason";
			public const string DisableSocialCare = "disablesocialcare";
			public const string DiscountCalculationMethod = "discountcalculationmethod";
			public const string DisplayNavigationTour = "displaynavigationtour";
			public const string EmailConnectionChannel = "emailconnectionchannel";
			public const string EmailCorrelationEnabled = "emailcorrelationenabled";
			public const string EmailSendPollingPeriod = "emailsendpollingperiod";
			public const string EmailTemplateDefaultView = "emailtemplatedefaultview";
			public const string EnableAsyncMergeAPIForUCI = "enableasyncmergeapiforuci";
			public const string EnableBingMapsIntegration = "enablebingmapsintegration";
			public const string EnableCalendarImportExport = "enablecalendarimportexport";
			public const string EnableCanvasAppsInSolutionsByDefault = "enablecanvasappsinsolutionsbydefault";
			public const string EnableImmersiveSkypeIntegration = "enableimmersiveskypeintegration";
			public const string EnableLivePersonaCardUCI = "enablelivepersonacarduci";
			public const string EnableLivePersonCardIntegrationInOffice = "enablelivepersoncardintegrationinoffice";
			public const string EnableLPAuthoring = "enablelpauthoring";
			public const string EnableMakerSwitchToClassic = "enablemakerswitchtoclassic";
			public const string EnableMicrosoftFlowIntegration = "enablemicrosoftflowintegration";
			public const string EnablePricingOnCreate = "enablepricingoncreate";
			public const string EnableSensitivityLabelsForTeamsCollab = "enablesensitivitylabelsforteamscollab";
			public const string EnableSmartMatching = "enablesmartmatching";
			public const string EnableUnifiedClientCDN = "enableunifiedclientcdn";
			public const string EnableUnifiedInterfaceShellRefresh = "enableunifiedinterfaceshellrefresh";
			public const string EnforceReadOnlyPlugins = "enforcereadonlyplugins";
			public const string EnhancedOQOIAddProductsSettings = "enhancedoqoiaddproductssettings";
			public const string EntityImageId = "entityimageid";
			public const string ExpireChangeTrackingInDays = "expirechangetrackingindays";
			public const string ExpireSubscriptionsInDays = "expiresubscriptionsindays";
			public const string ExternalBaseUrl = "externalbaseurl";
			public const string ExternalPartyCorrelationKeys = "externalpartycorrelationkeys";
			public const string ExternalPartyEntitySettings = "externalpartyentitysettings";
			public const string FeatureSet = "featureset";
			public const string FiscalCalendarStart = "fiscalcalendarstart";
			public const string FiscalPeriodFormat = "fiscalperiodformat";
			public const string FiscalPeriodFormatPeriod = "fiscalperiodformatperiod";
			public const string FiscalPeriodType = "fiscalperiodtype";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string FiscalSettingsUpdated = "fiscalsettingsupdated";
			public const string FiscalYearDisplayCode = "fiscalyeardisplaycode";
			public const string FiscalYearFormat = "fiscalyearformat";
			public const string FiscalYearFormatPrefix = "fiscalyearformatprefix";
			public const string FiscalYearFormatSuffix = "fiscalyearformatsuffix";
			public const string FiscalYearFormatYear = "fiscalyearformatyear";
			public const string FiscalYearPeriodConnect = "fiscalyearperiodconnect";
			public const string FullNameConventionCode = "fullnameconventioncode";
			public const string FutureExpansionWindow = "futureexpansionwindow";
			public const string GenerateAlertsForErrors = "generatealertsforerrors";
			public const string GenerateAlertsForInformation = "generatealertsforinformation";
			public const string GenerateAlertsForWarnings = "generatealertsforwarnings";
			public const string GetStartedPaneContentEnabled = "getstartedpanecontentenabled";
			public const string GlobalAppendUrlParametersEnabled = "globalappendurlparametersenabled";
			public const string GlobalHelpUrl = "globalhelpurl";
			public const string GlobalHelpUrlEnabled = "globalhelpurlenabled";
			public const string GoalRollupExpiryTime = "goalrollupexpirytime";
			public const string GoalRollupFrequency = "goalrollupfrequency";
			public const string GrantAccessToNetworkService = "grantaccesstonetworkservice";
			public const string HashDeltaSubjectCount = "hashdeltasubjectcount";
			public const string HashFilterKeywords = "hashfilterkeywords";
			public const string HashMaxCount = "hashmaxcount";
			public const string HashMinAddressCount = "hashminaddresscount";
			public const string HighContrastThemeData = "highcontrastthemedata";
			public const string IgnoreInternalEmail = "ignoreinternalemail";
			public const string ImproveSearchLoggingEnabled = "improvesearchloggingenabled";
			public const string InactivityTimeoutEnabled = "inactivitytimeoutenabled";
			public const string InactivityTimeoutInMins = "inactivitytimeoutinmins";
			public const string InactivityTimeoutReminderInMins = "inactivitytimeoutreminderinmins";
			public const string IncomingEmailExchangeEmailRetrievalBatchSize = "incomingemailexchangeemailretrievalbatchsize";
			public const string InitialVersion = "initialversion";
			public const string IntegrationUserId = "integrationuserid";
			public const string InvoicePrefix = "invoiceprefix";
			public const string IsActionCardEnabled = "isactioncardenabled";
			public const string IsActionSupportFeatureEnabled = "isactionsupportfeatureenabled";
			public const string IsActivityAnalysisEnabled = "isactivityanalysisenabled";
			public const string IsAllMoneyDecimal = "isallmoneydecimal";
			public const string IsAppMode = "isappmode";
			public const string IsAppointmentAttachmentSyncEnabled = "isappointmentattachmentsyncenabled";
			public const string IsAssignedTasksSyncEnabled = "isassignedtaskssyncenabled";
			public const string IsAuditEnabled = "isauditenabled";
			public const string IsAutoDataCaptureEnabled = "isautodatacaptureenabled";
			public const string IsAutoDataCaptureV2Enabled = "isautodatacapturev2enabled";
			public const string IsAutoSaveEnabled = "isautosaveenabled";
			public const string IsBPFEntityCustomizationFeatureEnabled = "isbpfentitycustomizationfeatureenabled";
			public const string IsCollaborationExperienceEnabled = "iscollaborationexperienceenabled";
			public const string IsConflictDetectionEnabledForMobileClient = "isconflictdetectionenabledformobileclient";
			public const string IsContactMailingAddressSyncEnabled = "iscontactmailingaddresssyncenabled";
			public const string IsContentSecurityPolicyEnabled = "iscontentsecuritypolicyenabled";
			public const string IsContentSecurityPolicyEnabledForCanvas = "iscontentsecuritypolicyenabledforcanvas";
			public const string IsContextualEmailEnabled = "iscontextualemailenabled";
			public const string IsContextualHelpEnabled = "iscontextualhelpenabled";
			public const string IsCustomControlsInCanvasAppsEnabled = "iscustomcontrolsincanvasappsenabled";
			public const string IsDefaultCountryCodeCheckEnabled = "isdefaultcountrycodecheckenabled";
			public const string IsDelegateAccessEnabled = "isdelegateaccessenabled";
			public const string IsDelveActionHubIntegrationEnabled = "isdelveactionhubintegrationenabled";
			public const string IsDisabled = "isdisabled";
			public const string IsDuplicateDetectionEnabled = "isduplicatedetectionenabled";
			public const string IsDuplicateDetectionEnabledForImport = "isduplicatedetectionenabledforimport";
			public const string IsDuplicateDetectionEnabledForOfflineSync = "isduplicatedetectionenabledforofflinesync";
			public const string IsDuplicateDetectionEnabledForOnlineCreateUpdate = "isduplicatedetectionenabledforonlinecreateupdate";
			public const string IsEmailMonitoringAllowed = "isemailmonitoringallowed";
			public const string IsEmailServerProfileContentFilteringEnabled = "isemailserverprofilecontentfilteringenabled";
			public const string IsEmbedTeamsCollabEnabled = "isembedteamscollabenabled";
			public const string IsEnabledForAllRoles = "isenabledforallroles";
			public const string IsExternalFileStorageEnabled = "isexternalfilestorageenabled";
			public const string IsExternalSearchIndexEnabled = "isexternalsearchindexenabled";
			public const string IsFiscalPeriodMonthBased = "isfiscalperiodmonthbased";
			public const string IsFolderAutoCreatedonSP = "isfolderautocreatedonsp";
			public const string IsFolderBasedTrackingEnabled = "isfolderbasedtrackingenabled";
			public const string IsFullTextSearchEnabled = "isfulltextsearchenabled";
			public const string IsGeospatialAzureMapsIntegrationEnabled = "isgeospatialazuremapsintegrationenabled";
			public const string IsHierarchicalSecurityModelEnabled = "ishierarchicalsecuritymodelenabled";
			public const string IsLUISEnabledforD365Bot = "isluisenabledford365bot";
			public const string IsMailboxForcedUnlockingEnabled = "ismailboxforcedunlockingenabled";
			public const string IsMailboxInactiveBackoffEnabled = "ismailboxinactivebackoffenabled";
			public const string IsManualSalesForecastingEnabled = "ismanualsalesforecastingenabled";
			public const string IsMobileClientOnDemandSyncEnabled = "ismobileclientondemandsyncenabled";
			public const string IsMobileOfflineEnabled = "ismobileofflineenabled";
			public const string IsModelDrivenAppsInMSTeamsEnabled = "ismodeldrivenappsinmsteamsenabled";
			public const string IsMSTeamsCollaborationEnabled = "ismsteamscollaborationenabled";
			public const string IsMSTeamsEnabled = "ismsteamsenabled";
			public const string IsMSTeamsSettingChangedByUser = "ismsteamssettingchangedbyuser";
			public const string IsMSTeamsUserSyncEnabled = "ismsteamsusersyncenabled";
			public const string IsNewAddProductExperienceEnabled = "isnewaddproductexperienceenabled";
			public const string IsNotesAnalysisEnabled = "isnotesanalysisenabled";
			public const string IsOfficeGraphEnabled = "isofficegraphenabled";
			public const string IsOneDriveEnabled = "isonedriveenabled";
			public const string IsPAIEnabled = "ispaienabled";
			public const string IsPDFGenerationEnabled = "ispdfgenerationenabled";
			public const string IsPlaybookEnabled = "isplaybookenabled";
			public const string IsPresenceEnabled = "ispresenceenabled";
			public const string IsPreviewEnabledForActionCard = "ispreviewenabledforactioncard";
			public const string IsPreviewForAutoCaptureEnabled = "ispreviewforautocaptureenabled";
			public const string IsPreviewForEmailMonitoringAllowed = "ispreviewforemailmonitoringallowed";
			public const string IsPriceListMandatory = "ispricelistmandatory";
			public const string IsQuickCreateEnabledForOpportunityClose = "isquickcreateenabledforopportunityclose";
			public const string IsReadAuditEnabled = "isreadauditenabled";
			public const string IsRelationshipInsightsEnabled = "isrelationshipinsightsenabled";
			public const string IsResourceBookingExchangeSyncEnabled = "isresourcebookingexchangesyncenabled";
			public const string IsRichTextNotesEnabled = "isrichtextnotesenabled";
			public const string IsSalesAssistantEnabled = "issalesassistantenabled";
			public const string IsSalesMobilePreviewEnabled = "issalesmobilepreviewenabled";
			public const string IsSharingInOrgAllowed = "issharinginorgallowed";
			public const string IsSOPIntegrationEnabled = "issopintegrationenabled";
			public const string IsTextWrapEnabled = "istextwrapenabled";
			public const string IsUserAccessAuditEnabled = "isuseraccessauditenabled";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string ISVIntegrationCode = "isvintegrationcode";
			public const string IsWriteInProductsAllowed = "iswriteinproductsallowed";
			public const string KaPrefix = "kaprefix";
			public const string KbPrefix = "kbprefix";
			public const string KMSettings = "kmsettings";
			public const string LanguageCode = "languagecode";
			public const string LocaleId = "localeid";
			public const string LongDateFormatCode = "longdateformatcode";
			public const string LookupCharacterCountBeforeResolve = "lookupcharactercountbeforeresolve";
			public const string LookupResolveDelayMS = "lookupresolvedelayms";
			public const string MailboxIntermittentIssueMinRange = "mailboxintermittentissueminrange";
			public const string MailboxPermanentIssueMinRange = "mailboxpermanentissueminrange";
			public const string MaxActionStepsInBPF = "maxactionstepsinbpf";
			public const string MaxAllowedPendingRollupJobCount = "maxallowedpendingrollupjobcount";
			public const string MaxAllowedPendingRollupJobPercentage = "maxallowedpendingrollupjobpercentage";
			public const string MaxAppointmentDurationDays = "maxappointmentdurationdays";
			public const string MaxConditionsForMobileOfflineFilters = "maxconditionsformobileofflinefilters";
			public const string MaxDepthForHierarchicalSecurityModel = "maxdepthforhierarchicalsecuritymodel";
			public const string MaxFolderBasedTrackingMappings = "maxfolderbasedtrackingmappings";
			public const string MaximumActiveBusinessProcessFlowsAllowedPerEntity = "maximumactivebusinessprocessflowsallowedperentity";
			public const string MaximumDynamicPropertiesAllowed = "maximumdynamicpropertiesallowed";
			public const string MaximumEntitiesWithActiveSLA = "maximumentitieswithactivesla";
			public const string MaximumSLAKPIPerEntityWithActiveSLA = "maximumslakpiperentitywithactivesla";
			public const string MaximumTrackingNumber = "maximumtrackingnumber";
			public const string MaxProductsInBundle = "maxproductsinbundle";
			public const string MaxRecordsForExportToExcel = "maxrecordsforexporttoexcel";
			public const string MaxRecordsForLookupFilters = "maxrecordsforlookupfilters";
			public const string MaxRollupFieldsPerEntity = "maxrollupfieldsperentity";
			public const string MaxRollupFieldsPerOrg = "maxrollupfieldsperorg";
			public const string MaxSLAItemsPerSLA = "maxslaitemspersla";
			public const string MaxSupportedInternetExplorerVersion = "maxsupportedinternetexplorerversion";
			public const string MaxUploadFileSize = "maxuploadfilesize";
			public const string MaxVerboseLoggingMailbox = "maxverboseloggingmailbox";
			public const string MaxVerboseLoggingSyncCycles = "maxverboseloggingsynccycles";
			public const string MetadataSyncLastTimeOfNeverExpiredDeletedObjects = "metadatasynclasttimeofneverexpireddeletedobjects";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string MetadataSyncTimestamp = "metadatasynctimestamp";
			public const string MicrosoftFlowEnvironment = "microsoftflowenvironment";
			public const string MinAddressBookSyncInterval = "minaddressbooksyncinterval";
			public const string MinOfflineSyncInterval = "minofflinesyncinterval";
			public const string MinOutlookSyncInterval = "minoutlooksyncinterval";
			public const string MobileOfflineMinLicenseProd = "mobileofflineminlicenseprod";
			public const string MobileOfflineMinLicenseTrial = "mobileofflineminlicensetrial";
			public const string MobileOfflineSyncInterval = "mobileofflinesyncinterval";
			public const string ModernAdvancedFindFiltering = "modernadvancedfindfiltering";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NegativeCurrencyFormatCode = "negativecurrencyformatcode";
			public const string NegativeFormatCode = "negativeformatcode";
			public const string NewSearchExperienceEnabled = "newsearchexperienceenabled";
			public const string NextCustomObjectTypeCode = "nextcustomobjecttypecode";
			public const string NextTrackingNumber = "nexttrackingnumber";
			public const string NotifyMailboxOwnerOfEmailServerLevelAlerts = "notifymailboxownerofemailserverlevelalerts";
			public const string NumberFormat = "numberformat";
			public const string NumberGroupFormat = "numbergroupformat";
			public const string NumberSeparator = "numberseparator";
			public const string OfficeAppsAutoDeploymentEnabled = "officeappsautodeploymentenabled";
			public const string OfficeGraphDelveUrl = "officegraphdelveurl";
			public const string OOBPriceCalculationEnabled = "oobpricecalculationenabled";
			public const string OrderPrefix = "orderprefix";
			public const string OrganizationId = "organizationid";
			public const string OrganizationState = "organizationstate";
			public const string OrgDbOrgSettings = "orgdborgsettings";
			public const string OrgInsightsEnabled = "orginsightsenabled";
			public const string PaiPreviewScenarioEnabled = "paipreviewscenarioenabled";
			public const string ParsedTableColumnPrefix = "parsedtablecolumnprefix";
			public const string ParsedTablePrefix = "parsedtableprefix";
			public const string PastExpansionWindow = "pastexpansionwindow";
			public const string PcfDatasetGridEnabled = "pcfdatasetgridenabled";
			public const string Picture = "picture";
			public const string PinpointLanguageCode = "pinpointlanguagecode";
			public const string PluginTraceLogSetting = "plugintracelogsetting";
			public const string PMDesignator = "pmdesignator";
			public const string PostMessageWhitelistDomains = "postmessagewhitelistdomains";
			public const string PowerBiFeatureEnabled = "powerbifeatureenabled";
			public const string PricingDecimalPrecision = "pricingdecimalprecision";
			public const string PrivacyStatementUrl = "privacystatementurl";
			public const string PrivilegeUserGroupId = "privilegeusergroupid";
			public const string PrivReportingGroupId = "privreportinggroupid";
			public const string PrivReportingGroupName = "privreportinggroupname";
			public const string ProductRecommendationsEnabled = "productrecommendationsenabled";
			public const string QualifyLeadAdditionalOptions = "qualifyleadadditionaloptions";
			public const string QuickActionToOpenRecordsInSidePaneEnabled = "quickactiontoopenrecordsinsidepaneenabled";
			public const string QuickFindRecordLimitEnabled = "quickfindrecordlimitenabled";
			public const string QuotePrefix = "quoteprefix";
			public const string RecalculateSLA = "recalculatesla";
			public const string RecurrenceDefaultNumberOfOccurrences = "recurrencedefaultnumberofoccurrences";
			public const string RecurrenceExpansionJobBatchInterval = "recurrenceexpansionjobbatchinterval";
			public const string RecurrenceExpansionJobBatchSize = "recurrenceexpansionjobbatchsize";
			public const string RecurrenceExpansionSynchCreateMax = "recurrenceexpansionsynchcreatemax";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string ReferenceSiteMapXml = "referencesitemapxml";
			public const string ReleaseWaveName = "releasewavename";
			public const string RelevanceSearchEnabledByPlatform = "relevancesearchenabledbyplatform";
			public const string RelevanceSearchModifiedOn = "relevancesearchmodifiedon";
			public const string RenderSecureIFrameForEmail = "rendersecureiframeforemail";
			public const string ReportingGroupId = "reportinggroupid";
			public const string ReportingGroupName = "reportinggroupname";
			public const string ReportScriptErrors = "reportscripterrors";
			public const string RequireApprovalForQueueEmail = "requireapprovalforqueueemail";
			public const string RequireApprovalForUserEmail = "requireapprovalforuseremail";
			public const string ResolveSimilarUnresolvedEmailAddress = "resolvesimilarunresolvedemailaddress";
			public const string RestrictStatusUpdate = "restrictstatusupdate";
			public const string RiErrorStatus = "rierrorstatus";
			public const string SalesMobileUseUCIFormsForCreate = "salesmobileuseuciformsforcreate";
			public const string SalesMobileUseUCIFormsForView = "salesmobileuseuciformsforview";
			public const string SampleDataImportId = "sampledataimportid";
			public const string SchedulingEngine = "schedulingengine";
			public const string SchemaNamePrefix = "schemanameprefix";
			public const string SendBulkEmailInUCI = "sendbulkemailinuci";
			public const string ServeStaticResourcesFromAzureCDN = "servestaticresourcesfromazurecdn";
			public const string SessionRecordingEnabled = "sessionrecordingenabled";
			public const string SessionTimeoutEnabled = "sessiontimeoutenabled";
			public const string SessionTimeoutInMins = "sessiontimeoutinmins";
			public const string SessionTimeoutReminderInMins = "sessiontimeoutreminderinmins";
			public const string SharePointDeploymentType = "sharepointdeploymenttype";
			public const string ShareToPreviousOwnerOnAssign = "sharetopreviousowneronassign";
			public const string ShowKBArticleDeprecationNotification = "showkbarticledeprecationnotification";
			public const string ShowWeekNumber = "showweeknumber";
			public const string SignupOutlookDownloadFWLink = "signupoutlookdownloadfwlink";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string SiteMapXml = "sitemapxml";
			public const string SlaPauseStates = "slapausestates";
			public const string SocialInsightsEnabled = "socialinsightsenabled";
			public const string SocialInsightsInstance = "socialinsightsinstance";
			public const string SocialInsightsTermsAccepted = "socialinsightstermsaccepted";
			public const string SortId = "sortid";
			public const string SqlAccessGroupId = "sqlaccessgroupid";
			public const string SqlAccessGroupName = "sqlaccessgroupname";
			public const string SQMEnabled = "sqmenabled";
			public const string SupportUserId = "supportuserid";
			public const string SuppressSLA = "suppresssla";
			public const string SyncBulkOperationBatchSize = "syncbulkoperationbatchsize";
			public const string SyncBulkOperationMaxLimit = "syncbulkoperationmaxlimit";
			public const string SyncOptInSelection = "syncoptinselection";
			public const string SyncOptInSelectionStatus = "syncoptinselectionstatus";
			public const string SystemUserId = "systemuserid";
			public const string TagMaxAggressiveCycles = "tagmaxaggressivecycles";
			public const string TagPollingPeriod = "tagpollingperiod";
			public const string TaskBasedFlowEnabled = "taskbasedflowenabled";
			public const string TelemetryInstrumentationKey = "telemetryinstrumentationkey";
			public const string TextAnalyticsEnabled = "textanalyticsenabled";
			public const string TimeFormatString = "timeformatstring";
			public const string TimeSeparator = "timeseparator";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TokenExpiry = "tokenexpiry";
			public const string TokenKey = "tokenkey";
			public const string TraceLogMaximumAgeInDays = "tracelogmaximumageindays";
			public const string TrackingPrefix = "trackingprefix";
			public const string TrackingTokenIdBase = "trackingtokenidbase";
			public const string TrackingTokenIdDigits = "trackingtokeniddigits";
			public const string UniqueSpecifierLength = "uniquespecifierlength";
			public const string UnresolveEmailAddressIfMultipleMatch = "unresolveemailaddressifmultiplematch";
			public const string UseInbuiltRuleForDefaultPricelistSelection = "useinbuiltrulefordefaultpricelistselection";
			public const string UseLegacyRendering = "uselegacyrendering";
			public const string UsePositionHierarchy = "usepositionhierarchy";
			public const string UseQuickFindViewForGridSearch = "usequickfindviewforgridsearch";
			public const string UserAccessAuditingInterval = "useraccessauditinginterval";
			public const string UseReadForm = "usereadform";
			public const string UserGroupId = "usergroupid";
			public const string UserRatingEnabled = "userratingenabled";
			public const string UseSkypeProtocol = "useskypeprotocol";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string V3CalloutConfigHash = "v3calloutconfighash";
			public const string VersionNumber = "versionnumber";
			public const string WebResourceHash = "webresourcehash";
			public const string WidgetProperties = "widgetproperties";
			public const string YammerGroupId = "yammergroupid";
			public const string YammerNetworkPermalink = "yammernetworkpermalink";
			public const string YammerOAuthAccessTokenExpired = "yammeroauthaccesstokenexpired";
			public const string YammerPostMethod = "yammerpostmethod";
			public const string YearStartWeekCode = "yearstartweekcode";
		}

		public const string EntityLogicalName = "organization";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1019;

		[DebuggerNonUserCode()]
		public Organization()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Organization(Guid OrganizationId)
		{
			Entity = new Entity(EntityLogicalName, OrganizationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Organization(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Organization(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Organization(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Organization(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>ACI Web Endpoint URL.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>ACI Tenant URL.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ACIWebEndpointUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ACIWebEndpointUrl); }
			set { Entity.Attributes[Fields.ACIWebEndpointUrl] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the template to be used for acknowledgement when a user unsubscribes.</para>
		/// <para>Lookup to template</para>
		/// <para>Acknowledgement Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AcknowledgementTemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AcknowledgementTemplateId); }
			set { Entity.Attributes[Fields.AcknowledgementTemplateId] = value; }
		}

		/// <summary>
		/// <para>Information on whether filtering activity based on entity in app.</para>
		/// <para>Boolean</para>
		/// <para>Enable Rich Editing Experience for Appointment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ActivityTypeFilter
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ActivityTypeFilter); }
			set { Entity.Attributes[Fields.ActivityTypeFilter] = value; }
		}

		/// <summary>
		/// <para>Flag to indicate if the display column options on a view in model-driven apps is enabled</para>
		/// <para>Boolean</para>
		/// <para>Advanced column editor enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdvancedColumnEditorEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdvancedColumnEditorEnabled); }
			set { Entity.Attributes[Fields.AdvancedColumnEditorEnabled] = value; }
		}

		/// <summary>
		/// <para>Flag to indicate if the advanced column filtering in a view in model-driven apps is enabled</para>
		/// <para>Boolean</para>
		/// <para>Advanced column filtering enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdvancedColumnFilteringEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdvancedColumnFilteringEnabled); }
			set { Entity.Attributes[Fields.AdvancedColumnFilteringEnabled] = value; }
		}

		/// <summary>
		/// <para>Flag to indicate if the advanced filtering on all tables in a model-driven app is enabled</para>
		/// <para>Boolean</para>
		/// <para>Advanced filtering enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdvancedFilteringEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdvancedFilteringEnabled); }
			set { Entity.Attributes[Fields.AdvancedFilteringEnabled] = value; }
		}

		/// <summary>
		/// <para>Flag to indicate if the Advanced Lookup feature is enabled for lookup controls</para>
		/// <para>Boolean</para>
		/// <para>Advanced lookup enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdvancedLookupEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdvancedLookupEnabled); }
			set { Entity.Attributes[Fields.AdvancedLookupEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether background address book synchronization in Microsoft Office Outlook is allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Address Book Synchronization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowAddressBookSyncs
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowAddressBookSyncs); }
			set { Entity.Attributes[Fields.AllowAddressBookSyncs] = value; }
		}

		/// <summary>
		/// <para>Indicates whether automatic response creation is allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Automatic Response Creation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowAutoResponseCreation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowAutoResponseCreation); }
			set { Entity.Attributes[Fields.AllowAutoResponseCreation] = value; }
		}

		/// <summary>
		/// <para>Indicates whether automatic unsubscribe is allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Automatic Unsubscribe</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowAutoUnsubscribe
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowAutoUnsubscribe); }
			set { Entity.Attributes[Fields.AllowAutoUnsubscribe] = value; }
		}

		/// <summary>
		/// <para>Indicates whether automatic unsubscribe acknowledgement email is allowed to send.</para>
		/// <para>Boolean</para>
		/// <para>Allow Automatic Unsubscribe Acknowledgement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowAutoUnsubscribeAcknowledgement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowAutoUnsubscribeAcknowledgement); }
			set { Entity.Attributes[Fields.AllowAutoUnsubscribeAcknowledgement] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Outlook Client message bar advertisement is allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Outlook Client Message Bar Advertisement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowClientMessageBarAd
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowClientMessageBarAd); }
			set { Entity.Attributes[Fields.AllowClientMessageBarAd] = value; }
		}

		/// <summary>
		/// <para>Indicates whether auditing of changes to entity is allowed when no attributes have changed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Entity Level Auditing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowEntityOnlyAudit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowEntityOnlyAudit); }
			set { Entity.Attributes[Fields.AllowEntityOnlyAudit] = value; }
		}

		/// <summary>
		/// <para>Enable access to legacy web client UI</para>
		/// <para>Boolean</para>
		/// <para>Enable access to legacy web client UI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowLegacyClientExperience
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowLegacyClientExperience); }
			set { Entity.Attributes[Fields.AllowLegacyClientExperience] = value; }
		}

		/// <summary>
		/// <para>Enable embedding of certain legacy dialogs in Unified Interface browser client</para>
		/// <para>Boolean</para>
		/// <para>Enable embedding of certain legacy dialogs in Unified Interface browser client</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowLegacyDialogsEmbedding
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowLegacyDialogsEmbedding); }
			set { Entity.Attributes[Fields.AllowLegacyDialogsEmbedding] = value; }
		}

		/// <summary>
		/// <para>Indicates whether marketing emails execution is allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Marketing Email Execution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowMarketingEmailExecution
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowMarketingEmailExecution); }
			set { Entity.Attributes[Fields.AllowMarketingEmailExecution] = value; }
		}

		/// <summary>
		/// <para>Indicates whether background offline synchronization in Microsoft Office Outlook is allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Offline Scheduled Synchronization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowOfflineScheduledSyncs
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowOfflineScheduledSyncs); }
			set { Entity.Attributes[Fields.AllowOfflineScheduledSyncs] = value; }
		}

		/// <summary>
		/// <para>Indicates whether scheduled synchronizations to Outlook are allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Scheduled Synchronization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowOutlookScheduledSyncs
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowOutlookScheduledSyncs); }
			set { Entity.Attributes[Fields.AllowOutlookScheduledSyncs] = value; }
		}

		/// <summary>
		/// <para>Control whether the organization Allow Redirect Legacy Admin Settings To Modern UI</para>
		/// <para>Boolean</para>
		/// <para>Allow Redirect Legacy Admin Settings To Modern UI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowRedirectAdminSettingsToModernUI
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowRedirectAdminSettingsToModernUI); }
			set { Entity.Attributes[Fields.AllowRedirectAdminSettingsToModernUI] = value; }
		}

		/// <summary>
		/// <para>Indicates whether users are allowed to send email to unresolved parties (parties must still have an email address).</para>
		/// <para>Boolean</para>
		/// <para>Allow Unresolved Address Email Send</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUnresolvedPartiesOnEmailSend
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUnresolvedPartiesOnEmailSend); }
			set { Entity.Attributes[Fields.AllowUnresolvedPartiesOnEmailSend] = value; }
		}

		/// <summary>
		/// <para>Indicates whether individuals can select their form mode preference in their personal options.</para>
		/// <para>Boolean</para>
		/// <para>Allow User Form Mode Preference</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUserFormModePreference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUserFormModePreference); }
			set { Entity.Attributes[Fields.AllowUserFormModePreference] = value; }
		}

		/// <summary>
		/// <para>Flag to indicate if allow end users to hide system views in model-driven apps is enabled</para>
		/// <para>Boolean</para>
		/// <para>Allow users hiding system views</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUsersHidingSystemViews
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUsersHidingSystemViews); }
			set { Entity.Attributes[Fields.AllowUsersHidingSystemViews] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the showing tablet application notification bars in a browser is allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow the showing tablet application notification bars in a browser.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUsersSeeAppdownloadMessage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUsersSeeAppdownloadMessage); }
			set { Entity.Attributes[Fields.AllowUsersSeeAppdownloadMessage] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Web-based export of grids to Microsoft Office Excel is allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allow Export to Excel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowWebExcelExport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowWebExcelExport); }
			set { Entity.Attributes[Fields.AllowWebExcelExport] = value; }
		}

		/// <summary>
		/// <para>AM designator to use throughout Microsoft Dynamics CRM.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para>AM Designator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AMDesignator
		{
			get { return Entity.GetAttributeValue<string>(Fields.AMDesignator); }
			set { Entity.Attributes[Fields.AMDesignator] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the appDesignerExperience is enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable App Designer Experience for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AppDesignerExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AppDesignerExperienceEnabled); }
			set { Entity.Attributes[Fields.AppDesignerExperienceEnabled] = value; }
		}

		/// <summary>
		/// <para>Information on whether rich editing experience for Appointment is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Enable Rich Editing Experience for Appointment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AppointmentRichEditorExperience
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AppointmentRichEditorExperience); }
			set { Entity.Attributes[Fields.AppointmentRichEditorExperience] = value; }
		}

		/// <summary>
		/// <para>Information on whether Teams meeting experience for Appointment is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Enable teams Meeting experience for appointment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AppointmentWithTeamsMeeting
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AppointmentWithTeamsMeeting); }
			set { Entity.Attributes[Fields.AppointmentWithTeamsMeeting] = value; }
		}

		/// <summary>
		/// <para>Audit Retention Period settings stored in Organization Database.</para>
		/// <para>Integer - MinValue: 30 - MaxValue: 2,147,483,647</para>
		/// <para>Audit Retention Period Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AuditRetentionPeriod
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AuditRetentionPeriod); }
			set { Entity.Attributes[Fields.AuditRetentionPeriod] = value; }
		}

		/// <summary>
		/// <para>Audit Retention Period settings stored in Organization Database.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Audit Retention Period Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AuditRetentionPeriodV2
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AuditRetentionPeriodV2); }
			set { Entity.Attributes[Fields.AuditRetentionPeriodV2] = value; }
		}

		/// <summary>
		/// <para>Select whether to auto apply the default customer entitlement on case creation.</para>
		/// <para>Boolean</para>
		/// <para>Auto Apply Default Entitlement on Case Create</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AutoApplyDefaultonCaseCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AutoApplyDefaultonCaseCreate); }
			set { Entity.Attributes[Fields.AutoApplyDefaultonCaseCreate] = value; }
		}

		/// <summary>
		/// <para>Select whether to auto apply the default customer entitlement on case update.</para>
		/// <para>Boolean</para>
		/// <para>Auto Apply Default Entitlement on Case Update</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AutoApplyDefaultonCaseUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AutoApplyDefaultonCaseUpdate); }
			set { Entity.Attributes[Fields.AutoApplyDefaultonCaseUpdate] = value; }
		}

		/// <summary>
		/// <para>Indicates whether to Auto-apply SLA on case record update after SLA was manually applied.</para>
		/// <para>Boolean</para>
		/// <para>Is Auto-apply SLA After Manually Over-riding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AutoApplySLA
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AutoApplySLA); }
			set { Entity.Attributes[Fields.AutoApplySLA] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>For internal use only.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AzureSchedulerJobCollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AzureSchedulerJobCollectionName); }
			set { Entity.Attributes[Fields.AzureSchedulerJobCollectionName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the base currency of the organization.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BaseCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BaseCurrencyId); }
			set { Entity.Attributes[Fields.BaseCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Number of decimal places that can be used for the base currency.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 10</para>
		/// <para>Base Currency Precision</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BaseCurrencyPrecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BaseCurrencyPrecision); }
		}

		/// <summary>
		/// <para>Symbol used for the base currency.</para>
		/// <para>ReadOnly - String - MaxLength: 5</para>
		/// <para>Base Currency Symbol</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BaseCurrencySymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.BaseCurrencySymbol); }
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 5</para>
		/// <para>Base ISO Currency Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BaseISOCurrencyCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.BaseISOCurrencyCode); }
		}

		/// <summary>
		/// <para>Api Key to be used in requests to Bing Maps services.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Bing Maps API Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BingMapsApiKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.BingMapsApiKey); }
			set { Entity.Attributes[Fields.BingMapsApiKey] = value; }
		}

		/// <summary>
		/// <para>Prevent upload or download of certain attachment types that are considered dangerous.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Block Attachments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BlockedAttachments
		{
			get { return Entity.GetAttributeValue<string>(Fields.BlockedAttachments); }
			set { Entity.Attributes[Fields.BlockedAttachments] = value; }
		}

		/// <summary>
		/// <para>Display cards in expanded state for interactive dashboard</para>
		/// <para>Boolean</para>
		/// <para>Display cards in expanded state for Interactive Dashboard</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? BoundDashboardDefaultCardExpanded
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.BoundDashboardDefaultCardExpanded); }
			set { Entity.Attributes[Fields.BoundDashboardDefaultCardExpanded] = value; }
		}

		/// <summary>
		/// <para>Prefix used for bulk operation numbering.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Bulk Operation Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BulkOperationPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.BulkOperationPrefix); }
			set { Entity.Attributes[Fields.BulkOperationPrefix] = value; }
		}

		/// <summary>
		/// <para>BusinessCardOptions</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Enable New BusinessCardOptions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessCardOptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessCardOptions); }
			set { Entity.Attributes[Fields.BusinessCardOptions] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business closure calendar of organization.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Business Closure Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BusinessClosureCalendarId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BusinessClosureCalendarId); }
			set { Entity.Attributes[Fields.BusinessClosureCalendarId] = value; }
		}

		/// <summary>
		/// <para>Calendar type for the system. Set to Gregorian US by default.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Calendar Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CalendarType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CalendarType); }
			set { Entity.Attributes[Fields.CalendarType] = value; }
		}

		/// <summary>
		/// <para>Prefix used for campaign numbering.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Campaign Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CampaignPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.CampaignPrefix); }
			set { Entity.Attributes[Fields.CampaignPrefix] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the organization can opt out of the new Relevance search experience (released in Oct 2020)</para>
		/// <para>Boolean</para>
		/// <para>Can disable Oct 2020 Search</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanOptOutNewSearchExperience
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanOptOutNewSearchExperience); }
			set { Entity.Attributes[Fields.CanOptOutNewSearchExperience] = value; }
		}

		/// <summary>
		/// <para>Flag to cascade Update on incident.</para>
		/// <para>Boolean</para>
		/// <para>Cascade Status Update</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CascadeStatusUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CascadeStatusUpdate); }
			set { Entity.Attributes[Fields.CascadeStatusUpdate] = value; }
		}

		/// <summary>
		/// <para>Prefix to use for all cases throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Case Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CasePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.CasePrefix); }
			set { Entity.Attributes[Fields.CasePrefix] = value; }
		}

		/// <summary>
		/// <para>Type the prefix to use for all categories in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Category Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CategoryPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.CategoryPrefix); }
			set { Entity.Attributes[Fields.CategoryPrefix] = value; }
		}

		/// <summary>
		/// <para>Client Features to be enabled as an XML BLOB.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Client Feature Set</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientFeatureSet
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientFeatureSet); }
			set { Entity.Attributes[Fields.ClientFeatureSet] = value; }
		}

		/// <summary>
		/// <para>Policy configuration for CSP</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Content Security Policy Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentSecurityPolicyConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentSecurityPolicyConfiguration); }
			set { Entity.Attributes[Fields.ContentSecurityPolicyConfiguration] = value; }
		}

		/// <summary>
		/// <para>Content Security Policy configuration for Canvas apps.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Content Security Policy Configuration for Canvas apps</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentSecurityPolicyConfigurationForCanvas
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentSecurityPolicyConfigurationForCanvas); }
			set { Entity.Attributes[Fields.ContentSecurityPolicyConfigurationForCanvas] = value; }
		}

		/// <summary>
		/// <para>Content Security Policy Report Uri.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Content Security Policy Report Uri</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentSecurityPolicyReportUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentSecurityPolicyReportUri); }
			set { Entity.Attributes[Fields.ContentSecurityPolicyReportUri] = value; }
		}

		/// <summary>
		/// <para>Prefix to use for all contracts throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Contract Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContractPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContractPrefix); }
			set { Entity.Attributes[Fields.ContractPrefix] = value; }
		}

		/// <summary>
		/// <para>Refresh rate for copresence data in seconds.</para>
		/// <para>Integer - MinValue: 30 - MaxValue: 2,147,483,647</para>
		/// <para>CopresenceRefreshRate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CopresenceRefreshRate
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CopresenceRefreshRate); }
			set { Entity.Attributes[Fields.CopresenceRefreshRate] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature CortanaProactiveExperience Flow processes should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Cortana Proactive Experience Flow processes for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CortanaProactiveExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CortanaProactiveExperienceEnabled); }
			set { Entity.Attributes[Fields.CortanaProactiveExperienceEnabled] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the organization.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the organization was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the organization.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enable Initial state of newly created products to be Active instead of Draft</para>
		/// <para>Boolean</para>
		/// <para>Enable Active Initial Product State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CreateProductsWithoutParentInActiveState
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CreateProductsWithoutParentInActiveState); }
			set { Entity.Attributes[Fields.CreateProductsWithoutParentInActiveState] = value; }
		}

		/// <summary>
		/// <para>Number of decimal places that can be used for currency.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 10</para>
		/// <para>Currency Decimal Precision</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CurrencyDecimalPrecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrencyDecimalPrecision); }
			set { Entity.Attributes[Fields.CurrencyDecimalPrecision] = value; }
		}

		/// <summary>
		/// <para>Indicates whether to display money fields with currency code or currency symbol.</para>
		/// <para>Picklist</para>
		/// <para>Display Currencies Using</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyDisplayOption? CurrencyDisplayOption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CurrencyDisplayOption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyDisplayOption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CurrencyDisplayOption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CurrencyDisplayOption] = null;
			}
		}

		/// <summary>
		/// <para>Information about how currency symbols are placed throughout Microsoft Dynamics CRM.</para>
		/// <para>Picklist</para>
		/// <para>Currency Format Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyFormatCode? CurrencyFormatCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CurrencyFormatCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyFormatCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CurrencyFormatCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CurrencyFormatCode] = null;
			}
		}

		/// <summary>
		/// <para>Symbol used for currency throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 13</para>
		/// <para>Currency Symbol</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CurrencySymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.CurrencySymbol); }
			set { Entity.Attributes[Fields.CurrencySymbol] = value; }
		}

		/// <summary>
		/// <para>Current bulk operation number. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Current Bulk Operation Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentBulkOperationNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentBulkOperationNumber); }
			set { Entity.Attributes[Fields.CurrentBulkOperationNumber] = value; }
		}

		/// <summary>
		/// <para>Current campaign number. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Campaign Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentCampaignNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentCampaignNumber); }
			set { Entity.Attributes[Fields.CurrentCampaignNumber] = value; }
		}

		/// <summary>
		/// <para>First case number to use. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Case Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentCaseNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentCaseNumber); }
			set { Entity.Attributes[Fields.CurrentCaseNumber] = value; }
		}

		/// <summary>
		/// <para>Enter the first number to use for Categories. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Current Category Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentCategoryNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentCategoryNumber); }
			set { Entity.Attributes[Fields.CurrentCategoryNumber] = value; }
		}

		/// <summary>
		/// <para>First contract number to use. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Contract Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentContractNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentContractNumber); }
			set { Entity.Attributes[Fields.CurrentContractNumber] = value; }
		}

		/// <summary>
		/// <para>Import sequence to use.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CurrentImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentImportSequenceNumber); }
		}

		/// <summary>
		/// <para>First invoice number to use. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Invoice Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentInvoiceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentInvoiceNumber); }
			set { Entity.Attributes[Fields.CurrentInvoiceNumber] = value; }
		}

		/// <summary>
		/// <para>Enter the first number to use for knowledge articles. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Current Knowledge Article Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentKaNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentKaNumber); }
			set { Entity.Attributes[Fields.CurrentKaNumber] = value; }
		}

		/// <summary>
		/// <para>First article number to use. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Article Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentKbNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentKbNumber); }
			set { Entity.Attributes[Fields.CurrentKbNumber] = value; }
		}

		/// <summary>
		/// <para>First order number to use. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Order Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentOrderNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentOrderNumber); }
			set { Entity.Attributes[Fields.CurrentOrderNumber] = value; }
		}

		/// <summary>
		/// <para>First parsed table number to use.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Parsed Table Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CurrentParsedTableNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentParsedTableNumber); }
		}

		/// <summary>
		/// <para>First quote number to use. Deprecated. Use SetAutoNumberSeed message.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Current Quote Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentQuoteNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentQuoteNumber); }
			set { Entity.Attributes[Fields.CurrentQuoteNumber] = value; }
		}

		/// <summary>
		/// <para>String showing how the date is displayed throughout Microsoft CRM.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>Date Format String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DateFormatString
		{
			get { return Entity.GetAttributeValue<string>(Fields.DateFormatString); }
			set { Entity.Attributes[Fields.DateFormatString] = value; }
		}

		/// <summary>
		/// <para>Character used to separate the month, the day, and the year in dates throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para>Date Separator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DateSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.DateSeparator); }
			set { Entity.Attributes[Fields.DateSeparator] = value; }
		}

		/// <summary>
		/// <para>The maximum value for the Mobile Offline setting Days since record last modified</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Max value of Days since record last modified</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaysSinceRecordLastModifiedMaxValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaysSinceRecordLastModifiedMaxValue); }
		}

		/// <summary>
		/// <para>Symbol used for decimal in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para>Decimal Symbol</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DecimalSymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.DecimalSymbol); }
			set { Entity.Attributes[Fields.DecimalSymbol] = value; }
		}

		/// <summary>
		/// <para>Text area to enter default country code.</para>
		/// <para>String - MaxLength: 30</para>
		/// <para>Default Country Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultCountryCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultCountryCode); }
			set { Entity.Attributes[Fields.DefaultCountryCode] = value; }
		}

		/// <summary>
		/// <para>Name of the default crm custom.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name of the default app</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultCrmCustomName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultCrmCustomName); }
			set { Entity.Attributes[Fields.DefaultCrmCustomName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the default email server profile.</para>
		/// <para>Lookup to emailserverprofile</para>
		/// <para>Email Server Profile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultEmailServerProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultEmailServerProfileId); }
			set { Entity.Attributes[Fields.DefaultEmailServerProfileId] = value; }
		}

		/// <summary>
		/// <para>XML string containing the default email settings that are applied when a user or queue is created.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Default Email Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultEmailSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultEmailSettings); }
			set { Entity.Attributes[Fields.DefaultEmailSettings] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the default mobile offline profile.</para>
		/// <para>Lookup to mobileofflineprofile</para>
		/// <para>Default Mobile Offline Profile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultMobileOfflineProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultMobileOfflineProfileId); }
			set { Entity.Attributes[Fields.DefaultMobileOfflineProfileId] = value; }
		}

		/// <summary>
		/// <para>Type of default recurrence end range date.</para>
		/// <para>Picklist</para>
		/// <para>Default Recurrence End Range Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.DefaultRecurrenceEndRangeType? DefaultRecurrenceEndRangeType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DefaultRecurrenceEndRangeType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.DefaultRecurrenceEndRangeType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DefaultRecurrenceEndRangeType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DefaultRecurrenceEndRangeType] = null;
			}
		}

		/// <summary>
		/// <para>Indicates whether the default teams linked chat title is the record name</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether the default teams linked chat title is the record name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DefaultTeamsChatTitleRecordName
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DefaultTeamsChatTitleRecordName); }
			set { Entity.Attributes[Fields.DefaultTeamsChatTitleRecordName] = value; }
		}

		/// <summary>
		/// <para>Default theme data for the organization.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Default Theme Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultThemeData
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultThemeData); }
			set { Entity.Attributes[Fields.DefaultThemeData] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the delegated admin user for the organization.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Delegated Admin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DelegatedAdminUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DelegatedAdminUserId); }
			set { Entity.Attributes[Fields.DelegatedAdminUserId] = value; }
		}

		/// <summary>
		/// <para>Reason for disabling the organization.</para>
		/// <para>ReadOnly - String - MaxLength: 500</para>
		/// <para>Disabled Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisabledReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisabledReason); }
		}

		/// <summary>
		/// <para>Indicates whether Social Care is disabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Social Care disabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisableSocialCare
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisableSocialCare); }
			set { Entity.Attributes[Fields.DisableSocialCare] = value; }
		}

		/// <summary>
		/// <para>Discount calculation method for the QOOI product.</para>
		/// <para>Picklist</para>
		/// <para>Discount calculation method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.DiscountCalculationMethod? DiscountCalculationMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DiscountCalculationMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.DiscountCalculationMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DiscountCalculationMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DiscountCalculationMethod] = null;
			}
		}

		/// <summary>
		/// <para>Indicates whether or not navigation tour is displayed.</para>
		/// <para>Boolean</para>
		/// <para>Display Navigation Tour</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisplayNavigationTour
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisplayNavigationTour); }
			set { Entity.Attributes[Fields.DisplayNavigationTour] = value; }
		}

		/// <summary>
		/// <para>Select if you want to use the Email Router or server-side synchronization for email processing.</para>
		/// <para>Picklist</para>
		/// <para>Email Connection Channel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.EmailConnectionChannel? EmailConnectionChannel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailConnectionChannel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.EmailConnectionChannel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailConnectionChannel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailConnectionChannel] = null;
			}
		}

		/// <summary>
		/// <para>Flag to turn email correlation on or off.</para>
		/// <para>Boolean</para>
		/// <para>Use Email Correlation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EmailCorrelationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EmailCorrelationEnabled); }
			set { Entity.Attributes[Fields.EmailCorrelationEnabled] = value; }
		}

		/// <summary>
		/// <para>Normal polling frequency used for sending email in Microsoft Office Outlook.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Email Send Polling Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? EmailSendPollingPeriod
		{
			get { return Entity.GetAttributeValue<int?>(Fields.EmailSendPollingPeriod); }
			set { Entity.Attributes[Fields.EmailSendPollingPeriod] = value; }
		}

		/// <summary>
		/// <para>Indicates the selected default view in the enhanced insert e-mail template experience..</para>
		/// <para>Picklist</para>
		/// <para>Select the default view in the enhanced insert e-mail template experience.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.EmailTemplateDefaultView? EmailTemplateDefaultView
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailTemplateDefaultView);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.EmailTemplateDefaultView)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailTemplateDefaultView] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailTemplateDefaultView] = null;
			}
		}

		/// <summary>
		/// <para>Determines whether records merged through the merge dialog in UCI are merged asynchronously</para>
		/// <para>Boolean</para>
		/// <para>Asynchronous merge enabled for UCI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableAsyncMergeAPIForUCI
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableAsyncMergeAPIForUCI); }
			set { Entity.Attributes[Fields.EnableAsyncMergeAPIForUCI] = value; }
		}

		/// <summary>
		/// <para>Enable Integration with Bing Maps</para>
		/// <para>Boolean</para>
		/// <para>Enable Integration with Bing Maps</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableBingMapsIntegration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableBingMapsIntegration); }
			set { Entity.Attributes[Fields.EnableBingMapsIntegration] = value; }
		}

		/// <summary>
		/// <para>Indicates whether to Allow calendar export import with SLA.</para>
		/// <para>Boolean</para>
		/// <para>Allow calendar export import with SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableCalendarImportExport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableCalendarImportExport); }
			set { Entity.Attributes[Fields.EnableCalendarImportExport] = value; }
		}

		/// <summary>
		/// <para>Note: By enabling this feature, you will also enable the automatic creation of enviornment variables when adding data sources for your apps.</para>
		/// <para>Boolean</para>
		/// <para>Enable the creation of Canvas apps in Dataverse / Solution by default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableCanvasAppsInSolutionsByDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableCanvasAppsInSolutionsByDefault); }
			set { Entity.Attributes[Fields.EnableCanvasAppsInSolutionsByDefault] = value; }
		}

		/// <summary>
		/// <para>Enable Integration with Immersive Skype</para>
		/// <para>Boolean</para>
		/// <para>Enable Integration with Immersive Skype</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableImmersiveSkypeIntegration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableImmersiveSkypeIntegration); }
			set { Entity.Attributes[Fields.EnableImmersiveSkypeIntegration] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the user has enabled or disabled Live Persona Card feature in UCI.</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether the user has enabled or disabled Live Persona Card feature in UCI.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableLivePersonaCardUCI
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableLivePersonaCardUCI); }
			set { Entity.Attributes[Fields.EnableLivePersonaCardUCI] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the user has enabled or disabled LivePersonCardIntegration in Office.</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether the user has enabled or disabled LivePersonCardIntegration in Office.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableLivePersonCardIntegrationInOffice
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableLivePersonCardIntegrationInOffice); }
			set { Entity.Attributes[Fields.EnableLivePersonCardIntegrationInOffice] = value; }
		}

		/// <summary>
		/// <para>Select to enable learning path auhtoring.</para>
		/// <para>Boolean</para>
		/// <para>Enable Learning Path Authoring</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableLPAuthoring
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableLPAuthoring); }
			set { Entity.Attributes[Fields.EnableLPAuthoring] = value; }
		}

		/// <summary>
		/// <para>Control whether the organization Switch Maker Portal to Classic</para>
		/// <para>Boolean</para>
		/// <para>Switch Maker Portal to Classic</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableMakerSwitchToClassic
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableMakerSwitchToClassic); }
			set { Entity.Attributes[Fields.EnableMakerSwitchToClassic] = value; }
		}

		/// <summary>
		/// <para>Enable Integration with Microsoft Flow</para>
		/// <para>Boolean</para>
		/// <para>Enable Integration with Microsoft Flow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableMicrosoftFlowIntegration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableMicrosoftFlowIntegration); }
			set { Entity.Attributes[Fields.EnableMicrosoftFlowIntegration] = value; }
		}

		/// <summary>
		/// <para>Enable pricing calculations on a Create call.</para>
		/// <para>Boolean</para>
		/// <para>Enable Pricing On Create</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnablePricingOnCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnablePricingOnCreate); }
			set { Entity.Attributes[Fields.EnablePricingOnCreate] = value; }
		}

		/// <summary>
		/// <para>Indicates whether privacy and sensitivity attributes for new team creation has been enabled</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether privacy and sensitivity attributes for new team creation has been enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableSensitivityLabelsForTeamsCollab
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableSensitivityLabelsForTeamsCollab); }
			set { Entity.Attributes[Fields.EnableSensitivityLabelsForTeamsCollab] = value; }
		}

		/// <summary>
		/// <para>Use Smart Matching.</para>
		/// <para>Boolean</para>
		/// <para>Enable Smart Matching</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableSmartMatching
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableSmartMatching); }
			set { Entity.Attributes[Fields.EnableSmartMatching] = value; }
		}

		/// <summary>
		/// <para>Leave empty to use default setting. Set to on/off to enable/disable CDN for UCI.</para>
		/// <para>Boolean</para>
		/// <para>Enable UCI CDN for organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableUnifiedClientCDN
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableUnifiedClientCDN); }
			set { Entity.Attributes[Fields.EnableUnifiedClientCDN] = value; }
		}

		/// <summary>
		/// <para>Enable site map and commanding update</para>
		/// <para>Boolean</para>
		/// <para>Enable site map and commanding update</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableUnifiedInterfaceShellRefresh
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableUnifiedInterfaceShellRefresh); }
			set { Entity.Attributes[Fields.EnableUnifiedInterfaceShellRefresh] = value; }
		}

		/// <summary>
		/// <para>Organization setting to enforce read only plugins.</para>
		/// <para>Boolean</para>
		/// <para>Organization setting to enforce read only plugins.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnforceReadOnlyPlugins
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnforceReadOnlyPlugins); }
			set { Entity.Attributes[Fields.EnforceReadOnlyPlugins] = value; }
		}

		/// <summary>
		/// <para>JSON string containing settings for enhanced add products experience in Sales</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Enhanced Add Products Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EnhancedOQOIAddProductsSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.EnhancedOQOIAddProductsSettings); }
			set { Entity.Attributes[Fields.EnhancedOQOIAddProductsSettings] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Entity Image Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Maximum number of days to keep change tracking deleted records</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 365</para>
		/// <para>Days to Expire Change Tracking Deleted Records</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpireChangeTrackingInDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpireChangeTrackingInDays); }
			set { Entity.Attributes[Fields.ExpireChangeTrackingInDays] = value; }
		}

		/// <summary>
		/// <para>Maximum number of days before deleting inactive subscriptions.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Days to Expire Subscriptions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpireSubscriptionsInDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpireSubscriptionsInDays); }
			set { Entity.Attributes[Fields.ExpireSubscriptionsInDays] = value; }
		}

		/// <summary>
		/// <para>Specify the base URL to use to look for external document suggestions.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>External Base URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalBaseUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalBaseUrl); }
			set { Entity.Attributes[Fields.ExternalBaseUrl] = value; }
		}

		/// <summary>
		/// <para>XML string containing the ExternalPartyEnabled entities correlation keys for association of existing External Party instance entities to newly created IsExternalPartyEnabled entities.For internal use only</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>ExternalPartyEnabled Entities correlation Keys</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalPartyCorrelationKeys
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalPartyCorrelationKeys); }
			set { Entity.Attributes[Fields.ExternalPartyCorrelationKeys] = value; }
		}

		/// <summary>
		/// <para>XML string containing the ExternalPartyEnabled entities settings.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>ExternalPartyEnabled Entities Settings.For internal use only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalPartyEntitySettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalPartyEntitySettings); }
			set { Entity.Attributes[Fields.ExternalPartyEntitySettings] = value; }
		}

		/// <summary>
		/// <para>Features to be enabled as an XML BLOB.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Feature Set</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FeatureSet
		{
			get { return Entity.GetAttributeValue<string>(Fields.FeatureSet); }
			set { Entity.Attributes[Fields.FeatureSet] = value; }
		}

		/// <summary>
		/// <para>Start date for the fiscal period that is to be used throughout Microsoft CRM.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Fiscal Calendar Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? FiscalCalendarStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.FiscalCalendarStart); }
			set { Entity.Attributes[Fields.FiscalCalendarStart] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how the name of the fiscal period is displayed throughout Microsoft CRM.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para>Fiscal Period Format</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FiscalPeriodFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.FiscalPeriodFormat); }
			set { Entity.Attributes[Fields.FiscalPeriodFormat] = value; }
		}

		/// <summary>
		/// <para>Format in which the fiscal period will be displayed.</para>
		/// <para>Picklist</para>
		/// <para>Format for Fiscal Period</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalPeriodFormatPeriod? FiscalPeriodFormatPeriod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalPeriodFormatPeriod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalPeriodFormatPeriod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalPeriodFormatPeriod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalPeriodFormatPeriod] = null;
			}
		}

		/// <summary>
		/// <para>Type of fiscal period used throughout Microsoft CRM.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Fiscal Period Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FiscalPeriodType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FiscalPeriodType); }
			set { Entity.Attributes[Fields.FiscalPeriodType] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the fiscal settings have been updated.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Fiscal Settings Updated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public bool? FiscalSettingsUpdated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FiscalSettingsUpdated); }
		}

		/// <summary>
		/// <para>Information that specifies whether the fiscal year should be displayed based on the start date or the end date of the fiscal year.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para>Fiscal Year Display</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FiscalYearDisplayCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FiscalYearDisplayCode); }
			set { Entity.Attributes[Fields.FiscalYearDisplayCode] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how the name of the fiscal year is displayed throughout Microsoft CRM.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para>Fiscal Year Format</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FiscalYearFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.FiscalYearFormat); }
			set { Entity.Attributes[Fields.FiscalYearFormat] = value; }
		}

		/// <summary>
		/// <para>Prefix for the display of the fiscal year.</para>
		/// <para>Picklist</para>
		/// <para>Prefix for Fiscal Year</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatPrefix? FiscalYearFormatPrefix
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYearFormatPrefix);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatPrefix)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYearFormatPrefix] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYearFormatPrefix] = null;
			}
		}

		/// <summary>
		/// <para>Suffix for the display of the fiscal year.</para>
		/// <para>Picklist</para>
		/// <para>Suffix for Fiscal Year</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatSuffix? FiscalYearFormatSuffix
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYearFormatSuffix);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatSuffix)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYearFormatSuffix] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYearFormatSuffix] = null;
			}
		}

		/// <summary>
		/// <para>Format for the year.</para>
		/// <para>Picklist</para>
		/// <para>Fiscal Year Format Year</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatYear? FiscalYearFormatYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYearFormatYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYearFormatYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYearFormatYear] = null;
			}
		}

		/// <summary>
		/// <para>Information that specifies how the names of the fiscal year and the fiscal period should be connected when displayed together.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para>Fiscal Year Period Connector</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FiscalYearPeriodConnect
		{
			get { return Entity.GetAttributeValue<string>(Fields.FiscalYearPeriodConnect); }
			set { Entity.Attributes[Fields.FiscalYearPeriodConnect] = value; }
		}

		/// <summary>
		/// <para>Order in which names are to be displayed throughout Microsoft CRM.</para>
		/// <para>Picklist</para>
		/// <para>Full Name Display Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FullNameConventionCode? FullNameConventionCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FullNameConventionCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FullNameConventionCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FullNameConventionCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FullNameConventionCode] = null;
			}
		}

		/// <summary>
		/// <para>Specifies the maximum number of months in future for which the recurring activities can be created.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 140</para>
		/// <para>Future Expansion Window</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FutureExpansionWindow
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FutureExpansionWindow); }
			set { Entity.Attributes[Fields.FutureExpansionWindow] = value; }
		}

		/// <summary>
		/// <para>Indicates whether alerts will be generated for errors.</para>
		/// <para>Boolean</para>
		/// <para>Generate Alerts For Errors</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GenerateAlertsForErrors
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GenerateAlertsForErrors); }
			set { Entity.Attributes[Fields.GenerateAlertsForErrors] = value; }
		}

		/// <summary>
		/// <para>Indicates whether alerts will be generated for information.</para>
		/// <para>Boolean</para>
		/// <para>Generate Alerts For Information</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GenerateAlertsForInformation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GenerateAlertsForInformation); }
			set { Entity.Attributes[Fields.GenerateAlertsForInformation] = value; }
		}

		/// <summary>
		/// <para>Indicates whether alerts will be generated for warnings.</para>
		/// <para>Boolean</para>
		/// <para>Generate Alerts For Warnings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GenerateAlertsForWarnings
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GenerateAlertsForWarnings); }
			set { Entity.Attributes[Fields.GenerateAlertsForWarnings] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Get Started content is enabled for this organization.</para>
		/// <para>Boolean</para>
		/// <para>Is Get Started Pane Content Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GetStartedPaneContentEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GetStartedPaneContentEnabled); }
			set { Entity.Attributes[Fields.GetStartedPaneContentEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the append URL parameters is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is AppendUrl Parameters enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GlobalAppendUrlParametersEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GlobalAppendUrlParametersEnabled); }
			set { Entity.Attributes[Fields.GlobalAppendUrlParametersEnabled] = value; }
		}

		/// <summary>
		/// <para>URL for the web page global help.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Global Help URL.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GlobalHelpUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.GlobalHelpUrl); }
			set { Entity.Attributes[Fields.GlobalHelpUrl] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the customizable global help is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Customizable Global Help enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GlobalHelpUrlEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GlobalHelpUrlEnabled); }
			set { Entity.Attributes[Fields.GlobalHelpUrlEnabled] = value; }
		}

		/// <summary>
		/// <para>Number of days after the goal&apos;s end date after which the rollup of the goal stops automatically.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 400</para>
		/// <para>Rollup Expiration Time for Goal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? GoalRollupExpiryTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.GoalRollupExpiryTime); }
			set { Entity.Attributes[Fields.GoalRollupExpiryTime] = value; }
		}

		/// <summary>
		/// <para>Number of hours between automatic rollup jobs .</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Automatic Rollup Frequency for Goal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? GoalRollupFrequency
		{
			get { return Entity.GetAttributeValue<int?>(Fields.GoalRollupFrequency); }
			set { Entity.Attributes[Fields.GoalRollupFrequency] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Grant Access To Network Service</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GrantAccessToNetworkService
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GrantAccessToNetworkService); }
			set { Entity.Attributes[Fields.GrantAccessToNetworkService] = value; }
		}

		/// <summary>
		/// <para>Maximum difference allowed between subject keywords count of the email messaged to be correlated</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Hash Delta Subject Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? HashDeltaSubjectCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.HashDeltaSubjectCount); }
			set { Entity.Attributes[Fields.HashDeltaSubjectCount] = value; }
		}

		/// <summary>
		/// <para>Filter Subject Keywords</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Hash Filter Keywords</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HashFilterKeywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.HashFilterKeywords); }
			set { Entity.Attributes[Fields.HashFilterKeywords] = value; }
		}

		/// <summary>
		/// <para>Maximum number of subject keywords or recipients used for correlation</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Hash Max Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? HashMaxCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.HashMaxCount); }
			set { Entity.Attributes[Fields.HashMaxCount] = value; }
		}

		/// <summary>
		/// <para>Minimum number of recipients required to match for email messaged to be correlated</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Hash Min Address Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? HashMinAddressCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.HashMinAddressCount); }
			set { Entity.Attributes[Fields.HashMinAddressCount] = value; }
		}

		/// <summary>
		/// <para>High contrast theme data for the organization.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>High contrast Theme Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HighContrastThemeData
		{
			get { return Entity.GetAttributeValue<string>(Fields.HighContrastThemeData); }
			set { Entity.Attributes[Fields.HighContrastThemeData] = value; }
		}

		/// <summary>
		/// <para>Indicates whether incoming email sent by internal Microsoft Dynamics 365 users or queues should be tracked.</para>
		/// <para>Boolean</para>
		/// <para>Ignore Internal Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IgnoreInternalEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IgnoreInternalEmail); }
			set { Entity.Attributes[Fields.IgnoreInternalEmail] = value; }
		}

		/// <summary>
		/// <para>Indicates whether an organization has consented to sharing search query data to help improve search results</para>
		/// <para>Boolean</para>
		/// <para>Share search query data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ImproveSearchLoggingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ImproveSearchLoggingEnabled); }
			set { Entity.Attributes[Fields.ImproveSearchLoggingEnabled] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether Inactivity timeout is enabled</para>
		/// <para>Boolean</para>
		/// <para>Inactivity timeout enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? InactivityTimeoutEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.InactivityTimeoutEnabled); }
			set { Entity.Attributes[Fields.InactivityTimeoutEnabled] = value; }
		}

		/// <summary>
		/// <para>Inactivity timeout in minutes</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Inactivity timeout in minutes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InactivityTimeoutInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InactivityTimeoutInMins); }
			set { Entity.Attributes[Fields.InactivityTimeoutInMins] = value; }
		}

		/// <summary>
		/// <para>Inactivity timeout reminder in minutes</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Inactivity timeout reminder in minutes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InactivityTimeoutReminderInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InactivityTimeoutReminderInMins); }
			set { Entity.Attributes[Fields.InactivityTimeoutReminderInMins] = value; }
		}

		/// <summary>
		/// <para>Setting for the Async Service Mailbox Queue. Defines the retrieval batch size of exchange server.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Exchange Email Retrieval Batch Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IncomingEmailExchangeEmailRetrievalBatchSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IncomingEmailExchangeEmailRetrievalBatchSize); }
			set { Entity.Attributes[Fields.IncomingEmailExchangeEmailRetrievalBatchSize] = value; }
		}

		/// <summary>
		/// <para>Initial version of the organization.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Initial Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InitialVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.InitialVersion); }
			set { Entity.Attributes[Fields.InitialVersion] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the integration user for the organization.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Integration User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? IntegrationUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.IntegrationUserId); }
			set { Entity.Attributes[Fields.IntegrationUserId] = value; }
		}

		/// <summary>
		/// <para>Prefix to use for all invoice numbers throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Invoice Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InvoicePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.InvoicePrefix); }
			set { Entity.Attributes[Fields.InvoicePrefix] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature Action Card should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Action Card for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActionCardEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActionCardEnabled); }
			set { Entity.Attributes[Fields.IsActionCardEnabled] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether Action Support Feature is enabled</para>
		/// <para>Boolean</para>
		/// <para>Action Support Feature enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActionSupportFeatureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActionSupportFeatureEnabled); }
			set { Entity.Attributes[Fields.IsActionSupportFeatureEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature Relationship Analytics should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Relationship Analytics for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActivityAnalysisEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActivityAnalysisEnabled); }
			set { Entity.Attributes[Fields.IsActivityAnalysisEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether all money attributes are converted to decimal.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Set if all money attributes are converted to decimal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAllMoneyDecimal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAllMoneyDecimal); }
		}

		/// <summary>
		/// <para>Indicates whether loading of Microsoft Dynamics 365 in a browser window that does not have address, tool, and menu bars is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Application Mode Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAppMode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAppMode); }
			set { Entity.Attributes[Fields.IsAppMode] = value; }
		}

		/// <summary>
		/// <para>Enable or disable attachments sync for outlook and exchange.</para>
		/// <para>Boolean</para>
		/// <para>Is Attachment Sync Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAppointmentAttachmentSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAppointmentAttachmentSyncEnabled); }
			set { Entity.Attributes[Fields.IsAppointmentAttachmentSyncEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable or disable assigned tasks sync for outlook and exchange.</para>
		/// <para>Boolean</para>
		/// <para>Is Assigned Tasks Sync Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAssignedTasksSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAssignedTasksSyncEnabled); }
			set { Entity.Attributes[Fields.IsAssignedTasksSyncEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable or disable auditing of changes.</para>
		/// <para>Boolean</para>
		/// <para>Is Auditing Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAuditEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAuditEnabled); }
			set { Entity.Attributes[Fields.IsAuditEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature Auto Capture should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Auto Capture for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoDataCaptureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoDataCaptureEnabled); }
			set { Entity.Attributes[Fields.IsAutoDataCaptureEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the V2 feature of Auto Capture should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Auto Capture V2 for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoDataCaptureV2Enabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoDataCaptureV2Enabled); }
			set { Entity.Attributes[Fields.IsAutoDataCaptureV2Enabled] = value; }
		}

		/// <summary>
		/// <para>Information on whether auto save is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Auto Save Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoSaveEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoSaveEnabled); }
			set { Entity.Attributes[Fields.IsAutoSaveEnabled] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether BPF Entity Customization Feature is enabled</para>
		/// <para>Boolean</para>
		/// <para>BPF Entity Customization Feature enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBPFEntityCustomizationFeatureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBPFEntityCustomizationFeatureEnabled); }
			set { Entity.Attributes[Fields.IsBPFEntityCustomizationFeatureEnabled] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>IsCollaborationExperienceEnabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCollaborationExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCollaborationExperienceEnabled); }
			set { Entity.Attributes[Fields.IsCollaborationExperienceEnabled] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether conflict detection for mobile client is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Conflict Detection for Mobile Client enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsConflictDetectionEnabledForMobileClient
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsConflictDetectionEnabledForMobileClient); }
			set { Entity.Attributes[Fields.IsConflictDetectionEnabledForMobileClient] = value; }
		}

		/// <summary>
		/// <para>Enable or disable mailing address sync for outlook and exchange.</para>
		/// <para>Boolean</para>
		/// <para>Is Mailing Address Sync Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContactMailingAddressSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContactMailingAddressSyncEnabled); }
			set { Entity.Attributes[Fields.IsContactMailingAddressSyncEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Content Security Policy has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Content Security Policy for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContentSecurityPolicyEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContentSecurityPolicyEnabled); }
			set { Entity.Attributes[Fields.IsContentSecurityPolicyEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Content Security Policy has been enabled for this organization&apos;s Canvas apps.</para>
		/// <para>Boolean</para>
		/// <para>Enable Content Security Policy for this organization's Canvas apps</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContentSecurityPolicyEnabledForCanvas
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContentSecurityPolicyEnabledForCanvas); }
			set { Entity.Attributes[Fields.IsContentSecurityPolicyEnabledForCanvas] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Contextual email experience is enabled on this organization</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether Contextual email experience is enabled on this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContextualEmailEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContextualEmailEnabled); }
			set { Entity.Attributes[Fields.IsContextualEmailEnabled] = value; }
		}

		/// <summary>
		/// <para>Select to enable Contextual Help in UCI.</para>
		/// <para>Boolean</para>
		/// <para>Enables Contextual Help in UCI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContextualHelpEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContextualHelpEnabled); }
			set { Entity.Attributes[Fields.IsContextualHelpEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Custom Controls in canvas PowerApps feature has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Custom Controls in canvas PowerApps feature for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCustomControlsInCanvasAppsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCustomControlsInCanvasAppsEnabled); }
			set { Entity.Attributes[Fields.IsCustomControlsInCanvasAppsEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable or disable country code selection.</para>
		/// <para>Boolean</para>
		/// <para>Enable or disable country code selection</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefaultCountryCodeCheckEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefaultCountryCodeCheckEnabled); }
			set { Entity.Attributes[Fields.IsDefaultCountryCodeCheckEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable Delegation Access content</para>
		/// <para>Boolean</para>
		/// <para>Is Delegation Access Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDelegateAccessEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDelegateAccessEnabled); }
			set { Entity.Attributes[Fields.IsDelegateAccessEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature Action Hub should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Action Hub for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDelveActionHubIntegrationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDelveActionHubIntegrationEnabled); }
			set { Entity.Attributes[Fields.IsDelveActionHubIntegrationEnabled] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the organization is disabled.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Organization Disabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabled); }
		}

		/// <summary>
		/// <para>Indicates whether duplicate detection of records is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Duplicate Detection Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabled); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether duplicate detection of records during import is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Duplicate Detection Enabled For Import</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabledForImport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabledForImport); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabledForImport] = value; }
		}

		/// <summary>
		/// <para>Indicates whether duplicate detection of records during offline synchronization is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Duplicate Detection Enabled For Offline Synchronization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabledForOfflineSync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabledForOfflineSync); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabledForOfflineSync] = value; }
		}

		/// <summary>
		/// <para>Indicates whether duplicate detection during online create or update is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Duplicate Detection Enabled for Online Create/Update</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabledForOnlineCreateUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabledForOnlineCreateUpdate); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabledForOnlineCreateUpdate] = value; }
		}

		/// <summary>
		/// <para>Allow tracking recipient activity on sent emails.</para>
		/// <para>Boolean</para>
		/// <para>Allow tracking recipient activity on sent emails</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailMonitoringAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailMonitoringAllowed); }
			set { Entity.Attributes[Fields.IsEmailMonitoringAllowed] = value; }
		}

		/// <summary>
		/// <para>Enable Email Server Profile content filtering</para>
		/// <para>Boolean</para>
		/// <para>Is Email Server Profile Content Filtering Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailServerProfileContentFilteringEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailServerProfileContentFilteringEnabled); }
			set { Entity.Attributes[Fields.IsEmailServerProfileContentFilteringEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether embed Teams collaboration has been enabled for the organization</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether embed Teams collaboration has been enabled for the organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmbedTeamsCollabEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmbedTeamsCollabEnabled); }
			set { Entity.Attributes[Fields.IsEmbedTeamsCollabEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether appmodule is enabled for all roles</para>
		/// <para>Boolean</para>
		/// <para>option set values for isenabledforallroles</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEnabledForAllRoles
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEnabledForAllRoles); }
			set { Entity.Attributes[Fields.IsEnabledForAllRoles] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the organization&apos;s files are being stored in Azure.</para>
		/// <para>Boolean</para>
		/// <para>Enable external file storage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsExternalFileStorageEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsExternalFileStorageEnabled); }
			set { Entity.Attributes[Fields.IsExternalFileStorageEnabled] = value; }
		}

		/// <summary>
		/// <para>Select whether data can be synchronized with an external search index.</para>
		/// <para>Boolean</para>
		/// <para>Enable external search data syncing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsExternalSearchIndexEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsExternalSearchIndexEnabled); }
			set { Entity.Attributes[Fields.IsExternalSearchIndexEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the fiscal period is displayed as the month number.</para>
		/// <para>Boolean</para>
		/// <para>Is Fiscal Period Monthly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFiscalPeriodMonthBased
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFiscalPeriodMonthBased); }
			set { Entity.Attributes[Fields.IsFiscalPeriodMonthBased] = value; }
		}

		/// <summary>
		/// <para>Select whether folders should be automatically created on SharePoint.</para>
		/// <para>Boolean</para>
		/// <para>Automatically create folders</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFolderAutoCreatedonSP
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFolderAutoCreatedonSP); }
			set { Entity.Attributes[Fields.IsFolderAutoCreatedonSP] = value; }
		}

		/// <summary>
		/// <para>Enable or disable folder based tracking for Server Side Sync.</para>
		/// <para>Boolean</para>
		/// <para>Is Folder Based Tracking Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFolderBasedTrackingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFolderBasedTrackingEnabled); }
			set { Entity.Attributes[Fields.IsFolderBasedTrackingEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether full-text search for Quick Find entities should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Full-text search for Quick Find</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFullTextSearchEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFullTextSearchEnabled); }
			set { Entity.Attributes[Fields.IsFullTextSearchEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether geospatial capabilities leveraging Azure Maps are enabled.</para>
		/// <para>Boolean</para>
		/// <para>Enable geospatial Azure Maps integration.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsGeospatialAzureMapsIntegrationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsGeospatialAzureMapsIntegrationEnabled); }
			set { Entity.Attributes[Fields.IsGeospatialAzureMapsIntegrationEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable Hierarchical Security Model</para>
		/// <para>Boolean</para>
		/// <para>Enable Hierarchical Security Model</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsHierarchicalSecurityModelEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsHierarchicalSecurityModelEnabled); }
			set { Entity.Attributes[Fields.IsHierarchicalSecurityModelEnabled] = value; }
		}

		/// <summary>
		/// <para>Give Consent to use LUIS in Dynamics 365 Bot</para>
		/// <para>Boolean</para>
		/// <para>LUIS Consent for Dynamics 365 Bot</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLUISEnabledforD365Bot
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLUISEnabledforD365Bot); }
			set { Entity.Attributes[Fields.IsLUISEnabledforD365Bot] = value; }
		}

		/// <summary>
		/// <para>Enable or disable forced unlocking for Server Side Sync mailboxes.</para>
		/// <para>Boolean</para>
		/// <para>Is Mailbox Forced Unlocking Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMailboxForcedUnlockingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMailboxForcedUnlockingEnabled); }
			set { Entity.Attributes[Fields.IsMailboxForcedUnlockingEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable or disable mailbox keep alive for Server Side Sync.</para>
		/// <para>Boolean</para>
		/// <para>Is Mailbox Keep Alive Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMailboxInactiveBackoffEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMailboxInactiveBackoffEnabled); }
			set { Entity.Attributes[Fields.IsMailboxInactiveBackoffEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Manual Sales Forecasting feature has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Manual Sales Forecasting feature for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManualSalesForecastingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManualSalesForecastingEnabled); }
			set { Entity.Attributes[Fields.IsManualSalesForecastingEnabled] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether mobile client on demand sync is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Mobile Client On Demand Sync enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMobileClientOnDemandSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMobileClientOnDemandSyncEnabled); }
			set { Entity.Attributes[Fields.IsMobileClientOnDemandSyncEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature MobileOffline should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable MobileOffline for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMobileOfflineEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMobileOfflineEnabled); }
			set { Entity.Attributes[Fields.IsMobileOfflineEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Model Apps can be embedded within Microsoft Teams. This is a tenant admin controlled preview/experimental feature.</para>
		/// <para>Boolean</para>
		/// <para>Enable embedding Model Apps in Microsoft Teams</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsModelDrivenAppsInMSTeamsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsModelDrivenAppsInMSTeamsEnabled); }
			set { Entity.Attributes[Fields.IsModelDrivenAppsInMSTeamsEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Microsoft Teams Collaboration feature has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Microsoft Teams Collaboration for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMSTeamsCollaborationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMSTeamsCollaborationEnabled); }
			set { Entity.Attributes[Fields.IsMSTeamsCollaborationEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Microsoft Teams integration has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Microsoft Teams integration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMSTeamsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMSTeamsEnabled); }
			set { Entity.Attributes[Fields.IsMSTeamsEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the user has enabled or disabled Microsoft Teams integration.</para>
		/// <para>Boolean</para>
		/// <para>Microsoft Teams integration changed by user</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMSTeamsSettingChangedByUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMSTeamsSettingChangedByUser); }
			set { Entity.Attributes[Fields.IsMSTeamsSettingChangedByUser] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Microsoft Teams User Sync feature has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Microsoft Teams User Sync for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMSTeamsUserSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMSTeamsUserSyncEnabled); }
			set { Entity.Attributes[Fields.IsMSTeamsUserSyncEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether new add product experience is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether new add product experience is enabled in opportunity form</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNewAddProductExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNewAddProductExperienceEnabled); }
			set { Entity.Attributes[Fields.IsNewAddProductExperienceEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature Notes Analysis should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Notes Analysis for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNotesAnalysisEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNotesAnalysisEnabled); }
			set { Entity.Attributes[Fields.IsNotesAnalysisEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature OfficeGraph should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable OfficeGraph for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOfficeGraphEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOfficeGraphEnabled); }
			set { Entity.Attributes[Fields.IsOfficeGraphEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature One Drive should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable One Drive for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOneDriveEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOneDriveEnabled); }
			set { Entity.Attributes[Fields.IsOneDriveEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether PAI feature has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable PAI feature for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPAIEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPAIEnabled); }
			set { Entity.Attributes[Fields.IsPAIEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether PDF Generation feature has been enabled for the organization.</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Enable PDF Generation feature for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IsPDFGenerationEnabled
		{
			get { return Entity.GetAttributeValue<string>(Fields.IsPDFGenerationEnabled); }
			set { Entity.Attributes[Fields.IsPDFGenerationEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether playbook feature has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable playbook feature for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPlaybookEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPlaybookEnabled); }
			set { Entity.Attributes[Fields.IsPlaybookEnabled] = value; }
		}

		/// <summary>
		/// <para>Information on whether IM presence is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Presence Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPresenceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPresenceEnabled); }
			set { Entity.Attributes[Fields.IsPresenceEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the Preview feature for Action Card should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Preview Action Card feature for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPreviewEnabledForActionCard
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPreviewEnabledForActionCard); }
			set { Entity.Attributes[Fields.IsPreviewEnabledForActionCard] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature Auto Capture should be enabled for the organization at Preview Settings.</para>
		/// <para>Boolean</para>
		/// <para>Enable Auto Capture for this Organization at Preview Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPreviewForAutoCaptureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPreviewForAutoCaptureEnabled); }
			set { Entity.Attributes[Fields.IsPreviewForAutoCaptureEnabled] = value; }
		}

		/// <summary>
		/// <para>Is Preview For Email Monitoring Allowed.</para>
		/// <para>Boolean</para>
		/// <para>Allows Preview For Email Monitoring</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPreviewForEmailMonitoringAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPreviewForEmailMonitoringAllowed); }
			set { Entity.Attributes[Fields.IsPreviewForEmailMonitoringAllowed] = value; }
		}

		/// <summary>
		/// <para>Indicates whether PriceList is mandatory for adding existing products to sales entities.</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether PriceList is mandatory for adding existing products to sales entities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPriceListMandatory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPriceListMandatory); }
			set { Entity.Attributes[Fields.IsPriceListMandatory] = value; }
		}

		/// <summary>
		/// <para>Select whether to use the standard Out-of-box Opportunity Close experience or opt to for a customized experience.</para>
		/// <para>Boolean</para>
		/// <para>Enable quick create form for opportunity close feature for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsQuickCreateEnabledForOpportunityClose
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsQuickCreateEnabledForOpportunityClose); }
			set { Entity.Attributes[Fields.IsQuickCreateEnabledForOpportunityClose] = value; }
		}

		/// <summary>
		/// <para>Enable or disable auditing of read operations.</para>
		/// <para>Boolean</para>
		/// <para>Is Read Auditing Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsReadAuditEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsReadAuditEnabled); }
			set { Entity.Attributes[Fields.IsReadAuditEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the feature Relationship Insights should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Relationship Insights for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRelationshipInsightsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRelationshipInsightsEnabled); }
			set { Entity.Attributes[Fields.IsRelationshipInsightsEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates if the synchronization of user resource booking with Exchange is enabled at organization level.</para>
		/// <para>Boolean</para>
		/// <para>Resource booking synchronization enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsResourceBookingExchangeSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsResourceBookingExchangeSyncEnabled); }
			set { Entity.Attributes[Fields.IsResourceBookingExchangeSyncEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether rich text editor for notes experience is enabled on this organization</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether rich text editor for notes experience is enabled on this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRichTextNotesEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRichTextNotesEnabled); }
			set { Entity.Attributes[Fields.IsRichTextNotesEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Sales Assistant mobile app has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Sales Assistant mobile app</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSalesAssistantEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSalesAssistantEnabled); }
			set { Entity.Attributes[Fields.IsSalesAssistantEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Sales Mobile Preview has been enabled for the organization</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether Sales Mobile Preview has been enabled for the organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSalesMobilePreviewEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSalesMobilePreviewEnabled); }
			set { Entity.Attributes[Fields.IsSalesMobilePreviewEnabled] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>IsSharingInOrgAllowed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSharingInOrgAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSharingInOrgAllowed); }
			set { Entity.Attributes[Fields.IsSharingInOrgAllowed] = value; }
		}

		/// <summary>
		/// <para>Enable sales order processing integration.</para>
		/// <para>Boolean</para>
		/// <para>Is Sales Order Integration Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSOPIntegrationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSOPIntegrationEnabled); }
			set { Entity.Attributes[Fields.IsSOPIntegrationEnabled] = value; }
		}

		/// <summary>
		/// <para>Information on whether text wrap is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Enable Text Wrap</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTextWrapEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTextWrapEnabled); }
			set { Entity.Attributes[Fields.IsTextWrapEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable or disable auditing of user access.</para>
		/// <para>Boolean</para>
		/// <para>Is User Access Auditing Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsUserAccessAuditEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsUserAccessAuditEnabled); }
			set { Entity.Attributes[Fields.IsUserAccessAuditEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether loading of Microsoft Dynamics 365 in a browser window that does not have address, tool, and menu bars is enabled.</para>
		/// <para>Picklist</para>
		/// <para>ISV Integration Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.ISVIntegrationCode? ISVIntegrationCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ISVIntegrationCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.ISVIntegrationCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ISVIntegrationCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ISVIntegrationCode] = null;
			}
		}

		/// <summary>
		/// <para>Indicates whether Write-in Products can be added to Opportunity/Quote/Order/Invoice or not.</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether Write-in Products can be added to Opportunity/Quote/Order/Invoice or not</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWriteInProductsAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWriteInProductsAllowed); }
			set { Entity.Attributes[Fields.IsWriteInProductsAllowed] = value; }
		}

		/// <summary>
		/// <para>Type the prefix to use for all knowledge articles in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Knowledge Article Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KaPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.KaPrefix); }
			set { Entity.Attributes[Fields.KaPrefix] = value; }
		}

		/// <summary>
		/// <para>Prefix to use for all articles in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Article Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KbPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.KbPrefix); }
			set { Entity.Attributes[Fields.KbPrefix] = value; }
		}

		/// <summary>
		/// <para>XML string containing the Knowledge Management settings that are applied in Knowledge Management Wizard.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Knowledge Management Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KMSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.KMSettings); }
			set { Entity.Attributes[Fields.KMSettings] = value; }
		}

		/// <summary>
		/// <para>Preferred language for the organization.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageCode); }
			set { Entity.Attributes[Fields.LanguageCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the locale of the organization.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Locale</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LocaleId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LocaleId); }
			set { Entity.Attributes[Fields.LocaleId] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how the Long Date format is displayed in Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Long Date Format</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LongDateFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LongDateFormatCode); }
			set { Entity.Attributes[Fields.LongDateFormatCode] = value; }
		}

		/// <summary>
		/// <para>Minimum number of characters that should be entered in the lookup control before resolving for suggestions</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum number of characters before resolving suggestions in lookup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LookupCharacterCountBeforeResolve
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LookupCharacterCountBeforeResolve); }
			set { Entity.Attributes[Fields.LookupCharacterCountBeforeResolve] = value; }
		}

		/// <summary>
		/// <para>Minimum delay (in milliseconds) between consecutive inputs in a lookup control that will trigger a search for suggestions</para>
		/// <para>Integer - MinValue: 250 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum delay (in milliseconds) for debouncing lookup control input</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LookupResolveDelayMS
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LookupResolveDelayMS); }
			set { Entity.Attributes[Fields.LookupResolveDelayMS] = value; }
		}

		/// <summary>
		/// <para>Lower Threshold For Mailbox Intermittent Issue.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Lower Threshold For Mailbox Intermittent Issue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MailboxIntermittentIssueMinRange
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MailboxIntermittentIssueMinRange); }
			set { Entity.Attributes[Fields.MailboxIntermittentIssueMinRange] = value; }
		}

		/// <summary>
		/// <para>Lower Threshold For Mailbox Permanent Issue.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Lower Threshold For Mailbox Permanent Issue.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MailboxPermanentIssueMinRange
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MailboxPermanentIssueMinRange); }
			set { Entity.Attributes[Fields.MailboxPermanentIssueMinRange] = value; }
		}

		/// <summary>
		/// <para>Maximum number of actionsteps allowed in a BPF</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 100</para>
		/// <para>Maximum number of actionsteps allowed in a BPF</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxActionStepsInBPF
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxActionStepsInBPF); }
			set { Entity.Attributes[Fields.MaxActionStepsInBPF] = value; }
		}

		/// <summary>
		/// <para>Maximum Allowed Pending Rollup Job Count</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>MaxAllowedPendingRollupJobCount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxAllowedPendingRollupJobCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxAllowedPendingRollupJobCount); }
			set { Entity.Attributes[Fields.MaxAllowedPendingRollupJobCount] = value; }
		}

		/// <summary>
		/// <para>Percentage Of Entity Table Size For Kicking Off Bootstrap Job</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 100</para>
		/// <para>MaxAllowedPendingRollupJobPercentage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxAllowedPendingRollupJobPercentage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxAllowedPendingRollupJobPercentage); }
			set { Entity.Attributes[Fields.MaxAllowedPendingRollupJobPercentage] = value; }
		}

		/// <summary>
		/// <para>Maximum number of days an appointment can last.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Max Appointment Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxAppointmentDurationDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxAppointmentDurationDays); }
			set { Entity.Attributes[Fields.MaxAppointmentDurationDays] = value; }
		}

		/// <summary>
		/// <para>Maximum number of conditions allowed for mobile offline filters</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum number of conditions allowed for mobile offline filters</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxConditionsForMobileOfflineFilters
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxConditionsForMobileOfflineFilters); }
			set { Entity.Attributes[Fields.MaxConditionsForMobileOfflineFilters] = value; }
		}

		/// <summary>
		/// <para>Maximum depth for hierarchy security propagation.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum depth for hierarchy security propagation.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxDepthForHierarchicalSecurityModel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxDepthForHierarchicalSecurityModel); }
			set { Entity.Attributes[Fields.MaxDepthForHierarchicalSecurityModel] = value; }
		}

		/// <summary>
		/// <para>Maximum number of Folder Based Tracking mappings user can add</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 25</para>
		/// <para>Max Folder Based Tracking Mappings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxFolderBasedTrackingMappings
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxFolderBasedTrackingMappings); }
			set { Entity.Attributes[Fields.MaxFolderBasedTrackingMappings] = value; }
		}

		/// <summary>
		/// <para>Maximum number of active business process flows allowed per entity</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum active business process flows per entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumActiveBusinessProcessFlowsAllowedPerEntity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumActiveBusinessProcessFlowsAllowedPerEntity); }
			set { Entity.Attributes[Fields.MaximumActiveBusinessProcessFlowsAllowedPerEntity] = value; }
		}

		/// <summary>
		/// <para>Restrict the maximum number of product properties for a product family/bundle</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Product Properties Item Limit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumDynamicPropertiesAllowed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumDynamicPropertiesAllowed); }
			set { Entity.Attributes[Fields.MaximumDynamicPropertiesAllowed] = value; }
		}

		/// <summary>
		/// <para>Maximum number of active SLA allowed per entity in online</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum number of active SLA allowed per entity in online</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumEntitiesWithActiveSLA
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumEntitiesWithActiveSLA); }
			set { Entity.Attributes[Fields.MaximumEntitiesWithActiveSLA] = value; }
		}

		/// <summary>
		/// <para>Maximum number of SLA KPI per active SLA allowed for entity in online</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum number of active SLA KPI allowed per entity in online</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumSLAKPIPerEntityWithActiveSLA
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumSLAKPIPerEntityWithActiveSLA); }
			set { Entity.Attributes[Fields.MaximumSLAKPIPerEntityWithActiveSLA] = value; }
		}

		/// <summary>
		/// <para>Maximum tracking number before recycling takes place.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Max Tracking Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumTrackingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumTrackingNumber); }
			set { Entity.Attributes[Fields.MaximumTrackingNumber] = value; }
		}

		/// <summary>
		/// <para>Restrict the maximum no of items in a bundle</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Bundle Item Limit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxProductsInBundle
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxProductsInBundle); }
			set { Entity.Attributes[Fields.MaxProductsInBundle] = value; }
		}

		/// <summary>
		/// <para>Maximum number of records that will be exported to a static Microsoft Office Excel worksheet when exporting from the grid.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Max Records For Excel Export</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRecordsForExportToExcel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRecordsForExportToExcel); }
			set { Entity.Attributes[Fields.MaxRecordsForExportToExcel] = value; }
		}

		/// <summary>
		/// <para>Maximum number of lookup and picklist records that can be selected by user for filtering.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Max Records Filter Selection</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRecordsForLookupFilters
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRecordsForLookupFilters); }
			set { Entity.Attributes[Fields.MaxRecordsForLookupFilters] = value; }
		}

		/// <summary>
		/// <para>Maximum Rollup Fields Per Entity</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 50</para>
		/// <para>MaxRollupFieldsPerEntity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRollupFieldsPerEntity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRollupFieldsPerEntity); }
			set { Entity.Attributes[Fields.MaxRollupFieldsPerEntity] = value; }
		}

		/// <summary>
		/// <para>Maximum Rollup Fields Per Organization</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 500</para>
		/// <para>MaxRollupFieldsPerOrg</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRollupFieldsPerOrg
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRollupFieldsPerOrg); }
			set { Entity.Attributes[Fields.MaxRollupFieldsPerOrg] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Max SLA Items Per SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxSLAItemsPerSLA
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxSLAItemsPerSLA); }
			set { Entity.Attributes[Fields.MaxSLAItemsPerSLA] = value; }
		}

		/// <summary>
		/// <para>The maximum version of IE to run browser emulation for in Outlook client</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Max supported IE version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxSupportedInternetExplorerVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxSupportedInternetExplorerVersion); }
		}

		/// <summary>
		/// <para>Maximum allowed size of an attachment.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Max Upload File Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxUploadFileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxUploadFileSize); }
			set { Entity.Attributes[Fields.MaxUploadFileSize] = value; }
		}

		/// <summary>
		/// <para>Maximum number of mailboxes that can be toggled for verbose logging</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Max No Of Mailboxes To Enable For Verbose Logging</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxVerboseLoggingMailbox
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxVerboseLoggingMailbox); }
		}

		/// <summary>
		/// <para>Maximum number of sync cycles for which verbose logging will be enabled by default</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Maximum number of sync cycles for which verbose logging will be enabled by default</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxVerboseLoggingSyncCycles
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxVerboseLoggingSyncCycles); }
		}

		/// <summary>
		/// <para>What is the last date/time where there are metadata tracking deleted objects that have never been outside of the expiration period.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>The last date/time for never expired metadata tracking deleted objects</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MetadataSyncLastTimeOfNeverExpiredDeletedObjectsUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MetadataSyncLastTimeOfNeverExpiredDeletedObjects); }
		}

		/// <summary>
		/// <para>Contains the maximum version number for attributes used by metadata synchronization that have changed.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Metadata sync version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public long? MetadataSyncTimestamp
		{
			get { return Entity.GetAttributeValue<long?>(Fields.MetadataSyncTimestamp); }
		}

		/// <summary>
		/// <para>(Deprecated) Environment selected for Integration with Microsoft Flow</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>(Deprecated) Environment selected for Integration with Microsoft Flow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MicrosoftFlowEnvironment
		{
			get { return Entity.GetAttributeValue<string>(Fields.MicrosoftFlowEnvironment); }
			set { Entity.Attributes[Fields.MicrosoftFlowEnvironment] = value; }
		}

		/// <summary>
		/// <para>Normal polling frequency used for address book synchronization in Microsoft Office Outlook.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Min Address Synchronization Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinAddressBookSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinAddressBookSyncInterval); }
			set { Entity.Attributes[Fields.MinAddressBookSyncInterval] = value; }
		}

		/// <summary>
		/// <para>Normal polling frequency used for background offline synchronization in Microsoft Office Outlook.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Min Offline Synchronization Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinOfflineSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinOfflineSyncInterval); }
			set { Entity.Attributes[Fields.MinOfflineSyncInterval] = value; }
		}

		/// <summary>
		/// <para>Minimum allowed time between scheduled Outlook synchronizations.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Min Synchronization Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinOutlookSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinOutlookSyncInterval); }
			set { Entity.Attributes[Fields.MinOutlookSyncInterval] = value; }
		}

		/// <summary>
		/// <para>Minimum number of user license required for mobile offline service by production/preview organization</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum number of user license required for mobile offline service by production/preview organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MobileOfflineMinLicenseProd
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MobileOfflineMinLicenseProd); }
		}

		/// <summary>
		/// <para>Minimum number of user license required for mobile offline service by trial organization</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Minimum number of user license required for mobile offline service by trial organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MobileOfflineMinLicenseTrial
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MobileOfflineMinLicenseTrial); }
		}

		/// <summary>
		/// <para>Sync interval for mobile offline.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Sync interval for mobile offline.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MobileOfflineSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MobileOfflineSyncInterval); }
			set { Entity.Attributes[Fields.MobileOfflineSyncInterval] = value; }
		}

		/// <summary>
		/// <para>Flag to indicate if the modern advanced find filtering on all tables in a model-driven app is enabled</para>
		/// <para>Boolean</para>
		/// <para>Modern advanced find filtering</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ModernAdvancedFindFiltering
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ModernAdvancedFindFiltering); }
			set { Entity.Attributes[Fields.ModernAdvancedFindFiltering] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the organization.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the organization was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the organization.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the organization. The name is set when Microsoft CRM is installed and should not be changed.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Organization Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how negative currency numbers are displayed throughout Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Negative Currency Format</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NegativeCurrencyFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NegativeCurrencyFormatCode); }
			set { Entity.Attributes[Fields.NegativeCurrencyFormatCode] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how negative numbers are displayed throughout Microsoft CRM.</para>
		/// <para>Picklist</para>
		/// <para>Negative Format</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.NegativeFormatCode? NegativeFormatCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.NegativeFormatCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.NegativeFormatCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.NegativeFormatCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.NegativeFormatCode] = null;
			}
		}

		/// <summary>
		/// <para>Indicates whether an organization has enabled the new Relevance search experience (released in Oct 2020) for the organization</para>
		/// <para>Boolean</para>
		/// <para>Oct 2020 Search enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NewSearchExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NewSearchExperienceEnabled); }
			set { Entity.Attributes[Fields.NewSearchExperienceEnabled] = value; }
		}

		/// <summary>
		/// <para>Next entity type code to use for custom entities.</para>
		/// <para>ReadOnly - Integer - MinValue: 10,000 - MaxValue: 2,147,483,647</para>
		/// <para>Next Entity Type Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NextCustomObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NextCustomObjectTypeCode); }
		}

		/// <summary>
		/// <para>Next token to be placed on the subject line of an email message.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Next Tracking Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NextTrackingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NextTrackingNumber); }
			set { Entity.Attributes[Fields.NextTrackingNumber] = value; }
		}

		/// <summary>
		/// <para>Indicates whether mailbox owners will be notified of email server profile level alerts.</para>
		/// <para>Boolean</para>
		/// <para>Notify Mailbox Owner Of Email Server Level Alerts</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NotifyMailboxOwnerOfEmailServerLevelAlerts
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NotifyMailboxOwnerOfEmailServerLevelAlerts); }
			set { Entity.Attributes[Fields.NotifyMailboxOwnerOfEmailServerLevelAlerts] = value; }
		}

		/// <summary>
		/// <para>Specification of how numbers are displayed throughout Microsoft CRM.</para>
		/// <para>String - MaxLength: 2</para>
		/// <para>Number Format</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NumberFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.NumberFormat); }
			set { Entity.Attributes[Fields.NumberFormat] = value; }
		}

		/// <summary>
		/// <para>Specifies how numbers are grouped in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Number Grouping Format</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NumberGroupFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.NumberGroupFormat); }
			set { Entity.Attributes[Fields.NumberGroupFormat] = value; }
		}

		/// <summary>
		/// <para>Symbol used for number separation in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para>Number Separator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NumberSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.NumberSeparator); }
			set { Entity.Attributes[Fields.NumberSeparator] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the Office Apps auto deployment is enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Office Apps Auto Deployment for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OfficeAppsAutoDeploymentEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OfficeAppsAutoDeploymentEnabled); }
			set { Entity.Attributes[Fields.OfficeAppsAutoDeploymentEnabled] = value; }
		}

		/// <summary>
		/// <para>The url to open the Delve for the organization.</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>The url to open the Delve</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OfficeGraphDelveUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.OfficeGraphDelveUrl); }
			set { Entity.Attributes[Fields.OfficeGraphDelveUrl] = value; }
		}

		/// <summary>
		/// <para>Enable OOB pricing calculation logic for Opportunity, Quote, Order and Invoice entities.</para>
		/// <para>Boolean</para>
		/// <para>Enable OOB Price calculation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OOBPriceCalculationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OOBPriceCalculationEnabled); }
			set { Entity.Attributes[Fields.OOBPriceCalculationEnabled] = value; }
		}

		/// <summary>
		/// <para>Prefix to use for all orders throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Order Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OrderPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.OrderPrefix); }
			set { Entity.Attributes[Fields.OrderPrefix] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization.</para>
		/// <para>ReadOnly - Primary Key - Uniqueidentifier</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OrganizationId
		{
			get { return Id; }
		}

		/// <summary>
		/// <para>Indicates the organization lifecycle state</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Organization State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.OrganizationState? OrganizationState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OrganizationState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.OrganizationState)value.Value;
			}
		}

		/// <summary>
		/// <para>Organization settings stored in Organization Database.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Organization Database Organization Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OrgDbOrgSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.OrgDbOrgSettings); }
			set { Entity.Attributes[Fields.OrgDbOrgSettings] = value; }
		}

		/// <summary>
		/// <para>Select whether to turn on OrgInsights for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable OrgInsights for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OrgInsightsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OrgInsightsEnabled); }
			set { Entity.Attributes[Fields.OrgInsightsEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Preview feature has been enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Display Preview Feature for this organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PaiPreviewScenarioEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PaiPreviewScenarioEnabled); }
			set { Entity.Attributes[Fields.PaiPreviewScenarioEnabled] = value; }
		}

		/// <summary>
		/// <para>Prefix used for parsed table columns.</para>
		/// <para>ReadOnly - String - MaxLength: 20</para>
		/// <para>Parsed Table Column Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTableColumnPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTableColumnPrefix); }
		}

		/// <summary>
		/// <para>Prefix used for parsed tables.</para>
		/// <para>ReadOnly - String - MaxLength: 20</para>
		/// <para>Parsed Table Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTablePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTablePrefix); }
		}

		/// <summary>
		/// <para>Specifies the maximum number of months in past for which the recurring activities can be created.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 120</para>
		/// <para>Past Expansion Window</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PastExpansionWindow
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PastExpansionWindow); }
			set { Entity.Attributes[Fields.PastExpansionWindow] = value; }
		}

		/// <summary>
		/// <para>Leave empty to use default setting. Set to on/off to enable/disable replacement of default grids with modern ones in model-driven apps.</para>
		/// <para>String - MaxLength: 16</para>
		/// <para>Enable modern grids in model-driven apps</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PcfDatasetGridEnabled
		{
			get { return Entity.GetAttributeValue<string>(Fields.PcfDatasetGridEnabled); }
			set { Entity.Attributes[Fields.PcfDatasetGridEnabled] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Picture</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Picture
		{
			get { return Entity.GetAttributeValue<string>(Fields.Picture); }
			set { Entity.Attributes[Fields.Picture] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PinpointLanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PinpointLanguageCode); }
			set { Entity.Attributes[Fields.PinpointLanguageCode] = value; }
		}

		/// <summary>
		/// <para>Plug-in Trace Log Setting for the Organization.</para>
		/// <para>Picklist</para>
		/// <para>Plug-in Trace Log Setting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.PluginTraceLogSetting? PluginTraceLogSetting
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PluginTraceLogSetting);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.PluginTraceLogSetting)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PluginTraceLogSetting] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PluginTraceLogSetting] = null;
			}
		}

		/// <summary>
		/// <para>PM designator to use throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para>PM Designator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PMDesignator
		{
			get { return Entity.GetAttributeValue<string>(Fields.PMDesignator); }
			set { Entity.Attributes[Fields.PMDesignator] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>For internal use only.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostMessageWhitelistDomains
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostMessageWhitelistDomains); }
			set { Entity.Attributes[Fields.PostMessageWhitelistDomains] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the Power BI feature should be enabled for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Power BI feature for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PowerBiFeatureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PowerBiFeatureEnabled); }
			set { Entity.Attributes[Fields.PowerBiFeatureEnabled] = value; }
		}

		/// <summary>
		/// <para>Number of decimal places that can be used for prices.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 10</para>
		/// <para>Pricing Decimal Precision</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PricingDecimalPrecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PricingDecimalPrecision); }
			set { Entity.Attributes[Fields.PricingDecimalPrecision] = value; }
		}

		/// <summary>
		/// <para>Privacy Statement URL</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Privacy Statement URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrivacyStatementUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrivacyStatementUrl); }
			set { Entity.Attributes[Fields.PrivacyStatementUrl] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the default privilege for users in the organization.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Privilege User Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrivilegeUserGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrivilegeUserGroupId); }
			set { Entity.Attributes[Fields.PrivilegeUserGroupId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Privilege Reporting Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrivReportingGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrivReportingGroupId); }
			set { Entity.Attributes[Fields.PrivReportingGroupId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Privilege Reporting Group Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrivReportingGroupName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrivReportingGroupName); }
			set { Entity.Attributes[Fields.PrivReportingGroupName] = value; }
		}

		/// <summary>
		/// <para>Select whether to turn on product recommendations for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Product Recommendations for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ProductRecommendationsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ProductRecommendationsEnabled); }
			set { Entity.Attributes[Fields.ProductRecommendationsEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether prompt should be shown for new Qualify Lead Experience</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Enable New Qualify Lead Experience with configuration MDD</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QualifyLeadAdditionalOptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.QualifyLeadAdditionalOptions); }
			set { Entity.Attributes[Fields.QualifyLeadAdditionalOptions] = value; }
		}

		/// <summary>
		/// <para>Flag to indicate if the feature to use quick action to open records in search side pane is enabled</para>
		/// <para>Boolean</para>
		/// <para>Enable quick actions to open records in search side pane</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? QuickActionToOpenRecordsInSidePaneEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.QuickActionToOpenRecordsInSidePaneEnabled); }
			set { Entity.Attributes[Fields.QuickActionToOpenRecordsInSidePaneEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates whether a quick find record limit should be enabled for this organization (allows for faster Quick Find queries but prevents overly broad searches).</para>
		/// <para>Boolean</para>
		/// <para>Quick Find Record Limit Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? QuickFindRecordLimitEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.QuickFindRecordLimitEnabled); }
			set { Entity.Attributes[Fields.QuickFindRecordLimitEnabled] = value; }
		}

		/// <summary>
		/// <para>Prefix to use for all quotes throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Quote Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QuotePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.QuotePrefix); }
			set { Entity.Attributes[Fields.QuotePrefix] = value; }
		}

		/// <summary>
		/// <para>Indicates whether SLA Recalculation has been enabled for the organization</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether SLA Recalculation has been enabled for the organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RecalculateSLA
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RecalculateSLA); }
			set { Entity.Attributes[Fields.RecalculateSLA] = value; }
		}

		/// <summary>
		/// <para>Specifies the default value for number of occurrences field in the recurrence dialog.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 999</para>
		/// <para>Recurrence Default Number of Occurrences</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecurrenceDefaultNumberOfOccurrences
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecurrenceDefaultNumberOfOccurrences); }
			set { Entity.Attributes[Fields.RecurrenceDefaultNumberOfOccurrences] = value; }
		}

		/// <summary>
		/// <para>Specifies the interval (in seconds) for pausing expansion job.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Recurrence Expansion Job Batch Interval</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecurrenceExpansionJobBatchInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecurrenceExpansionJobBatchInterval); }
			set { Entity.Attributes[Fields.RecurrenceExpansionJobBatchInterval] = value; }
		}

		/// <summary>
		/// <para>Specifies the value for number of instances created in on demand job in one shot.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Recurrence Expansion On Demand Job Batch Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecurrenceExpansionJobBatchSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecurrenceExpansionJobBatchSize); }
			set { Entity.Attributes[Fields.RecurrenceExpansionJobBatchSize] = value; }
		}

		/// <summary>
		/// <para>Specifies the maximum number of instances to be created synchronously after creating a recurring appointment.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 1,000</para>
		/// <para>Recurrence Expansion Synchronization Create Maximum</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecurrenceExpansionSynchCreateMax
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecurrenceExpansionSynchCreateMax); }
			set { Entity.Attributes[Fields.RecurrenceExpansionSynchCreateMax] = value; }
		}

		/// <summary>
		/// <para>XML string that defines the navigation structure for the application. This is the site map from the previously upgraded build and is used in a 3-way merge during upgrade.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Reference SiteMap XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public string ReferenceSiteMapXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReferenceSiteMapXml); }
			set { Entity.Attributes[Fields.ReferenceSiteMapXml] = value; }
		}

		/// <summary>
		/// <para>Release Wave Applied to Environment.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Release Wave</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReleaseWaveName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReleaseWaveName); }
			set { Entity.Attributes[Fields.ReleaseWaveName] = value; }
		}

		/// <summary>
		/// <para>Indicates whether relevance search was enabled for the environment as part of Dataverse&apos;s relevance search on-by-default sweep</para>
		/// <para>Boolean</para>
		/// <para>Relevance search enabled automatically by Dataverse</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RelevanceSearchEnabledByPlatform
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RelevanceSearchEnabledByPlatform); }
			set { Entity.Attributes[Fields.RelevanceSearchEnabledByPlatform] = value; }
		}

		/// <summary>
		/// <para>This setting contains the last modified date for relevance search setting that appears as a toggle in PPAC.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>RelevanceSearchModifiedOnDate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? RelevanceSearchModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.RelevanceSearchModifiedOn); }
			set { Entity.Attributes[Fields.RelevanceSearchModifiedOn] = value; }
		}

		/// <summary>
		/// <para>Flag to render the body of email in the Web form in an IFRAME with the security=&apos;restricted&apos; attribute set. This is additional security but can cause a credentials prompt.</para>
		/// <para>Boolean</para>
		/// <para>Render Secure Frame For Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RenderSecureIFrameForEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RenderSecureIFrameForEmail); }
			set { Entity.Attributes[Fields.RenderSecureIFrameForEmail] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Reporting Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ReportingGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ReportingGroupId); }
			set { Entity.Attributes[Fields.ReportingGroupId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Reporting Group Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReportingGroupName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReportingGroupName); }
			set { Entity.Attributes[Fields.ReportingGroupName] = value; }
		}

		/// <summary>
		/// <para>Picklist for selecting the organization preference for reporting scripting errors.</para>
		/// <para>Picklist</para>
		/// <para>Report Script Errors</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReportScriptErrors? ReportScriptErrors
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReportScriptErrors);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReportScriptErrors)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReportScriptErrors] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReportScriptErrors] = null;
			}
		}

		/// <summary>
		/// <para>Indicates whether Send As Other User privilege is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Approval For Queue Email Required</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RequireApprovalForQueueEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RequireApprovalForQueueEmail); }
			set { Entity.Attributes[Fields.RequireApprovalForQueueEmail] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Send As Other User privilege is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Is Approval For User Email Required</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RequireApprovalForUserEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RequireApprovalForUserEmail); }
			set { Entity.Attributes[Fields.RequireApprovalForUserEmail] = value; }
		}

		/// <summary>
		/// <para>Apply same email address to all unresolved matches when you manually resolve it for one</para>
		/// <para>Boolean</para>
		/// <para>Apply same email address to all unresolved matches when you manually resolve it for one</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ResolveSimilarUnresolvedEmailAddress
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ResolveSimilarUnresolvedEmailAddress); }
			set { Entity.Attributes[Fields.ResolveSimilarUnresolvedEmailAddress] = value; }
		}

		/// <summary>
		/// <para>Flag to restrict Update on incident.</para>
		/// <para>Boolean</para>
		/// <para>Restrict Status Update</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RestrictStatusUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RestrictStatusUpdate); }
			set { Entity.Attributes[Fields.RestrictStatusUpdate] = value; }
		}

		/// <summary>
		/// <para>Error status of Relationship Insights provisioning.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Error status of Relationship Insights provisioning.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RiErrorStatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RiErrorStatus); }
			set { Entity.Attributes[Fields.RiErrorStatus] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Sales Mobile should use UCI forms for create</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether Sales Mobile should use UCI forms for create</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SalesMobileUseUCIFormsForCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SalesMobileUseUCIFormsForCreate); }
			set { Entity.Attributes[Fields.SalesMobileUseUCIFormsForCreate] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Sales Mobile should use UCI forms for view</para>
		/// <para>Boolean</para>
		/// <para>Indicates whether Sales Mobile should use UCI forms for view</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SalesMobileUseUCIFormsForView
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SalesMobileUseUCIFormsForView); }
			set { Entity.Attributes[Fields.SalesMobileUseUCIFormsForView] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the sample data import job.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Sample Data Import</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SampleDataImportId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SampleDataImportId); }
			set { Entity.Attributes[Fields.SampleDataImportId] = value; }
		}

		/// <summary>
		/// <para>Scheduling engine for Appointments and Service Activities</para>
		/// <para>Picklist</para>
		/// <para>Scheduling engine for Appointments and Service Activities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.SchedulingEngine? SchedulingEngine
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SchedulingEngine);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.SchedulingEngine)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SchedulingEngine] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SchedulingEngine] = null;
			}
		}

		/// <summary>
		/// <para>Prefix used for custom entities and attributes.</para>
		/// <para>String - MaxLength: 8</para>
		/// <para>Customization Name Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaNamePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaNamePrefix); }
			set { Entity.Attributes[Fields.SchemaNamePrefix] = value; }
		}

		/// <summary>
		/// <para>Indicates whether Send Bulk Email in UCI is enabled for the org.</para>
		/// <para>Boolean</para>
		/// <para>Send Bulk Email in UCI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SendBulkEmailInUCI
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SendBulkEmailInUCI); }
			set { Entity.Attributes[Fields.SendBulkEmailInUCI] = value; }
		}

		/// <summary>
		/// <para>Serve Static Content From CDN</para>
		/// <para>Boolean</para>
		/// <para>Serve Static Content From CDN</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ServeStaticResourcesFromAzureCDN
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ServeStaticResourcesFromAzureCDN); }
			set { Entity.Attributes[Fields.ServeStaticResourcesFromAzureCDN] = value; }
		}

		/// <summary>
		/// <para>Enable the session recording feature to record user sessions in UCI</para>
		/// <para>Boolean</para>
		/// <para>Enable the session recording feature</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SessionRecordingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SessionRecordingEnabled); }
			set { Entity.Attributes[Fields.SessionRecordingEnabled] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether session timeout is enabled</para>
		/// <para>Boolean</para>
		/// <para>Session timeout enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SessionTimeoutEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SessionTimeoutEnabled); }
			set { Entity.Attributes[Fields.SessionTimeoutEnabled] = value; }
		}

		/// <summary>
		/// <para>Session timeout in minutes</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Session timeout in minutes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SessionTimeoutInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SessionTimeoutInMins); }
			set { Entity.Attributes[Fields.SessionTimeoutInMins] = value; }
		}

		/// <summary>
		/// <para>Session timeout reminder in minutes</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Session timeout reminder in minutes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SessionTimeoutReminderInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SessionTimeoutReminderInMins); }
			set { Entity.Attributes[Fields.SessionTimeoutReminderInMins] = value; }
		}

		/// <summary>
		/// <para>Indicates which SharePoint deployment type is configured for Server to Server. (Online or On-Premises)</para>
		/// <para>Picklist</para>
		/// <para>Choose SharePoint Deployment Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.SharePointDeploymentType? SharePointDeploymentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SharePointDeploymentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.SharePointDeploymentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SharePointDeploymentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SharePointDeploymentType] = null;
			}
		}

		/// <summary>
		/// <para>Information that specifies whether to share to previous owner on assign.</para>
		/// <para>Boolean</para>
		/// <para>Share To Previous Owner On Assign</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShareToPreviousOwnerOnAssign
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShareToPreviousOwnerOnAssign); }
			set { Entity.Attributes[Fields.ShareToPreviousOwnerOnAssign] = value; }
		}

		/// <summary>
		/// <para>Select whether to display a KB article deprecation notification to the user.</para>
		/// <para>Boolean</para>
		/// <para>Show KBArticle deprecation message to user</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowKBArticleDeprecationNotification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowKBArticleDeprecationNotification); }
			set { Entity.Attributes[Fields.ShowKBArticleDeprecationNotification] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether to display the week number in calendar displays throughout Microsoft CRM.</para>
		/// <para>Boolean</para>
		/// <para>Show Week Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowWeekNumber
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowWeekNumber); }
			set { Entity.Attributes[Fields.ShowWeekNumber] = value; }
		}

		/// <summary>
		/// <para>CRM for Outlook Download URL</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>CRMForOutlookDownloadURL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SignupOutlookDownloadFWLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.SignupOutlookDownloadFWLink); }
			set { Entity.Attributes[Fields.SignupOutlookDownloadFWLink] = value; }
		}

		/// <summary>
		/// <para>XML string that defines the navigation structure for the application.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>SiteMap XML</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public string SiteMapXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.SiteMapXml); }
			set { Entity.Attributes[Fields.SiteMapXml] = value; }
		}

		/// <summary>
		/// <para>Contains the on hold case status values.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>SLA pause states</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SlaPauseStates
		{
			get { return Entity.GetAttributeValue<string>(Fields.SlaPauseStates); }
			set { Entity.Attributes[Fields.SlaPauseStates] = value; }
		}

		/// <summary>
		/// <para>Flag for whether the organization is using Social Insights.</para>
		/// <para>Boolean</para>
		/// <para>Social Insights Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SocialInsightsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SocialInsightsEnabled); }
			set { Entity.Attributes[Fields.SocialInsightsEnabled] = value; }
		}

		/// <summary>
		/// <para>Identifier for the Social Insights instance for the organization.</para>
		/// <para>String - MaxLength: 2048</para>
		/// <para>Social Insights instance identifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SocialInsightsInstance
		{
			get { return Entity.GetAttributeValue<string>(Fields.SocialInsightsInstance); }
			set { Entity.Attributes[Fields.SocialInsightsInstance] = value; }
		}

		/// <summary>
		/// <para>Flag for whether the organization has accepted the Social Insights terms of use.</para>
		/// <para>Boolean</para>
		/// <para>Social Insights Terms of Use</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SocialInsightsTermsAccepted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SocialInsightsTermsAccepted); }
			set { Entity.Attributes[Fields.SocialInsightsTermsAccepted] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Sort</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SortId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SortId); }
			set { Entity.Attributes[Fields.SortId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>SQL Access Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SqlAccessGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SqlAccessGroupId); }
			set { Entity.Attributes[Fields.SqlAccessGroupId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>SQL Access Group Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SqlAccessGroupName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SqlAccessGroupName); }
			set { Entity.Attributes[Fields.SqlAccessGroupName] = value; }
		}

		/// <summary>
		/// <para>Setting for SQM data collection, 0 no, 1 yes enabled</para>
		/// <para>Boolean</para>
		/// <para>Is SQM Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SQMEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SQMEnabled); }
			set { Entity.Attributes[Fields.SQMEnabled] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the support user for the organization.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Support User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportUserId); }
			set { Entity.Attributes[Fields.SupportUserId] = value; }
		}

		/// <summary>
		/// <para>Indicates whether SLA is suppressed.</para>
		/// <para>Boolean</para>
		/// <para>Is SLA suppressed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SuppressSLA
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SuppressSLA); }
			set { Entity.Attributes[Fields.SuppressSLA] = value; }
		}

		/// <summary>
		/// <para>Number of records to update per operation in Sync Bulk Pause/Resume/Cancel</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 1,000</para>
		/// <para>Number of records to update per operation in Sync Bulk Pause/Resume/Cancel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SyncBulkOperationBatchSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SyncBulkOperationBatchSize); }
			set { Entity.Attributes[Fields.SyncBulkOperationBatchSize] = value; }
		}

		/// <summary>
		/// <para>Max total number of records to update in database for Sync Bulk Pause/Resume/Cancel</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 500,000</para>
		/// <para>Max total number of records to update in database for Sync Bulk Pause/Resume/Cancel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SyncBulkOperationMaxLimit
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SyncBulkOperationMaxLimit); }
			set { Entity.Attributes[Fields.SyncBulkOperationMaxLimit] = value; }
		}

		/// <summary>
		/// <para>Indicates the selection to use the dynamics 365 azure sync framework or server side sync.</para>
		/// <para>Boolean</para>
		/// <para>Enable dynamics 365 azure sync framework for this organization.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SyncOptInSelection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SyncOptInSelection); }
			set { Entity.Attributes[Fields.SyncOptInSelection] = value; }
		}

		/// <summary>
		/// <para>Indicates the status of the opt-in or opt-out operation for dynamics 365 azure sync.</para>
		/// <para>Picklist</para>
		/// <para>Status of opt-in or opt-out operation for dynamics 365 azure sync.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.SyncOptInSelectionStatus? SyncOptInSelectionStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SyncOptInSelectionStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.SyncOptInSelectionStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SyncOptInSelectionStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SyncOptInSelectionStatus] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the system user for the organization.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>System User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SystemUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SystemUserId); }
			set { Entity.Attributes[Fields.SystemUserId] = value; }
		}

		/// <summary>
		/// <para>Maximum number of aggressive polling cycles executed for email auto-tagging when a new email is received.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para>Auto-Tag Max Cycles</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TagMaxAggressiveCycles
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TagMaxAggressiveCycles); }
			set { Entity.Attributes[Fields.TagMaxAggressiveCycles] = value; }
		}

		/// <summary>
		/// <para>Normal polling frequency used for email receive auto-tagging in outlook.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Auto-Tag Interval</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TagPollingPeriod
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TagPollingPeriod); }
			set { Entity.Attributes[Fields.TagPollingPeriod] = value; }
		}

		/// <summary>
		/// <para>Select whether to turn on task flows for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Task Flow processes for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TaskBasedFlowEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TaskBasedFlowEnabled); }
			set { Entity.Attributes[Fields.TaskBasedFlowEnabled] = value; }
		}

		/// <summary>
		/// <para>Instrumentation key for Application Insights used to log plugins telemetry.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Telemetry Instrumentation Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TelemetryInstrumentationKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.TelemetryInstrumentationKey); }
			set { Entity.Attributes[Fields.TelemetryInstrumentationKey] = value; }
		}

		/// <summary>
		/// <para>Select whether to turn on text analytics for the organization.</para>
		/// <para>Boolean</para>
		/// <para>Enable Text Analytics for this Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TextAnalyticsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TextAnalyticsEnabled); }
			set { Entity.Attributes[Fields.TextAnalyticsEnabled] = value; }
		}

		/// <summary>
		/// <para>Text for how time is displayed in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>Time Format String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeFormatString
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeFormatString); }
			set { Entity.Attributes[Fields.TimeFormatString] = value; }
		}

		/// <summary>
		/// <para>Text for how the time separator is displayed throughout Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para>Time Separator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSeparator); }
			set { Entity.Attributes[Fields.TimeSeparator] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Duration used for token expiration.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para>Token Expiration Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TokenExpiry
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TokenExpiry); }
			set { Entity.Attributes[Fields.TokenExpiry] = value; }
		}

		/// <summary>
		/// <para>Token key.</para>
		/// <para>String - MaxLength: 90</para>
		/// <para>Token Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TokenKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.TokenKey); }
			set { Entity.Attributes[Fields.TokenKey] = value; }
		}

		/// <summary>
		/// <para>Tracelog record maximum age in days</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Tracelog record maximum age in days</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TraceLogMaximumAgeInDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TraceLogMaximumAgeInDays); }
			set { Entity.Attributes[Fields.TraceLogMaximumAgeInDays] = value; }
		}

		/// <summary>
		/// <para>History list of tracking token prefixes.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Tracking Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TrackingPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.TrackingPrefix); }
			set { Entity.Attributes[Fields.TrackingPrefix] = value; }
		}

		/// <summary>
		/// <para>Base number used to provide separate tracking token identifiers to users belonging to different deployments.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Tracking Token Base</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TrackingTokenIdBase
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TrackingTokenIdBase); }
			set { Entity.Attributes[Fields.TrackingTokenIdBase] = value; }
		}

		/// <summary>
		/// <para>Number of digits used to represent a tracking token identifier.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para>Tracking Token Digits</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TrackingTokenIdDigits
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TrackingTokenIdDigits); }
			set { Entity.Attributes[Fields.TrackingTokenIdDigits] = value; }
		}

		/// <summary>
		/// <para>Number of characters appended to invoice, quote, and order numbers.</para>
		/// <para>Integer - MinValue: 4 - MaxValue: 6</para>
		/// <para>Unique String Length</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UniqueSpecifierLength
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UniqueSpecifierLength); }
			set { Entity.Attributes[Fields.UniqueSpecifierLength] = value; }
		}

		/// <summary>
		/// <para>Indicates whether email address should be unresolved if multiple matches are found</para>
		/// <para>Boolean</para>
		/// <para>Set To,cc,bcc fields as unresolved if multiple matches are found</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UnresolveEmailAddressIfMultipleMatch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UnresolveEmailAddressIfMultipleMatch); }
			set { Entity.Attributes[Fields.UnresolveEmailAddressIfMultipleMatch] = value; }
		}

		/// <summary>
		/// <para>Flag indicates whether to Use Inbuilt Rule For DefaultPricelist.</para>
		/// <para>Boolean</para>
		/// <para>Use Inbuilt Rule For Default Pricelist Selection</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseInbuiltRuleForDefaultPricelistSelection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseInbuiltRuleForDefaultPricelistSelection); }
			set { Entity.Attributes[Fields.UseInbuiltRuleForDefaultPricelistSelection] = value; }
		}

		/// <summary>
		/// <para>Select whether to use legacy form rendering.</para>
		/// <para>Boolean</para>
		/// <para>Legacy Form Rendering</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseLegacyRendering
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseLegacyRendering); }
			set { Entity.Attributes[Fields.UseLegacyRendering] = value; }
		}

		/// <summary>
		/// <para>Use position hierarchy</para>
		/// <para>Boolean</para>
		/// <para>Use position hierarchy</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UsePositionHierarchy
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UsePositionHierarchy); }
			set { Entity.Attributes[Fields.UsePositionHierarchy] = value; }
		}

		/// <summary>
		/// <para>Indicates whether searching in a grid should use the Quick Find view for the entity.</para>
		/// <para>Boolean</para>
		/// <para>Use Quick Find view when searching in grids</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseQuickFindViewForGridSearch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseQuickFindViewForGridSearch); }
			set { Entity.Attributes[Fields.UseQuickFindViewForGridSearch] = value; }
		}

		/// <summary>
		/// <para>The interval at which user access is checked for auditing.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>User Authentication Auditing Interval</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UserAccessAuditingInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UserAccessAuditingInterval); }
			set { Entity.Attributes[Fields.UserAccessAuditingInterval] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the read-optimized form should be enabled for this organization.</para>
		/// <para>Boolean</para>
		/// <para>Use Read-Optimized Form</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseReadForm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseReadForm); }
			set { Entity.Attributes[Fields.UseReadForm] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the default group of users in the organization.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>User Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UserGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UserGroupId); }
			set { Entity.Attributes[Fields.UserGroupId] = value; }
		}

		/// <summary>
		/// <para>Enable the user rating feature to show the NSAT score and comment to maker</para>
		/// <para>Boolean</para>
		/// <para>Enable the user rating feature</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UserRatingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UserRatingEnabled); }
			set { Entity.Attributes[Fields.UserRatingEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates default protocol selected for organization.</para>
		/// <para>Boolean</para>
		/// <para>User Skype Protocol</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseSkypeProtocol
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseSkypeProtocol); }
			set { Entity.Attributes[Fields.UseSkypeProtocol] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Hash of the V3 callout configuration file.</para>
		/// <para>ReadOnly - String - MaxLength: 256</para>
		/// <para>V3 Callout Hash</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string V3CalloutConfigHash
		{
			get { return Entity.GetAttributeValue<string>(Fields.V3CalloutConfigHash); }
		}

		/// <summary>
		/// <para>Version number of the organization.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Hash value of web resources.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Web resource hash</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebResourceHash
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebResourceHash); }
			set { Entity.Attributes[Fields.WebResourceHash] = value; }
		}

		/// <summary>
		/// <para>For Internal use only.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>For Internal use only.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WidgetProperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.WidgetProperties); }
			set { Entity.Attributes[Fields.WidgetProperties] = value; }
		}

		/// <summary>
		/// <para>Denotes the Yammer group ID</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Yammer Group Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? YammerGroupId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.YammerGroupId); }
			set { Entity.Attributes[Fields.YammerGroupId] = value; }
		}

		/// <summary>
		/// <para>Denotes the Yammer network permalink</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Yammer Network Permalink</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YammerNetworkPermalink
		{
			get { return Entity.GetAttributeValue<string>(Fields.YammerNetworkPermalink); }
			set { Entity.Attributes[Fields.YammerNetworkPermalink] = value; }
		}

		/// <summary>
		/// <para>Denotes whether the OAuth access token for Yammer network has expired</para>
		/// <para>Boolean</para>
		/// <para>Yammer OAuth Access Token Expired</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? YammerOAuthAccessTokenExpired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.YammerOAuthAccessTokenExpired); }
			set { Entity.Attributes[Fields.YammerOAuthAccessTokenExpired] = value; }
		}

		/// <summary>
		/// <para>Internal Use Only</para>
		/// <para>Picklist</para>
		/// <para>Internal Use Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.YammerPostMethod? YammerPostMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.YammerPostMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.YammerPostMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.YammerPostMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.YammerPostMethod] = null;
			}
		}

		/// <summary>
		/// <para>Information that specifies how the first week of the year is specified in Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Year Start Week Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? YearStartWeekCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.YearStartWeekCode); }
			set { Entity.Attributes[Fields.YearStartWeekCode] = value; }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
