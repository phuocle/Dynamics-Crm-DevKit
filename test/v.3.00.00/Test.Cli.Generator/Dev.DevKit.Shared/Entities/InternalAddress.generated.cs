//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.InternalAddressOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class InternalAddress : EntityBase
	{
		public struct Fields
		{
			public const string AddressNumber = "addressnumber";
			public const string BusinessUnitId = "businessunitid";
			public const string City = "city";
			public const string Composite = "composite";
			public const string Country = "country";
			public const string County = "county";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Fax = "fax";
			public const string InternalAddressId = "internaladdressid";
			public const string Latitude = "latitude";
			public const string Line1 = "line1";
			public const string Line2 = "line2";
			public const string Line3 = "line3";
			public const string Longitude = "longitude";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string ParentId = "parentid";
			public const string PostalCode = "postalcode";
			public const string PostOfficeBox = "postofficebox";
			public const string StateOrProvince = "stateorprovince";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string UPSZone = "upszone";
			public const string UTCOffset = "utcoffset";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "internaladdress";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1003;

		[DebuggerNonUserCode()]
		public InternalAddress()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public InternalAddress(Guid InternalAddressId)
		{
			Entity = new Entity(EntityLogicalName, InternalAddressId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public InternalAddress(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public InternalAddress(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public InternalAddress(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public InternalAddress(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Information about which internal address is applicable.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Address Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AddressNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AddressNumber); }
			set { Entity.Attributes[Fields.AddressNumber] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BusinessUnitId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BusinessUnitId); }
		}

		/// <summary>
		/// <para>City name in the internal address.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string City
		{
			get { return Entity.GetAttributeValue<string>(Fields.City); }
			set { Entity.Attributes[Fields.City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Composite); }
		}

		/// <summary>
		/// <para>Country/region name in the internal address.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Country); }
			set { Entity.Attributes[Fields.Country] = value; }
		}

		/// <summary>
		/// <para>County name in the internal address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>County</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string County
		{
			get { return Entity.GetAttributeValue<string>(Fields.County); }
			set { Entity.Attributes[Fields.County] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the internal address record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the internal address was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the internal address.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Fax number for the internal address.</para>
		/// <para>String - MaxLength: 64</para>
		/// <para>Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the internal address.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Internal Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid InternalAddressId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.InternalAddressId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Latitude for the internal address.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Latitude); }
			set { Entity.Attributes[Fields.Latitude] = value; }
		}

		/// <summary>
		/// <para>First line for entering address information.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line1); }
			set { Entity.Attributes[Fields.Line1] = value; }
		}

		/// <summary>
		/// <para>Second line for entering address information.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line2); }
			set { Entity.Attributes[Fields.Line2] = value; }
		}

		/// <summary>
		/// <para>Third line for entering address information.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line3); }
			set { Entity.Attributes[Fields.Line3] = value; }
		}

		/// <summary>
		/// <para>Longitude for the internal address.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Longitude); }
			set { Entity.Attributes[Fields.Longitude] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the internal address.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the internal address record was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the internaladdress.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name used to identify the internal address.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Address Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Unique identifier of the parent object with which the internal address is associated.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Parent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ParentId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ParentId); }
			set { Entity.Attributes[Fields.ParentId] = value; }
		}

		/// <summary>
		/// <para>ZIP Code or postal code in the internal address.</para>
		/// <para>String - MaxLength: 40</para>
		/// <para>ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostalCode); }
			set { Entity.Attributes[Fields.PostalCode] = value; }
		}

		/// <summary>
		/// <para>Post office box number in the internal address.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Post Office Box</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostOfficeBox); }
			set { Entity.Attributes[Fields.PostOfficeBox] = value; }
		}

		/// <summary>
		/// <para>State or province in the internal address.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.StateOrProvince); }
			set { Entity.Attributes[Fields.StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>First telephone number for the internal address.</para>
		/// <para>String - MaxLength: 64</para>
		/// <para>Main Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}

		/// <summary>
		/// <para>Second telephone number for an internal address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Phone 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}

		/// <summary>
		/// <para>Third telephone number for an internal address.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Phone 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}

		/// <summary>
		/// <para>United Parcel Service (UPS) zone for the internal address.</para>
		/// <para>String - MaxLength: 4</para>
		/// <para>UPS Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.UPSZone); }
			set { Entity.Attributes[Fields.UPSZone] = value; }
		}

		/// <summary>
		/// <para>UTC offset for the internal address. The difference between local time and standard Coordinated Universal Time.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCOffset); }
			set { Entity.Attributes[Fields.UTCOffset] = value; }
		}

		/// <summary>
		/// <para>Version number of the internal address.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
