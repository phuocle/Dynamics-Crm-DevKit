//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ContractOptionSets
{
	public enum AllotmentTypeCode
	{
		/// <summary>
		/// Coverage Dates = 3
		/// </summary>
		Coverage_Dates = 3,
		/// <summary>
		/// Number of Cases = 1
		/// </summary>
		Number_of_Cases = 1,
		/// <summary>
		/// Time = 2
		/// </summary>
		Time = 2
	}

	public enum BillingFrequencyCode
	{
		/// <summary>
		/// Annually = 5
		/// </summary>
		Annually = 5,
		/// <summary>
		/// Bimonthly = 2
		/// </summary>
		Bimonthly = 2,
		/// <summary>
		/// Monthly = 1
		/// </summary>
		Monthly = 1,
		/// <summary>
		/// Quarterly = 3
		/// </summary>
		Quarterly = 3,
		/// <summary>
		/// Semiannually = 4
		/// </summary>
		Semiannually = 4
	}

	public enum ContractServiceLevelCode
	{
		/// <summary>
		/// Bronze = 3
		/// </summary>
		Bronze = 3,
		/// <summary>
		/// Gold = 1
		/// </summary>
		Gold = 1,
		/// <summary>
		/// Silver = 2
		/// </summary>
		Silver = 2
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 2
		/// </summary>
		Active = 2,
		/// <summary>
		/// Canceled = 4
		/// </summary>
		Canceled = 4,
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0,
		/// <summary>
		/// Expired = 5
		/// </summary>
		Expired = 5,
		/// <summary>
		/// Invoiced = 1
		/// </summary>
		Invoiced = 1,
		/// <summary>
		/// On Hold = 3
		/// </summary>
		On_Hold = 3
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 3
		/// </summary>
		Active = 3,
		/// <summary>
		/// Canceled = 5
		/// </summary>
		Canceled = 5,
		/// <summary>
		/// Draft = 1
		/// </summary>
		Draft = 1,
		/// <summary>
		/// Expired = 6
		/// </summary>
		Expired = 6,
		/// <summary>
		/// Invoiced = 2
		/// </summary>
		Invoiced = 2,
		/// <summary>
		/// On Hold = 4
		/// </summary>
		On_Hold = 4
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Contract : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string ActiveOn = "activeon";
			public const string AllotmentTypeCode = "allotmenttypecode";
			public const string BillingAccountId = "billingaccountid";
			public const string BillingContactId = "billingcontactid";
			public const string BillingCustomerId = "billingcustomerid";
			public const string BillingEndOn = "billingendon";
			public const string BillingFrequencyCode = "billingfrequencycode";
			public const string BillingStartOn = "billingstarton";
			public const string BillToAddress = "billtoaddress";
			public const string CancelOn = "cancelon";
			public const string ContactId = "contactid";
			public const string ContractId = "contractid";
			public const string ContractLanguage = "contractlanguage";
			public const string ContractNumber = "contractnumber";
			public const string ContractServiceLevelCode = "contractservicelevelcode";
			public const string ContractTemplateAbbreviation = "contracttemplateabbreviation";
			public const string ContractTemplateId = "contracttemplateid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string Duration = "duration";
			public const string EffectivityCalendar = "effectivitycalendar";
			public const string EmailAddress = "emailaddress";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ExpiresOn = "expireson";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string NetPrice = "netprice";
			public const string NetPrice_Base = "netprice_base";
			public const string OriginatingContract = "originatingcontract";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ServiceAddress = "serviceaddress";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TotalDiscount = "totaldiscount";
			public const string TotalDiscount_Base = "totaldiscount_base";
			public const string TotalPrice = "totalprice";
			public const string TotalPrice_Base = "totalprice_base";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UseDiscountAsPercentage = "usediscountaspercentage";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "contract";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1010;

		[DebuggerNonUserCode()]
		public Contract()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Contract(Guid ContractId)
		{
			Entity = new Entity(EntityLogicalName, ContractId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Contract(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Contract(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Contract(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Contract(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the account with which the contract is associated.</para>
		/// <para>ReadOnly - Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}

		/// <summary>
		/// <para>Enter the date when the contract becomes active.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Contract Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActiveOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActiveOn); }
			set { Entity.Attributes[Fields.ActiveOn] = value; }
		}

		/// <summary>
		/// <para>Type of allotment that the contract supports.</para>
		/// <para>Picklist</para>
		/// <para>Allotment Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.AllotmentTypeCode? AllotmentTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AllotmentTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.AllotmentTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AllotmentTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AllotmentTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the account to which the contract is to be billed.</para>
		/// <para>ReadOnly - Lookup to account</para>
		/// <para>Billing Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BillingAccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BillingAccountId); }
		}

		/// <summary>
		/// <para>Unique identifier of the contact to whom the contract is to be billed.</para>
		/// <para>ReadOnly - Lookup to contact</para>
		/// <para>Billing Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BillingContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BillingContactId); }
		}

		/// <summary>
		/// <para>Select the customer account or contact to which the contract should be billed to provide a quick link to address and other customer details.</para>
		/// <para>Lookup to account, contact</para>
		/// <para>Bill To Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BillingCustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BillingCustomerId); }
			set { Entity.Attributes[Fields.BillingCustomerId] = value; }
		}

		/// <summary>
		/// <para>Enter the end date for the contract&apos;s billing period to indicate the period for which the customer must pay for a service.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Billing End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? BillingEndOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.BillingEndOn); }
			set { Entity.Attributes[Fields.BillingEndOn] = value; }
		}

		/// <summary>
		/// <para>Select the billing schedule of the contract to indicate how often the customer should be invoiced.</para>
		/// <para>Picklist</para>
		/// <para>Billing Frequency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.BillingFrequencyCode? BillingFrequencyCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BillingFrequencyCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.BillingFrequencyCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BillingFrequencyCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BillingFrequencyCode] = null;
			}
		}

		/// <summary>
		/// <para>Enter the start date for the contract&apos;s billing period to indicate the period for which the customer must pay for a service. This defaults to the same date that is selected in the Contract Start Date field.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Billing Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? BillingStartOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.BillingStartOn); }
			set { Entity.Attributes[Fields.BillingStartOn] = value; }
		}

		/// <summary>
		/// <para>Choose which address to send the invoice to.</para>
		/// <para>Lookup to customeraddress</para>
		/// <para>Bill To Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BillToAddress
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BillToAddress); }
			set { Entity.Attributes[Fields.BillToAddress] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time when the contract was canceled.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Cancellation Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CancelOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CancelOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the contact specified for the contract.</para>
		/// <para>ReadOnly - Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}

		/// <summary>
		/// <para>Unique identifier of the contract.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ContractId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ContractId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Type additional information about the contract, such as the products or services provided to the customer.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContractLanguage
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContractLanguage); }
			set { Entity.Attributes[Fields.ContractLanguage] = value; }
		}

		/// <summary>
		/// <para>Shows the number for the contract for customer reference and searching capabilities. You cannot modify this number.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Contract ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContractNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContractNumber); }
			set { Entity.Attributes[Fields.ContractNumber] = value; }
		}

		/// <summary>
		/// <para>Select the level of service that should be provided for the contract based on your company&apos;s definition of bronze, silver, or gold.</para>
		/// <para>Picklist</para>
		/// <para>Service Level</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.ContractServiceLevelCode? ContractServiceLevelCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ContractServiceLevelCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.ContractServiceLevelCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ContractServiceLevelCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ContractServiceLevelCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the abbreviation of the contract template selected when the contract is created.</para>
		/// <para>ReadOnly - String - MaxLength: 20</para>
		/// <para>Template Abbreviation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContractTemplateAbbreviation
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContractTemplateAbbreviation); }
		}

		/// <summary>
		/// <para>Choose the contract template that should be used to determine the terms of the contract, such as allotment type, available hours, and billing frequency.</para>
		/// <para>Lookup to contracttemplate</para>
		/// <para>Contract Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContractTemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContractTemplateId); }
			set { Entity.Attributes[Fields.ContractTemplateId] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the customer account or contact to provide a quick link to additional customer details, such as address, phone number, activities, and orders.</para>
		/// <para>Lookup to account, contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}

		/// <summary>
		/// <para>Shows for the duration of the contract, in days, based on the contract start and end dates.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
		}

		/// <summary>
		/// <para>Days of the week and times during which customer service support is available for the duration of the contract.</para>
		/// <para>String - MaxLength: 168</para>
		/// <para>Support Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EffectivityCalendar
		{
			get { return Entity.GetAttributeValue<string>(Fields.EffectivityCalendar); }
			set { Entity.Attributes[Fields.EffectivityCalendar] = value; }
		}

		/// <summary>
		/// <para>The primary email address for the entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Enter the date when the contract expires.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Contract End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExpiresOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExpiresOn); }
			set { Entity.Attributes[Fields.ExpiresOn] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the total charge to the customer for the service contract, calculated as the sum of values in the Net field for each existing contract line related to the contract.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Net Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? NetPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.NetPrice);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Net Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Net Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? NetPrice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.NetPrice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Choose the original contract that this contract was created from. This information is used to track renewal history.</para>
		/// <para>Lookup to contract</para>
		/// <para>Originating Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OriginatingContract
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OriginatingContract); }
			set { Entity.Attributes[Fields.OriginatingContract] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose the address for the customer account or contact where the services are provided.</para>
		/// <para>Lookup to customeraddress</para>
		/// <para>Contract Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceAddress
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceAddress); }
			set { Entity.Attributes[Fields.ServiceAddress] = value; }
		}

		/// <summary>
		/// <para>Shows whether the contract is in draft, invoiced, active, on hold, canceled, or expired. You can edit only the contracts that are in draft status.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the contract&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Type a title or name for the contract that indicates the purpose of the contract.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Contract Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Shows the total discount applied to the contract&apos;s service charges, calculated as the sum of values in the Discount fields for each existing contract line related to the contract.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Total Discount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscount);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Total Discount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Discount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total service charge for the contract, before any discounts are credited. This is calculated as the sum of values in the Total Price field for each existing contract line related to the contract.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Total Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalPrice);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Total Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalPrice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalPrice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Select whether the discounts entered on contract lines for this contract should be entered as a percentage or a fixed dollar value.</para>
		/// <para>Boolean</para>
		/// <para>Discount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseDiscountAsPercentage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseDiscountAsPercentage); }
			set { Entity.Attributes[Fields.UseDiscountAsPercentage] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
