//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.CalendarRuleOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CalendarRule : EntityBase
	{
		public struct Fields
		{
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarId = "calendarid";
			public const string CalendarRuleId = "calendarruleid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string EffectiveIntervalEnd = "effectiveintervalend";
			public const string EffectiveIntervalStart = "effectiveintervalstart";
			public const string Effort = "effort";
			public const string EndTime = "endtime";
			public const string ExtentCode = "extentcode";
			public const string GroupDesignator = "groupdesignator";
			public const string InnerCalendarId = "innercalendarid";
			public const string IsModified = "ismodified";
			public const string IsSelected = "isselected";
			public const string IsSimple = "issimple";
			public const string IsVaried = "isvaried";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string Offset = "offset";
			public const string OrganizationId = "organizationid";
			public const string Pattern = "pattern";
			public const string Rank = "rank";
			public const string ServiceId = "serviceid";
			public const string StartTime = "starttime";
			public const string SubCode = "subcode";
			public const string TimeCode = "timecode";
			public const string TimeZoneCode = "timezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "calendarrule";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4004;

		[DebuggerNonUserCode()]
		public CalendarRule()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CalendarRule(Guid CalendarRuleId)
		{
			Entity = new Entity(EntityLogicalName, CalendarRuleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CalendarRule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CalendarRule(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CalendarRule(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public CalendarRule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the business unit with which the calendar rule is associated.</para>
		/// <para>ReadOnly - Required - Uniqueidentifier</para>
		/// <para>Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BusinessUnitId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BusinessUnitId); }
		}

		/// <summary>
		/// <para>Unique identifier of the calendar with which the calendar rule is associated.</para>
		/// <para>Lookup to calendar</para>
		/// <para>Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the calendar rule.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Calendar Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CalendarRuleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CalendarRuleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the calendar rule.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the calendar rule was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the calendarrule.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Defines free/busy times for a service and for resources or resource groups, such as working, non-working, vacation, and blocked.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Duration of the calendar rule in minutes.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}

		/// <summary>
		/// <para>Effective interval end of the calendar rule.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Effective Interval End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveIntervalEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveIntervalEnd); }
			set { Entity.Attributes[Fields.EffectiveIntervalEnd] = value; }
		}

		/// <summary>
		/// <para>Effective interval start of the calendar rule.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Effective Interval Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveIntervalStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveIntervalStart); }
			set { Entity.Attributes[Fields.EffectiveIntervalStart] = value; }
		}

		/// <summary>
		/// <para>Effort available for a resource during the time described by the calendar rule.</para>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Effort</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Effort
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Effort); }
			set { Entity.Attributes[Fields.Effort] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>End</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}

		/// <summary>
		/// <para>Extent of the calendar rule.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Extent Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExtentCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExtentCode); }
			set { Entity.Attributes[Fields.ExtentCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the group.</para>
		/// <para>String - MaxLength: 36</para>
		/// <para>Group Designator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupDesignator
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupDesignator); }
			set { Entity.Attributes[Fields.GroupDesignator] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the inner calendar for non-leaf calendar rules.</para>
		/// <para>Lookup to calendar</para>
		/// <para>Inner Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference InnerCalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.InnerCalendarId); }
			set { Entity.Attributes[Fields.InnerCalendarId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Boolean</para>
		/// <para>Is Modified</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsModified
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsModified); }
			set { Entity.Attributes[Fields.IsModified] = value; }
		}

		/// <summary>
		/// <para>Flag used in vary-by-day calendar rules.</para>
		/// <para>Boolean</para>
		/// <para>Is Selected</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSelected
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSelected); }
			set { Entity.Attributes[Fields.IsSelected] = value; }
		}

		/// <summary>
		/// <para>Flag used in vary-by-day calendar rules.</para>
		/// <para>Boolean</para>
		/// <para>Is Simple</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSimple
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSimple); }
			set { Entity.Attributes[Fields.IsSimple] = value; }
		}

		/// <summary>
		/// <para>Flag used in leaf nonrecurring rules.</para>
		/// <para>Boolean</para>
		/// <para>Is Varied</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsVaried
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsVaried); }
			set { Entity.Attributes[Fields.IsVaried] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the calendar rule.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the calendar rule was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the calendarrule.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the calendar rule.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Start offset for leaf nonrecurring rules.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Offset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Offset); }
			set { Entity.Attributes[Fields.Offset] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization with which the calendar rule is associated.</para>
		/// <para>ReadOnly - Required - Uniqueidentifier</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Pattern of the rule recurrence.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Recurrence Pattern</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Pattern
		{
			get { return Entity.GetAttributeValue<string>(Fields.Pattern); }
			set { Entity.Attributes[Fields.Pattern] = value; }
		}

		/// <summary>
		/// <para>Rank of the calendar rule.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Rank</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rank
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rank); }
			set { Entity.Attributes[Fields.Rank] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the service with which the calendar rule is associated.</para>
		/// <para>Lookup to service</para>
		/// <para>Service</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceId); }
			set { Entity.Attributes[Fields.ServiceId] = value; }
		}

		/// <summary>
		/// <para>Start time for the rule.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}

		/// <summary>
		/// <para>Sub-type of calendar rule.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Sub Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SubCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SubCode); }
			set { Entity.Attributes[Fields.SubCode] = value; }
		}

		/// <summary>
		/// <para>Type of calendar rule such as working hours, break, holiday, or time off.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeCode); }
			set { Entity.Attributes[Fields.TimeCode] = value; }
		}

		/// <summary>
		/// <para>Local time zone for the calendar rule.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneCode); }
			set { Entity.Attributes[Fields.TimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
