//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.OpportunityOptionSets
{
	public enum BudgetStatus
	{
		/// <summary>
		/// Can Buy = 2
		/// </summary>
		Can_Buy = 2,
		/// <summary>
		/// May Buy = 1
		/// </summary>
		May_Buy = 1,
		/// <summary>
		/// No Committed Budget = 0
		/// </summary>
		No_Committed_Budget = 0,
		/// <summary>
		/// Will Buy = 3
		/// </summary>
		Will_Buy = 3
	}

	public enum InitialCommunication
	{
		/// <summary>
		/// Contacted = 0
		/// </summary>
		Contacted = 0,
		/// <summary>
		/// Not Contacted = 1
		/// </summary>
		Not_Contacted = 1
	}

	public enum msdyn_forecastcategory
	{
		/// <summary>
		/// Best case = 100000002
		/// </summary>
		Best_case = 100000002,
		/// <summary>
		/// Committed = 100000003
		/// </summary>
		Committed = 100000003,
		/// <summary>
		/// Lost = 100000006
		/// </summary>
		Lost = 100000006,
		/// <summary>
		/// Omitted = 100000004
		/// </summary>
		Omitted = 100000004,
		/// <summary>
		/// Pipeline = 100000001
		/// </summary>
		Pipeline = 100000001,
		/// <summary>
		/// Won = 100000005
		/// </summary>
		Won = 100000005
	}

	public enum msdyn_OpportunityGrade
	{
		/// <summary>
		/// Grade A = 0
		/// </summary>
		Grade_A = 0,
		/// <summary>
		/// Grade B = 1
		/// </summary>
		Grade_B = 1,
		/// <summary>
		/// Grade C = 2
		/// </summary>
		Grade_C = 2,
		/// <summary>
		/// Grade D = 3
		/// </summary>
		Grade_D = 3
	}

	public enum msdyn_OpportunityScoreTrend
	{
		/// <summary>
		/// Declining = 2
		/// </summary>
		Declining = 2,
		/// <summary>
		/// Improving = 0
		/// </summary>
		Improving = 0,
		/// <summary>
		/// Not enough info = 3
		/// </summary>
		Not_enough_info = 3,
		/// <summary>
		/// Steady = 1
		/// </summary>
		Steady = 1
	}

	public enum msdyn_OrderType
	{
		/// <summary>
		/// Item based = 192350000
		/// </summary>
		Item_based = 192350000,
		/// <summary>
		/// Service-Maintenance Based = 690970002
		/// </summary>
		Service_Maintenance_Based = 690970002,
		/// <summary>
		/// Work based = 192350001
		/// </summary>
		Work_based = 192350001
	}

	public enum Need
	{
		/// <summary>
		/// Good to have = 2
		/// </summary>
		Good_to_have = 2,
		/// <summary>
		/// Must have = 0
		/// </summary>
		Must_have = 0,
		/// <summary>
		/// No need = 3
		/// </summary>
		No_need = 3,
		/// <summary>
		/// Should have = 1
		/// </summary>
		Should_have = 1
	}

	public enum OpportunityRatingCode
	{
		/// <summary>
		/// Cold = 3
		/// </summary>
		Cold = 3,
		/// <summary>
		/// Hot = 1
		/// </summary>
		Hot = 1,
		/// <summary>
		/// Warm = 2
		/// </summary>
		Warm = 2
	}

	public enum PricingErrorCode
	{
		/// <summary>
		/// Base Currency Attribute Overflow = 36
		/// </summary>
		Base_Currency_Attribute_Overflow = 36,
		/// <summary>
		/// Base Currency Attribute Underflow = 37
		/// </summary>
		Base_Currency_Attribute_Underflow = 37,
		/// <summary>
		/// Detail Error = 1
		/// </summary>
		Detail_Error = 1,
		/// <summary>
		/// Discount Type Invalid State = 27
		/// </summary>
		Discount_Type_Invalid_State = 27,
		/// <summary>
		/// Inactive Discount Type = 33
		/// </summary>
		Inactive_Discount_Type = 33,
		/// <summary>
		/// Inactive Price Level = 3
		/// </summary>
		Inactive_Price_Level = 3,
		/// <summary>
		/// Invalid Current Cost = 20
		/// </summary>
		Invalid_Current_Cost = 20,
		/// <summary>
		/// Invalid Discount = 28
		/// </summary>
		Invalid_Discount = 28,
		/// <summary>
		/// Invalid Discount Type = 26
		/// </summary>
		Invalid_Discount_Type = 26,
		/// <summary>
		/// Invalid Price = 19
		/// </summary>
		Invalid_Price = 19,
		/// <summary>
		/// Invalid Price Level Amount = 17
		/// </summary>
		Invalid_Price_Level_Amount = 17,
		/// <summary>
		/// Invalid Price Level Currency = 34
		/// </summary>
		Invalid_Price_Level_Currency = 34,
		/// <summary>
		/// Invalid Price Level Percentage = 18
		/// </summary>
		Invalid_Price_Level_Percentage = 18,
		/// <summary>
		/// Invalid Pricing Code = 9
		/// </summary>
		Invalid_Pricing_Code = 9,
		/// <summary>
		/// Invalid Pricing Precision = 30
		/// </summary>
		Invalid_Pricing_Precision = 30,
		/// <summary>
		/// Invalid Product = 7
		/// </summary>
		Invalid_Product = 7,
		/// <summary>
		/// Invalid Quantity = 29
		/// </summary>
		Invalid_Quantity = 29,
		/// <summary>
		/// Invalid Rounding Amount = 24
		/// </summary>
		Invalid_Rounding_Amount = 24,
		/// <summary>
		/// Invalid Rounding Option = 23
		/// </summary>
		Invalid_Rounding_Option = 23,
		/// <summary>
		/// Invalid Rounding Policy = 22
		/// </summary>
		Invalid_Rounding_Policy = 22,
		/// <summary>
		/// Invalid Standard Cost = 21
		/// </summary>
		Invalid_Standard_Cost = 21,
		/// <summary>
		/// Missing Current Cost = 15
		/// </summary>
		Missing_Current_Cost = 15,
		/// <summary>
		/// Missing Price = 14
		/// </summary>
		Missing_Price = 14,
		/// <summary>
		/// Missing Price Level = 2
		/// </summary>
		Missing_Price_Level = 2,
		/// <summary>
		/// Missing Price Level Amount = 12
		/// </summary>
		Missing_Price_Level_Amount = 12,
		/// <summary>
		/// Missing Price Level Percentage = 13
		/// </summary>
		Missing_Price_Level_Percentage = 13,
		/// <summary>
		/// Missing Pricing Code = 8
		/// </summary>
		Missing_Pricing_Code = 8,
		/// <summary>
		/// Missing Product = 6
		/// </summary>
		Missing_Product = 6,
		/// <summary>
		/// Missing Product Default UOM = 31
		/// </summary>
		Missing_Product_Default_UOM = 31,
		/// <summary>
		/// Missing Product UOM Schedule  = 32
		/// </summary>
		Missing_Product_UOM_Schedule = 32,
		/// <summary>
		/// Missing Quantity = 4
		/// </summary>
		Missing_Quantity = 4,
		/// <summary>
		/// Missing Standard Cost = 16
		/// </summary>
		Missing_Standard_Cost = 16,
		/// <summary>
		/// Missing Unit Price = 5
		/// </summary>
		Missing_Unit_Price = 5,
		/// <summary>
		/// Missing UOM = 10
		/// </summary>
		Missing_UOM = 10,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Price Attribute Out Of Range = 35
		/// </summary>
		Price_Attribute_Out_Of_Range = 35,
		/// <summary>
		/// Price Calculation Error = 25
		/// </summary>
		Price_Calculation_Error = 25,
		/// <summary>
		/// Product Not In Price Level = 11
		/// </summary>
		Product_Not_In_Price_Level = 11,
		/// <summary>
		/// Transaction currency is not set for the product price list item = 38
		/// </summary>
		Transaction_currency_is_not_set_for_the_product_price_list_item = 38
	}

	public enum PriorityCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum PurchaseProcess
	{
		/// <summary>
		/// Committee = 1
		/// </summary>
		Committee = 1,
		/// <summary>
		/// Individual = 0
		/// </summary>
		Individual = 0,
		/// <summary>
		/// Unknown = 2
		/// </summary>
		Unknown = 2
	}

	public enum PurchaseTimeframe
	{
		/// <summary>
		/// Immediate = 0
		/// </summary>
		Immediate = 0,
		/// <summary>
		/// Next Quarter = 2
		/// </summary>
		Next_Quarter = 2,
		/// <summary>
		/// This Quarter = 1
		/// </summary>
		This_Quarter = 1,
		/// <summary>
		/// This Year = 3
		/// </summary>
		This_Year = 3,
		/// <summary>
		/// Unknown = 4
		/// </summary>
		Unknown = 4
	}

	public enum SalesStage
	{
		/// <summary>
		/// Close = 3
		/// </summary>
		Close = 3,
		/// <summary>
		/// Develop = 1
		/// </summary>
		Develop = 1,
		/// <summary>
		/// Propose = 2
		/// </summary>
		Propose = 2,
		/// <summary>
		/// Qualify = 0
		/// </summary>
		Qualify = 0
	}

	public enum SalesStageCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum SkipPriceCalculation
	{
		/// <summary>
		/// DoPriceCalcAlways = 0
		/// </summary>
		DoPriceCalcAlways = 0,
		/// <summary>
		/// SkipPriceCalcOnRetrieve = 1
		/// </summary>
		SkipPriceCalcOnRetrieve = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Lost = 2
		/// </summary>
		Lost = 2,
		/// <summary>
		/// Open = 0
		/// </summary>
		Open = 0,
		/// <summary>
		/// Won = 1
		/// </summary>
		Won = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Canceled = 4
		/// </summary>
		Canceled = 4,
		/// <summary>
		/// In Progress = 1
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// On Hold = 2
		/// </summary>
		On_Hold = 2,
		/// <summary>
		/// Out-Sold = 5
		/// </summary>
		Out_Sold = 5,
		/// <summary>
		/// Won = 3
		/// </summary>
		Won = 3
	}

	public enum TimeLine
	{
		/// <summary>
		/// Immediate = 0
		/// </summary>
		Immediate = 0,
		/// <summary>
		/// Next Quarter = 2
		/// </summary>
		Next_Quarter = 2,
		/// <summary>
		/// Not known = 4
		/// </summary>
		Not_known = 4,
		/// <summary>
		/// This Quarter = 1
		/// </summary>
		This_Quarter = 1,
		/// <summary>
		/// This Year = 3
		/// </summary>
		This_Year = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Opportunity : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string ActualCloseDate = "actualclosedate";
			public const string ActualValue = "actualvalue";
			public const string ActualValue_Base = "actualvalue_base";
			public const string BudgetAmount = "budgetamount";
			public const string BudgetAmount_Base = "budgetamount_base";
			public const string BudgetStatus = "budgetstatus";
			public const string CampaignId = "campaignid";
			public const string CaptureProposalFeedback = "captureproposalfeedback";
			public const string CloseProbability = "closeprobability";
			public const string CompleteFinalProposal = "completefinalproposal";
			public const string CompleteInternalReview = "completeinternalreview";
			public const string ConfirmInterest = "confirminterest";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CurrentSituation = "currentsituation";
			public const string CustomerId = "customerid";
			public const string CustomerNeed = "customerneed";
			public const string CustomerPainPoints = "customerpainpoints";
			public const string DecisionMaker = "decisionmaker";
			public const string Description = "description";
			public const string DevelopProposal = "developproposal";
			public const string DiscountAmount = "discountamount";
			public const string DiscountAmount_Base = "discountamount_base";
			public const string DiscountPercentage = "discountpercentage";
			public const string EmailAddress = "emailaddress";
			public const string EstimatedCloseDate = "estimatedclosedate";
			public const string EstimatedValue = "estimatedvalue";
			public const string EstimatedValue_Base = "estimatedvalue_base";
			public const string EvaluateFit = "evaluatefit";
			public const string ExchangeRate = "exchangerate";
			public const string FileDebrief = "filedebrief";
			public const string FinalDecisionDate = "finaldecisiondate";
			public const string FreightAmount = "freightamount";
			public const string FreightAmount_Base = "freightamount_base";
			public const string IdentifyCompetitors = "identifycompetitors";
			public const string IdentifyCustomerContacts = "identifycustomercontacts";
			public const string IdentifyPursuitTeam = "identifypursuitteam";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InitialCommunication = "initialcommunication";
			public const string int_Forecast = "int_forecast";
			public const string int_forecast_Base = "int_forecast_base";
			public const string IsPrivate = "isprivate";
			public const string IsRevenueSystemCalculated = "isrevenuesystemcalculated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AccountManagerId = "msdyn_accountmanagerid";
			public const string msdyn_ContractOrganizationalUnitId = "msdyn_contractorganizationalunitid";
			public const string msdyn_forecastcategory = "msdyn_forecastcategory";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_OpportunityGrade = "msdyn_opportunitygrade";
			public const string msdyn_OpportunityScore = "msdyn_opportunityscore";
			public const string msdyn_OpportunityScoreTrend = "msdyn_opportunityscoretrend";
			public const string msdyn_OrderType = "msdyn_ordertype";
			public const string msdyn_PredictiveScoreId = "msdyn_predictivescoreid";
			public const string msdyn_ScoreHistory = "msdyn_scorehistory";
			public const string msdyn_ScoreReasons = "msdyn_scorereasons";
			public const string msdyn_segmentid = "msdyn_segmentid";
			public const string msdyn_WorkOrderType = "msdyn_workordertype";
			public const string Name = "name";
			public const string Need = "need";
			public const string OnHoldTime = "onholdtime";
			public const string OpportunityId = "opportunityid";
			public const string OpportunityRatingCode = "opportunityratingcode";
			public const string OriginatingLeadId = "originatingleadid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentAccountId = "parentaccountid";
			public const string ParentContactId = "parentcontactid";
			public const string ParticipatesInWorkflow = "participatesinworkflow";
			public const string PresentFinalProposal = "presentfinalproposal";
			public const string PresentProposal = "presentproposal";
			public const string PriceLevelId = "pricelevelid";
			public const string PricingErrorCode = "pricingerrorcode";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string ProposedSolution = "proposedsolution";
			public const string PurchaseProcess = "purchaseprocess";
			public const string PurchaseTimeframe = "purchasetimeframe";
			public const string PursuitDecision = "pursuitdecision";
			public const string QualificationComments = "qualificationcomments";
			public const string QuoteComments = "quotecomments";
			public const string ResolveFeedback = "resolvefeedback";
			public const string SalesStage = "salesstage";
			public const string SalesStageCode = "salesstagecode";
			public const string ScheduleFollowup_Prospect = "schedulefollowup_prospect";
			public const string ScheduleFollowup_Qualify = "schedulefollowup_qualify";
			public const string ScheduleProposalMeeting = "scheduleproposalmeeting";
			public const string SendThankYouNote = "sendthankyounote";
			public const string SkipPriceCalculation = "skippricecalculation";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StepId = "stepid";
			public const string StepName = "stepname";
			public const string TeamsFollowed = "teamsfollowed";
			public const string TimeLine = "timeline";
			public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalAmount = "totalamount";
			public const string TotalAmount_Base = "totalamount_base";
			public const string TotalAmountLessFreight = "totalamountlessfreight";
			public const string TotalAmountLessFreight_Base = "totalamountlessfreight_base";
			public const string TotalDiscountAmount = "totaldiscountamount";
			public const string TotalDiscountAmount_Base = "totaldiscountamount_base";
			public const string TotalLineItemAmount = "totallineitemamount";
			public const string TotalLineItemAmount_Base = "totallineitemamount_base";
			public const string TotalLineItemDiscountAmount = "totallineitemdiscountamount";
			public const string TotalLineItemDiscountAmount_Base = "totallineitemdiscountamount_base";
			public const string TotalTax = "totaltax";
			public const string TotalTax_Base = "totaltax_base";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "opportunity";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 3;

		[DebuggerNonUserCode()]
		public Opportunity()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Opportunity(Guid OpportunityId)
		{
			Entity = new Entity(EntityLogicalName, OpportunityId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Opportunity(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Opportunity(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Opportunity(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Opportunity(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the account with which the opportunity is associated.</para>
		/// <para>ReadOnly - Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}

		/// <summary>
		/// <para>Shows the date and time when the opportunity was closed or canceled.</para>
		/// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Actual Close Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? ActualCloseDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.ActualCloseDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.ActualCloseDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.ActualCloseDate] = null;
			}
		}

		/// <summary>
		/// <para>Type the actual revenue amount for the opportunity for reporting and analysis of estimated versus actual sales. Field defaults to the Est. Revenue value when an opportunity is won.</para>
		/// <para>Money - MinValue: -1,000,000,000,000 - MaxValue: 1,000,000,000,000</para>
		/// <para>Actual Revenue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualValue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualValue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ActualValue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ActualValue] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Actual Revenue in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Actual Revenue (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualValue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualValue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Type a value between 0 and 1,000,000,000,000 to indicate the lead&apos;s potential available budget.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Budget Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.BudgetAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Budget Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Budget Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select the likely budget status for the lead&apos;s company. This may help determine the lead rating or your sales approach.</para>
		/// <para>Picklist</para>
		/// <para>Budget</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.BudgetStatus? BudgetStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BudgetStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.BudgetStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BudgetStatus] = null;
			}
		}

		/// <summary>
		/// <para>Shows the campaign that the opportunity was created from. The ID is used for tracking the success of the campaign.</para>
		/// <para>Lookup to campaign</para>
		/// <para>Source Campaign</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CampaignId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CampaignId); }
			set { Entity.Attributes[Fields.CampaignId] = value; }
		}

		/// <summary>
		/// <para>Choose whether the proposal feedback has been captured for the opportunity.</para>
		/// <para>Boolean</para>
		/// <para>Proposal Feedback Captured</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CaptureProposalFeedback
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CaptureProposalFeedback); }
			set { Entity.Attributes[Fields.CaptureProposalFeedback] = value; }
		}

		/// <summary>
		/// <para>Type a number from 0 to 100 that represents the likelihood of closing the opportunity. This can aid the sales team in their efforts to convert the opportunity in a sale.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 100</para>
		/// <para>Probability</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CloseProbability
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CloseProbability); }
			set { Entity.Attributes[Fields.CloseProbability] = value; }
		}

		/// <summary>
		/// <para>Select whether a final proposal has been completed for the opportunity.</para>
		/// <para>Boolean</para>
		/// <para>Final Proposal Ready</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CompleteFinalProposal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CompleteFinalProposal); }
			set { Entity.Attributes[Fields.CompleteFinalProposal] = value; }
		}

		/// <summary>
		/// <para>Select whether an internal review has been completed for this opportunity.</para>
		/// <para>Boolean</para>
		/// <para>Complete Internal Review</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CompleteInternalReview
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CompleteInternalReview); }
			set { Entity.Attributes[Fields.CompleteInternalReview] = value; }
		}

		/// <summary>
		/// <para>Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality and the probability of it turning into an opportunity.</para>
		/// <para>Boolean</para>
		/// <para>Confirm Interest</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ConfirmInterest
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ConfirmInterest); }
			set { Entity.Attributes[Fields.ConfirmInterest] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the contact associated with the opportunity.</para>
		/// <para>ReadOnly - Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type notes about the company or organization associated with the opportunity.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Current Situation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CurrentSituation
		{
			get { return Entity.GetAttributeValue<string>(Fields.CurrentSituation); }
			set { Entity.Attributes[Fields.CurrentSituation] = value; }
		}

		/// <summary>
		/// <para>Select the customer account or contact to provide a quick link to additional customer details, such as address, phone number, activities, and orders.</para>
		/// <para>Required - Lookup to account, contact</para>
		/// <para>Potential Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}

		/// <summary>
		/// <para>Type some notes about the customer&apos;s requirements, to help the sales team identify products and services that could meet their requirements.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Customer Need</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomerNeed
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomerNeed); }
			set { Entity.Attributes[Fields.CustomerNeed] = value; }
		}

		/// <summary>
		/// <para>Type notes about the customer&apos;s pain points to help the sales team identify products and services that could address these pain points.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Customer Pain Points</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomerPainPoints
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomerPainPoints); }
			set { Entity.Attributes[Fields.CustomerPainPoints] = value; }
		}

		/// <summary>
		/// <para>Select whether your notes include information about who makes the purchase decisions at the lead&apos;s company.</para>
		/// <para>Boolean</para>
		/// <para>Decision Maker?</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DecisionMaker
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DecisionMaker); }
			set { Entity.Attributes[Fields.DecisionMaker] = value; }
		}

		/// <summary>
		/// <para>Type additional information to describe the opportunity, such as possible products to sell or past purchases from the customer.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Select whether a proposal has been developed for the opportunity.</para>
		/// <para>Boolean</para>
		/// <para>Develop Proposal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DevelopProposal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DevelopProposal); }
			set { Entity.Attributes[Fields.DevelopProposal] = value; }
		}

		/// <summary>
		/// <para>Type the discount amount for the opportunity if the customer is eligible for special savings.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Opportunity Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.DiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.DiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Opportunity Discount Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Opportunity Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.DiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Type the discount rate that should be applied to the Product Totals field to include additional savings for the customer in the opportunity.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100</para>
		/// <para>Opportunity Discount (%)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountPercentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.DiscountPercentage); }
			set { Entity.Attributes[Fields.DiscountPercentage] = value; }
		}

		/// <summary>
		/// <para>The primary email address for the entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}

		/// <summary>
		/// <para>Enter the expected closing date of the opportunity to help make accurate revenue forecasts.</para>
		/// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Est. Close Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? EstimatedCloseDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.EstimatedCloseDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.EstimatedCloseDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.EstimatedCloseDate] = null;
			}
		}

		/// <summary>
		/// <para>Type the estimated revenue amount to indicate the potential sale or value of the opportunity for revenue forecasting. This field can be either system-populated or editable based on the selection in the Revenue field.</para>
		/// <para>Money - MinValue: -1,000,000,000,000 - MaxValue: 1,000,000,000,000</para>
		/// <para>Est. Revenue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedValue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.EstimatedValue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EstimatedValue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.EstimatedValue] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Est. Revenue in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Est. Revenue (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedValue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.EstimatedValue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select whether the fit between the lead&apos;s requirements and your offerings was evaluated.</para>
		/// <para>Boolean</para>
		/// <para>Evaluate Fit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EvaluateFit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EvaluateFit); }
			set { Entity.Attributes[Fields.EvaluateFit] = value; }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Choose whether the sales team has recorded detailed notes on the proposals and the account&apos;s responses.</para>
		/// <para>Boolean</para>
		/// <para>File Debrief</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FileDebrief
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FileDebrief); }
			set { Entity.Attributes[Fields.FileDebrief] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time when the final decision of the opportunity was made.</para>
		/// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Final Decision Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? FinalDecisionDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.FinalDecisionDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.FinalDecisionDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.FinalDecisionDate] = null;
			}
		}

		/// <summary>
		/// <para>Type the cost of freight or shipping for the products included in the opportunity for use in calculating the Total Amount field.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Freight Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? FreightAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.FreightAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.FreightAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Freight Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Freight Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? FreightAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.FreightAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select whether information about competitors is included.</para>
		/// <para>Boolean</para>
		/// <para>Identify Competitors</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IdentifyCompetitors
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IdentifyCompetitors); }
			set { Entity.Attributes[Fields.IdentifyCompetitors] = value; }
		}

		/// <summary>
		/// <para>Select whether the customer contacts for this opportunity have been identified.</para>
		/// <para>Boolean</para>
		/// <para>Identify Customer Contacts</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IdentifyCustomerContacts
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IdentifyCustomerContacts); }
			set { Entity.Attributes[Fields.IdentifyCustomerContacts] = value; }
		}

		/// <summary>
		/// <para>Choose whether you have recorded who will pursue the opportunity.</para>
		/// <para>Boolean</para>
		/// <para>Identify Sales Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IdentifyPursuitTeam
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IdentifyPursuitTeam); }
			set { Entity.Attributes[Fields.IdentifyPursuitTeam] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Choose whether someone from the sales team contacted this lead earlier.</para>
		/// <para>Picklist</para>
		/// <para>Initial Communication</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.InitialCommunication? InitialCommunication
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialCommunication);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.InitialCommunication)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InitialCommunication] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InitialCommunication] = null;
			}
		}

		/// <summary>
		/// <para>Shows the forecasted revenue for an Opportunity.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Forecast</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? int_Forecast
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.int_Forecast);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.int_Forecast] = new Money(value.Value);
				else
					Entity.Attributes[Fields.int_Forecast] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Forecast in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Forecast (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? int_forecast_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.int_forecast_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Indicates whether the opportunity is private or visible to the entire organization.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Private</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}

		/// <summary>
		/// <para>Select whether the estimated revenue for the opportunity is calculated automatically based on the products entered or entered manually by a user.</para>
		/// <para>Boolean</para>
		/// <para>Revenue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRevenueSystemCalculated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRevenueSystemCalculated); }
			set { Entity.Attributes[Fields.IsRevenueSystemCalculated] = value; }
		}

		/// <summary>
		/// <para>Contains the date time stamp of the last on hold time.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last On Hold Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The account manager responsible for the opportunity.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Account Manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AccountManagerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AccountManagerId); }
			set { Entity.Attributes[Fields.msdyn_AccountManagerId] = value; }
		}

		/// <summary>
		/// <para>The organizational unit in charge of the opportunity.</para>
		/// <para>Lookup to msdyn_organizationalunit</para>
		/// <para>Contracting Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContractOrganizationalUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContractOrganizationalUnitId); }
			set { Entity.Attributes[Fields.msdyn_ContractOrganizationalUnitId] = value; }
		}

		/// <summary>
		/// <para>Categories used for forecasting.</para>
		/// <para>Picklist</para>
		/// <para>Forecast category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_forecastcategory? msdyn_forecastcategory
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_forecastcategory);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_forecastcategory)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_forecastcategory] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_forecastcategory] = null;
			}
		}

		/// <summary>
		/// <para>Describes whether opportunity is opted out or not</para>
		/// <para>Boolean</para>
		/// <para>GDPR Optout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>(Deprecated) Opportunity Grade</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityGrade? msdyn_OpportunityGrade
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_OpportunityGrade);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityGrade)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_OpportunityGrade] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_OpportunityGrade] = null;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>(Deprecated) Opportunity Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_OpportunityScore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_OpportunityScore); }
			set { Entity.Attributes[Fields.msdyn_OpportunityScore] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>(Deprecated) Opportunity Score Trend</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityScoreTrend? msdyn_OpportunityScoreTrend
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_OpportunityScoreTrend);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityScoreTrend)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_OpportunityScoreTrend] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_OpportunityScoreTrend] = null;
			}
		}

		/// <summary>
		/// <para>Internal use only.</para>
		/// <para>Picklist</para>
		/// <para>Order Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OrderType? msdyn_OrderType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_OrderType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OrderType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_OrderType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_OrderType] = null;
			}
		}

		/// <summary>
		/// <para>Predictive score</para>
		/// <para>Lookup to msdyn_predictivescore</para>
		/// <para>Predictive Score</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PredictiveScoreId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PredictiveScoreId); }
			set { Entity.Attributes[Fields.msdyn_PredictiveScoreId] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>(Deprecated) Score History</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreHistory
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreHistory); }
			set { Entity.Attributes[Fields.msdyn_ScoreHistory] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>(Deprecated) Score Reasons</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreReasons
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreReasons); }
			set { Entity.Attributes[Fields.msdyn_ScoreReasons] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Segment associated with Opportunity.</para>
		/// <para>Lookup to msdyn_segment</para>
		/// <para>Segment Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segmentid); }
			set { Entity.Attributes[Fields.msdyn_segmentid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Work Order Type associated with Opportunity.</para>
		/// <para>Lookup to msdyn_workordertype</para>
		/// <para>Work Order Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderType); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderType] = value; }
		}

		/// <summary>
		/// <para>Type a subject or descriptive name, such as the expected order or company name, for the opportunity.</para>
		/// <para>Required - String - MaxLength: 300</para>
		/// <para>Topic</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Choose how high the level of need is for the lead&apos;s company.</para>
		/// <para>Picklist</para>
		/// <para>Need</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.Need? Need
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Need);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.Need)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Need] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Need] = null;
			}
		}

		/// <summary>
		/// <para>Shows the duration in minutes for which the opportunity was on hold.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>On Hold Time (Minutes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the opportunity.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Opportunity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OpportunityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.OpportunityId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select the expected value or priority of the opportunity based on revenue, customer status, or closing probability.</para>
		/// <para>Picklist</para>
		/// <para>Rating</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.OpportunityRatingCode? OpportunityRatingCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OpportunityRatingCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.OpportunityRatingCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OpportunityRatingCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OpportunityRatingCode] = null;
			}
		}

		/// <summary>
		/// <para>Choose the lead that the opportunity was created from for reporting and analytics. The field is read-only after the opportunity is created and defaults to the correct lead when an opportunity is created from a converted lead.</para>
		/// <para>Lookup to lead</para>
		/// <para>Originating Lead</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OriginatingLeadId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OriginatingLeadId); }
			set { Entity.Attributes[Fields.OriginatingLeadId] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose an account to connect this opportunity to, so that the relationship is visible in reports and analytics, and to provide a quick link to additional details, such as financial information and activities.</para>
		/// <para>Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentAccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAccountId); }
			set { Entity.Attributes[Fields.ParentAccountId] = value; }
		}

		/// <summary>
		/// <para>Choose a contact to connect this opportunity to, so that the relationship is visible in reports and analytics.</para>
		/// <para>Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentContactId); }
			set { Entity.Attributes[Fields.ParentContactId] = value; }
		}

		/// <summary>
		/// <para>Information about whether the opportunity participates in workflow rules.</para>
		/// <para>Boolean</para>
		/// <para>Participates in Workflow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ParticipatesInWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
			set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
		}

		/// <summary>
		/// <para>Select whether the final proposal has been presented to the account.</para>
		/// <para>Boolean</para>
		/// <para>Present Final Proposal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PresentFinalProposal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PresentFinalProposal); }
			set { Entity.Attributes[Fields.PresentFinalProposal] = value; }
		}

		/// <summary>
		/// <para>Select whether a proposal for the opportunity has been presented to the account.</para>
		/// <para>Boolean</para>
		/// <para>Presented Proposal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PresentProposal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PresentProposal); }
			set { Entity.Attributes[Fields.PresentProposal] = value; }
		}

		/// <summary>
		/// <para>Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
		/// <para>Lookup to pricelevel</para>
		/// <para>Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PriceLevelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PriceLevelId); }
			set { Entity.Attributes[Fields.PriceLevelId] = value; }
		}

		/// <summary>
		/// <para>Pricing error for the opportunity.</para>
		/// <para>Picklist</para>
		/// <para>Pricing Error</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.PricingErrorCode? PricingErrorCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PricingErrorCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.PricingErrorCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricingErrorCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PricingErrorCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para>Picklist</para>
		/// <para>Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Type notes about the proposed solution for the opportunity.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Proposed Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProposedSolution
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProposedSolution); }
			set { Entity.Attributes[Fields.ProposedSolution] = value; }
		}

		/// <summary>
		/// <para>Choose whether an individual or a committee will be involved in the  purchase process for the lead.</para>
		/// <para>Picklist</para>
		/// <para>Purchase Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseProcess? PurchaseProcess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PurchaseProcess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseProcess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PurchaseProcess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PurchaseProcess] = null;
			}
		}

		/// <summary>
		/// <para>Choose how long the lead will likely take to make the purchase.</para>
		/// <para>Picklist</para>
		/// <para>Purchase Timeframe</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseTimeframe? PurchaseTimeframe
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PurchaseTimeframe);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseTimeframe)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PurchaseTimeframe] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PurchaseTimeframe] = null;
			}
		}

		/// <summary>
		/// <para>Select whether the decision about pursuing the opportunity has been made.</para>
		/// <para>Boolean</para>
		/// <para>Decide Go/No-Go</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PursuitDecision
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PursuitDecision); }
			set { Entity.Attributes[Fields.PursuitDecision] = value; }
		}

		/// <summary>
		/// <para>Type comments about the qualification or scoring of the lead.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Qualification Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QualificationComments
		{
			get { return Entity.GetAttributeValue<string>(Fields.QualificationComments); }
			set { Entity.Attributes[Fields.QualificationComments] = value; }
		}

		/// <summary>
		/// <para>Type comments about the quotes associated with the opportunity.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Quote Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QuoteComments
		{
			get { return Entity.GetAttributeValue<string>(Fields.QuoteComments); }
			set { Entity.Attributes[Fields.QuoteComments] = value; }
		}

		/// <summary>
		/// <para>Choose whether the proposal feedback has been captured and resolved for the opportunity.</para>
		/// <para>Boolean</para>
		/// <para>Feedback Resolved</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ResolveFeedback
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ResolveFeedback); }
			set { Entity.Attributes[Fields.ResolveFeedback] = value; }
		}

		/// <summary>
		/// <para>Select the sales stage of this opportunity to aid the sales team in their efforts to win this opportunity.</para>
		/// <para>Picklist</para>
		/// <para>Sales Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStage? SalesStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SalesStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SalesStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SalesStage] = null;
			}
		}

		/// <summary>
		/// <para>Select the sales process stage for the opportunity to indicate the probability of closing the opportunity.</para>
		/// <para>Picklist</para>
		/// <para>Process Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStageCode? SalesStageCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SalesStageCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStageCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SalesStageCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SalesStageCode] = null;
			}
		}

		/// <summary>
		/// <para>Enter the date and time of the prospecting follow-up meeting with the lead.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Scheduled Follow up (Prospect)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleFollowup_ProspectUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleFollowup_Prospect); }
			set { Entity.Attributes[Fields.ScheduleFollowup_Prospect] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time of the qualifying follow-up meeting with the lead.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Scheduled Follow up (Qualify)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleFollowup_QualifyUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleFollowup_Qualify); }
			set { Entity.Attributes[Fields.ScheduleFollowup_Qualify] = value; }
		}

		/// <summary>
		/// <para>Enter the date and time of the proposal meeting for the opportunity.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Schedule Proposal Meeting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleProposalMeetingUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleProposalMeeting); }
			set { Entity.Attributes[Fields.ScheduleProposalMeeting] = value; }
		}

		/// <summary>
		/// <para>Select whether a thank you note has been sent to the account for considering the proposal.</para>
		/// <para>Boolean</para>
		/// <para>Send Thank You Note</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SendThankYouNote
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SendThankYouNote); }
			set { Entity.Attributes[Fields.SendThankYouNote] = value; }
		}

		/// <summary>
		/// <para>Skip Price Calculation (For Internal Use)</para>
		/// <para>Picklist</para>
		/// <para>Skip Price Calculation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.SkipPriceCalculation? SkipPriceCalculation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SkipPriceCalculation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.SkipPriceCalculation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SkipPriceCalculation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SkipPriceCalculation] = null;
			}
		}

		/// <summary>
		/// <para>Choose the service level agreement (SLA) that you want to apply to the opportunity record.</para>
		/// <para>Lookup to sla</para>
		/// <para>SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}

		/// <summary>
		/// <para>Last SLA that was applied to this opportunity. This field is for internal use only.</para>
		/// <para>ReadOnly - Lookup to sla</para>
		/// <para>Last SLA applied</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Shows whether the opportunity is open, won, or lost. Won and lost opportunities are read-only and can&apos;t be edited until they are reactivated.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the opportunity&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the ID of the workflow step.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Step</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StepId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StepId); }
			set { Entity.Attributes[Fields.StepId] = value; }
		}

		/// <summary>
		/// <para>Shows the current phase in the sales pipeline for the opportunity. This is updated by a workflow.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Pipeline Phase</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StepName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StepName); }
			set { Entity.Attributes[Fields.StepName] = value; }
		}

		/// <summary>
		/// <para>Number of users or conversations followed the record</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>TeamsFollowed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TeamsFollowed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TeamsFollowed); }
			set { Entity.Attributes[Fields.TeamsFollowed] = value; }
		}

		/// <summary>
		/// <para>Select when the opportunity is likely to be closed.</para>
		/// <para>Picklist</para>
		/// <para>Timeline</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.TimeLine? TimeLine
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TimeLine);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.TimeLine)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TimeLine] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TimeLine] = null;
			}
		}

		/// <summary>
		/// <para>Total time spent for emails (read and write) and meetings by me in relation to the opportunity record.</para>
		/// <para>ReadOnly - String - MaxLength: 1250</para>
		/// <para>Time Spent by me</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSpentByMeOnEmailAndMeetings
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the opportunity.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total product amount for the opportunity, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount of the opportunity.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Pre-Freight Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmountLessFreight
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmountLessFreight);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalAmountLessFreight] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalAmountLessFreight] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Pre-Freight Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Pre-Freight Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmountLessFreight_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmountLessFreight_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total discount amount, based on the discount price and rate entered on the opportunity.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalDiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Discount Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the sum of all existing and write-in products included on the opportunity, based on the specified price list and quantities.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Detail Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalLineItemAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalLineItemAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Detail Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Detail Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total of the Manual Discount amounts specified on all products included in the opportunity. This value is reflected in the Total Detail Amount field on the opportunity and is added to any discount amount or rate specified on the opportunity.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Line Item Discount Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalLineItemDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalLineItemDiscountAmount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Line Item Discount Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Line Item Discount Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Shows the total of the Tax amounts specified on all products included in the opportunity, included in the Total Amount field calculation for the opportunity.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Tax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalTax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalTax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalTax] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Tax in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Tax (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalTax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
