//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets
{
	public enum msdyn_postconversationsurveybotsurveymode
	{
		/// <summary>
		/// Insert survey in conversation = 192350000
		/// </summary>
		Insert_survey_in_conversation = 192350000,
		/// <summary>
		/// Send survey link to conversation = 192350001
		/// </summary>
		Send_survey_link_to_conversation = 192350001
	}

	public enum msdyn_postconversationsurveymode
	{
		/// <summary>
		/// Insert survey in conversation = 192350000
		/// </summary>
		Insert_survey_in_conversation = 192350000,
		/// <summary>
		/// Send survey link to conversation = 192350001
		/// </summary>
		Send_survey_link_to_conversation = 192350001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ocsmschannelsetting : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_enablefileattachmentforagents = "msdyn_enablefileattachmentforagents";
			public const string msdyn_enablefileattachmentforcustomers = "msdyn_enablefileattachmentforcustomers";
			public const string msdyn_inboundurl = "msdyn_inboundurl";
			public const string msdyn_language = "msdyn_language";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocsmschannelsettingId = "msdyn_ocsmschannelsettingid";
			public const string msdyn_operatinghourid = "msdyn_operatinghourid";
			public const string msdyn_PhoneNumberId = "msdyn_phonenumberid";
			public const string msdyn_postconversationsurvey = "msdyn_postconversationsurvey";
			public const string msdyn_postconversationsurveybotsurvey = "msdyn_postconversationsurveybotsurvey";
			public const string msdyn_postconversationsurveybotsurveymessagetext = "msdyn_postconversationsurveybotsurveymessagetext";
			public const string msdyn_postconversationsurveybotsurveymode = "msdyn_postconversationsurveybotsurveymode";
			public const string msdyn_postconversationsurveyenable = "msdyn_postconversationsurveyenable";
			public const string msdyn_postconversationsurveymessagetext = "msdyn_postconversationsurveymessagetext";
			public const string msdyn_postconversationsurveymode = "msdyn_postconversationsurveymode";
			public const string msdyn_postconversationsurveyseparatebotsurvey = "msdyn_postconversationsurveyseparatebotsurvey";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_ocsmschannelsetting";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10832;

		[DebuggerNonUserCode()]
		public msdyn_ocsmschannelsetting()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocsmschannelsetting(Guid msdyn_ocsmschannelsettingId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ocsmschannelsettingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocsmschannelsetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocsmschannelsetting(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocsmschannelsetting(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_ocsmschannelsetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enable file attachments for agents</para>
		/// <para>Boolean</para>
		/// <para>Enable file attachments for agents</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablefileattachmentforagents
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablefileattachmentforagents); }
			set { Entity.Attributes[Fields.msdyn_enablefileattachmentforagents] = value; }
		}

		/// <summary>
		/// <para>Enable file attachments for customers</para>
		/// <para>Boolean</para>
		/// <para>Enable file attachments for customers</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablefileattachmentforcustomers
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablefileattachmentforcustomers); }
			set { Entity.Attributes[Fields.msdyn_enablefileattachmentforcustomers] = value; }
		}

		/// <summary>
		/// <para>URL for Inbound link</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Inbound URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_inboundurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_inboundurl); }
			set { Entity.Attributes[Fields.msdyn_inboundurl] = value; }
		}

		/// <summary>
		/// <para>The language setting for the SMS number</para>
		/// <para>Required - Lookup to msdyn_oclanguage</para>
		/// <para>SMS number language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_language
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_language); }
			set { Entity.Attributes[Fields.msdyn_language] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Work Stream associated with SMS Number</para>
		/// <para>Required - Lookup to msdyn_liveworkstream</para>
		/// <para>Work Stream</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>ocsmschannelsetting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ocsmschannelsettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ocsmschannelsettingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Used to denote operating hours for the sms numbers record</para>
		/// <para>Lookup to msdyn_operatinghour</para>
		/// <para>Operating Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_operatinghourid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_operatinghourid); }
			set { Entity.Attributes[Fields.msdyn_operatinghourid] = value; }
		}

		/// <summary>
		/// <para>Phone Number</para>
		/// <para>Required - Lookup to msdyn_ocphonenumber</para>
		/// <para>Phone Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PhoneNumberId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PhoneNumberId); }
			set { Entity.Attributes[Fields.msdyn_PhoneNumberId] = value; }
		}

		/// <summary>
		/// <para>Lookup to Dynamics 365 Customer Voice survey field</para>
		/// <para>Lookup to msfp_survey</para>
		/// <para>Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_postconversationsurvey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_postconversationsurvey); }
			set { Entity.Attributes[Fields.msdyn_postconversationsurvey] = value; }
		}

		/// <summary>
		/// <para>Enable or disable bot survey</para>
		/// <para>Boolean</para>
		/// <para>Bot Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_postconversationsurveybotsurvey
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_postconversationsurveybotsurvey); }
			set { Entity.Attributes[Fields.msdyn_postconversationsurveybotsurvey] = value; }
		}

		/// <summary>
		/// <para>Prefix text for survey link message that will be sent to the user.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_postconversationsurveybotsurveymessagetext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_postconversationsurveybotsurveymessagetext); }
			set { Entity.Attributes[Fields.msdyn_postconversationsurveybotsurveymessagetext] = value; }
		}

		/// <summary>
		/// <para>Mode of the survey to be sent</para>
		/// <para>Picklist</para>
		/// <para>Survey Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets.msdyn_postconversationsurveybotsurveymode? msdyn_postconversationsurveybotsurveymode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_postconversationsurveybotsurveymode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets.msdyn_postconversationsurveybotsurveymode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_postconversationsurveybotsurveymode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_postconversationsurveybotsurveymode] = null;
			}
		}

		/// <summary>
		/// <para>To enable or disable post conversation survey</para>
		/// <para>Boolean</para>
		/// <para>Enable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_postconversationsurveyenable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_postconversationsurveyenable); }
			set { Entity.Attributes[Fields.msdyn_postconversationsurveyenable] = value; }
		}

		/// <summary>
		/// <para>Prefix text for survey link message that will be sent to the user.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_postconversationsurveymessagetext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_postconversationsurveymessagetext); }
			set { Entity.Attributes[Fields.msdyn_postconversationsurveymessagetext] = value; }
		}

		/// <summary>
		/// <para>Mode of the survey to be sent</para>
		/// <para>Picklist</para>
		/// <para>Survey Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets.msdyn_postconversationsurveymode? msdyn_postconversationsurveymode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_postconversationsurveymode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets.msdyn_postconversationsurveymode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_postconversationsurveymode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_postconversationsurveymode] = null;
			}
		}

		/// <summary>
		/// <para>Lookup to Dynamics 365 Customer Voice survey field</para>
		/// <para>Lookup to msfp_survey</para>
		/// <para>Survey</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_postconversationsurveyseparatebotsurvey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_postconversationsurveyseparatebotsurvey); }
			set { Entity.Attributes[Fields.msdyn_postconversationsurveyseparatebotsurvey] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the ocsmschannelsetting</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the ocsmschannelsetting</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocsmschannelsettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
