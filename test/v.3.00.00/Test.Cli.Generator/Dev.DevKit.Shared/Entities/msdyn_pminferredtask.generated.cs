//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum msdyn_automationstatus
	{
		/// <summary>
		/// Complete = 200000003
		/// </summary>
		Complete = 200000003,
		/// <summary>
		/// InProgress = 200000002
		/// </summary>
		InProgress = 200000002,
		/// <summary>
		/// NotRecommended = 200000001
		/// </summary>
		NotRecommended = 200000001,
		/// <summary>
		/// NotStarted = 200000000
		/// </summary>
		NotStarted = 200000000
	}

	public enum msdyn_reportprovisioningstatus
	{
		/// <summary>
		/// Failed = 193350003
		/// </summary>
		Failed = 193350003,
		/// <summary>
		/// NotStarted = 193350000
		/// </summary>
		NotStarted = 193350000,
		/// <summary>
		/// Provisioned = 193350002
		/// </summary>
		Provisioned = 193350002,
		/// <summary>
		/// Provisioning = 193350001
		/// </summary>
		Provisioning = 193350001
	}

	public enum msdyn_source
	{
		/// <summary>
		/// DataLake = 1
		/// </summary>
		DataLake = 1,
		/// <summary>
		/// Recording = 0
		/// </summary>
		Recording = 0
	}

	public enum statecode
	{
		/// <summary>
		/// Done = 2
		/// </summary>
		Done = 2,
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0,
		/// <summary>
		/// Failed = 3
		/// </summary>
		Failed = 3,
		/// <summary>
		/// InProgress = 1
		/// </summary>
		InProgress = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Analyzed = 4
		/// </summary>
		Analyzed = 4,
		/// <summary>
		/// AnalyzeFailed = 5
		/// </summary>
		AnalyzeFailed = 5,
		/// <summary>
		/// Analyzing = 2
		/// </summary>
		Analyzing = 2,
		/// <summary>
		/// DeleteFailed = 6
		/// </summary>
		DeleteFailed = 6,
		/// <summary>
		/// Deleting = 3
		/// </summary>
		Deleting = 3,
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0,
		/// <summary>
		/// Queued = 1
		/// </summary>
		Queued = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_pminferredtask : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_analysisschedule = "msdyn_analysisschedule";
			public const string msdyn_automationdata = "msdyn_automationdata";
			public const string msdyn_automationstatus = "msdyn_automationstatus";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_inputdatabinding = "msdyn_inputdatabinding";
			public const string msdyn_isreportavailable = "msdyn_isreportavailable";
			public const string msdyn_iterationid = "msdyn_iterationid";
			public const string msdyn_lasterrors = "msdyn_lasterrors";
			public const string msdyn_lasterrorsreport = "msdyn_lasterrorsreport";
			public const string msdyn_lastreportrefreshdate = "msdyn_lastreportrefreshdate";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_outputdata = "msdyn_outputdata";
			public const string msdyn_pminferredtaskId = "msdyn_pminferredtaskid";
			public const string msdyn_reportdata = "msdyn_reportdata";
			public const string msdyn_reportprovisioningstatus = "msdyn_reportprovisioningstatus";
			public const string msdyn_sharedrecordingmetadata = "msdyn_sharedrecordingmetadata";
			public const string msdyn_source = "msdyn_source";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_pminferredtask";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10127;

		[DebuggerNonUserCode()]
		public msdyn_pminferredtask()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Guid msdyn_pminferredtaskId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_pminferredtaskId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Row id unique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Information about the analysis schedule.</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Analysis Schedule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_analysisschedule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_analysisschedule); }
			set { Entity.Attributes[Fields.msdyn_analysisschedule] = value; }
		}

		/// <summary>
		/// <para>Computed data to drive automation for this task.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>AutomationData</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_automationdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_automationdata); }
			set { Entity.Attributes[Fields.msdyn_automationdata] = value; }
		}

		/// <summary>
		/// <para>The status of automation for this task.</para>
		/// <para>Picklist</para>
		/// <para>AutomationStatus</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus? msdyn_automationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_automationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_automationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_automationstatus] = null;
			}
		}

		/// <summary>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}

		/// <summary>
		/// <para>Location of the data used as input for Task Analysis.</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Input Data Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_inputdatabinding
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_inputdatabinding); }
			set { Entity.Attributes[Fields.msdyn_inputdatabinding] = value; }
		}

		/// <summary>
		/// <para>Surfaces whether the analysis report is currently available.</para>
		/// <para>Boolean</para>
		/// <para>Is Report Available</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isreportavailable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isreportavailable); }
			set { Entity.Attributes[Fields.msdyn_isreportavailable] = value; }
		}

		/// <summary>
		/// <para>Identifies uniquely the last successful processing of the task.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Processing Iteration Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_iterationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_iterationid); }
			set { Entity.Attributes[Fields.msdyn_iterationid] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Last Errors</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lasterrors
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lasterrors); }
			set { Entity.Attributes[Fields.msdyn_lasterrors] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Virtual</para>
		/// <para>Last Errors Report</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lasterrorsreport
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lasterrorsreport); }
		}

		/// <summary>
		/// <para>Date and time when the corresponding report was last refreshed.</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Last Report Refresh Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lastreportrefreshdate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lastreportrefreshdate); }
			set { Entity.Attributes[Fields.msdyn_lastreportrefreshdate] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Output Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_outputdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_outputdata); }
			set { Entity.Attributes[Fields.msdyn_outputdata] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>PM Inferred Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_pminferredtaskId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_pminferredtaskId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Data related to the report for this task.</para>
		/// <para>Memo - MaxLength: 10000</para>
		/// <para>Report Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_reportdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_reportdata); }
			set { Entity.Attributes[Fields.msdyn_reportdata] = value; }
		}

		/// <summary>
		/// <para>The current status of the provisioning operation for the report associated to this task.</para>
		/// <para>Picklist</para>
		/// <para>Report Provisioning Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus? msdyn_reportprovisioningstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_reportprovisioningstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_reportprovisioningstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_reportprovisioningstatus] = null;
			}
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Shared Recording Metadata</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sharedrecordingmetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sharedrecordingmetadata); }
			set { Entity.Attributes[Fields.msdyn_sharedrecordingmetadata] = value; }
		}

		/// <summary>
		/// <para>The data source of this Pm Inferred Task.</para>
		/// <para>Picklist</para>
		/// <para>Pm Inferred Task Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source? msdyn_source
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_source);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_source] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_source] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Status of the PM Inferred Task</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the PM Inferred Task</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
