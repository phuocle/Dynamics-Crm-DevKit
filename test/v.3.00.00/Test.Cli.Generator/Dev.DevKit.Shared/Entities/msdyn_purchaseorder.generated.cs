//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets
{
	public enum msdyn_ApprovalStatus
	{
		/// <summary>
		/// Approved = 690970000
		/// </summary>
		Approved = 690970000,
		/// <summary>
		/// Rejected = 690970001
		/// </summary>
		Rejected = 690970001
	}

	public enum msdyn_ShipTo
	{
		/// <summary>
		/// Business Unit = 690970001
		/// </summary>
		Business_Unit = 690970001,
		/// <summary>
		/// Other = 690970003
		/// </summary>
		Other = 690970003,
		/// <summary>
		/// Service Account = 690970002
		/// </summary>
		Service_Account = 690970002,
		/// <summary>
		/// Site = 690970000
		/// </summary>
		Site = 690970000
	}

	public enum msdyn_SystemStatus
	{
		/// <summary>
		/// Billed = 690970004
		/// </summary>
		Billed = 690970004,
		/// <summary>
		/// Canceled = 690970002
		/// </summary>
		Canceled = 690970002,
		/// <summary>
		/// Draft = 690970000
		/// </summary>
		Draft = 690970000,
		/// <summary>
		/// Products Received = 690970003
		/// </summary>
		Products_Received = 690970003,
		/// <summary>
		/// Submitted = 690970001
		/// </summary>
		Submitted = 690970001
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_purchaseorder : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Address1 = "msdyn_address1";
			public const string msdyn_Address2 = "msdyn_address2";
			public const string msdyn_Address3 = "msdyn_address3";
			public const string msdyn_AddressName = "msdyn_addressname";
			public const string msdyn_AmountBilled = "msdyn_amountbilled";
			public const string msdyn_amountbilled_Base = "msdyn_amountbilled_base";
			public const string msdyn_ApprovalStatus = "msdyn_approvalstatus";
			public const string msdyn_ApprovedRejectedBy = "msdyn_approvedrejectedby";
			public const string msdyn_AutoNumbering = "msdyn_autonumbering";
			public const string msdyn_Booking = "msdyn_booking";
			public const string msdyn_City = "msdyn_city";
			public const string msdyn_Country = "msdyn_country";
			public const string msdyn_DateExpected = "msdyn_dateexpected";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_OrderedBy = "msdyn_orderedby";
			public const string msdyn_PaymentTerm = "msdyn_paymentterm";
			public const string msdyn_PODate = "msdyn_purchaseorderdate";
			public const string msdyn_PostalCode = "msdyn_postalcode";
			public const string msdyn_purchaseorderId = "msdyn_purchaseorderid";
			public const string msdyn_ReceivetoWarehouse = "msdyn_receivetowarehouse";
			public const string msdyn_RequestedByResource = "msdyn_requestedbyresource";
			public const string msdyn_ShipTo = "msdyn_shipto";
			public const string msdyn_ShipVia = "msdyn_shipvia";
			public const string msdyn_StateOrProvince = "msdyn_stateorprovince";
			public const string msdyn_SubStatus = "msdyn_substatus";
			public const string msdyn_SystemStatus = "msdyn_systemstatus";
			public const string msdyn_TotalAmount = "msdyn_totalamount";
			public const string msdyn_totalamount_Base = "msdyn_totalamount_base";
			public const string msdyn_Vendor = "msdyn_vendor";
			public const string msdyn_VendorNote = "msdyn_vendornote";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_purchaseorder";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10622;

		[DebuggerNonUserCode()]
		public msdyn_purchaseorder()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(Guid msdyn_purchaseorderId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_purchaseorderId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Shows the sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address1); }
			set { Entity.Attributes[Fields.msdyn_Address1] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address2); }
			set { Entity.Attributes[Fields.msdyn_Address2] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 250</para>
		/// <para>Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address3); }
			set { Entity.Attributes[Fields.msdyn_Address3] = value; }
		}

		/// <summary>
		/// <para>Enter the location to ship the products of this PO to.</para>
		/// <para>String - MaxLength: 250</para>
		/// <para>Address Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AddressName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AddressName); }
			set { Entity.Attributes[Fields.msdyn_AddressName] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: 0 - MaxValue: 900,000,000,000,000</para>
		/// <para>Amount Billed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_AmountBilled
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_AmountBilled);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AmountBilled] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_AmountBilled] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the amount billed in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Amount Billed (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amountbilled_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amountbilled_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Enter the current status of the approval.</para>
		/// <para>Picklist</para>
		/// <para>Approval Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ApprovalStatus? msdyn_ApprovalStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ApprovalStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ApprovalStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ApprovalStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ApprovalStatus] = null;
			}
		}

		/// <summary>
		/// <para>The user who approved or rejected this PO</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Approved/Rejected By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ApprovedRejectedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ApprovedRejectedBy); }
			set { Entity.Attributes[Fields.msdyn_ApprovedRejectedBy] = value; }
		}

		/// <summary>
		/// <para>Internal field used to generate the next name upon entity creation. It is optionally copied to the msdyn_name field.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Auto-Numbering</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AutoNumbering
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AutoNumbering); }
			set { Entity.Attributes[Fields.msdyn_AutoNumbering] = value; }
		}

		/// <summary>
		/// <para>If purchase order is being ordered directly to a booking specify here. Note, when specified, by default all products will receive directly to booking.</para>
		/// <para>Lookup to bookableresourcebooking</para>
		/// <para>Booking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Booking
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Booking); }
			set { Entity.Attributes[Fields.msdyn_Booking] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 80</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_City); }
			set { Entity.Attributes[Fields.msdyn_City] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 80</para>
		/// <para>Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Country); }
			set { Entity.Attributes[Fields.msdyn_Country] = value; }
		}

		/// <summary>
		/// <para>Enter the date you expect to receive your order. Note that products added once the date is specified here will automatically be set to this date.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date Expected</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DateExpectedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DateExpected); }
			set { Entity.Attributes[Fields.msdyn_DateExpected] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Internal Flags</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}

		/// <summary>
		/// <para>Enter the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for User associated with Purchase Order.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Ordered By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OrderedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OrderedBy); }
			set { Entity.Attributes[Fields.msdyn_OrderedBy] = value; }
		}

		/// <summary>
		/// <para>The payment terms for this PO</para>
		/// <para>Lookup to msdyn_paymentterm</para>
		/// <para>Payment Term</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PaymentTerm
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PaymentTerm); }
			set { Entity.Attributes[Fields.msdyn_PaymentTerm] = value; }
		}

		/// <summary>
		/// <para>Shows the date you submitted your order to the vendor. Note this field is for information only.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Purchase Order Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_PODateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_PODate); }
			set { Entity.Attributes[Fields.msdyn_PODate] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 20</para>
		/// <para>Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PostalCode); }
			set { Entity.Attributes[Fields.msdyn_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Shows the entity instances.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Purchase Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_purchaseorderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_purchaseorderId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Warehouse where products of this PO will be received to</para>
		/// <para>Lookup to msdyn_warehouse</para>
		/// <para>Receive to Warehouse</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ReceivetoWarehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ReceivetoWarehouse); }
			set { Entity.Attributes[Fields.msdyn_ReceivetoWarehouse] = value; }
		}

		/// <summary>
		/// <para>Resource that requested the purchase</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Requested By Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RequestedByResource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RequestedByResource); }
			set { Entity.Attributes[Fields.msdyn_RequestedByResource] = value; }
		}

		/// <summary>
		/// <para>Enter the location to ship to. If the PO has been associated to a work order or a schedule, you can ship directly to the service account address.</para>
		/// <para>Picklist</para>
		/// <para>Ship To</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ShipTo? msdyn_ShipTo
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ShipTo);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ShipTo)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ShipTo] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ShipTo] = null;
			}
		}

		/// <summary>
		/// <para>Method of shipment by vendor</para>
		/// <para>Lookup to msdyn_shipvia</para>
		/// <para>Ship Via</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ShipVia
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ShipVia); }
			set { Entity.Attributes[Fields.msdyn_ShipVia] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>State Or Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_StateOrProvince); }
			set { Entity.Attributes[Fields.msdyn_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>Purchase Order Substatus</para>
		/// <para>Lookup to msdyn_purchaseordersubstatus</para>
		/// <para>Substatus</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SubStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SubStatus); }
			set { Entity.Attributes[Fields.msdyn_SubStatus] = value; }
		}

		/// <summary>
		/// <para>Enter the current status of the purchase order.</para>
		/// <para>Required - Picklist</para>
		/// <para>System Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_SystemStatus? msdyn_SystemStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_SystemStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_SystemStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SystemStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_SystemStatus] = null;
			}
		}

		/// <summary>
		/// <para>Total Amount (used by Field Service only)</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalAmount] = null;
			}
		}

		/// <summary>
		/// <para>Shows the value of the total amount in the base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Vendor you wish to purchase from</para>
		/// <para>Required - Lookup to account</para>
		/// <para>Vendor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Vendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Vendor); }
			set { Entity.Attributes[Fields.msdyn_Vendor] = value; }
		}

		/// <summary>
		/// <para>If you wish to display a note for the vendor on this PO specify it here</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Vendor Note</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_VendorNote
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_VendorNote); }
			set { Entity.Attributes[Fields.msdyn_VendorNote] = value; }
		}

		/// <summary>
		/// <para>If purchase order is being ordered directly to a work order specify here. Note, when specified, by default all products will receive directly to work order.</para>
		/// <para>Lookup to msdyn_workorder</para>
		/// <para>Work Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}

		/// <summary>
		/// <para>Shows the date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the Purchase Order</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Purchase Order</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Required - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
