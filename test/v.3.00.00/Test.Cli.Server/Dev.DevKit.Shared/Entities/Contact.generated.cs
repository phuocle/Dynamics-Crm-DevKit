//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ContactOptionSets
{
    public enum AccountRoleCode
    {
        /// <summary>
        /// Decision_Maker = 1
        /// </summary>
        Decision_Maker = 1,
        /// <summary>
        /// Employee = 2
        /// </summary>
        Employee = 2,
        /// <summary>
        /// Influencer = 3
        /// </summary>
        Influencer = 3
    }

    public enum Address1_AddressTypeCode
    {
        /// <summary>
        /// Bill_To = 1
        /// </summary>
        Bill_To = 1,
        /// <summary>
        /// Other = 4
        /// </summary>
        Other = 4,
        /// <summary>
        /// Primary = 3
        /// </summary>
        Primary = 3,
        /// <summary>
        /// Ship_To = 2
        /// </summary>
        Ship_To = 2
    }

    public enum Address1_FreightTermsCode
    {
        /// <summary>
        /// FOB = 1
        /// </summary>
        FOB = 1,
        /// <summary>
        /// No_Charge = 2
        /// </summary>
        No_Charge = 2
    }

    public enum Address1_ShippingMethodCode
    {
        /// <summary>
        /// Airborne = 1
        /// </summary>
        Airborne = 1,
        /// <summary>
        /// DHL = 2
        /// </summary>
        DHL = 2,
        /// <summary>
        /// FedEx = 3
        /// </summary>
        FedEx = 3,
        /// <summary>
        /// Full_Load = 6
        /// </summary>
        Full_Load = 6,
        /// <summary>
        /// Postal_Mail = 5
        /// </summary>
        Postal_Mail = 5,
        /// <summary>
        /// UPS = 4
        /// </summary>
        UPS = 4,
        /// <summary>
        /// Will_Call = 7
        /// </summary>
        Will_Call = 7
    }

    public enum Address2_AddressTypeCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum Address2_FreightTermsCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum Address2_ShippingMethodCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum Address3_AddressTypeCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum Address3_FreightTermsCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum Address3_ShippingMethodCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum CustomerSizeCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum CustomerTypeCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum devkit_CategoryCode
    {
        /// <summary>
        /// Business = 1
        /// </summary>
        Business = 1,
        /// <summary>
        /// Family = 2
        /// </summary>
        Family = 2,
        /// <summary>
        /// Other = 5
        /// </summary>
        Other = 5,
        /// <summary>
        /// Sales = 4
        /// </summary>
        Sales = 4,
        /// <summary>
        /// Sales_Team = 1001
        /// </summary>
        Sales_Team = 1001,
        /// <summary>
        /// Service = 1002
        /// </summary>
        Service = 1002,
        /// <summary>
        /// Social = 3
        /// </summary>
        Social = 3,
        /// <summary>
        /// Stakeholder = 1000
        /// </summary>
        Stakeholder = 1000
    }

    public enum EducationCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum FamilyStatusCode
    {
        /// <summary>
        /// Divorced = 3
        /// </summary>
        Divorced = 3,
        /// <summary>
        /// Married = 2
        /// </summary>
        Married = 2,
        /// <summary>
        /// Single = 1
        /// </summary>
        Single = 1,
        /// <summary>
        /// Widowed = 4
        /// </summary>
        Widowed = 4
    }

    public enum GenderCode
    {
        /// <summary>
        /// Female = 2
        /// </summary>
        Female = 2,
        /// <summary>
        /// Male = 1
        /// </summary>
        Male = 1
    }

    public enum HasChildrenCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum LeadSourceCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum PaymentTermsCode
    {
        /// <summary>
        /// _2_10_Net_30 = 2
        /// </summary>
        _2_10_Net_30 = 2,
        /// <summary>
        /// Net_30 = 1
        /// </summary>
        Net_30 = 1,
        /// <summary>
        /// Net_45 = 3
        /// </summary>
        Net_45 = 3,
        /// <summary>
        /// Net_60 = 4
        /// </summary>
        Net_60 = 4
    }

    public enum PreferredAppointmentDayCode
    {
        /// <summary>
        /// Friday = 5
        /// </summary>
        Friday = 5,
        /// <summary>
        /// Monday = 1
        /// </summary>
        Monday = 1,
        /// <summary>
        /// Saturday = 6
        /// </summary>
        Saturday = 6,
        /// <summary>
        /// Sunday = 0
        /// </summary>
        Sunday = 0,
        /// <summary>
        /// Thursday = 4
        /// </summary>
        Thursday = 4,
        /// <summary>
        /// Tuesday = 2
        /// </summary>
        Tuesday = 2,
        /// <summary>
        /// Wednesday = 3
        /// </summary>
        Wednesday = 3
    }

    public enum PreferredAppointmentTimeCode
    {
        /// <summary>
        /// Afternoon = 2
        /// </summary>
        Afternoon = 2,
        /// <summary>
        /// Evening = 3
        /// </summary>
        Evening = 3,
        /// <summary>
        /// Morning = 1
        /// </summary>
        Morning = 1
    }

    public enum PreferredContactMethodCode
    {
        /// <summary>
        /// Any = 1
        /// </summary>
        Any = 1,
        /// <summary>
        /// Email = 2
        /// </summary>
        Email = 2,
        /// <summary>
        /// Fax = 4
        /// </summary>
        Fax = 4,
        /// <summary>
        /// Mail = 5
        /// </summary>
        Mail = 5,
        /// <summary>
        /// Phone = 3
        /// </summary>
        Phone = 3
    }

    public enum ShippingMethodCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }

    public enum StateCode
    {
        /// <summary>
        /// Active = 0
        /// </summary>
        Active = 0,
        /// <summary>
        /// Inactive = 1
        /// </summary>
        Inactive = 1
    }

    public enum StatusCode
    {
        /// <summary>
        /// Active = 1
        /// </summary>
        Active = 1,
        /// <summary>
        /// Inactive = 2
        /// </summary>
        Inactive = 2
    }

    public enum TerritoryCode
    {
        /// <summary>
        /// Default_Value = 1
        /// </summary>
        Default_Value = 1
    }
}

namespace Dev.DevKit.Shared.Entities
{
    public partial class Contact : EntityBase
    {
        public struct Fields
        {
            public const string AccountId = "accountid";
            public const string AccountRoleCode = "accountrolecode";
            public const string Address1_AddressId = "address1_addressid";
            public const string Address1_AddressTypeCode = "address1_addresstypecode";
            public const string Address1_City = "address1_city";
            public const string Address1_Composite = "address1_composite";
            public const string Address1_Country = "address1_country";
            public const string Address1_County = "address1_county";
            public const string Address1_Fax = "address1_fax";
            public const string Address1_FreightTermsCode = "address1_freighttermscode";
            public const string Address1_Latitude = "address1_latitude";
            public const string Address1_Line1 = "address1_line1";
            public const string Address1_Line2 = "address1_line2";
            public const string Address1_Line3 = "address1_line3";
            public const string Address1_Longitude = "address1_longitude";
            public const string Address1_Name = "address1_name";
            public const string Address1_PostalCode = "address1_postalcode";
            public const string Address1_PostOfficeBox = "address1_postofficebox";
            public const string Address1_PrimaryContactName = "address1_primarycontactname";
            public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
            public const string Address1_StateOrProvince = "address1_stateorprovince";
            public const string Address1_Telephone1 = "address1_telephone1";
            public const string Address1_Telephone2 = "address1_telephone2";
            public const string Address1_Telephone3 = "address1_telephone3";
            public const string Address1_UPSZone = "address1_upszone";
            public const string Address1_UTCOffset = "address1_utcoffset";
            public const string Address2_AddressId = "address2_addressid";
            public const string Address2_AddressTypeCode = "address2_addresstypecode";
            public const string Address2_City = "address2_city";
            public const string Address2_Composite = "address2_composite";
            public const string Address2_Country = "address2_country";
            public const string Address2_County = "address2_county";
            public const string Address2_Fax = "address2_fax";
            public const string Address2_FreightTermsCode = "address2_freighttermscode";
            public const string Address2_Latitude = "address2_latitude";
            public const string Address2_Line1 = "address2_line1";
            public const string Address2_Line2 = "address2_line2";
            public const string Address2_Line3 = "address2_line3";
            public const string Address2_Longitude = "address2_longitude";
            public const string Address2_Name = "address2_name";
            public const string Address2_PostalCode = "address2_postalcode";
            public const string Address2_PostOfficeBox = "address2_postofficebox";
            public const string Address2_PrimaryContactName = "address2_primarycontactname";
            public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
            public const string Address2_StateOrProvince = "address2_stateorprovince";
            public const string Address2_Telephone1 = "address2_telephone1";
            public const string Address2_Telephone2 = "address2_telephone2";
            public const string Address2_Telephone3 = "address2_telephone3";
            public const string Address2_UPSZone = "address2_upszone";
            public const string Address2_UTCOffset = "address2_utcoffset";
            public const string Address3_AddressId = "address3_addressid";
            public const string Address3_AddressTypeCode = "address3_addresstypecode";
            public const string Address3_City = "address3_city";
            public const string Address3_Composite = "address3_composite";
            public const string Address3_Country = "address3_country";
            public const string Address3_County = "address3_county";
            public const string Address3_Fax = "address3_fax";
            public const string Address3_FreightTermsCode = "address3_freighttermscode";
            public const string Address3_Latitude = "address3_latitude";
            public const string Address3_Line1 = "address3_line1";
            public const string Address3_Line2 = "address3_line2";
            public const string Address3_Line3 = "address3_line3";
            public const string Address3_Longitude = "address3_longitude";
            public const string Address3_Name = "address3_name";
            public const string Address3_PostalCode = "address3_postalcode";
            public const string Address3_PostOfficeBox = "address3_postofficebox";
            public const string Address3_PrimaryContactName = "address3_primarycontactname";
            public const string Address3_ShippingMethodCode = "address3_shippingmethodcode";
            public const string Address3_StateOrProvince = "address3_stateorprovince";
            public const string Address3_Telephone1 = "address3_telephone1";
            public const string Address3_Telephone2 = "address3_telephone2";
            public const string Address3_Telephone3 = "address3_telephone3";
            public const string Address3_UPSZone = "address3_upszone";
            public const string Address3_UTCOffset = "address3_utcoffset";
            public const string Aging30 = "aging30";
            public const string Aging30_Base = "aging30_base";
            public const string Aging60 = "aging60";
            public const string Aging60_Base = "aging60_base";
            public const string Aging90 = "aging90";
            public const string Aging90_Base = "aging90_base";
            public const string Anniversary = "anniversary";
            public const string AnnualIncome = "annualincome";
            public const string AnnualIncome_Base = "annualincome_base";
            public const string AssistantName = "assistantname";
            public const string AssistantPhone = "assistantphone";
            public const string BirthDate = "birthdate";
            public const string Business2 = "business2";
            public const string Callback = "callback";
            public const string ChildrensNames = "childrensnames";
            public const string Company = "company";
            public const string ContactId = "contactid";
            public const string CreatedBy = "createdby";
            public const string CreatedByExternalParty = "createdbyexternalparty";
            public const string CreatedOn = "createdon";
            public const string CreatedOnBehalfBy = "createdonbehalfby";
            public const string CreditLimit = "creditlimit";
            public const string CreditLimit_Base = "creditlimit_base";
            public const string CreditOnHold = "creditonhold";
            public const string CustomerSizeCode = "customersizecode";
            public const string CustomerTypeCode = "customertypecode";
            public const string Department = "department";
            public const string Description = "description";
            public const string devkit_CategoryCode = "devkit_categorycode";
            public const string DoNotBulkEMail = "donotbulkemail";
            public const string DoNotBulkPostalMail = "donotbulkpostalmail";
            public const string DoNotEMail = "donotemail";
            public const string DoNotFax = "donotfax";
            public const string DoNotPhone = "donotphone";
            public const string DoNotPostalMail = "donotpostalmail";
            public const string DoNotSendMM = "donotsendmm";
            public const string EducationCode = "educationcode";
            public const string EMailAddress1 = "emailaddress1";
            public const string EMailAddress2 = "emailaddress2";
            public const string EMailAddress3 = "emailaddress3";
            public const string EmployeeId = "employeeid";
            public const string EntityImageId = "entityimageid";
            public const string ExchangeRate = "exchangerate";
            public const string ExternalUserIdentifier = "externaluseridentifier";
            public const string FamilyStatusCode = "familystatuscode";
            public const string Fax = "fax";
            public const string FirstName = "firstname";
            public const string FollowEmail = "followemail";
            public const string FtpSiteUrl = "ftpsiteurl";
            public const string FullName = "fullname";
            public const string GenderCode = "gendercode";
            public const string GovernmentId = "governmentid";
            public const string HasChildrenCode = "haschildrencode";
            public const string Home2 = "home2";
            public const string ImportSequenceNumber = "importsequencenumber";
            public const string IsAutoCreate = "isautocreate";
            public const string IsBackofficeCustomer = "isbackofficecustomer";
            public const string IsPrivate = "isprivate";
            public const string JobTitle = "jobtitle";
            public const string LastName = "lastname";
            public const string LastOnHoldTime = "lastonholdtime";
            public const string LastUsedInCampaign = "lastusedincampaign";
            public const string LeadSourceCode = "leadsourcecode";
            public const string ManagerName = "managername";
            public const string ManagerPhone = "managerphone";
            public const string MarketingOnly = "marketingonly";
            public const string MasterId = "masterid";
            public const string Merged = "merged";
            public const string MiddleName = "middlename";
            public const string MobilePhone = "mobilephone";
            public const string ModifiedBy = "modifiedby";
            public const string ModifiedByExternalParty = "modifiedbyexternalparty";
            public const string ModifiedOn = "modifiedon";
            public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
            public const string NickName = "nickname";
            public const string NumberOfChildren = "numberofchildren";
            public const string OnHoldTime = "onholdtime";
            public const string OverriddenCreatedOn = "overriddencreatedon";
            public const string OwnerId = "ownerid";
            public const string OwningBusinessUnit = "owningbusinessunit";
            public const string OwningTeam = "owningteam";
            public const string OwningUser = "owninguser";
            public const string Pager = "pager";
            public const string ParentContactId = "parentcontactid";
            public const string ParentCustomerId = "parentcustomerid";
            public const string ParticipatesInWorkflow = "participatesinworkflow";
            public const string PaymentTermsCode = "paymenttermscode";
            public const string PreferredAppointmentDayCode = "preferredappointmentdaycode";
            public const string PreferredAppointmentTimeCode = "preferredappointmenttimecode";
            public const string PreferredContactMethodCode = "preferredcontactmethodcode";
            public const string PreferredSystemUserId = "preferredsystemuserid";
            public const string ProcessId = "processid";
            public const string Salutation = "salutation";
            public const string ShippingMethodCode = "shippingmethodcode";
            public const string SLAId = "slaid";
            public const string SLAInvokedId = "slainvokedid";
            public const string SpousesName = "spousesname";
            public const string StageId = "stageid";
            public const string StateCode = "statecode";
            public const string StatusCode = "statuscode";
            public const string SubscriptionId = "subscriptionid";
            public const string Suffix = "suffix";
            public const string Telephone1 = "telephone1";
            public const string Telephone2 = "telephone2";
            public const string Telephone3 = "telephone3";
            public const string TerritoryCode = "territorycode";
            public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
            public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
            public const string TransactionCurrencyId = "transactioncurrencyid";
            public const string TraversedPath = "traversedpath";
            public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
            public const string VersionNumber = "versionnumber";
            public const string WebSiteUrl = "websiteurl";
            public const string YomiFirstName = "yomifirstname";
            public const string YomiFullName = "yomifullname";
            public const string YomiLastName = "yomilastname";
            public const string YomiMiddleName = "yomimiddlename";
        }

        public const string EntityLogicalName = "contact";

        public const int EntityTypeCode = 2;

        [DebuggerNonUserCode()]
        public Contact()
        {
            Entity = new Entity(EntityLogicalName);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Contact(Guid ContactId)
        {
            Entity = new Entity(EntityLogicalName, ContactId);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Contact(string keyName, object keyValue)
        {
            Entity = new Entity(EntityLogicalName, keyName, keyValue);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Contact(Entity entity)
        {
            Entity = entity;
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Contact(Entity entity, Entity merge)
        {
            Entity = entity;
            foreach (var property in merge?.Attributes)
            {
                var key = property.Key;
                var value = property.Value;
                Entity[key] = value;
            }
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Contact(KeyAttributeCollection keys)
        {
            Entity = new Entity(EntityLogicalName, keys);
            PreEntity = CloneThisEntity(Entity);
        }

        /// <summary>
        /// <para>Unique identifier of the account with which the contact is associated.</para>
        /// <para>ReadOnly - Lookup to account</para>
        /// <para>Account</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference AccountId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
        }

        /// <summary>
        /// <para>Select the contact's role within the company or sales process, such as decision maker, employee, or influencer.</para>
        /// <para>Picklist</para>
        /// <para>Role</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.AccountRoleCode? AccountRoleCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountRoleCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.AccountRoleCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.AccountRoleCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.AccountRoleCode] = null;
            }
        }

        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Address 1: ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? Address1_AddressId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
            set { Entity.Attributes[Fields.Address1_AddressId] = value; }
        }

        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Picklist</para>
        /// <para>Address 1: Address Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_AddressTypeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 1: City</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_City
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
            set { Entity.Attributes[Fields.Address1_City] = value; }
        }

        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>ReadOnly - Memo - MaxLength: 1000</para>
        /// <para>Address 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Composite
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
        }

        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 1: Country/Region</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Country
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
            set { Entity.Attributes[Fields.Address1_Country] = value; }
        }

        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: County</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_County
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
            set { Entity.Attributes[Fields.Address1_County] = value; }
        }

        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: Fax</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Fax
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
            set { Entity.Attributes[Fields.Address1_Fax] = value; }
        }

        /// <summary>
        /// <para>Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
        /// <para>Picklist</para>
        /// <para>Address 1: Freight Terms</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_FreightTermsCode? Address1_FreightTermsCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_FreightTermsCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_FreightTermsCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address1_FreightTermsCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address1_FreightTermsCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -90 - MaxValue: 90</para>
        /// <para>Address 1: Latitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address1_Latitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
            set { Entity.Attributes[Fields.Address1_Latitude] = value; }
        }

        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 1: Street 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Line1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
            set { Entity.Attributes[Fields.Address1_Line1] = value; }
        }

        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 1: Street 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Line2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
            set { Entity.Attributes[Fields.Address1_Line2] = value; }
        }

        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 1: Street 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Line3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
            set { Entity.Attributes[Fields.Address1_Line3] = value; }
        }

        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -180 - MaxValue: 180</para>
        /// <para>Address 1: Longitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address1_Longitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
            set { Entity.Attributes[Fields.Address1_Longitude] = value; }
        }

        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>Address 1: Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Name
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
            set { Entity.Attributes[Fields.Address1_Name] = value; }
        }

        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 1: ZIP/Postal Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_PostalCode
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
            set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
        }

        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 1: Post Office Box</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_PostOfficeBox
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
            set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
        }

        /// <summary>
        /// <para>Type the name of the main contact at the account's primary address.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Address 1: Primary Contact Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_PrimaryContactName
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_PrimaryContactName); }
            set { Entity.Attributes[Fields.Address1_PrimaryContactName] = value; }
        }

        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Picklist</para>
        /// <para>Address 1: Shipping Method</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_ShippingMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: State/Province</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_StateOrProvince
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
            set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
        }

        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Telephone1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
            set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
        }

        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: Telephone 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Telephone2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
            set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
        }

        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 1: Telephone 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_Telephone3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
            set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
        }

        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>String - MaxLength: 4</para>
        /// <para>Address 1: UPS Zone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address1_UPSZone
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
            set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
        }

        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
        /// <para>Address 1: UTC Offset</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? Address1_UTCOffset
        {
            get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
            set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
        }

        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Address 2: ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? Address2_AddressId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
            set { Entity.Attributes[Fields.Address2_AddressId] = value; }
        }

        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Picklist</para>
        /// <para>Address 2: Address Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 2: City</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_City
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
            set { Entity.Attributes[Fields.Address2_City] = value; }
        }

        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>ReadOnly - Memo - MaxLength: 1000</para>
        /// <para>Address 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Composite
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
        }

        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 2: Country/Region</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Country
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
            set { Entity.Attributes[Fields.Address2_Country] = value; }
        }

        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: County</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_County
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
            set { Entity.Attributes[Fields.Address2_County] = value; }
        }

        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: Fax</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Fax
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
            set { Entity.Attributes[Fields.Address2_Fax] = value; }
        }

        /// <summary>
        /// <para>Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
        /// <para>Picklist</para>
        /// <para>Address 2: Freight Terms</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode? Address2_FreightTermsCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_FreightTermsCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address2_FreightTermsCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address2_FreightTermsCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -90 - MaxValue: 90</para>
        /// <para>Address 2: Latitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address2_Latitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
            set { Entity.Attributes[Fields.Address2_Latitude] = value; }
        }

        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 2: Street 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Line1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
            set { Entity.Attributes[Fields.Address2_Line1] = value; }
        }

        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 2: Street 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Line2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
            set { Entity.Attributes[Fields.Address2_Line2] = value; }
        }

        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address 2: Street 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Line3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
            set { Entity.Attributes[Fields.Address2_Line3] = value; }
        }

        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -180 - MaxValue: 180</para>
        /// <para>Address 2: Longitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address2_Longitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
            set { Entity.Attributes[Fields.Address2_Longitude] = value; }
        }

        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Address 2: Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Name
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
            set { Entity.Attributes[Fields.Address2_Name] = value; }
        }

        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 2: ZIP/Postal Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_PostalCode
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
            set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
        }

        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 2: Post Office Box</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_PostOfficeBox
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
            set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
        }

        /// <summary>
        /// <para>Type the name of the main contact at the account's secondary address.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Address 2: Primary Contact Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_PrimaryContactName
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_PrimaryContactName); }
            set { Entity.Attributes[Fields.Address2_PrimaryContactName] = value; }
        }

        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Picklist</para>
        /// <para>Address 2: Shipping Method</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: State/Province</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_StateOrProvince
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
            set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
        }

        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: Telephone 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Telephone1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
            set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
        }

        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: Telephone 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Telephone2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
            set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
        }

        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 2: Telephone 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_Telephone3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
            set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
        }

        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>String - MaxLength: 4</para>
        /// <para>Address 2: UPS Zone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address2_UPSZone
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
            set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
        }

        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
        /// <para>Address 2: UTC Offset</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? Address2_UTCOffset
        {
            get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
            set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
        }

        /// <summary>
        /// <para>Unique identifier for address 3.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Address 3: ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? Address3_AddressId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.Address3_AddressId); }
            set { Entity.Attributes[Fields.Address3_AddressId] = value; }
        }

        /// <summary>
        /// <para>Select the third address type.</para>
        /// <para>Picklist</para>
        /// <para>Address 3: Address Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_AddressTypeCode? Address3_AddressTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_AddressTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_AddressTypeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address3_AddressTypeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address3_AddressTypeCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the city for the 3rd address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address 3: City</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_City
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_City); }
            set { Entity.Attributes[Fields.Address3_City] = value; }
        }

        /// <summary>
        /// <para>Shows the complete third address.</para>
        /// <para>ReadOnly - Memo - MaxLength: 1000</para>
        /// <para>Address 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Composite
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Composite); }
        }

        /// <summary>
        /// <para>the country or region for the 3rd address.</para>
        /// <para>String - MaxLength: 80</para>
        /// <para>Address3: Country/Region</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Country
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Country); }
            set { Entity.Attributes[Fields.Address3_Country] = value; }
        }

        /// <summary>
        /// <para>Type the county for the third address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 3: County</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_County
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_County); }
            set { Entity.Attributes[Fields.Address3_County] = value; }
        }

        /// <summary>
        /// <para>Type the fax number associated with the third address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 3: Fax</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Fax
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Fax); }
            set { Entity.Attributes[Fields.Address3_Fax] = value; }
        }

        /// <summary>
        /// <para>Select the freight terms for the third address to make sure shipping orders are processed correctly.</para>
        /// <para>Picklist</para>
        /// <para>Address 3: Freight Terms</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_FreightTermsCode? Address3_FreightTermsCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_FreightTermsCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_FreightTermsCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address3_FreightTermsCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address3_FreightTermsCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the latitude value for the third address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -90 - MaxValue: 90</para>
        /// <para>Address 3: Latitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address3_Latitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address3_Latitude); }
            set { Entity.Attributes[Fields.Address3_Latitude] = value; }
        }

        /// <summary>
        /// <para>the first line of the 3rd address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address3: Street 1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Line1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Line1); }
            set { Entity.Attributes[Fields.Address3_Line1] = value; }
        }

        /// <summary>
        /// <para>the second line of the 3rd address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address3: Street 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Line2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Line2); }
            set { Entity.Attributes[Fields.Address3_Line2] = value; }
        }

        /// <summary>
        /// <para>the third line of the 3rd address.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Address3: Street 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Line3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Line3); }
            set { Entity.Attributes[Fields.Address3_Line3] = value; }
        }

        /// <summary>
        /// <para>Type the longitude value for the third address for use in mapping and other applications.</para>
        /// <para>Double - MinValue: -180 - MaxValue: 180</para>
        /// <para>Address 3: Longitude</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Address3_Longitude
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Address3_Longitude); }
            set { Entity.Attributes[Fields.Address3_Longitude] = value; }
        }

        /// <summary>
        /// <para>Type a descriptive name for the third address, such as Corporate Headquarters.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>Address 3: Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Name
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Name); }
            set { Entity.Attributes[Fields.Address3_Name] = value; }
        }

        /// <summary>
        /// <para>the ZIP Code or postal code for the 3rd address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address3: ZIP/Postal Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_PostalCode
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_PostalCode); }
            set { Entity.Attributes[Fields.Address3_PostalCode] = value; }
        }

        /// <summary>
        /// <para>the post office box number of the 3rd address.</para>
        /// <para>String - MaxLength: 20</para>
        /// <para>Address 3: Post Office Box</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_PostOfficeBox
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_PostOfficeBox); }
            set { Entity.Attributes[Fields.Address3_PostOfficeBox] = value; }
        }

        /// <summary>
        /// <para>Type the name of the main contact at the account's third address.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Address 3: Primary Contact Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_PrimaryContactName
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_PrimaryContactName); }
            set { Entity.Attributes[Fields.Address3_PrimaryContactName] = value; }
        }

        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Picklist</para>
        /// <para>Address 3: Shipping Method</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_ShippingMethodCode? Address3_ShippingMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_ShippingMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_ShippingMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.Address3_ShippingMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.Address3_ShippingMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>the state or province of the third address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address3: State/Province</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_StateOrProvince
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_StateOrProvince); }
            set { Entity.Attributes[Fields.Address3_StateOrProvince] = value; }
        }

        /// <summary>
        /// <para>Type the main phone number associated with the third address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 3: Telephone1</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Telephone1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone1); }
            set { Entity.Attributes[Fields.Address3_Telephone1] = value; }
        }

        /// <summary>
        /// <para>Type a second phone number associated with the third address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 3: Telephone2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Telephone2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone2); }
            set { Entity.Attributes[Fields.Address3_Telephone2] = value; }
        }

        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Address 3: Telephone3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_Telephone3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone3); }
            set { Entity.Attributes[Fields.Address3_Telephone3] = value; }
        }

        /// <summary>
        /// <para>Type the UPS zone of the third address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>String - MaxLength: 4</para>
        /// <para>Address 3: UPS Zone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Address3_UPSZone
        {
            get { return Entity.GetAttributeValue<string>(Fields.Address3_UPSZone); }
            set { Entity.Attributes[Fields.Address3_UPSZone] = value; }
        }

        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
        /// <para>Address 3: UTC Offset</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? Address3_UTCOffset
        {
            get { return Entity.GetAttributeValue<int?>(Fields.Address3_UTCOffset); }
            set { Entity.Attributes[Fields.Address3_UTCOffset] = value; }
        }

        /// <summary>
        /// <para>For system use only.</para>
        /// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Aging 30</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging30
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging30);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Shows the Aging 30 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Aging 30 (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging30_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging30_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>For system use only.</para>
        /// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Aging 60</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging60
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging60);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Shows the Aging 60 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Aging 60 (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging60_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging60_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>For system use only.</para>
        /// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Aging 90</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging90
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging90);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Shows the Aging 90 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Aging 90 (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? Aging90_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.Aging90_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Enter the date of the contact's wedding or service anniversary for use in customer gift programs or other communications.</para>
        /// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
        /// <para>Anniversary</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Date? Anniversary
        {
            get
            {
                var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.Anniversary);
                if (dateTime == null) return null;
                return dateTime.Value.ToDate();
            }
            set
            {
                if (value.HasValue)
                {
                    DateTime? dateTime = value.Value.ToDateTime();
                    Entity.Attributes[Fields.Anniversary] = dateTime;
                }
                else
                    Entity.Attributes[Fields.Anniversary] = null;
            }
        }

        /// <summary>
        /// <para>Type the contact's annual income for use in profiling and financial analysis.</para>
        /// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Annual Income</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? AnnualIncome
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.AnnualIncome);
                if (value == null) return null;
                return value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.AnnualIncome] = new Money(value.Value);
                else
                    Entity.Attributes[Fields.AnnualIncome] = null;
            }
        }

        /// <summary>
        /// <para>Shows the Annual Income field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Annual Income (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? AnnualIncome_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.AnnualIncome_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Type the name of the contact's assistant.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Assistant</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string AssistantName
        {
            get { return Entity.GetAttributeValue<string>(Fields.AssistantName); }
            set { Entity.Attributes[Fields.AssistantName] = value; }
        }

        /// <summary>
        /// <para>Type the phone number for the contact's assistant.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Assistant Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string AssistantPhone
        {
            get { return Entity.GetAttributeValue<string>(Fields.AssistantPhone); }
            set { Entity.Attributes[Fields.AssistantPhone] = value; }
        }

        /// <summary>
        /// <para>Enter the contact's birthday for use in customer gift programs or other communications.</para>
        /// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
        /// <para>Birthday</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Date? BirthDate
        {
            get
            {
                var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.BirthDate);
                if (dateTime == null) return null;
                return dateTime.Value.ToDate();
            }
            set
            {
                if (value.HasValue)
                {
                    DateTime? dateTime = value.Value.ToDateTime();
                    Entity.Attributes[Fields.BirthDate] = dateTime;
                }
                else
                    Entity.Attributes[Fields.BirthDate] = null;
            }
        }

        /// <summary>
        /// <para>Type a second business phone number for this contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Business Phone 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Business2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Business2); }
            set { Entity.Attributes[Fields.Business2] = value; }
        }

        /// <summary>
        /// <para>Type a callback phone number for this contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Callback Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Callback
        {
            get { return Entity.GetAttributeValue<string>(Fields.Callback); }
            set { Entity.Attributes[Fields.Callback] = value; }
        }

        /// <summary>
        /// <para>Type the names of the contact's children for reference in communications and client programs.</para>
        /// <para>String - MaxLength: 255</para>
        /// <para>Children's Names</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ChildrensNames
        {
            get { return Entity.GetAttributeValue<string>(Fields.ChildrensNames); }
            set { Entity.Attributes[Fields.ChildrensNames] = value; }
        }

        /// <summary>
        /// <para>Type the company phone of the contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Company Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Company
        {
            get { return Entity.GetAttributeValue<string>(Fields.Company); }
            set { Entity.Attributes[Fields.Company] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the contact.</para>
        /// <para>Primary Key - Uniqueidentifier</para>
        /// <para>Contact</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid ContactId
        {
            get { return Id; }
            set
            {
                Entity.Attributes[Fields.ContactId] = value;
                Entity.Id = value;
            }
        }

        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
        }

        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>ReadOnly - Lookup to externalparty</para>
        /// <para>Created By (External Party)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedByExternalParty
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
        }

        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? CreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
        }

        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Type the credit limit of the contact for reference when you address invoice and accounting issues with the customer.</para>
        /// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
        /// <para>Credit Limit</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? CreditLimit
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit);
                if (value == null) return null;
                return value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.CreditLimit] = new Money(value.Value);
                else
                    Entity.Attributes[Fields.CreditLimit] = null;
            }
        }

        /// <summary>
        /// <para>Shows the Credit Limit field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
        /// <para>Credit Limit (Base)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? CreditLimit_Base
        {
            get
            {
                var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit_Base);
                if (value == null) return null;
                return value.Value;
            }
        }

        /// <summary>
        /// <para>Select whether the contact is on a credit hold, for reference when addressing invoice and accounting issues.</para>
        /// <para>Boolean</para>
        /// <para>Credit Hold</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? CreditOnHold
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.CreditOnHold); }
            set { Entity.Attributes[Fields.CreditOnHold] = value; }
        }

        /// <summary>
        /// <para>Select the size of the contact's company for segmentation and reporting purposes.</para>
        /// <para>Picklist</para>
        /// <para>Customer Size</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode? CustomerSizeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerSizeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.CustomerSizeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.CustomerSizeCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the category that best describes the relationship between the contact and your organization.</para>
        /// <para>Picklist</para>
        /// <para>Relationship Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode? CustomerTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.CustomerTypeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.CustomerTypeCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the department or business unit where the contact works in the parent company or business.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Department</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Department
        {
            get { return Entity.GetAttributeValue<string>(Fields.Department); }
            set { Entity.Attributes[Fields.Department] = value; }
        }

        /// <summary>
        /// <para>Type additional information to describe the contact, such as an excerpt from the company's website.</para>
        /// <para>Memo - MaxLength: 2000</para>
        /// <para>Description</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Description
        {
            get { return Entity.GetAttributeValue<string>(Fields.Description); }
            set { Entity.Attributes[Fields.Description] = value; }
        }

        /// <summary>
        /// <para>MultiSelectPicklist</para>
        /// <para>Category</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.ContactOptionSets.devkit_CategoryCode> devkit_CategoryCode
        {
            get
            {
                var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.ContactOptionSets.devkit_CategoryCode>();
                var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.devkit_CategoryCode);
                if (items != null)
                {
                    foreach (OptionSetValue item in items)
                    {
                        data.Add((Dev.DevKit.Shared.Entities.ContactOptionSets.devkit_CategoryCode)item.Value);
                    }
                }
                return data;
            }
            set
            {
                var data = new OptionSetValueCollection();
                foreach (var item in value)
                {
                    data.Add(new OptionSetValue((int)item));
                }
                if (data.Count == 0)
                {
                    Entity.Attributes[Fields.devkit_CategoryCode] = null;
                }
                else
                {
                    Entity.Attributes[Fields.devkit_CategoryCode] = data;
                }
            }
        }

        /// <summary>
        /// <para>Select whether the contact accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the email.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Bulk Emails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotBulkEMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkEMail); }
            set { Entity.Attributes[Fields.DoNotBulkEMail] = value; }
        }

        /// <summary>
        /// <para>Select whether the contact accepts bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the letters.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Bulk Mails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotBulkPostalMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkPostalMail); }
            set { Entity.Attributes[Fields.DoNotBulkPostalMail] = value; }
        }

        /// <summary>
        /// <para>Select whether the contact allows direct email sent from Microsoft Dynamics 365. If Do Not Allow is selected, Microsoft Dynamics 365 will not send the email.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Emails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotEMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEMail); }
            set { Entity.Attributes[Fields.DoNotEMail] = value; }
        }

        /// <summary>
        /// <para>Select whether the contact allows faxes. If Do Not Allow is selected, the contact will be excluded from any fax activities distributed in marketing campaigns.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Faxes</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotFax
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
            set { Entity.Attributes[Fields.DoNotFax] = value; }
        }

        /// <summary>
        /// <para>Select whether the contact accepts phone calls. If Do Not Allow is selected, the contact will be excluded from any phone call activities distributed in marketing campaigns.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Phone Calls</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotPhone
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
            set { Entity.Attributes[Fields.DoNotPhone] = value; }
        }

        /// <summary>
        /// <para>Select whether the contact allows direct mail. If Do Not Allow is selected, the contact will be excluded from letter activities distributed in marketing campaigns.</para>
        /// <para>Boolean</para>
        /// <para>Do not allow Mails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotPostalMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
            set { Entity.Attributes[Fields.DoNotPostalMail] = value; }
        }

        /// <summary>
        /// <para>Select whether the contact accepts marketing materials, such as brochures or catalogs. Contacts that opt out can be excluded from marketing initiatives.</para>
        /// <para>Boolean</para>
        /// <para>Send Marketing Materials</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotSendMM
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendMM); }
            set { Entity.Attributes[Fields.DoNotSendMM] = value; }
        }

        /// <summary>
        /// <para>Select the contact's highest level of education for use in segmentation and analysis.</para>
        /// <para>Picklist</para>
        /// <para>Education</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode? EducationCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EducationCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.EducationCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.EducationCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the primary email address for the contact.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Email</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EMailAddress1
        {
            get { return Entity.GetAttributeValue<string>(Fields.EMailAddress1); }
            set { Entity.Attributes[Fields.EMailAddress1] = value; }
        }

        /// <summary>
        /// <para>Type the secondary email address for the contact.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Email Address 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EMailAddress2
        {
            get { return Entity.GetAttributeValue<string>(Fields.EMailAddress2); }
            set { Entity.Attributes[Fields.EMailAddress2] = value; }
        }

        /// <summary>
        /// <para>Type an alternate email address for the contact.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Email Address 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EMailAddress3
        {
            get { return Entity.GetAttributeValue<string>(Fields.EMailAddress3); }
            set { Entity.Attributes[Fields.EMailAddress3] = value; }
        }

        /// <summary>
        /// <para>Type the employee ID or number for the contact for reference in orders, service cases, or other communications with the contact's organization.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Employee</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EmployeeId
        {
            get { return Entity.GetAttributeValue<string>(Fields.EmployeeId); }
            set { Entity.Attributes[Fields.EmployeeId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>ReadOnly - Uniqueidentifier</para>
        /// <para>Entity Image Id</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? EntityImageId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
        }

        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
        /// <para>Exchange Rate</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? ExchangeRate
        {
            get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
        }

        /// <summary>
        /// <para>Identifier for an external user.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>External User Identifier</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ExternalUserIdentifier
        {
            get { return Entity.GetAttributeValue<string>(Fields.ExternalUserIdentifier); }
            set { Entity.Attributes[Fields.ExternalUserIdentifier] = value; }
        }

        /// <summary>
        /// <para>Select the marital status of the contact for reference in follow-up phone calls and other communications.</para>
        /// <para>Picklist</para>
        /// <para>Marital Status</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.FamilyStatusCode? FamilyStatusCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FamilyStatusCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.FamilyStatusCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.FamilyStatusCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.FamilyStatusCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the fax number for the contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Fax</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Fax
        {
            get { return Entity.GetAttributeValue<string>(Fields.Fax); }
            set { Entity.Attributes[Fields.Fax] = value; }
        }

        /// <summary>
        /// <para>Type the contact's first name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>First Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string FirstName
        {
            get { return Entity.GetAttributeValue<string>(Fields.FirstName); }
            set { Entity.Attributes[Fields.FirstName] = value; }
        }

        /// <summary>
        /// <para>Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the contact.</para>
        /// <para>Boolean</para>
        /// <para>Follow Email Activity</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? FollowEmail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmail); }
            set { Entity.Attributes[Fields.FollowEmail] = value; }
        }

        /// <summary>
        /// <para>Type the URL for the contact's FTP site to enable users to access data and share documents.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>FTP Site</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string FtpSiteUrl
        {
            get { return Entity.GetAttributeValue<string>(Fields.FtpSiteUrl); }
            set { Entity.Attributes[Fields.FtpSiteUrl] = value; }
        }

        /// <summary>
        /// <para>Combines and shows the contact's first and last names so that the full name can be displayed in views and reports.</para>
        /// <para>ReadOnly - String - MaxLength: 160</para>
        /// <para>Full Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string FullName
        {
            get { return Entity.GetAttributeValue<string>(Fields.FullName); }
        }

        /// <summary>
        /// <para>Select the contact's gender to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Picklist</para>
        /// <para>Gender</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.GenderCode? GenderCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.GenderCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.GenderCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.GenderCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.GenderCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the passport number or other government ID for the contact for use in documents or reports.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Government</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string GovernmentId
        {
            get { return Entity.GetAttributeValue<string>(Fields.GovernmentId); }
            set { Entity.Attributes[Fields.GovernmentId] = value; }
        }

        /// <summary>
        /// <para>Select whether the contact has any children for reference in follow-up phone calls and other communications.</para>
        /// <para>Picklist</para>
        /// <para>Has Children</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode? HasChildrenCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.HasChildrenCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.HasChildrenCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.HasChildrenCode] = null;
            }
        }

        /// <summary>
        /// <para>Type a second home phone number for this contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Home Phone 2</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Home2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Home2); }
            set { Entity.Attributes[Fields.Home2] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Import Sequence Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ImportSequenceNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
            set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
        }

        /// <summary>
        /// <para>Information about whether the contact was auto-created when promoting an email or an appointment.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Auto-created</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsAutoCreate
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoCreate); }
        }

        /// <summary>
        /// <para>Select whether the contact exists in a separate accounting or other system, such as Microsoft Dynamics GP or another ERP database, for use in integration processes.</para>
        /// <para>Boolean</para>
        /// <para>Back Office Customer</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsBackofficeCustomer
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsBackofficeCustomer); }
            set { Entity.Attributes[Fields.IsBackofficeCustomer] = value; }
        }

        /// <summary>
        /// <para>ReadOnly - Boolean</para>
        /// <para></para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsPrivate
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
        }

        /// <summary>
        /// <para>Type the job title of the contact to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Job Title</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string JobTitle
        {
            get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
            set { Entity.Attributes[Fields.JobTitle] = value; }
        }

        /// <summary>
        /// <para>Type the contact's last name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Required - String - MaxLength: 50</para>
        /// <para>Last Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string LastName
        {
            get { return Entity.GetAttributeValue<string>(Fields.LastName); }
            set { Entity.Attributes[Fields.LastName] = value; }
        }

        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Last On Hold Time</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? LastOnHoldTimeUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
            set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
        }

        /// <summary>
        /// <para>Shows the date when the contact was last included in a marketing campaign or quick campaign.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Last Date Included in Campaign</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? LastUsedInCampaignUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedInCampaign); }
            set { Entity.Attributes[Fields.LastUsedInCampaign] = value; }
        }

        /// <summary>
        /// <para>Select the primary marketing source that directed the contact to your organization.</para>
        /// <para>Picklist</para>
        /// <para>Lead Source</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode? LeadSourceCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LeadSourceCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.LeadSourceCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.LeadSourceCode] = null;
            }
        }

        /// <summary>
        /// <para>Type the name of the contact's manager for use in escalating issues or other follow-up communications with the contact.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Manager</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ManagerName
        {
            get { return Entity.GetAttributeValue<string>(Fields.ManagerName); }
            set { Entity.Attributes[Fields.ManagerName] = value; }
        }

        /// <summary>
        /// <para>Type the phone number for the contact's manager.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Manager Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ManagerPhone
        {
            get { return Entity.GetAttributeValue<string>(Fields.ManagerPhone); }
            set { Entity.Attributes[Fields.ManagerPhone] = value; }
        }

        /// <summary>
        /// <para>Whether is only for marketing</para>
        /// <para>Boolean</para>
        /// <para>Marketing Only</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? MarketingOnly
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.MarketingOnly); }
            set { Entity.Attributes[Fields.MarketingOnly] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the master contact for merge.</para>
        /// <para>ReadOnly - Lookup to contact</para>
        /// <para>Master ID</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference MasterId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
        }

        /// <summary>
        /// <para>Shows whether the account has been merged with a master contact.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Merged</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? Merged
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
        }

        /// <summary>
        /// <para>Type the contact's middle name or initial to make sure the contact is addressed correctly.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Middle Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string MiddleName
        {
            get { return Entity.GetAttributeValue<string>(Fields.MiddleName); }
            set { Entity.Attributes[Fields.MiddleName] = value; }
        }

        /// <summary>
        /// <para>Type the mobile phone number for the contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Mobile Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string MobilePhone
        {
            get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
            set { Entity.Attributes[Fields.MobilePhone] = value; }
        }

        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
        }

        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>ReadOnly - Lookup to externalparty</para>
        /// <para>Modified By (External Party)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedByExternalParty
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
        }

        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Modified On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ModifiedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
        }

        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Type the contact's nickname.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Nickname</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string NickName
        {
            get { return Entity.GetAttributeValue<string>(Fields.NickName); }
            set { Entity.Attributes[Fields.NickName] = value; }
        }

        /// <summary>
        /// <para>Type the number of children the contact has for reference in follow-up phone calls and other communications.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
        /// <para>No. of Children</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? NumberOfChildren
        {
            get { return Entity.GetAttributeValue<int?>(Fields.NumberOfChildren); }
            set { Entity.Attributes[Fields.NumberOfChildren] = value; }
        }

        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>On Hold Time (Minutes)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? OnHoldTime
        {
            get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
        }

        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Record Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? OverriddenCreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
            set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
        }

        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Owner</para>
        /// <para>Owner</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwnerId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
            set { Entity.Attributes[Fields.OwnerId] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the business unit that owns the contact.</para>
        /// <para>ReadOnly - Lookup to businessunit</para>
        /// <para>Owning Business Unit</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningBusinessUnit
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
        }

        /// <summary>
        /// <para>Unique identifier of the team who owns the contact.</para>
        /// <para>ReadOnly - Lookup to team</para>
        /// <para>Owning Team</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningTeam
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
        }

        /// <summary>
        /// <para>Unique identifier of the user who owns the contact.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Owning User</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningUser
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
        }

        /// <summary>
        /// <para>Type the pager number for the contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Pager</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Pager
        {
            get { return Entity.GetAttributeValue<string>(Fields.Pager); }
            set { Entity.Attributes[Fields.Pager] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the parent contact.</para>
        /// <para>ReadOnly - Lookup to contact</para>
        /// <para>Parent Contact</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ParentContactId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentContactId); }
        }

        /// <summary>
        /// <para>Select the parent account or parent contact for the contact to provide a quick link to additional details, such as financial information, activities, and opportunities.</para>
        /// <para>Customer</para>
        /// <para>Company Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ParentCustomerId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentCustomerId); }
            set { Entity.Attributes[Fields.ParentCustomerId] = value; }
        }

        /// <summary>
        /// <para>Shows whether the contact participates in workflow rules.</para>
        /// <para>Boolean</para>
        /// <para>Participates in Workflow</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? ParticipatesInWorkflow
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
            set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
        }

        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Picklist</para>
        /// <para>Payment Terms</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.PaymentTermsCode? PaymentTermsCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentTermsCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.PaymentTermsCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PaymentTermsCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PaymentTermsCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the preferred day of the week for service appointments.</para>
        /// <para>Picklist</para>
        /// <para>Preferred Day</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentDayCode? PreferredAppointmentDayCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentDayCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentDayCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PreferredAppointmentDayCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PreferredAppointmentDayCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the preferred time of day for service appointments.</para>
        /// <para>Picklist</para>
        /// <para>Preferred Time</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode? PreferredAppointmentTimeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentTimeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PreferredAppointmentTimeCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PreferredAppointmentTimeCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Picklist</para>
        /// <para>Preferred Method of Contact</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode? PreferredContactMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredContactMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PreferredContactMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PreferredContactMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>Choose the regular or preferred customer service representative for reference when scheduling service activities for the contact.</para>
        /// <para>Lookup to systemuser</para>
        /// <para>Preferred User</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference PreferredSystemUserId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.PreferredSystemUserId); }
            set { Entity.Attributes[Fields.PreferredSystemUserId] = value; }
        }

        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Process</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? ProcessId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
            set { Entity.Attributes[Fields.ProcessId] = value; }
        }

        /// <summary>
        /// <para>Type the salutation of the contact to make sure the contact is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Salutation</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Salutation
        {
            get { return Entity.GetAttributeValue<string>(Fields.Salutation); }
            set { Entity.Attributes[Fields.Salutation] = value; }
        }

        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Picklist</para>
        /// <para>Shipping Method</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode? ShippingMethodCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.ShippingMethodCode] = null;
            }
        }

        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Contact record.</para>
        /// <para>Lookup to sla</para>
        /// <para>SLA</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SLAId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
            set { Entity.Attributes[Fields.SLAId] = value; }
        }

        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>ReadOnly - Lookup to sla</para>
        /// <para>Last SLA applied</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SLAInvokedId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
        }

        /// <summary>
        /// <para>Type the name of the contact's spouse or partner for reference during calls, events, or other communications with the contact.</para>
        /// <para>String - MaxLength: 100</para>
        /// <para>Spouse/Partner Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string SpousesName
        {
            get { return Entity.GetAttributeValue<string>(Fields.SpousesName); }
            set { Entity.Attributes[Fields.SpousesName] = value; }
        }

        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>(Deprecated) Process Stage</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? StageId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
            set { Entity.Attributes[Fields.StageId] = value; }
        }

        /// <summary>
        /// <para>Shows whether the contact is active or inactive. Inactive contacts are read-only and can't be edited unless they are reactivated.</para>
        /// <para>State</para>
        /// <para>Status</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode? StateCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.StateCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the contact's status.</para>
        /// <para>Status</para>
        /// <para>Status Reason</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.StatusCode? StatusCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.StatusCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.StatusCode] = null;
            }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Subscription</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? SubscriptionId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
            set { Entity.Attributes[Fields.SubscriptionId] = value; }
        }

        /// <summary>
        /// <para>Type the suffix used in the contact's name, such as Jr. or Sr. to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>String - MaxLength: 10</para>
        /// <para>Suffix</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Suffix
        {
            get { return Entity.GetAttributeValue<string>(Fields.Suffix); }
            set { Entity.Attributes[Fields.Suffix] = value; }
        }

        /// <summary>
        /// <para>Type the main phone number for this contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Business Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Telephone1
        {
            get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
            set { Entity.Attributes[Fields.Telephone1] = value; }
        }

        /// <summary>
        /// <para>Type a second phone number for this contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Home Phone</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Telephone2
        {
            get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
            set { Entity.Attributes[Fields.Telephone2] = value; }
        }

        /// <summary>
        /// <para>Type a third phone number for this contact.</para>
        /// <para>String - MaxLength: 50</para>
        /// <para>Telephone 3</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Telephone3
        {
            get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
            set { Entity.Attributes[Fields.Telephone3] = value; }
        }

        /// <summary>
        /// <para>Select a region or territory for the contact for use in segmentation and analysis.</para>
        /// <para>Picklist</para>
        /// <para>Territory</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode? TerritoryCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TerritoryCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.TerritoryCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.TerritoryCode] = null;
            }
        }

        /// <summary>
        /// <para>Total time spent for emails (read and write) and meetings by me in relation to the contact record.</para>
        /// <para>ReadOnly - String - MaxLength: 1250</para>
        /// <para>Time Spent by me</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string TimeSpentByMeOnEmailAndMeetings
        {
            get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>Time Zone Rule Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? TimeZoneRuleVersionNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
            set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
        }

        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Lookup to transactioncurrency</para>
        /// <para>Currency</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference TransactionCurrencyId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
            set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>String - MaxLength: 1250</para>
        /// <para>(Deprecated) Traversed Path</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string TraversedPath
        {
            get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
            set { Entity.Attributes[Fields.TraversedPath] = value; }
        }

        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>UTC Conversion Time Zone Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? UTCConversionTimeZoneCode
        {
            get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
            set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
        }

        /// <summary>
        /// <para>Version number of the contact.</para>
        /// <para>ReadOnly - BigInt</para>
        /// <para>Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public long? VersionNumber
        {
            get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
        }

        /// <summary>
        /// <para>Type the contact's professional or personal website or blog URL.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>Website</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string WebSiteUrl
        {
            get { return Entity.GetAttributeValue<string>(Fields.WebSiteUrl); }
            set { Entity.Attributes[Fields.WebSiteUrl] = value; }
        }

        /// <summary>
        /// <para>Type the phonetic spelling of the contact's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>String - MaxLength: 150</para>
        /// <para>Yomi First Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string YomiFirstName
        {
            get { return Entity.GetAttributeValue<string>(Fields.YomiFirstName); }
            set { Entity.Attributes[Fields.YomiFirstName] = value; }
        }

        /// <summary>
        /// <para>Shows the combined Yomi first and last names of the contact so that the full phonetic name can be displayed in views and reports.</para>
        /// <para>ReadOnly - String - MaxLength: 450</para>
        /// <para>Yomi Full Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string YomiFullName
        {
            get { return Entity.GetAttributeValue<string>(Fields.YomiFullName); }
        }

        /// <summary>
        /// <para>Type the phonetic spelling of the contact's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>String - MaxLength: 150</para>
        /// <para>Yomi Last Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string YomiLastName
        {
            get { return Entity.GetAttributeValue<string>(Fields.YomiLastName); }
            set { Entity.Attributes[Fields.YomiLastName] = value; }
        }

        /// <summary>
        /// <para>Type the phonetic spelling of the contact's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>String - MaxLength: 150</para>
        /// <para>Yomi Middle Name</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string YomiMiddleName
        {
            get { return Entity.GetAttributeValue<string>(Fields.YomiMiddleName); }
            set { Entity.Attributes[Fields.YomiMiddleName] = value; }
        }

        /// <summary>
        /// <para>byte[]</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public byte[] EntityImage
        {
            get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
            set { Entity.Attributes["entityimage"] = value; }
        }

        /// <summary>
        /// <para>ReadOnly - String</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string EntityImageUrl
        {
            get { return Entity.GetAttributeValue<string>("entityimage_url"); }
        }
    }
}

