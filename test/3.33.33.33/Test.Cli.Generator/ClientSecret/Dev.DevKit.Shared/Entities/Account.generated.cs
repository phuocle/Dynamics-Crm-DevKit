//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2023-10-09 10:54:06
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.AccountOptionSets
{
	public enum AccountCategoryCode
	{
		/// <summary>
		/// <para>Display Name = Preferred Customer</para>
		/// <para>Value = 1</para>
		/// </summary>
		Preferred_Customer = 1,
		/// <summary>
		/// <para>Display Name = Standard</para>
		/// <para>Value = 2</para>
		/// </summary>
		Standard = 2
	}
	public enum AccountClassificationCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum AccountRatingCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// <para>Display Name = Bill To</para>
		/// <para>Value = 1</para>
		/// </summary>
		Bill_To = 1,
		/// <summary>
		/// <para>Display Name = Other</para>
		/// <para>Value = 4</para>
		/// </summary>
		Other = 4,
		/// <summary>
		/// <para>Display Name = Primary</para>
		/// <para>Value = 3</para>
		/// </summary>
		Primary = 3,
		/// <summary>
		/// <para>Display Name = Ship To</para>
		/// <para>Value = 2</para>
		/// </summary>
		Ship_To = 2
	}
	public enum Address1_FreightTermsCode
	{
		/// <summary>
		/// <para>Display Name = FOB</para>
		/// <para>Value = 1</para>
		/// </summary>
		FOB = 1,
		/// <summary>
		/// <para>Display Name = No Charge</para>
		/// <para>Value = 2</para>
		/// </summary>
		No_Charge = 2
	}
	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// <para>Display Name = Airborne</para>
		/// <para>Value = 1</para>
		/// </summary>
		Airborne = 1,
		/// <summary>
		/// <para>Display Name = DHL</para>
		/// <para>Value = 2</para>
		/// </summary>
		DHL = 2,
		/// <summary>
		/// <para>Display Name = FedEx</para>
		/// <para>Value = 3</para>
		/// </summary>
		FedEx = 3,
		/// <summary>
		/// <para>Display Name = Full Load</para>
		/// <para>Value = 6</para>
		/// </summary>
		Full_Load = 6,
		/// <summary>
		/// <para>Display Name = Postal Mail</para>
		/// <para>Value = 5</para>
		/// </summary>
		Postal_Mail = 5,
		/// <summary>
		/// <para>Display Name = UPS</para>
		/// <para>Value = 4</para>
		/// </summary>
		UPS = 4,
		/// <summary>
		/// <para>Display Name = Will Call</para>
		/// <para>Value = 7</para>
		/// </summary>
		Will_Call = 7
	}
	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_FreightTermsCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum BusinessTypeCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum CustomerSizeCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum CustomerTypeCode
	{
		/// <summary>
		/// <para>Display Name = Competitor</para>
		/// <para>Value = 1</para>
		/// </summary>
		Competitor = 1,
		/// <summary>
		/// <para>Display Name = Consultant</para>
		/// <para>Value = 2</para>
		/// </summary>
		Consultant = 2,
		/// <summary>
		/// <para>Display Name = Customer</para>
		/// <para>Value = 3</para>
		/// </summary>
		Customer = 3,
		/// <summary>
		/// <para>Display Name = Influencer</para>
		/// <para>Value = 6</para>
		/// </summary>
		Influencer = 6,
		/// <summary>
		/// <para>Display Name = Investor</para>
		/// <para>Value = 4</para>
		/// </summary>
		Investor = 4,
		/// <summary>
		/// <para>Display Name = Other</para>
		/// <para>Value = 12</para>
		/// </summary>
		Other = 12,
		/// <summary>
		/// <para>Display Name = Partner</para>
		/// <para>Value = 5</para>
		/// </summary>
		Partner = 5,
		/// <summary>
		/// <para>Display Name = Press</para>
		/// <para>Value = 7</para>
		/// </summary>
		Press = 7,
		/// <summary>
		/// <para>Display Name = Prospect</para>
		/// <para>Value = 8</para>
		/// </summary>
		Prospect = 8,
		/// <summary>
		/// <para>Display Name = Reseller</para>
		/// <para>Value = 9</para>
		/// </summary>
		Reseller = 9,
		/// <summary>
		/// <para>Display Name = Supplier</para>
		/// <para>Value = 10</para>
		/// </summary>
		Supplier = 10,
		/// <summary>
		/// <para>Display Name = Vendor</para>
		/// <para>Value = 11</para>
		/// </summary>
		Vendor = 11
	}
	public enum devkit_CategoryCode
	{
		/// <summary>
		/// <para>Display Name = Bu; siness</para>
		/// <para>Value = 1</para>
		/// </summary>
		Bu_siness = 1,
		/// <summary>
		/// <para>Display Name = Family</para>
		/// <para>Value = 2</para>
		/// </summary>
		Family = 2,
		/// <summary>
		/// <para>Display Name = Other</para>
		/// <para>Value = 5</para>
		/// </summary>
		Other = 5,
		/// <summary>
		/// <para>Display Name = Sales</para>
		/// <para>Value = 4</para>
		/// </summary>
		Sales = 4,
		/// <summary>
		/// <para>Display Name = Sales Team</para>
		/// <para>Value = 1,001</para>
		/// </summary>
		Sales_Team = 1_001,
		/// <summary>
		/// <para>Display Name = Service</para>
		/// <para>Value = 1,002</para>
		/// </summary>
		Service = 1_002,
		/// <summary>
		/// <para>Display Name = Social</para>
		/// <para>Value = 3</para>
		/// </summary>
		Social = 3,
		/// <summary>
		/// <para>Display Name = Stakeholder</para>
		/// <para>Value = 1,000</para>
		/// </summary>
		Stakeholder = 1_000
	}
	public enum IndustryCode
	{
		/// <summary>
		/// <para>Display Name = Accounting</para>
		/// <para>Value = 1</para>
		/// </summary>
		Accounting = 1,
		/// <summary>
		/// <para>Display Name = Agriculture and Non-petrol Natural Resource Extraction</para>
		/// <para>Value = 2</para>
		/// </summary>
		Agriculture_and_Non_petrol_Natural_Resource_Extraction = 2,
		/// <summary>
		/// <para>Display Name = Broadcasting Printing and Publishing</para>
		/// <para>Value = 3</para>
		/// </summary>
		Broadcasting_Printing_and_Publishing = 3,
		/// <summary>
		/// <para>Display Name = Brokers</para>
		/// <para>Value = 4</para>
		/// </summary>
		Brokers = 4,
		/// <summary>
		/// <para>Display Name = Building Supply Retail</para>
		/// <para>Value = 5</para>
		/// </summary>
		Building_Supply_Retail = 5,
		/// <summary>
		/// <para>Display Name = Business Services</para>
		/// <para>Value = 6</para>
		/// </summary>
		Business_Services = 6,
		/// <summary>
		/// <para>Display Name = Consulting</para>
		/// <para>Value = 7</para>
		/// </summary>
		Consulting = 7,
		/// <summary>
		/// <para>Display Name = Consumer Services</para>
		/// <para>Value = 8</para>
		/// </summary>
		Consumer_Services = 8,
		/// <summary>
		/// <para>Display Name = Design, Direction and Creative Management</para>
		/// <para>Value = 9</para>
		/// </summary>
		Design_Direction_and_Creative_Management = 9,
		/// <summary>
		/// <para>Display Name = Distributors, Dispatchers and Processors</para>
		/// <para>Value = 10</para>
		/// </summary>
		Distributors_Dispatchers_and_Processors = 10,
		/// <summary>
		/// <para>Display Name = Doctor's Offices and Clinics</para>
		/// <para>Value = 11</para>
		/// </summary>
		Doctors_Offices_and_Clinics = 11,
		/// <summary>
		/// <para>Display Name = Durable Manufacturing</para>
		/// <para>Value = 12</para>
		/// </summary>
		Durable_Manufacturing = 12,
		/// <summary>
		/// <para>Display Name = Eating and Drinking Places</para>
		/// <para>Value = 13</para>
		/// </summary>
		Eating_and_Drinking_Places = 13,
		/// <summary>
		/// <para>Display Name = Entertainment Retail</para>
		/// <para>Value = 14</para>
		/// </summary>
		Entertainment_Retail = 14,
		/// <summary>
		/// <para>Display Name = Equipment Rental and Leasing</para>
		/// <para>Value = 15</para>
		/// </summary>
		Equipment_Rental_and_Leasing = 15,
		/// <summary>
		/// <para>Display Name = Financial</para>
		/// <para>Value = 16</para>
		/// </summary>
		Financial = 16,
		/// <summary>
		/// <para>Display Name = Food and Tobacco Processing</para>
		/// <para>Value = 17</para>
		/// </summary>
		Food_and_Tobacco_Processing = 17,
		/// <summary>
		/// <para>Display Name = Inbound Capital Intensive Processing</para>
		/// <para>Value = 18</para>
		/// </summary>
		Inbound_Capital_Intensive_Processing = 18,
		/// <summary>
		/// <para>Display Name = Inbound Repair and Services</para>
		/// <para>Value = 19</para>
		/// </summary>
		Inbound_Repair_and_Services = 19,
		/// <summary>
		/// <para>Display Name = Insurance</para>
		/// <para>Value = 20</para>
		/// </summary>
		Insurance = 20,
		/// <summary>
		/// <para>Display Name = Legal Services</para>
		/// <para>Value = 21</para>
		/// </summary>
		Legal_Services = 21,
		/// <summary>
		/// <para>Display Name = Non-Durable Merchandise Retail</para>
		/// <para>Value = 22</para>
		/// </summary>
		Non_Durable_Merchandise_Retail = 22,
		/// <summary>
		/// <para>Display Name = Outbound Consumer Service</para>
		/// <para>Value = 23</para>
		/// </summary>
		Outbound_Consumer_Service = 23,
		/// <summary>
		/// <para>Display Name = Petrochemical Extraction and Distribution</para>
		/// <para>Value = 24</para>
		/// </summary>
		Petrochemical_Extraction_and_Distribution = 24,
		/// <summary>
		/// <para>Display Name = Service Retail</para>
		/// <para>Value = 25</para>
		/// </summary>
		Service_Retail = 25,
		/// <summary>
		/// <para>Display Name = SIG Affiliations</para>
		/// <para>Value = 26</para>
		/// </summary>
		SIG_Affiliations = 26,
		/// <summary>
		/// <para>Display Name = Social Services</para>
		/// <para>Value = 27</para>
		/// </summary>
		Social_Services = 27,
		/// <summary>
		/// <para>Display Name = Special Outbound Trade Contractors</para>
		/// <para>Value = 28</para>
		/// </summary>
		Special_Outbound_Trade_Contractors = 28,
		/// <summary>
		/// <para>Display Name = Specialty Realty</para>
		/// <para>Value = 29</para>
		/// </summary>
		Specialty_Realty = 29,
		/// <summary>
		/// <para>Display Name = Transportation</para>
		/// <para>Value = 30</para>
		/// </summary>
		Transportation = 30,
		/// <summary>
		/// <para>Display Name = Utility Creation and Distribution</para>
		/// <para>Value = 31</para>
		/// </summary>
		Utility_Creation_and_Distribution = 31,
		/// <summary>
		/// <para>Display Name = Vehicle Retail</para>
		/// <para>Value = 32</para>
		/// </summary>
		Vehicle_Retail = 32,
		/// <summary>
		/// <para>Display Name = Wholesale</para>
		/// <para>Value = 33</para>
		/// </summary>
		Wholesale = 33
	}
	public enum msft_DataState
	{
		/// <summary>
		/// <para>Display Name = Default</para>
		/// <para>Value = 0</para>
		/// </summary>
		Default = 0,
		/// <summary>
		/// <para>Display Name = Retain</para>
		/// <para>Value = 1</para>
		/// </summary>
		Retain = 1
	}
	public enum OwnershipCode
	{
		/// <summary>
		/// <para>Display Name = Other</para>
		/// <para>Value = 4</para>
		/// </summary>
		Other = 4,
		/// <summary>
		/// <para>Display Name = Private</para>
		/// <para>Value = 2</para>
		/// </summary>
		Private = 2,
		/// <summary>
		/// <para>Display Name = Public</para>
		/// <para>Value = 1</para>
		/// </summary>
		Public = 1,
		/// <summary>
		/// <para>Display Name = Subsidiary</para>
		/// <para>Value = 3</para>
		/// </summary>
		Subsidiary = 3
	}
	public enum PaymentTermsCode
	{
		/// <summary>
		/// <para>Display Name = 2% 10, Net 30</para>
		/// <para>Value = 2</para>
		/// </summary>
		_2_10_Net_30 = 2,
		/// <summary>
		/// <para>Display Name = Net 30</para>
		/// <para>Value = 1</para>
		/// </summary>
		Net_30 = 1,
		/// <summary>
		/// <para>Display Name = Net 45</para>
		/// <para>Value = 3</para>
		/// </summary>
		Net_45 = 3,
		/// <summary>
		/// <para>Display Name = Net 60</para>
		/// <para>Value = 4</para>
		/// </summary>
		Net_60 = 4
	}
	public enum PreferredAppointmentDayCode
	{
		/// <summary>
		/// <para>Display Name = Friday</para>
		/// <para>Value = 5</para>
		/// </summary>
		Friday = 5,
		/// <summary>
		/// <para>Display Name = Monday</para>
		/// <para>Value = 1</para>
		/// </summary>
		Monday = 1,
		/// <summary>
		/// <para>Display Name = Saturday</para>
		/// <para>Value = 6</para>
		/// </summary>
		Saturday = 6,
		/// <summary>
		/// <para>Display Name = Sunday</para>
		/// <para>Value = 0</para>
		/// </summary>
		Sunday = 0,
		/// <summary>
		/// <para>Display Name = Thursday</para>
		/// <para>Value = 4</para>
		/// </summary>
		Thursday = 4,
		/// <summary>
		/// <para>Display Name = Tuesday</para>
		/// <para>Value = 2</para>
		/// </summary>
		Tuesday = 2,
		/// <summary>
		/// <para>Display Name = Wednesday</para>
		/// <para>Value = 3</para>
		/// </summary>
		Wednesday = 3
	}
	public enum PreferredAppointmentTimeCode
	{
		/// <summary>
		/// <para>Display Name = Afternoon</para>
		/// <para>Value = 2</para>
		/// </summary>
		Afternoon = 2,
		/// <summary>
		/// <para>Display Name = Evening</para>
		/// <para>Value = 3</para>
		/// </summary>
		Evening = 3,
		/// <summary>
		/// <para>Display Name = Morning</para>
		/// <para>Value = 1</para>
		/// </summary>
		Morning = 1
	}
	public enum PreferredContactMethodCode
	{
		/// <summary>
		/// <para>Display Name = Any</para>
		/// <para>Value = 1</para>
		/// </summary>
		Any = 1,
		/// <summary>
		/// <para>Display Name = Email</para>
		/// <para>Value = 2</para>
		/// </summary>
		Email = 2,
		/// <summary>
		/// <para>Display Name = Fax</para>
		/// <para>Value = 4</para>
		/// </summary>
		Fax = 4,
		/// <summary>
		/// <para>Display Name = Mail</para>
		/// <para>Value = 5</para>
		/// </summary>
		Mail = 5,
		/// <summary>
		/// <para>Display Name = Phone</para>
		/// <para>Value = 3</para>
		/// </summary>
		Phone = 3
	}
	public enum ShippingMethodCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para>Display Name = Active</para>
		/// <para>Value = 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para>Display Name = Inactive</para>
		/// <para>Value = 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para>Display Name = Active</para>
		/// <para>Value = 1</para>
		/// <para>StateCode.Active</para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para>Display Name = Inactive</para>
		/// <para>Value = 2</para>
		/// <para>StateCode.Inactive</para>
		/// </summary>
		Inactive = 2
	}
	public enum TerritoryCode
	{
		/// <summary>
		/// <para>Display Name = Default Value</para>
		/// <para>Value = 1</para>
		/// </summary>
		Default_Value = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Account : EntityBase
	{
		public struct Fields
		{
			public const string AccountCategoryCode = "accountcategorycode";
			public const string AccountClassificationCode = "accountclassificationcode";
			public const string AccountId = "accountid";
			public const string AccountNumber = "accountnumber";
			public const string AccountRatingCode = "accountratingcode";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_FreightTermsCode = "address1_freighttermscode";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_PrimaryContactName = "address1_primarycontactname";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_FreightTermsCode = "address2_freighttermscode";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_PrimaryContactName = "address2_primarycontactname";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string Adx_CreatedByIPAddress = "adx_createdbyipaddress";
			public const string Adx_CreatedByUsername = "adx_createdbyusername";
			public const string Adx_ModifiedByIPAddress = "adx_modifiedbyipaddress";
			public const string Adx_ModifiedByUsername = "adx_modifiedbyusername";
			public const string Aging30 = "aging30";
			public const string Aging30_Base = "aging30_base";
			public const string Aging60 = "aging60";
			public const string Aging60_Base = "aging60_base";
			public const string Aging90 = "aging90";
			public const string Aging90_Base = "aging90_base";
			public const string BusinessTypeCode = "businesstypecode";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreditLimit = "creditlimit";
			public const string CreditLimit_Base = "creditlimit_base";
			public const string CreditOnHold = "creditonhold";
			public const string CustomerSizeCode = "customersizecode";
			public const string CustomerTypeCode = "customertypecode";
			public const string Description = "description";
			public const string devkit_CategoryCode = "devkit_categorycode";
			public const string devkit_CurrencySymbolCalculated = "devkit_currencysymbolcalculated";
			public const string devkit_IsParentCurrencySymbolCalculated = "devkit_isparentcurrencysymbolcalculated";
			public const string devkit_ParentCurrencySymbolCalculated = "devkit_parentcurrencysymbolcalculated";
			public const string DoNotBulkEMail = "donotbulkemail";
			public const string DoNotBulkPostalMail = "donotbulkpostalmail";
			public const string DoNotEMail = "donotemail";
			public const string DoNotFax = "donotfax";
			public const string DoNotPhone = "donotphone";
			public const string DoNotPostalMail = "donotpostalmail";
			public const string DoNotSendMM = "donotsendmm";
			public const string EMailAddress1 = "emailaddress1";
			public const string EMailAddress2 = "emailaddress2";
			public const string EMailAddress3 = "emailaddress3";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string Fax = "fax";
			public const string FollowEmail = "followemail";
			public const string FtpSiteURL = "ftpsiteurl";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IndustryCode = "industrycode";
			public const string IsPrivate = "isprivate";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastUsedInCampaign = "lastusedincampaign";
			public const string MarketCap = "marketcap";
			public const string MarketCap_Base = "marketcap_base";
			public const string MarketingOnly = "marketingonly";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msa_managingpartnerid = "msa_managingpartnerid";
			public const string msft_DataState = "msft_datastate";
			public const string Name = "name";
			public const string NumberOfEmployees = "numberofemployees";
			public const string OnHoldTime = "onholdtime";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwnershipCode = "ownershipcode";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentAccountId = "parentaccountid";
			public const string ParticipatesInWorkflow = "participatesinworkflow";
			public const string PaymentTermsCode = "paymenttermscode";
			public const string PreferredAppointmentDayCode = "preferredappointmentdaycode";
			public const string PreferredAppointmentTimeCode = "preferredappointmenttimecode";
			public const string PreferredContactMethodCode = "preferredcontactmethodcode";
			public const string PreferredSystemUserId = "preferredsystemuserid";
			public const string PrimaryContactId = "primarycontactid";
			public const string PrimarySatoriId = "primarysatoriid";
			public const string PrimaryTwitterId = "primarytwitterid";
			public const string ProcessId = "processid";
			public const string Revenue = "revenue";
			public const string Revenue_Base = "revenue_base";
			public const string SharesOutstanding = "sharesoutstanding";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string SIC = "sic";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StockExchange = "stockexchange";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TerritoryCode = "territorycode";
			public const string TickerSymbol = "tickersymbol";
			public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WebSiteURL = "websiteurl";
			public const string YomiName = "yominame";
		}
		public const string EntityLogicalName = "account";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1;
		public const string EntityCollectionSchemaName = "Accounts";
		public const string EntityDisplayCollectionName = "Accounts";
		public const string DisplayName = "Account";
		public const string EntitySetName = "accounts";
		public const string EntityLogicalCollectionName = "accounts";
		public const string EntityPrimaryIdAttribute = "accountid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Account";
		[DebuggerNonUserCode()]
		public Account()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Account(Guid AccountId)
		{
			Entity = new Entity(EntityLogicalName, AccountId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Account(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Account"/> with <paramref name="targetEntity"/>.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Account(Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Account(targetEntity) with targetEntity = null");
			Entity = targetEntity;
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Account"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Account(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Account(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = preEntity;
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Account"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Account(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Account(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = preEntity;
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Account(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para>Display Name: Category</para>
		/// <para>Description: Select a category to indicate whether the customer account is standard or preferred.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.AccountCategoryCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountCategoryCode? AccountCategoryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountCategoryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountCategoryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccountCategoryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccountCategoryCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Classification</para>
		/// <para>Description: Select a classification code to indicate the potential value of the customer account based on the projected return on investment, cooperation level, sales cycle length or other criteria.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode? AccountClassificationCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountClassificationCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccountClassificationCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccountClassificationCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Account</para>
		/// <para>Description: Unique identifier of the account.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AccountId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AccountId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para>Display Name: Account Number</para>
		/// <para>Description: Type an ID number or code for the account to quickly search and identify the account in system views.</para>
		/// <para>Single Line of Text - MaxLength: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AccountNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.AccountNumber); }
			set { Entity.Attributes[Fields.AccountNumber] = value; }
		}
		/// <summary>
		/// <para>Display Name: Account Rating</para>
		/// <para>Description: Select a rating to indicate the value of the customer account.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode? AccountRatingCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountRatingCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccountRatingCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccountRatingCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Address 1: ID</para>
		/// <para>Description: Unique identifier for address 1.</para>
		/// <para>Uniqueidentifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Address Type</para>
		/// <para>Description: Select the primary address type.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_AddressTypeCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Address 1: City</para>
		/// <para>Description: Type the city for the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1</para>
		/// <para>Description: Shows the complete primary address.</para>
		/// <para>ReadOnly - Multiple Lines of Text - MaxLength: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Country/Region</para>
		/// <para>Description: Type the country or region for the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: County</para>
		/// <para>Description: Type the county for the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Fax</para>
		/// <para>Description: Type the fax number associated with the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Freight Terms</para>
		/// <para>Description: Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_FreightTermsCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_FreightTermsCode? Address1_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Address 1: Latitude</para>
		/// <para>Description: Type the latitude value for the primary address for use in mapping and other applications.</para>
		/// <para>Decimal Number - MinValue: -90 - MaxValue: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Street 1</para>
		/// <para>Description: Type the first line of the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Street 2</para>
		/// <para>Description: Type the second line of the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Street 3</para>
		/// <para>Description: Type the third line of the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Longitude</para>
		/// <para>Description: Type the longitude value for the primary address for use in mapping and other applications.</para>
		/// <para>Decimal Number - MinValue: -180 - MaxValue: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Name</para>
		/// <para>Description: Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
		/// <para>Single Line of Text - MaxLength: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: ZIP/Postal Code</para>
		/// <para>Description: Type the ZIP Code or postal code for the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Post Office Box</para>
		/// <para>Description: Type the post office box number of the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Primary Contact Name</para>
		/// <para>Description: Type the name of the main contact at the account&apos;s primary address.</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address1_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Shipping Method</para>
		/// <para>Description: Select a shipping method for deliveries sent to this address.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_ShippingMethodCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Address 1: State/Province</para>
		/// <para>Description: Type the state or province of the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address Phone</para>
		/// <para>Description: Type the main phone number associated with the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Telephone 2</para>
		/// <para>Description: Type a second phone number associated with the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: Telephone 3</para>
		/// <para>Description: Type a third phone number associated with the primary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: UPS Zone</para>
		/// <para>Description: Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para>Single Line of Text - MaxLength: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 1: UTC Offset</para>
		/// <para>Description: Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para>Whole Number - MinValue: -1,500 - MaxValue: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: ID</para>
		/// <para>Description: Unique identifier for address 2.</para>
		/// <para>Uniqueidentifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Address Type</para>
		/// <para>Description: Select the secondary address type.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Address 2: City</para>
		/// <para>Description: Type the city for the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2</para>
		/// <para>Description: Shows the complete secondary address.</para>
		/// <para>ReadOnly - Multiple Lines of Text - MaxLength: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Country/Region</para>
		/// <para>Description: Type the country or region for the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: County</para>
		/// <para>Description: Type the county for the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Fax</para>
		/// <para>Description: Type the fax number associated with the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Freight Terms</para>
		/// <para>Description: Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode? Address2_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Address 2: Latitude</para>
		/// <para>Description: Type the latitude value for the secondary address for use in mapping and other applications.</para>
		/// <para>Decimal Number - MinValue: -90 - MaxValue: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Street 1</para>
		/// <para>Description: Type the first line of the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Street 2</para>
		/// <para>Description: Type the second line of the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Street 3</para>
		/// <para>Description: Type the third line of the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Longitude</para>
		/// <para>Description: Type the longitude value for the secondary address for use in mapping and other applications.</para>
		/// <para>Decimal Number - MinValue: -180 - MaxValue: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Name</para>
		/// <para>Description: Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
		/// <para>Single Line of Text - MaxLength: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: ZIP/Postal Code</para>
		/// <para>Description: Type the ZIP Code or postal code for the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Post Office Box</para>
		/// <para>Description: Type the post office box number of the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Primary Contact Name</para>
		/// <para>Description: Type the name of the main contact at the account&apos;s secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address2_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Shipping Method</para>
		/// <para>Description: Select a shipping method for deliveries sent to this address.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Address 2: State/Province</para>
		/// <para>Description: Type the state or province of the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Telephone 1</para>
		/// <para>Description: Type the main phone number associated with the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Telephone 2</para>
		/// <para>Description: Type a second phone number associated with the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: Telephone 3</para>
		/// <para>Description: Type a third phone number associated with the secondary address.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: UPS Zone</para>
		/// <para>Description: Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para>Single Line of Text - MaxLength: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}
		/// <summary>
		/// <para>Display Name: Address 2: UTC Offset</para>
		/// <para>Description: Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para>Whole Number - MinValue: -1,500 - MaxValue: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}
		/// <summary>
		/// <para>Display Name: Created By (IP Address)</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByIPAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByIPAddress); }
			set { Entity.Attributes[Fields.Adx_CreatedByIPAddress] = value; }
		}
		/// <summary>
		/// <para>Display Name: Created By (User Name)</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByUsername); }
			set { Entity.Attributes[Fields.Adx_CreatedByUsername] = value; }
		}
		/// <summary>
		/// <para>Display Name: Modified By (IP Address)</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ModifiedByIPAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ModifiedByIPAddress); }
			set { Entity.Attributes[Fields.Adx_ModifiedByIPAddress] = value; }
		}
		/// <summary>
		/// <para>Display Name: Modified By (User Name)</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ModifiedByUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ModifiedByUsername); }
			set { Entity.Attributes[Fields.Adx_ModifiedByUsername] = value; }
		}
		/// <summary>
		/// <para>Display Name: Aging 30</para>
		/// <para>Description: For system use only.</para>
		/// <para>ReadOnly - Currency - MinValue:  - MaxValue: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging30
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging30);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Aging 30 (Base)</para>
		/// <para>Description: The base currency equivalent of the aging 30 field.</para>
		/// <para>ReadOnly - Currency - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging30_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging30_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Aging 60</para>
		/// <para>Description: For system use only.</para>
		/// <para>ReadOnly - Currency - MinValue:  - MaxValue: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging60
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging60);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Aging 60 (Base)</para>
		/// <para>Description: The base currency equivalent of the aging 60 field.</para>
		/// <para>ReadOnly - Currency - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging60_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging60_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Aging 90</para>
		/// <para>Description: For system use only.</para>
		/// <para>ReadOnly - Currency - MinValue:  - MaxValue: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging90
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging90);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Aging 90 (Base)</para>
		/// <para>Description: The base currency equivalent of the aging 90 field.</para>
		/// <para>ReadOnly - Currency - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging90_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging90_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Business Type</para>
		/// <para>Description: Select the legal designation or other business type of the account for contracts or reporting purposes.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode? BusinessTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BusinessTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BusinessTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BusinessTypeCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Created By</para>
		/// <para>Description: Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para>Display Name: Created By (External Party)</para>
		/// <para>Description: Shows the external party who created the record.</para>
		/// <para>ReadOnly - Lookup to: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
		}
		/// <summary>
		/// <para>Display Name: Created On</para>
		/// <para>Description: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - Date and Time - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para>Display Name: Created By (Delegate)</para>
		/// <para>Description: Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para>Display Name: Credit Limit</para>
		/// <para>Description: Type the credit limit of the account. This is a useful reference when you address invoice and accounting issues with the customer.</para>
		/// <para>Currency - MinValue:  - MaxValue: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CreditLimit
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreditLimit] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CreditLimit] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Credit Limit (Base)</para>
		/// <para>Description: Shows the credit limit converted to the system&apos;s default base currency for reporting purposes.</para>
		/// <para>ReadOnly - Currency - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CreditLimit_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Credit Hold</para>
		/// <para>Description: Select whether the credit for the account is on hold. This is a useful reference while addressing the invoice and accounting issues with the customer.</para>
		/// <para>Two Option - [Yes]=true - [No]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CreditOnHold
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CreditOnHold); }
			set { Entity.Attributes[Fields.CreditOnHold] = value; }
		}
		/// <summary>
		/// <para>Display Name: Customer Size</para>
		/// <para>Description: Select the size category or range of the account for segmentation and reporting purposes.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode? CustomerSizeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerSizeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerSizeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerSizeCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Relationship Type</para>
		/// <para>Description: Select the category that best describes the relationship between the account and your organization.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerTypeCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerTypeCode? CustomerTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerTypeCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Description</para>
		/// <para>Description: Type additional information to describe the account, such as an excerpt from the company&apos;s website.</para>
		/// <para>Multiple Lines of Text - MaxLength: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para>Display Name: Category</para>
		/// <para>MultiSelect OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.devkit_CategoryCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.AccountOptionSets.devkit_CategoryCode> devkit_CategoryCode
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.AccountOptionSets.devkit_CategoryCode>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.devkit_CategoryCode);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.AccountOptionSets.devkit_CategoryCode)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.devkit_CategoryCode] = null;
				}
				else
				{
					Entity.Attributes[Fields.devkit_CategoryCode] = data;
				}
			}
		}
		/// <summary>
		/// <para>Display Name: Currency Symbol</para>
		/// <para>Single Line of Text - MaxLength: 4,000</para>
		/// <para>Calculated Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_CurrencySymbolCalculated
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_CurrencySymbolCalculated); }
			set { Entity.Attributes[Fields.devkit_CurrencySymbolCalculated] = value; }
		}
		/// <summary>
		/// <para>Display Name: Is Parent Currency Symbol</para>
		/// <para>ReadOnly - Two Option - [Yes]=true - [No]=false</para>
		/// <para>Calculated Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? devkit_IsParentCurrencySymbolCalculated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.devkit_IsParentCurrencySymbolCalculated); }
		}
		/// <summary>
		/// <para>Display Name: Parent Currency Symbol</para>
		/// <para>Single Line of Text - MaxLength: 4,000</para>
		/// <para>Calculated Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_ParentCurrencySymbolCalculated
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_ParentCurrencySymbolCalculated); }
			set { Entity.Attributes[Fields.devkit_ParentCurrencySymbolCalculated] = value; }
		}
		/// <summary>
		/// <para>Display Name: Do not allow Bulk Emails</para>
		/// <para>Description: Select whether the account allows bulk email sent through campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but is excluded from email.</para>
		/// <para>Two Option - [Do Not Allow]=true - [Allow]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkEMail); }
			set { Entity.Attributes[Fields.DoNotBulkEMail] = value; }
		}
		/// <summary>
		/// <para>Display Name: Do not allow Bulk Mails</para>
		/// <para>Description: Select whether the account allows bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but will be excluded from the postal mail.</para>
		/// <para>Two Option - [Yes]=true - [No]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkPostalMail); }
			set { Entity.Attributes[Fields.DoNotBulkPostalMail] = value; }
		}
		/// <summary>
		/// <para>Display Name: Do not allow Emails</para>
		/// <para>Description: Select whether the account allows direct email sent from Microsoft Dynamics 365.</para>
		/// <para>Two Option - [Do Not Allow]=true - [Allow]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEMail); }
			set { Entity.Attributes[Fields.DoNotEMail] = value; }
		}
		/// <summary>
		/// <para>Display Name: Do not allow Faxes</para>
		/// <para>Description: Select whether the account allows faxes. If Do Not Allow is selected, the account will be excluded from fax activities distributed in marketing campaigns.</para>
		/// <para>Two Option - [Do Not Allow]=true - [Allow]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotFax
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
			set { Entity.Attributes[Fields.DoNotFax] = value; }
		}
		/// <summary>
		/// <para>Display Name: Do not allow Phone Calls</para>
		/// <para>Description: Select whether the account allows phone calls. If Do Not Allow is selected, the account will be excluded from phone call activities distributed in marketing campaigns.</para>
		/// <para>Two Option - [Do Not Allow]=true - [Allow]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPhone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
			set { Entity.Attributes[Fields.DoNotPhone] = value; }
		}
		/// <summary>
		/// <para>Display Name: Do not allow Mails</para>
		/// <para>Description: Select whether the account allows direct mail. If Do Not Allow is selected, the account will be excluded from letter activities distributed in marketing campaigns.</para>
		/// <para>Two Option - [Do Not Allow]=true - [Allow]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
			set { Entity.Attributes[Fields.DoNotPostalMail] = value; }
		}
		/// <summary>
		/// <para>Display Name: Send Marketing Materials</para>
		/// <para>Description: Select whether the account accepts marketing materials, such as brochures or catalogs.</para>
		/// <para>Two Option - [Do Not Send]=true - [Send]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotSendMM
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendMM); }
			set { Entity.Attributes[Fields.DoNotSendMM] = value; }
		}
		/// <summary>
		/// <para>Display Name: Email</para>
		/// <para>Description: Type the primary email address for the account.</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress1
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress1); }
			set { Entity.Attributes[Fields.EMailAddress1] = value; }
		}
		/// <summary>
		/// <para>Display Name: Email Address 2</para>
		/// <para>Description: Type the secondary email address for the account.</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress2); }
			set { Entity.Attributes[Fields.EMailAddress2] = value; }
		}
		/// <summary>
		/// <para>Display Name: Email Address 3</para>
		/// <para>Description: Type an alternate email address for the account.</para>
		/// <para>Single Line of Text - MaxLength: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress3
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress3); }
			set { Entity.Attributes[Fields.EMailAddress3] = value; }
		}
		/// <summary>
		/// <para>Display Name: Entity Image Id</para>
		/// <para>Description: For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para>Display Name: Exchange Rate</para>
		/// <para>Description: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Floating Point Number - MinValue:  - MaxValue: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para>Display Name: Fax</para>
		/// <para>Description: Type the fax number for the account.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}
		/// <summary>
		/// <para>Display Name: Follow Email Activity</para>
		/// <para>Description: Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the account.</para>
		/// <para>Two Option - [Allow]=true - [Do Not Allow]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmail); }
			set { Entity.Attributes[Fields.FollowEmail] = value; }
		}
		/// <summary>
		/// <para>Display Name: FTP Site</para>
		/// <para>Description: Type the URL for the account&apos;s FTP site to enable users to access data and share documents.</para>
		/// <para>Single Line of Text - MaxLength: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FtpSiteURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.FtpSiteURL); }
			set { Entity.Attributes[Fields.FtpSiteURL] = value; }
		}
		/// <summary>
		/// <para>Display Name: Import Sequence Number</para>
		/// <para>Description: Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Whole Number - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para>Display Name: Industry</para>
		/// <para>Description: Select the account&apos;s primary industry for use in marketing segmentation and demographic analysis.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.IndustryCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.IndustryCode? IndustryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IndustryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.IndustryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IndustryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IndustryCode] = null;
			}
		}
		/// <summary>
		/// <para>ReadOnly - Two Option - [Yes]=true - [No]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}
		/// <summary>
		/// <para>Display Name: Last On Hold Time</para>
		/// <para>Description: Contains the date and time stamp of the last on hold time.</para>
		/// <para>Date and Time - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para>Display Name: Last Date Included in Campaign</para>
		/// <para>Description: Shows the date when the account was last included in a marketing campaign or quick campaign.</para>
		/// <para>Date and Time - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastUsedInCampaignUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedInCampaign); }
			set { Entity.Attributes[Fields.LastUsedInCampaign] = value; }
		}
		/// <summary>
		/// <para>Display Name: Market Capitalization</para>
		/// <para>Description: Type the market capitalization of the account to identify the company&apos;s equity, used as an indicator in financial performance analysis.</para>
		/// <para>Currency - MinValue:  - MaxValue: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MarketCap
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.MarketCap);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MarketCap] = new Money(value.Value);
				else
					Entity.Attributes[Fields.MarketCap] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Market Capitalization (Base)</para>
		/// <para>Description: Shows the market capitalization converted to the system&apos;s default base currency.</para>
		/// <para>ReadOnly - Currency - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MarketCap_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.MarketCap_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Marketing Only</para>
		/// <para>Description: Whether is only for marketing</para>
		/// <para>Two Option - [Yes]=true - [No]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? MarketingOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.MarketingOnly); }
			set { Entity.Attributes[Fields.MarketingOnly] = value; }
		}
		/// <summary>
		/// <para>Display Name: Master ID</para>
		/// <para>Description: Shows the master account that the account was merged with.</para>
		/// <para>ReadOnly - Lookup to: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
		}
		/// <summary>
		/// <para>Display Name: Merged</para>
		/// <para>Description: Shows whether the account has been merged with another account.</para>
		/// <para>ReadOnly - Two Option - [Yes]=true - [No]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Merged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
		}
		/// <summary>
		/// <para>Display Name: Modified By</para>
		/// <para>Description: Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para>Display Name: Modified By (External Party)</para>
		/// <para>Description: Shows the external party who modified the record.</para>
		/// <para>ReadOnly - Lookup to: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
		}
		/// <summary>
		/// <para>Display Name: Modified On</para>
		/// <para>Description: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - Date and Time - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para>Display Name: Modified By (Delegate)</para>
		/// <para>Description: Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para>Display Name: Managing Partner</para>
		/// <para>Description: Unique identifier for Account associated with Account.</para>
		/// <para>Lookup to: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msa_managingpartnerid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msa_managingpartnerid); }
			set { Entity.Attributes[Fields.msa_managingpartnerid] = value; }
		}
		/// <summary>
		/// <para>Display Name: msft_DataState</para>
		/// <para>ReadOnly - OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.msft_DataState"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.msft_DataState? msft_DataState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msft_DataState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.msft_DataState)value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Account Name</para>
		/// <para>Description: Type the company or business name.</para>
		/// <para>Primary Name - Required - Single Line of Text - MaxLength: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para>Display Name: Number of Employees</para>
		/// <para>Description: Type the number of employees that work at the account for use in marketing segmentation and demographic analysis.</para>
		/// <para>Whole Number - MinValue:  - MaxValue: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfEmployees
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfEmployees); }
			set { Entity.Attributes[Fields.NumberOfEmployees] = value; }
		}
		/// <summary>
		/// <para>Display Name: On Hold Time (Minutes)</para>
		/// <para>Description: Shows how long, in minutes, that the record was on hold.</para>
		/// <para>ReadOnly - Whole Number - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para>Display Name: Record Created On</para>
		/// <para>Description: Date and time that the record was migrated.</para>
		/// <para>Date and Time - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para>Display Name: Owner</para>
		/// <para>Description: Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>Lookup to: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Ownership</para>
		/// <para>Description: Select the account&apos;s ownership structure, such as public or private.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.OwnershipCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.OwnershipCode? OwnershipCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OwnershipCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.OwnershipCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OwnershipCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OwnershipCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Owning Business Unit</para>
		/// <para>Description: Shows the business unit that the record owner belongs to.</para>
		/// <para>ReadOnly - Lookup to: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para>Display Name: Owning Team</para>
		/// <para>Description: Unique identifier of the team who owns the account.</para>
		/// <para>ReadOnly - Lookup to: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para>Display Name: Owning User</para>
		/// <para>Description: Unique identifier of the user who owns the account.</para>
		/// <para>ReadOnly - Lookup to: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para>Display Name: Parent Account</para>
		/// <para>Description: Choose the parent account associated with this account to show parent and child businesses in reporting and analytics.</para>
		/// <para>Lookup to: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentAccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAccountId); }
			set { Entity.Attributes[Fields.ParentAccountId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Participates in Workflow</para>
		/// <para>Description: For system use only. Legacy Microsoft Dynamics CRM 3.0 workflow data.</para>
		/// <para>Two Option - [Yes]=true - [No]=false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ParticipatesInWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
			set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
		}
		/// <summary>
		/// <para>Display Name: Payment Terms</para>
		/// <para>Description: Select the payment terms to indicate when the customer needs to pay the total amount.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PaymentTermsCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.PaymentTermsCode? PaymentTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.PaymentTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PaymentTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PaymentTermsCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Preferred Day</para>
		/// <para>Description: Select the preferred day of the week for service appointments.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentDayCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentDayCode? PreferredAppointmentDayCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentDayCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentDayCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAppointmentDayCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAppointmentDayCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Preferred Time</para>
		/// <para>Description: Select the preferred time of day for service appointments.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentTimeCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentTimeCode? PreferredAppointmentTimeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentTimeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentTimeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAppointmentTimeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAppointmentTimeCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Preferred Method of Contact</para>
		/// <para>Description: Select the preferred method of contact.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode? PreferredContactMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredContactMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredContactMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredContactMethodCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Preferred User</para>
		/// <para>Description: Choose the preferred service representative for reference when you schedule service activities for the account.</para>
		/// <para>Lookup to: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreferredSystemUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreferredSystemUserId); }
			set { Entity.Attributes[Fields.PreferredSystemUserId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Primary Contact</para>
		/// <para>Description: Choose the primary contact for the account to provide quick access to contact details.</para>
		/// <para>Lookup to: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PrimaryContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PrimaryContactId); }
			set { Entity.Attributes[Fields.PrimaryContactId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Primary Satori ID</para>
		/// <para>Description: Primary Satori ID for Account</para>
		/// <para>Single Line of Text - MaxLength: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimarySatoriId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimarySatoriId); }
			set { Entity.Attributes[Fields.PrimarySatoriId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Primary Twitter ID</para>
		/// <para>Description: Primary Twitter ID for Account</para>
		/// <para>Single Line of Text - MaxLength: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryTwitterId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryTwitterId); }
			set { Entity.Attributes[Fields.PrimaryTwitterId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Process</para>
		/// <para>Description: Shows the ID of the process.</para>
		/// <para>Uniqueidentifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Annual Revenue</para>
		/// <para>Description: Type the annual revenue for the account, used as an indicator in financial performance analysis.</para>
		/// <para>Currency - MinValue:  - MaxValue: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Revenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Revenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Revenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Revenue] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Annual Revenue (Base)</para>
		/// <para>Description: Shows the annual revenue converted to the system&apos;s default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
		/// <para>ReadOnly - Currency - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Revenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Revenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>Display Name: Shares Outstanding</para>
		/// <para>Description: Type the number of shares available to the public for the account. This number is used as an indicator in financial performance analysis.</para>
		/// <para>Whole Number - MinValue:  - MaxValue: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SharesOutstanding
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SharesOutstanding); }
			set { Entity.Attributes[Fields.SharesOutstanding] = value; }
		}
		/// <summary>
		/// <para>Display Name: Shipping Method</para>
		/// <para>Description: Select a shipping method for deliveries sent to the account&apos;s address to designate the preferred carrier or other delivery option.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: SIC Code</para>
		/// <para>Description: Type the Standard Industrial Classification (SIC) code that indicates the account&apos;s primary industry of business, for use in marketing segmentation and demographic analysis.</para>
		/// <para>Single Line of Text - MaxLength: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SIC
		{
			get { return Entity.GetAttributeValue<string>(Fields.SIC); }
			set { Entity.Attributes[Fields.SIC] = value; }
		}
		/// <summary>
		/// <para>Display Name: SLA</para>
		/// <para>Description: Choose the service level agreement (SLA) that you want to apply to the Account record.</para>
		/// <para>Lookup to: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Last SLA applied</para>
		/// <para>Description: Last SLA that was applied to this case. This field is for internal use only.</para>
		/// <para>ReadOnly - Lookup to: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para>Display Name: (Deprecated) Process Stage</para>
		/// <para>Description: Shows the ID of the stage.</para>
		/// <para>Uniqueidentifier</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para>Display Name: Status</para>
		/// <para>Description: Shows whether the account is active or inactive. Inactive accounts are read-only and can&apos;t be edited unless they are reactivated.</para>
		/// <para>Status <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Status Reason</para>
		/// <para>Description: Select the account&apos;s status.</para>
		/// <para>Status Reason <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.StatusCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Stock Exchange</para>
		/// <para>Description: Type the stock exchange at which the account is listed to track their stock and financial performance of the company.</para>
		/// <para>Single Line of Text - MaxLength: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StockExchange
		{
			get { return Entity.GetAttributeValue<string>(Fields.StockExchange); }
			set { Entity.Attributes[Fields.StockExchange] = value; }
		}
		/// <summary>
		/// <para>Display Name: Main Phone</para>
		/// <para>Description: Type the main phone number for this account.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}
		/// <summary>
		/// <para>Display Name: Other Phone</para>
		/// <para>Description: Type a second phone number for this account.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}
		/// <summary>
		/// <para>Display Name: Telephone 3</para>
		/// <para>Description: Type a third phone number for this account.</para>
		/// <para>Single Line of Text - MaxLength: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}
		/// <summary>
		/// <para>Display Name: Territory Code</para>
		/// <para>Description: Select a region or territory for the account for use in segmentation and analysis.</para>
		/// <para>OptionSet <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode? TerritoryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TerritoryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TerritoryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TerritoryCode] = null;
			}
		}
		/// <summary>
		/// <para>Display Name: Ticker Symbol</para>
		/// <para>Description: Type the stock exchange symbol for the account to track financial performance of the company. You can click the code entered in this field to access the latest trading information from MSN Money.</para>
		/// <para>Single Line of Text - MaxLength: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TickerSymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.TickerSymbol); }
			set { Entity.Attributes[Fields.TickerSymbol] = value; }
		}
		/// <summary>
		/// <para>Display Name: Time Spent by me</para>
		/// <para>Description: Total time spent for emails (read and write) and meetings by me in relation to account record.</para>
		/// <para>ReadOnly - Single Line of Text - MaxLength: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSpentByMeOnEmailAndMeetings
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
		}
		/// <summary>
		/// <para>Display Name: Time Zone Rule Version Number</para>
		/// <para>Description: For internal use only.</para>
		/// <para>Whole Number - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para>Display Name: Currency</para>
		/// <para>Description: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Lookup to: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para>Display Name: (Deprecated) Traversed Path</para>
		/// <para>Description: For internal use only.</para>
		/// <para>Single Line of Text - MaxLength: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para>Display Name: UTC Conversion Time Zone Code</para>
		/// <para>Description: Time zone code that was in use when the record was created.</para>
		/// <para>Whole Number - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para>Display Name: Version Number</para>
		/// <para>Description: Version number of the account.</para>
		/// <para>ReadOnly - BigInt</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>Display Name: Website</para>
		/// <para>Description: Type the account&apos;s website URL to get quick details about the company profile.</para>
		/// <para>Single Line of Text - MaxLength: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebSiteURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebSiteURL); }
			set { Entity.Attributes[Fields.WebSiteURL] = value; }
		}
		/// <summary>
		/// <para>Display Name: Yomi Account Name</para>
		/// <para>Description: Type the phonetic spelling of the company name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
		/// <para>Single Line of Text - MaxLength: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiName); }
			set { Entity.Attributes[Fields.YomiName] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}